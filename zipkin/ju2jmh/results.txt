=== Benchmark: zipkin2.AnnotationTest._Benchmark.benchmark_messageWhenMissingValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.AnnotationTest._Benchmark.benchmark_messageWhenMissingValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121655.478 ops/s
# Warmup Iteration   2: 132653.408 ops/s
# Warmup Iteration   3: 188964.649 ops/s
# Warmup Iteration   4: 252416.387 ops/s
# Warmup Iteration   5: 253383.114 ops/s
# Warmup Iteration   6: 254515.891 ops/s
# Warmup Iteration   7: 254181.463 ops/s
# Warmup Iteration   8: 254864.714 ops/s
# Warmup Iteration   9: 253015.966 ops/s
# Warmup Iteration  10: 253468.571 ops/s
# Warmup Iteration  11: 167478.769 ops/s
# Warmup Iteration  12: 254372.816 ops/s
# Warmup Iteration  13: 253423.822 ops/s
# Warmup Iteration  14: 255717.598 ops/s
# Warmup Iteration  15: 255505.529 ops/s
# Warmup Iteration  16: 255854.543 ops/s
# Warmup Iteration  17: 260233.296 ops/s
# Warmup Iteration  18: 260381.383 ops/s
# Warmup Iteration  19: 259429.924 ops/s
# Warmup Iteration  20: 258720.988 ops/s
# Warmup Iteration  21: 260648.989 ops/s
# Warmup Iteration  22: 260213.875 ops/s
# Warmup Iteration  23: 260896.972 ops/s
# Warmup Iteration  24: 263458.456 ops/s
# Warmup Iteration  25: 260267.068 ops/s
# Warmup Iteration  26: 261007.798 ops/s
# Warmup Iteration  27: 259301.973 ops/s
# Warmup Iteration  28: 258642.306 ops/s
# Warmup Iteration  29: 260003.733 ops/s
# Warmup Iteration  30: 259846.164 ops/s
Iteration   1: 258790.615 ops/s
Iteration   2: 260540.604 ops/s
Iteration   3: 259713.495 ops/s
Iteration   4: 259798.737 ops/s
Iteration   5: 259860.372 ops/s
Iteration   6: 257824.039 ops/s
Iteration   7: 260421.496 ops/s
Iteration   8: 261462.307 ops/s
Iteration   9: 259525.785 ops/s
Iteration  10: 260695.610 ops/s
Iteration  11: 258483.158 ops/s
Iteration  12: 259928.344 ops/s
Iteration  13: 259272.302 ops/s
Iteration  14: 259882.226 ops/s
Iteration  15: 259429.669 ops/s
Iteration  16: 259600.849 ops/s
Iteration  17: 260752.055 ops/s
Iteration  18: 260420.487 ops/s
Iteration  19: 259534.953 ops/s
Iteration  20: 259511.778 ops/s
Iteration  21: 259709.677 ops/s
Iteration  22: 259744.505 ops/s
Iteration  23: 260670.798 ops/s
Iteration  24: 261453.961 ops/s
Iteration  25: 259774.118 ops/s
Iteration  26: 258541.673 ops/s
Iteration  27: 257634.827 ops/s
Iteration  28: 257296.791 ops/s
Iteration  29: 258862.832 ops/s
Iteration  30: 261680.197 ops/s


Result "zipkin2.AnnotationTest._Benchmark.benchmark_messageWhenMissingValue":
  259693.942 ±(99.9%) 715.786 ops/s [Average]
  (min, avg, max) = (257296.791, 259693.942, 261680.197), stdev = 1071.355
  CI (99.9%): [258978.156, 260409.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
AnnotationTest._Benchmark.benchmark_messageWhenMissingValue  thrpt   30  259693.942 ± 715.786  ops/s
----------------------------------------
=== Benchmark: zipkin2.AnnotationTest._Benchmark.benchmark_toString_isNice$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.AnnotationTest._Benchmark.benchmark_toString_isNice

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343854.367 ops/s
# Warmup Iteration   2: 385724.127 ops/s
# Warmup Iteration   3: 784544.870 ops/s
# Warmup Iteration   4: 782932.855 ops/s
# Warmup Iteration   5: 788576.860 ops/s
# Warmup Iteration   6: 791430.989 ops/s
# Warmup Iteration   7: 792942.884 ops/s
# Warmup Iteration   8: 612662.712 ops/s
# Warmup Iteration   9: 718882.291 ops/s
# Warmup Iteration  10: 788843.488 ops/s
# Warmup Iteration  11: 789624.657 ops/s
# Warmup Iteration  12: 787189.398 ops/s
# Warmup Iteration  13: 787033.795 ops/s
# Warmup Iteration  14: 787788.077 ops/s
# Warmup Iteration  15: 787947.771 ops/s
# Warmup Iteration  16: 787580.737 ops/s
# Warmup Iteration  17: 784774.483 ops/s
# Warmup Iteration  18: 785437.791 ops/s
# Warmup Iteration  19: 784782.442 ops/s
# Warmup Iteration  20: 784119.821 ops/s
# Warmup Iteration  21: 780566.092 ops/s
# Warmup Iteration  22: 783045.598 ops/s
# Warmup Iteration  23: 786475.459 ops/s
# Warmup Iteration  24: 784939.500 ops/s
# Warmup Iteration  25: 783731.447 ops/s
# Warmup Iteration  26: 785100.304 ops/s
# Warmup Iteration  27: 787506.258 ops/s
# Warmup Iteration  28: 785978.936 ops/s
# Warmup Iteration  29: 782900.551 ops/s
# Warmup Iteration  30: 786444.436 ops/s
Iteration   1: 784948.000 ops/s
Iteration   2: 784026.599 ops/s
Iteration   3: 785392.310 ops/s
Iteration   4: 780019.075 ops/s
Iteration   5: 784541.792 ops/s
Iteration   6: 786695.364 ops/s
Iteration   7: 779280.468 ops/s
Iteration   8: 783884.062 ops/s
Iteration   9: 781685.228 ops/s
Iteration  10: 778965.017 ops/s
Iteration  11: 780947.261 ops/s
Iteration  12: 786634.498 ops/s
Iteration  13: 788271.621 ops/s
Iteration  14: 779882.870 ops/s
Iteration  15: 786256.183 ops/s
Iteration  16: 788822.743 ops/s
Iteration  17: 786884.748 ops/s
Iteration  18: 783579.602 ops/s
Iteration  19: 782479.748 ops/s
Iteration  20: 780253.543 ops/s
Iteration  21: 788361.465 ops/s
Iteration  22: 787228.317 ops/s
Iteration  23: 785443.789 ops/s
Iteration  24: 784074.793 ops/s
Iteration  25: 781120.032 ops/s
Iteration  26: 785906.080 ops/s
Iteration  27: 774318.188 ops/s
Iteration  28: 787027.227 ops/s
Iteration  29: 786648.578 ops/s
Iteration  30: 787402.194 ops/s


Result "zipkin2.AnnotationTest._Benchmark.benchmark_toString_isNice":
  784032.713 ±(99.9%) 2317.117 ops/s [Average]
  (min, avg, max) = (774318.188, 784032.713, 788822.743), stdev = 3468.152
  CI (99.9%): [781715.596, 786349.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
AnnotationTest._Benchmark.benchmark_toString_isNice  thrpt   30  784032.713 ± 2317.117  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_concurrent_executesOrSubmitsOnce$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_concurrent_executesOrSubmitsOnce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50.742 ops/s
# Warmup Iteration   2: 58.731 ops/s
# Warmup Iteration   3: 88.257 ops/s
# Warmup Iteration   4: 92.961 ops/s
# Warmup Iteration   5: 92.418 ops/s
# Warmup Iteration   6: 93.146 ops/s
# Warmup Iteration   7: 96.964 ops/s
# Warmup Iteration   8: 98.643 ops/s
# Warmup Iteration   9: 98.954 ops/s
# Warmup Iteration  10: 98.140 ops/s
# Warmup Iteration  11: 99.019 ops/s
# Warmup Iteration  12: 98.767 ops/s
# Warmup Iteration  13: 100.341 ops/s
# Warmup Iteration  14: 100.467 ops/s
# Warmup Iteration  15: 98.965 ops/s
# Warmup Iteration  16: 99.646 ops/s
# Warmup Iteration  17: 101.682 ops/s
# Warmup Iteration  18: 96.299 ops/s
# Warmup Iteration  19: 100.479 ops/s
# Warmup Iteration  20: 81.416 ops/s
# Warmup Iteration  21: 89.995 ops/s
# Warmup Iteration  22: 90.805 ops/s
# Warmup Iteration  23: 101.601 ops/s
# Warmup Iteration  24: 100.674 ops/s
# Warmup Iteration  25: 101.939 ops/s
# Warmup Iteration  26: 101.877 ops/s
# Warmup Iteration  27: 102.772 ops/s
# Warmup Iteration  28: 100.411 ops/s
# Warmup Iteration  29: 101.485 ops/s
# Warmup Iteration  30: 98.176 ops/s
Iteration   1: 101.593 ops/s
Iteration   2: 102.212 ops/s
Iteration   3: 102.974 ops/s
Iteration   4: 101.835 ops/s
Iteration   5: 102.738 ops/s
Iteration   6: 101.991 ops/s
Iteration   7: 100.500 ops/s
Iteration   8: 103.730 ops/s
Iteration   9: 100.831 ops/s
Iteration  10: 99.207 ops/s
Iteration  11: 98.810 ops/s
Iteration  12: 100.165 ops/s
Iteration  13: 101.626 ops/s
Iteration  14: 102.150 ops/s
Iteration  15: 100.838 ops/s
Iteration  16: 104.337 ops/s
Iteration  17: 103.621 ops/s
Iteration  18: 104.053 ops/s
Iteration  19: 103.303 ops/s
Iteration  20: 98.784 ops/s
Iteration  21: 102.581 ops/s
Iteration  22: 100.534 ops/s
Iteration  23: 101.457 ops/s
Iteration  24: 102.943 ops/s
Iteration  25: 104.619 ops/s
Iteration  26: 104.131 ops/s
Iteration  27: 103.265 ops/s
Iteration  28: 103.226 ops/s
Iteration  29: 101.357 ops/s
Iteration  30: 102.187 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_concurrent_executesOrSubmitsOnce":
  102.053 ±(99.9%) 1.068 ops/s [Average]
  (min, avg, max) = (98.784, 102.053, 104.619), stdev = 1.598
  CI (99.9%): [100.985, 103.121] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt    Score   Error  Units
CallTest._Benchmark.benchmark_concurrent_executesOrSubmitsOnce  thrpt   30  102.053 ± 1.068  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_constantEqualsConstant$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_constantEqualsConstant

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19381.882 ops/s
# Warmup Iteration   2: 51556.146 ops/s
# Warmup Iteration   3: 64555.052 ops/s
# Warmup Iteration   4: 84055.297 ops/s
# Warmup Iteration   5: 115607.019 ops/s
# Warmup Iteration   6: 117865.878 ops/s
# Warmup Iteration   7: 118146.725 ops/s
# Warmup Iteration   8: 116067.336 ops/s
# Warmup Iteration   9: 118644.899 ops/s
# Warmup Iteration  10: 118085.717 ops/s
# Warmup Iteration  11: 115795.098 ops/s
# Warmup Iteration  12: 118594.349 ops/s
# Warmup Iteration  13: 103966.156 ops/s
# Warmup Iteration  14: 87006.510 ops/s
# Warmup Iteration  15: 116291.340 ops/s
# Warmup Iteration  16: 117171.118 ops/s
# Warmup Iteration  17: 117119.402 ops/s
# Warmup Iteration  18: 117418.586 ops/s
# Warmup Iteration  19: 117791.239 ops/s
# Warmup Iteration  20: 115769.693 ops/s
# Warmup Iteration  21: 115675.082 ops/s
# Warmup Iteration  22: 116298.272 ops/s
# Warmup Iteration  23: 116568.231 ops/s
# Warmup Iteration  24: 117592.951 ops/s
# Warmup Iteration  25: 118888.132 ops/s
# Warmup Iteration  26: 118189.312 ops/s
# Warmup Iteration  27: 118677.282 ops/s
# Warmup Iteration  28: 118312.317 ops/s
# Warmup Iteration  29: 118386.336 ops/s
# Warmup Iteration  30: 117246.771 ops/s
Iteration   1: 117653.337 ops/s
Iteration   2: 118343.488 ops/s
Iteration   3: 118285.109 ops/s
Iteration   4: 117441.922 ops/s
Iteration   5: 117126.093 ops/s
Iteration   6: 116386.366 ops/s
Iteration   7: 116441.372 ops/s
Iteration   8: 116855.391 ops/s
Iteration   9: 117076.727 ops/s
Iteration  10: 117249.459 ops/s
Iteration  11: 117635.478 ops/s
Iteration  12: 116720.872 ops/s
Iteration  13: 116913.277 ops/s
Iteration  14: 114541.948 ops/s
Iteration  15: 115604.310 ops/s
Iteration  16: 115609.985 ops/s
Iteration  17: 116052.925 ops/s
Iteration  18: 114957.080 ops/s
Iteration  19: 116533.265 ops/s
Iteration  20: 116278.534 ops/s
Iteration  21: 116751.409 ops/s
Iteration  22: 116757.067 ops/s
Iteration  23: 115096.471 ops/s
Iteration  24: 117103.888 ops/s
Iteration  25: 116920.014 ops/s
Iteration  26: 119238.918 ops/s
Iteration  27: 119162.069 ops/s
Iteration  28: 118539.619 ops/s
Iteration  29: 118669.521 ops/s
Iteration  30: 117714.933 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_constantEqualsConstant":
  116988.695 ±(99.9%) 786.678 ops/s [Average]
  (min, avg, max) = (114541.948, 116988.695, 119238.918), stdev = 1177.462
  CI (99.9%): [116202.017, 117775.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_constantEqualsConstant  thrpt   30  116988.695 ± 786.678  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_execute$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_execute

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18506.643 ops/s
# Warmup Iteration   2: 41165.499 ops/s
# Warmup Iteration   3: 65256.098 ops/s
# Warmup Iteration   4: 76409.386 ops/s
# Warmup Iteration   5: 129880.316 ops/s
# Warmup Iteration   6: 131339.359 ops/s
# Warmup Iteration   7: 133247.576 ops/s
# Warmup Iteration   8: 135487.657 ops/s
# Warmup Iteration   9: 132486.351 ops/s
# Warmup Iteration  10: 132342.921 ops/s
# Warmup Iteration  11: 131520.341 ops/s
# Warmup Iteration  12: 133177.945 ops/s
# Warmup Iteration  13: 82404.742 ops/s
# Warmup Iteration  14: 129159.009 ops/s
# Warmup Iteration  15: 132464.930 ops/s
# Warmup Iteration  16: 130841.268 ops/s
# Warmup Iteration  17: 129423.911 ops/s
# Warmup Iteration  18: 131149.432 ops/s
# Warmup Iteration  19: 129656.274 ops/s
# Warmup Iteration  20: 131352.875 ops/s
# Warmup Iteration  21: 131217.985 ops/s
# Warmup Iteration  22: 130927.283 ops/s
# Warmup Iteration  23: 132106.748 ops/s
# Warmup Iteration  24: 132052.025 ops/s
# Warmup Iteration  25: 131030.146 ops/s
# Warmup Iteration  26: 131245.727 ops/s
# Warmup Iteration  27: 131121.902 ops/s
# Warmup Iteration  28: 132076.238 ops/s
# Warmup Iteration  29: 131771.375 ops/s
# Warmup Iteration  30: 131437.149 ops/s
Iteration   1: 131149.251 ops/s
Iteration   2: 128963.724 ops/s
Iteration   3: 128093.484 ops/s
Iteration   4: 130857.340 ops/s
Iteration   5: 133307.724 ops/s
Iteration   6: 132533.187 ops/s
Iteration   7: 132393.641 ops/s
Iteration   8: 132068.299 ops/s
Iteration   9: 130168.953 ops/s
Iteration  10: 130032.994 ops/s
Iteration  11: 131153.910 ops/s
Iteration  12: 132097.893 ops/s
Iteration  13: 128144.126 ops/s
Iteration  14: 129328.062 ops/s
Iteration  15: 132583.569 ops/s
Iteration  16: 131768.445 ops/s
Iteration  17: 130017.484 ops/s
Iteration  18: 131717.719 ops/s
Iteration  19: 132318.486 ops/s
Iteration  20: 132051.505 ops/s
Iteration  21: 131914.893 ops/s
Iteration  22: 130005.988 ops/s
Iteration  23: 131026.778 ops/s
Iteration  24: 131854.747 ops/s
Iteration  25: 132847.892 ops/s
Iteration  26: 132224.874 ops/s
Iteration  27: 130508.448 ops/s
Iteration  28: 130399.770 ops/s
Iteration  29: 130026.278 ops/s
Iteration  30: 131840.221 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_constant_execute":
  131113.323 ±(99.9%) 911.419 ops/s [Average]
  (min, avg, max) = (128093.484, 131113.323, 133307.724), stdev = 1364.168
  CI (99.9%): [130201.904, 132024.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_constant_execute  thrpt   30  131113.323 ± 911.419  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_execute_null$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_execute_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18513.469 ops/s
# Warmup Iteration   2: 60429.532 ops/s
# Warmup Iteration   3: 71723.891 ops/s
# Warmup Iteration   4: 117730.708 ops/s
# Warmup Iteration   5: 144341.653 ops/s
# Warmup Iteration   6: 144694.389 ops/s
# Warmup Iteration   7: 140676.931 ops/s
# Warmup Iteration   8: 142212.254 ops/s
# Warmup Iteration   9: 137650.567 ops/s
# Warmup Iteration  10: 140372.899 ops/s
# Warmup Iteration  11: 139336.095 ops/s
# Warmup Iteration  12: 97430.286 ops/s
# Warmup Iteration  13: 153345.099 ops/s
# Warmup Iteration  14: 152731.110 ops/s
# Warmup Iteration  15: 153164.424 ops/s
# Warmup Iteration  16: 154299.372 ops/s
# Warmup Iteration  17: 152081.793 ops/s
# Warmup Iteration  18: 151955.492 ops/s
# Warmup Iteration  19: 151706.356 ops/s
# Warmup Iteration  20: 151237.017 ops/s
# Warmup Iteration  21: 152369.331 ops/s
# Warmup Iteration  22: 152468.195 ops/s
# Warmup Iteration  23: 149996.416 ops/s
# Warmup Iteration  24: 153374.218 ops/s
# Warmup Iteration  25: 152881.885 ops/s
# Warmup Iteration  26: 152156.663 ops/s
# Warmup Iteration  27: 153427.799 ops/s
# Warmup Iteration  28: 153256.954 ops/s
# Warmup Iteration  29: 151613.744 ops/s
# Warmup Iteration  30: 151617.240 ops/s
Iteration   1: 151403.765 ops/s
Iteration   2: 152993.946 ops/s
Iteration   3: 151857.233 ops/s
Iteration   4: 152581.749 ops/s
Iteration   5: 151427.435 ops/s
Iteration   6: 152054.284 ops/s
Iteration   7: 153678.230 ops/s
Iteration   8: 152506.470 ops/s
Iteration   9: 152890.290 ops/s
Iteration  10: 153078.656 ops/s
Iteration  11: 152334.471 ops/s
Iteration  12: 151568.883 ops/s
Iteration  13: 151254.697 ops/s
Iteration  14: 152599.328 ops/s
Iteration  15: 152379.813 ops/s
Iteration  16: 152797.896 ops/s
Iteration  17: 153874.680 ops/s
Iteration  18: 153204.903 ops/s
Iteration  19: 153608.243 ops/s
Iteration  20: 152512.440 ops/s
Iteration  21: 153291.065 ops/s
Iteration  22: 154025.395 ops/s
Iteration  23: 152880.340 ops/s
Iteration  24: 152891.258 ops/s
Iteration  25: 154059.168 ops/s
Iteration  26: 153078.537 ops/s
Iteration  27: 153362.301 ops/s
Iteration  28: 151516.372 ops/s
Iteration  29: 152458.200 ops/s
Iteration  30: 152947.491 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_constant_execute_null":
  152703.918 ±(99.9%) 525.559 ops/s [Average]
  (min, avg, max) = (151254.697, 152703.918, 154059.168), stdev = 786.632
  CI (99.9%): [152178.359, 153229.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_constant_execute_null  thrpt   30  152703.918 ± 525.559  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_submit$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_submit

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7249.884 ops/s
# Warmup Iteration   2: 12968.619 ops/s
# Warmup Iteration   3: 16801.489 ops/s
# Warmup Iteration   4: 20006.738 ops/s
# Warmup Iteration   5: 19417.882 ops/s
# Warmup Iteration   6: 23124.728 ops/s
# Warmup Iteration   7: 27233.545 ops/s
# Warmup Iteration   8: 27026.206 ops/s
# Warmup Iteration   9: 27580.630 ops/s
# Warmup Iteration  10: 26799.413 ops/s
# Warmup Iteration  11: 26757.274 ops/s
# Warmup Iteration  12: 26958.466 ops/s
# Warmup Iteration  13: 27238.475 ops/s
# Warmup Iteration  14: 26564.145 ops/s
# Warmup Iteration  15: 27015.904 ops/s
# Warmup Iteration  16: 26871.749 ops/s
# Warmup Iteration  17: 27247.240 ops/s
# Warmup Iteration  18: 27563.652 ops/s
# Warmup Iteration  19: 26857.385 ops/s
# Warmup Iteration  20: 27726.303 ops/s
# Warmup Iteration  21: 27667.478 ops/s
# Warmup Iteration  22: 27445.029 ops/s
# Warmup Iteration  23: 27683.359 ops/s
# Warmup Iteration  24: 27796.525 ops/s
# Warmup Iteration  25: 27361.630 ops/s
# Warmup Iteration  26: 20817.218 ops/s
# Warmup Iteration  27: 24050.504 ops/s
# Warmup Iteration  28: 27296.238 ops/s
# Warmup Iteration  29: 27285.256 ops/s
# Warmup Iteration  30: 27262.850 ops/s
Iteration   1: 27283.238 ops/s
Iteration   2: 27273.426 ops/s
Iteration   3: 27569.858 ops/s
Iteration   4: 27026.711 ops/s
Iteration   5: 27220.845 ops/s
Iteration   6: 27241.469 ops/s
Iteration   7: 26951.326 ops/s
Iteration   8: 26616.075 ops/s
Iteration   9: 27044.919 ops/s
Iteration  10: 26680.935 ops/s
Iteration  11: 27384.175 ops/s
Iteration  12: 27752.265 ops/s
Iteration  13: 26500.874 ops/s
Iteration  14: 26539.323 ops/s
Iteration  15: 27450.437 ops/s
Iteration  16: 27536.233 ops/s
Iteration  17: 27486.986 ops/s
Iteration  18: 27416.006 ops/s
Iteration  19: 27497.554 ops/s
Iteration  20: 27349.985 ops/s
Iteration  21: 27595.457 ops/s
Iteration  22: 27565.947 ops/s
Iteration  23: 27507.085 ops/s
Iteration  24: 27617.681 ops/s
Iteration  25: 27504.178 ops/s
Iteration  26: 27524.125 ops/s
Iteration  27: 27593.129 ops/s
Iteration  28: 27567.340 ops/s
Iteration  29: 27549.823 ops/s
Iteration  30: 27559.839 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_constant_submit":
  27313.575 ±(99.9%) 231.062 ops/s [Average]
  (min, avg, max) = (26500.874, 27313.575, 27752.265), stdev = 345.843
  CI (99.9%): [27082.513, 27544.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_constant_submit  thrpt   30  27313.575 ± 231.062  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_submit_cancel$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_submit_cancel

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6252.542 ops/s
# Warmup Iteration   2: 12362.855 ops/s
# Warmup Iteration   3: 15488.714 ops/s
# Warmup Iteration   4: 15356.009 ops/s
# Warmup Iteration   5: 15392.595 ops/s
# Warmup Iteration   6: 16603.681 ops/s
# Warmup Iteration   7: 21541.345 ops/s
# Warmup Iteration   8: 21698.742 ops/s
# Warmup Iteration   9: 21764.857 ops/s
# Warmup Iteration  10: 21697.421 ops/s
# Warmup Iteration  11: 21743.771 ops/s
# Warmup Iteration  12: 21555.148 ops/s
# Warmup Iteration  13: 21430.337 ops/s
# Warmup Iteration  14: 21386.620 ops/s
# Warmup Iteration  15: 21362.051 ops/s
# Warmup Iteration  16: 21362.058 ops/s
# Warmup Iteration  17: 21216.441 ops/s
# Warmup Iteration  18: 21540.128 ops/s
# Warmup Iteration  19: 21604.399 ops/s
# Warmup Iteration  20: 21691.350 ops/s
# Warmup Iteration  21: 21457.454 ops/s
# Warmup Iteration  22: 21811.036 ops/s
# Warmup Iteration  23: 21650.638 ops/s
# Warmup Iteration  24: 21034.471 ops/s
# Warmup Iteration  25: 21766.924 ops/s
# Warmup Iteration  26: 21795.724 ops/s
# Warmup Iteration  27: 21742.530 ops/s
# Warmup Iteration  28: 19605.100 ops/s
# Warmup Iteration  29: 16288.037 ops/s
# Warmup Iteration  30: 20449.668 ops/s
Iteration   1: 21456.604 ops/s
Iteration   2: 21628.519 ops/s
Iteration   3: 21730.666 ops/s
Iteration   4: 21213.091 ops/s
Iteration   5: 21190.570 ops/s
Iteration   6: 21675.206 ops/s
Iteration   7: 21782.650 ops/s
Iteration   8: 21455.344 ops/s
Iteration   9: 21756.754 ops/s
Iteration  10: 21915.363 ops/s
Iteration  11: 21706.113 ops/s
Iteration  12: 21672.257 ops/s
Iteration  13: 21250.558 ops/s
Iteration  14: 21740.558 ops/s
Iteration  15: 21589.220 ops/s
Iteration  16: 21650.550 ops/s
Iteration  17: 21709.915 ops/s
Iteration  18: 21781.170 ops/s
Iteration  19: 21919.480 ops/s
Iteration  20: 21847.593 ops/s
Iteration  21: 21798.550 ops/s
Iteration  22: 21354.676 ops/s
Iteration  23: 21334.751 ops/s
Iteration  24: 21461.385 ops/s
Iteration  25: 21707.707 ops/s
Iteration  26: 21804.561 ops/s
Iteration  27: 21473.924 ops/s
Iteration  28: 21498.578 ops/s
Iteration  29: 21229.289 ops/s
Iteration  30: 21644.560 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_constant_submit_cancel":
  21599.339 ±(99.9%) 142.391 ops/s [Average]
  (min, avg, max) = (21190.570, 21599.339, 21919.480), stdev = 213.125
  CI (99.9%): [21456.947, 21741.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_constant_submit_cancel  thrpt   30  21599.339 ± 142.391  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_submit_null$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_constant_submit_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6609.758 ops/s
# Warmup Iteration   2: 10685.633 ops/s
# Warmup Iteration   3: 16382.420 ops/s
# Warmup Iteration   4: 16558.893 ops/s
# Warmup Iteration   5: 16983.660 ops/s
# Warmup Iteration   6: 16990.480 ops/s
# Warmup Iteration   7: 20270.575 ops/s
# Warmup Iteration   8: 22448.063 ops/s
# Warmup Iteration   9: 22047.281 ops/s
# Warmup Iteration  10: 22357.478 ops/s
# Warmup Iteration  11: 22632.740 ops/s
# Warmup Iteration  12: 22723.026 ops/s
# Warmup Iteration  13: 22702.209 ops/s
# Warmup Iteration  14: 22619.224 ops/s
# Warmup Iteration  15: 21910.684 ops/s
# Warmup Iteration  16: 22506.974 ops/s
# Warmup Iteration  17: 22610.413 ops/s
# Warmup Iteration  18: 22546.540 ops/s
# Warmup Iteration  19: 22933.788 ops/s
# Warmup Iteration  20: 22856.706 ops/s
# Warmup Iteration  21: 22903.655 ops/s
# Warmup Iteration  22: 23119.296 ops/s
# Warmup Iteration  23: 23018.140 ops/s
# Warmup Iteration  24: 23266.454 ops/s
# Warmup Iteration  25: 23311.071 ops/s
# Warmup Iteration  26: 22961.095 ops/s
# Warmup Iteration  27: 23051.328 ops/s
# Warmup Iteration  28: 22795.853 ops/s
# Warmup Iteration  29: 22731.057 ops/s
# Warmup Iteration  30: 22732.622 ops/s
Iteration   1: 20296.275 ops/s
Iteration   2: 17566.300 ops/s
Iteration   3: 17298.098 ops/s
Iteration   4: 17138.710 ops/s
Iteration   5: 22299.335 ops/s
Iteration   6: 22560.987 ops/s
Iteration   7: 22578.958 ops/s
Iteration   8: 22419.669 ops/s
Iteration   9: 22544.579 ops/s
Iteration  10: 22601.917 ops/s
Iteration  11: 22563.578 ops/s
Iteration  12: 22857.640 ops/s
Iteration  13: 22962.107 ops/s
Iteration  14: 22964.557 ops/s
Iteration  15: 22801.669 ops/s
Iteration  16: 22681.272 ops/s
Iteration  17: 22842.597 ops/s
Iteration  18: 22409.437 ops/s
Iteration  19: 22675.003 ops/s
Iteration  20: 22806.484 ops/s
Iteration  21: 22396.496 ops/s
Iteration  22: 22681.621 ops/s
Iteration  23: 22288.614 ops/s
Iteration  24: 22906.459 ops/s
Iteration  25: 22923.232 ops/s
Iteration  26: 22885.598 ops/s
Iteration  27: 22617.008 ops/s
Iteration  28: 22441.225 ops/s
Iteration  29: 22435.142 ops/s
Iteration  30: 22847.566 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_constant_submit_null":
  22043.071 ±(99.9%) 1112.898 ops/s [Average]
  (min, avg, max) = (17138.710, 22043.071, 22964.557), stdev = 1665.734
  CI (99.9%): [20930.173, 23155.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score      Error  Units
CallTest._Benchmark.benchmark_constant_submit_null  thrpt   30  22043.071 ± 1112.898  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_emptyList$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18590.505 ops/s
# Warmup Iteration   2: 49431.495 ops/s
# Warmup Iteration   3: 70792.396 ops/s
# Warmup Iteration   4: 97369.070 ops/s
# Warmup Iteration   5: 134604.434 ops/s
# Warmup Iteration   6: 132882.962 ops/s
# Warmup Iteration   7: 129747.930 ops/s
# Warmup Iteration   8: 129023.306 ops/s
# Warmup Iteration   9: 134286.260 ops/s
# Warmup Iteration  10: 130212.930 ops/s
# Warmup Iteration  11: 129299.712 ops/s
# Warmup Iteration  12: 129758.178 ops/s
# Warmup Iteration  13: 86049.836 ops/s
# Warmup Iteration  14: 131904.702 ops/s
# Warmup Iteration  15: 132636.775 ops/s
# Warmup Iteration  16: 132837.702 ops/s
# Warmup Iteration  17: 131268.693 ops/s
# Warmup Iteration  18: 129272.189 ops/s
# Warmup Iteration  19: 130197.684 ops/s
# Warmup Iteration  20: 132279.671 ops/s
# Warmup Iteration  21: 133260.201 ops/s
# Warmup Iteration  22: 132439.082 ops/s
# Warmup Iteration  23: 132179.802 ops/s
# Warmup Iteration  24: 129543.642 ops/s
# Warmup Iteration  25: 130202.512 ops/s
# Warmup Iteration  26: 130357.122 ops/s
# Warmup Iteration  27: 132742.310 ops/s
# Warmup Iteration  28: 132792.353 ops/s
# Warmup Iteration  29: 132799.774 ops/s
# Warmup Iteration  30: 129952.890 ops/s
Iteration   1: 132811.816 ops/s
Iteration   2: 132530.843 ops/s
Iteration   3: 130383.863 ops/s
Iteration   4: 132006.580 ops/s
Iteration   5: 130609.361 ops/s
Iteration   6: 132435.476 ops/s
Iteration   7: 129513.199 ops/s
Iteration   8: 129133.607 ops/s
Iteration   9: 128269.644 ops/s
Iteration  10: 128935.652 ops/s
Iteration  11: 128315.647 ops/s
Iteration  12: 130735.952 ops/s
Iteration  13: 131953.943 ops/s
Iteration  14: 132696.208 ops/s
Iteration  15: 131082.455 ops/s
Iteration  16: 129668.231 ops/s
Iteration  17: 132048.992 ops/s
Iteration  18: 132209.951 ops/s
Iteration  19: 132336.614 ops/s
Iteration  20: 133049.287 ops/s
Iteration  21: 133149.960 ops/s
Iteration  22: 132828.923 ops/s
Iteration  23: 132548.577 ops/s
Iteration  24: 131993.543 ops/s
Iteration  25: 129692.686 ops/s
Iteration  26: 131966.220 ops/s
Iteration  27: 131256.893 ops/s
Iteration  28: 130476.965 ops/s
Iteration  29: 131103.525 ops/s
Iteration  30: 132656.723 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_emptyList":
  131280.045 ±(99.9%) 982.967 ops/s [Average]
  (min, avg, max) = (128269.644, 131280.045, 133149.960), stdev = 1471.259
  CI (99.9%): [130297.078, 132263.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_emptyList  thrpt   30  131280.045 ± 982.967  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_emptyList_independentInstances$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_emptyList_independentInstances

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19843.755 ops/s
# Warmup Iteration   2: 55959.948 ops/s
# Warmup Iteration   3: 67720.344 ops/s
# Warmup Iteration   4: 99444.237 ops/s
# Warmup Iteration   5: 128187.631 ops/s
# Warmup Iteration   6: 126776.519 ops/s
# Warmup Iteration   7: 125411.021 ops/s
# Warmup Iteration   8: 125178.621 ops/s
# Warmup Iteration   9: 124767.505 ops/s
# Warmup Iteration  10: 129506.578 ops/s
# Warmup Iteration  11: 128073.017 ops/s
# Warmup Iteration  12: 122524.807 ops/s
# Warmup Iteration  13: 89727.916 ops/s
# Warmup Iteration  14: 126510.064 ops/s
# Warmup Iteration  15: 126009.778 ops/s
# Warmup Iteration  16: 126010.808 ops/s
# Warmup Iteration  17: 126428.903 ops/s
# Warmup Iteration  18: 125704.612 ops/s
# Warmup Iteration  19: 123996.292 ops/s
# Warmup Iteration  20: 122376.081 ops/s
# Warmup Iteration  21: 125154.778 ops/s
# Warmup Iteration  22: 123704.711 ops/s
# Warmup Iteration  23: 126431.114 ops/s
# Warmup Iteration  24: 123351.177 ops/s
# Warmup Iteration  25: 126010.911 ops/s
# Warmup Iteration  26: 126248.144 ops/s
# Warmup Iteration  27: 122841.020 ops/s
# Warmup Iteration  28: 122940.468 ops/s
# Warmup Iteration  29: 124997.627 ops/s
# Warmup Iteration  30: 124883.943 ops/s
Iteration   1: 124080.948 ops/s
Iteration   2: 121206.089 ops/s
Iteration   3: 125409.602 ops/s
Iteration   4: 125877.618 ops/s
Iteration   5: 124326.219 ops/s
Iteration   6: 123630.524 ops/s
Iteration   7: 125924.088 ops/s
Iteration   8: 126128.837 ops/s
Iteration   9: 125708.488 ops/s
Iteration  10: 123805.146 ops/s
Iteration  11: 122846.186 ops/s
Iteration  12: 123038.180 ops/s
Iteration  13: 122929.739 ops/s
Iteration  14: 127094.537 ops/s
Iteration  15: 126674.677 ops/s
Iteration  16: 126038.878 ops/s
Iteration  17: 125307.796 ops/s
Iteration  18: 122490.755 ops/s
Iteration  19: 123447.763 ops/s
Iteration  20: 122866.961 ops/s
Iteration  21: 123558.711 ops/s
Iteration  22: 126231.108 ops/s
Iteration  23: 126182.028 ops/s
Iteration  24: 125351.649 ops/s
Iteration  25: 125870.079 ops/s
Iteration  26: 125165.066 ops/s
Iteration  27: 125783.289 ops/s
Iteration  28: 124561.036 ops/s
Iteration  29: 125453.223 ops/s
Iteration  30: 124496.428 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_emptyList_independentInstances":
  124716.188 ±(99.9%) 974.569 ops/s [Average]
  (min, avg, max) = (121206.089, 124716.188, 127094.537), stdev = 1458.688
  CI (99.9%): [123741.620, 125690.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_emptyList_independentInstances  thrpt   30  124716.188 ± 974.569  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_enqueuesOnce$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_enqueuesOnce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9103.527 ops/s
# Warmup Iteration   2: 22153.931 ops/s
# Warmup Iteration   3: 29371.420 ops/s
# Warmup Iteration   4: 29489.778 ops/s
# Warmup Iteration   5: 30401.201 ops/s
# Warmup Iteration   6: 38108.058 ops/s
# Warmup Iteration   7: 42641.443 ops/s
# Warmup Iteration   8: 42072.871 ops/s
# Warmup Iteration   9: 41120.108 ops/s
# Warmup Iteration  10: 42482.541 ops/s
# Warmup Iteration  11: 41003.680 ops/s
# Warmup Iteration  12: 41269.211 ops/s
# Warmup Iteration  13: 42331.813 ops/s
# Warmup Iteration  14: 42281.115 ops/s
# Warmup Iteration  15: 41300.964 ops/s
# Warmup Iteration  16: 41350.171 ops/s
# Warmup Iteration  17: 43329.499 ops/s
# Warmup Iteration  18: 43379.430 ops/s
# Warmup Iteration  19: 43255.852 ops/s
# Warmup Iteration  20: 43676.708 ops/s
# Warmup Iteration  21: 43898.622 ops/s
# Warmup Iteration  22: 42387.334 ops/s
# Warmup Iteration  23: 42202.041 ops/s
# Warmup Iteration  24: 41603.480 ops/s
# Warmup Iteration  25: 31481.294 ops/s
# Warmup Iteration  26: 39820.448 ops/s
# Warmup Iteration  27: 43672.685 ops/s
# Warmup Iteration  28: 43477.932 ops/s
# Warmup Iteration  29: 43886.275 ops/s
# Warmup Iteration  30: 44133.917 ops/s
Iteration   1: 43749.357 ops/s
Iteration   2: 44073.323 ops/s
Iteration   3: 42539.512 ops/s
Iteration   4: 42634.586 ops/s
Iteration   5: 43646.342 ops/s
Iteration   6: 42652.800 ops/s
Iteration   7: 43979.517 ops/s
Iteration   8: 44296.088 ops/s
Iteration   9: 44217.392 ops/s
Iteration  10: 43937.188 ops/s
Iteration  11: 43437.187 ops/s
Iteration  12: 42691.054 ops/s
Iteration  13: 42669.701 ops/s
Iteration  14: 43903.325 ops/s
Iteration  15: 44167.836 ops/s
Iteration  16: 42282.507 ops/s
Iteration  17: 42663.031 ops/s
Iteration  18: 43739.223 ops/s
Iteration  19: 43135.660 ops/s
Iteration  20: 42943.287 ops/s
Iteration  21: 43441.799 ops/s
Iteration  22: 43460.242 ops/s
Iteration  23: 42500.954 ops/s
Iteration  24: 43673.093 ops/s
Iteration  25: 44171.633 ops/s
Iteration  26: 44087.345 ops/s
Iteration  27: 44109.082 ops/s
Iteration  28: 43826.092 ops/s
Iteration  29: 43794.114 ops/s
Iteration  30: 43025.709 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_enqueuesOnce":
  43448.299 ±(99.9%) 421.600 ops/s [Average]
  (min, avg, max) = (42282.507, 43448.299, 44296.088), stdev = 631.031
  CI (99.9%): [43026.700, 43869.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_enqueuesOnce  thrpt   30  43448.299 ± 421.600  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_executesOnce$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_executesOnce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14757.835 ops/s
# Warmup Iteration   2: 37511.812 ops/s
# Warmup Iteration   3: 42323.495 ops/s
# Warmup Iteration   4: 42843.213 ops/s
# Warmup Iteration   5: 49665.799 ops/s
# Warmup Iteration   6: 64306.380 ops/s
# Warmup Iteration   7: 64951.291 ops/s
# Warmup Iteration   8: 64871.110 ops/s
# Warmup Iteration   9: 63162.600 ops/s
# Warmup Iteration  10: 63063.330 ops/s
# Warmup Iteration  11: 64420.996 ops/s
# Warmup Iteration  12: 64218.466 ops/s
# Warmup Iteration  13: 64988.285 ops/s
# Warmup Iteration  14: 65166.777 ops/s
# Warmup Iteration  15: 64860.513 ops/s
# Warmup Iteration  16: 64706.567 ops/s
# Warmup Iteration  17: 64348.677 ops/s
# Warmup Iteration  18: 65115.584 ops/s
# Warmup Iteration  19: 64859.182 ops/s
# Warmup Iteration  20: 58850.527 ops/s
# Warmup Iteration  21: 42954.552 ops/s
# Warmup Iteration  22: 62987.651 ops/s
# Warmup Iteration  23: 64031.836 ops/s
# Warmup Iteration  24: 65730.520 ops/s
# Warmup Iteration  25: 65280.307 ops/s
# Warmup Iteration  26: 65128.710 ops/s
# Warmup Iteration  27: 65501.791 ops/s
# Warmup Iteration  28: 65666.612 ops/s
# Warmup Iteration  29: 65537.487 ops/s
# Warmup Iteration  30: 63079.869 ops/s
Iteration   1: 62818.673 ops/s
Iteration   2: 63736.494 ops/s
Iteration   3: 65223.668 ops/s
Iteration   4: 64681.087 ops/s
Iteration   5: 63017.179 ops/s
Iteration   6: 65027.450 ops/s
Iteration   7: 64651.018 ops/s
Iteration   8: 64966.117 ops/s
Iteration   9: 65221.460 ops/s
Iteration  10: 65214.862 ops/s
Iteration  11: 64935.602 ops/s
Iteration  12: 63531.645 ops/s
Iteration  13: 64001.941 ops/s
Iteration  14: 64574.968 ops/s
Iteration  15: 62824.276 ops/s
Iteration  16: 64190.014 ops/s
Iteration  17: 64955.916 ops/s
Iteration  18: 65344.232 ops/s
Iteration  19: 65583.471 ops/s
Iteration  20: 65235.688 ops/s
Iteration  21: 65641.985 ops/s
Iteration  22: 65579.462 ops/s
Iteration  23: 65657.223 ops/s
Iteration  24: 65440.102 ops/s
Iteration  25: 64436.710 ops/s
Iteration  26: 62800.466 ops/s
Iteration  27: 64718.417 ops/s
Iteration  28: 65354.031 ops/s
Iteration  29: 65304.801 ops/s
Iteration  30: 62884.052 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_executesOnce":
  64585.100 ±(99.9%) 633.092 ops/s [Average]
  (min, avg, max) = (62800.466, 64585.100, 65657.223), stdev = 947.582
  CI (99.9%): [63952.009, 65218.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_executesOnce  thrpt   30  64585.100 ± 633.092  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_cancelPropagates$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_cancelPropagates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19530.826 ops/s
# Warmup Iteration   2: 51678.044 ops/s
# Warmup Iteration   3: 66358.542 ops/s
# Warmup Iteration   4: 94132.373 ops/s
# Warmup Iteration   5: 122326.868 ops/s
# Warmup Iteration   6: 122128.044 ops/s
# Warmup Iteration   7: 119110.556 ops/s
# Warmup Iteration   8: 119774.553 ops/s
# Warmup Iteration   9: 122103.727 ops/s
# Warmup Iteration  10: 116629.668 ops/s
# Warmup Iteration  11: 116844.413 ops/s
# Warmup Iteration  12: 117390.050 ops/s
# Warmup Iteration  13: 85895.749 ops/s
# Warmup Iteration  14: 115168.674 ops/s
# Warmup Iteration  15: 122041.108 ops/s
# Warmup Iteration  16: 123772.436 ops/s
# Warmup Iteration  17: 124437.136 ops/s
# Warmup Iteration  18: 124537.730 ops/s
# Warmup Iteration  19: 123288.649 ops/s
# Warmup Iteration  20: 122390.207 ops/s
# Warmup Iteration  21: 122324.968 ops/s
# Warmup Iteration  22: 125273.414 ops/s
# Warmup Iteration  23: 123730.926 ops/s
# Warmup Iteration  24: 124526.405 ops/s
# Warmup Iteration  25: 123833.395 ops/s
# Warmup Iteration  26: 123909.383 ops/s
# Warmup Iteration  27: 124493.376 ops/s
# Warmup Iteration  28: 124808.670 ops/s
# Warmup Iteration  29: 124492.877 ops/s
# Warmup Iteration  30: 125967.671 ops/s
Iteration   1: 124306.165 ops/s
Iteration   2: 123902.033 ops/s
Iteration   3: 123883.146 ops/s
Iteration   4: 124174.980 ops/s
Iteration   5: 124965.291 ops/s
Iteration   6: 125083.203 ops/s
Iteration   7: 125405.164 ops/s
Iteration   8: 125251.770 ops/s
Iteration   9: 124715.543 ops/s
Iteration  10: 125406.326 ops/s
Iteration  11: 125200.535 ops/s
Iteration  12: 124893.954 ops/s
Iteration  13: 125225.867 ops/s
Iteration  14: 125174.923 ops/s
Iteration  15: 125292.969 ops/s
Iteration  16: 124658.498 ops/s
Iteration  17: 123891.234 ops/s
Iteration  18: 124039.564 ops/s
Iteration  19: 124008.816 ops/s
Iteration  20: 124380.007 ops/s
Iteration  21: 124913.120 ops/s
Iteration  22: 124725.203 ops/s
Iteration  23: 124899.620 ops/s
Iteration  24: 124675.546 ops/s
Iteration  25: 124298.299 ops/s
Iteration  26: 121768.618 ops/s
Iteration  27: 122277.853 ops/s
Iteration  28: 123260.307 ops/s
Iteration  29: 124397.138 ops/s
Iteration  30: 124295.622 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_flatMap_cancelPropagates":
  124445.710 ±(99.9%) 570.735 ops/s [Average]
  (min, avg, max) = (121768.618, 124445.710, 125406.326), stdev = 854.250
  CI (99.9%): [123874.975, 125016.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_flatMap_cancelPropagates  thrpt   30  124445.710 ± 570.735  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7145.724 ops/s
# Warmup Iteration   2: 12466.460 ops/s
# Warmup Iteration   3: 17961.917 ops/s
# Warmup Iteration   4: 18236.506 ops/s
# Warmup Iteration   5: 19172.134 ops/s
# Warmup Iteration   6: 20621.231 ops/s
# Warmup Iteration   7: 26405.255 ops/s
# Warmup Iteration   8: 26430.137 ops/s
# Warmup Iteration   9: 26508.995 ops/s
# Warmup Iteration  10: 26143.883 ops/s
# Warmup Iteration  11: 26404.794 ops/s
# Warmup Iteration  12: 25884.106 ops/s
# Warmup Iteration  13: 26181.112 ops/s
# Warmup Iteration  14: 26404.065 ops/s
# Warmup Iteration  15: 26240.596 ops/s
# Warmup Iteration  16: 26639.167 ops/s
# Warmup Iteration  17: 26396.909 ops/s
# Warmup Iteration  18: 26773.938 ops/s
# Warmup Iteration  19: 26605.362 ops/s
# Warmup Iteration  20: 27086.639 ops/s
# Warmup Iteration  21: 27022.882 ops/s
# Warmup Iteration  22: 26822.720 ops/s
# Warmup Iteration  23: 25892.714 ops/s
# Warmup Iteration  24: 26297.168 ops/s
# Warmup Iteration  25: 26714.673 ops/s
# Warmup Iteration  26: 22748.401 ops/s
# Warmup Iteration  27: 19408.866 ops/s
# Warmup Iteration  28: 26428.443 ops/s
# Warmup Iteration  29: 26865.202 ops/s
# Warmup Iteration  30: 26807.349 ops/s
Iteration   1: 26091.573 ops/s
Iteration   2: 26554.620 ops/s
Iteration   3: 25922.033 ops/s
Iteration   4: 25972.976 ops/s
Iteration   5: 26574.766 ops/s
Iteration   6: 26927.558 ops/s
Iteration   7: 26694.575 ops/s
Iteration   8: 26517.955 ops/s
Iteration   9: 26860.799 ops/s
Iteration  10: 26886.976 ops/s
Iteration  11: 27038.034 ops/s
Iteration  12: 27129.458 ops/s
Iteration  13: 27030.596 ops/s
Iteration  14: 26999.813 ops/s
Iteration  15: 26949.878 ops/s
Iteration  16: 26073.484 ops/s
Iteration  17: 26802.115 ops/s
Iteration  18: 26809.631 ops/s
Iteration  19: 26852.048 ops/s
Iteration  20: 26951.787 ops/s
Iteration  21: 26899.877 ops/s
Iteration  22: 26943.175 ops/s
Iteration  23: 27061.321 ops/s
Iteration  24: 27024.454 ops/s
Iteration  25: 26668.483 ops/s
Iteration  26: 26617.370 ops/s
Iteration  27: 27044.175 ops/s
Iteration  28: 26415.324 ops/s
Iteration  29: 25982.271 ops/s
Iteration  30: 26568.704 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue":
  26695.528 ±(99.9%) 242.559 ops/s [Average]
  (min, avg, max) = (25922.033, 26695.528, 27129.458), stdev = 363.051
  CI (99.9%): [26452.969, 26938.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_flatMap_enqueue  thrpt   30  26695.528 ± 242.559  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue_callException$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue_callException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7081.487 ops/s
# Warmup Iteration   2: 13755.067 ops/s
# Warmup Iteration   3: 18319.145 ops/s
# Warmup Iteration   4: 17945.883 ops/s
# Warmup Iteration   5: 18057.179 ops/s
# Warmup Iteration   6: 21960.592 ops/s
# Warmup Iteration   7: 25228.973 ops/s
# Warmup Iteration   8: 24807.806 ops/s
# Warmup Iteration   9: 24148.468 ops/s
# Warmup Iteration  10: 24232.292 ops/s
# Warmup Iteration  11: 24457.752 ops/s
# Warmup Iteration  12: 24873.374 ops/s
# Warmup Iteration  13: 24194.376 ops/s
# Warmup Iteration  14: 24488.193 ops/s
# Warmup Iteration  15: 24795.571 ops/s
# Warmup Iteration  16: 24992.414 ops/s
# Warmup Iteration  17: 25160.735 ops/s
# Warmup Iteration  18: 24621.142 ops/s
# Warmup Iteration  19: 24498.810 ops/s
# Warmup Iteration  20: 24463.359 ops/s
# Warmup Iteration  21: 25037.918 ops/s
# Warmup Iteration  22: 24651.117 ops/s
# Warmup Iteration  23: 24825.579 ops/s
# Warmup Iteration  24: 24767.852 ops/s
# Warmup Iteration  25: 24827.714 ops/s
# Warmup Iteration  26: 22400.695 ops/s
# Warmup Iteration  27: 18472.288 ops/s
# Warmup Iteration  28: 24147.011 ops/s
# Warmup Iteration  29: 25208.043 ops/s
# Warmup Iteration  30: 24844.510 ops/s
Iteration   1: 24533.415 ops/s
Iteration   2: 25427.854 ops/s
Iteration   3: 24369.577 ops/s
Iteration   4: 24843.648 ops/s
Iteration   5: 25210.693 ops/s
Iteration   6: 25308.832 ops/s
Iteration   7: 25175.751 ops/s
Iteration   8: 24597.370 ops/s
Iteration   9: 25230.114 ops/s
Iteration  10: 25282.055 ops/s
Iteration  11: 25310.169 ops/s
Iteration  12: 24496.840 ops/s
Iteration  13: 25235.811 ops/s
Iteration  14: 24954.628 ops/s
Iteration  15: 25246.473 ops/s
Iteration  16: 25253.242 ops/s
Iteration  17: 25383.134 ops/s
Iteration  18: 25150.652 ops/s
Iteration  19: 25438.902 ops/s
Iteration  20: 25429.616 ops/s
Iteration  21: 25404.343 ops/s
Iteration  22: 24637.636 ops/s
Iteration  23: 25239.649 ops/s
Iteration  24: 25529.378 ops/s
Iteration  25: 25627.307 ops/s
Iteration  26: 25286.543 ops/s
Iteration  27: 24650.327 ops/s
Iteration  28: 25054.736 ops/s
Iteration  29: 24552.348 ops/s
Iteration  30: 24972.492 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue_callException":
  25094.451 ±(99.9%) 233.210 ops/s [Average]
  (min, avg, max) = (24369.577, 25094.451, 25627.307), stdev = 349.058
  CI (99.9%): [24861.241, 25327.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_flatMap_enqueue_callException  thrpt   30  25094.451 ± 233.210  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue_mappingException$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue_mappingException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6680.366 ops/s
# Warmup Iteration   2: 12766.555 ops/s
# Warmup Iteration   3: 16877.716 ops/s
# Warmup Iteration   4: 17709.148 ops/s
# Warmup Iteration   5: 17674.578 ops/s
# Warmup Iteration   6: 20138.094 ops/s
# Warmup Iteration   7: 23639.155 ops/s
# Warmup Iteration   8: 24124.169 ops/s
# Warmup Iteration   9: 23814.290 ops/s
# Warmup Iteration  10: 23831.775 ops/s
# Warmup Iteration  11: 24301.472 ops/s
# Warmup Iteration  12: 23961.404 ops/s
# Warmup Iteration  13: 23865.525 ops/s
# Warmup Iteration  14: 24628.303 ops/s
# Warmup Iteration  15: 24686.738 ops/s
# Warmup Iteration  16: 24510.760 ops/s
# Warmup Iteration  17: 24555.487 ops/s
# Warmup Iteration  18: 24767.332 ops/s
# Warmup Iteration  19: 24812.680 ops/s
# Warmup Iteration  20: 24632.391 ops/s
# Warmup Iteration  21: 24681.309 ops/s
# Warmup Iteration  22: 24100.974 ops/s
# Warmup Iteration  23: 23790.191 ops/s
# Warmup Iteration  24: 24657.444 ops/s
# Warmup Iteration  25: 24979.957 ops/s
# Warmup Iteration  26: 24039.121 ops/s
# Warmup Iteration  27: 18385.695 ops/s
# Warmup Iteration  28: 21709.029 ops/s
# Warmup Iteration  29: 24708.802 ops/s
# Warmup Iteration  30: 24672.581 ops/s
Iteration   1: 24421.141 ops/s
Iteration   2: 23881.891 ops/s
Iteration   3: 24424.200 ops/s
Iteration   4: 23995.945 ops/s
Iteration   5: 23980.373 ops/s
Iteration   6: 25210.922 ops/s
Iteration   7: 25307.743 ops/s
Iteration   8: 25214.964 ops/s
Iteration   9: 25258.929 ops/s
Iteration  10: 25132.904 ops/s
Iteration  11: 25266.750 ops/s
Iteration  12: 25345.235 ops/s
Iteration  13: 25190.243 ops/s
Iteration  14: 24823.538 ops/s
Iteration  15: 24203.716 ops/s
Iteration  16: 24063.378 ops/s
Iteration  17: 24386.496 ops/s
Iteration  18: 24282.359 ops/s
Iteration  19: 24879.875 ops/s
Iteration  20: 24945.589 ops/s
Iteration  21: 24771.426 ops/s
Iteration  22: 24765.062 ops/s
Iteration  23: 25001.994 ops/s
Iteration  24: 25034.732 ops/s
Iteration  25: 24921.226 ops/s
Iteration  26: 24993.712 ops/s
Iteration  27: 24989.464 ops/s
Iteration  28: 25076.168 ops/s
Iteration  29: 24977.833 ops/s
Iteration  30: 24989.186 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_flatMap_enqueue_mappingException":
  24791.233 ±(99.9%) 296.887 ops/s [Average]
  (min, avg, max) = (23881.891, 24791.233, 25345.235), stdev = 444.366
  CI (99.9%): [24494.347, 25088.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_flatMap_enqueue_mappingException  thrpt   30  24791.233 ± 296.887  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_execute$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_flatMap_execute

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18884.766 ops/s
# Warmup Iteration   2: 58912.983 ops/s
# Warmup Iteration   3: 72396.424 ops/s
# Warmup Iteration   4: 109939.198 ops/s
# Warmup Iteration   5: 133227.190 ops/s
# Warmup Iteration   6: 131390.717 ops/s
# Warmup Iteration   7: 130069.918 ops/s
# Warmup Iteration   8: 132542.510 ops/s
# Warmup Iteration   9: 133372.226 ops/s
# Warmup Iteration  10: 138159.008 ops/s
# Warmup Iteration  11: 130759.333 ops/s
# Warmup Iteration  12: 103487.500 ops/s
# Warmup Iteration  13: 113976.587 ops/s
# Warmup Iteration  14: 133466.761 ops/s
# Warmup Iteration  15: 132765.938 ops/s
# Warmup Iteration  16: 132361.359 ops/s
# Warmup Iteration  17: 133961.289 ops/s
# Warmup Iteration  18: 133426.250 ops/s
# Warmup Iteration  19: 134059.521 ops/s
# Warmup Iteration  20: 133252.177 ops/s
# Warmup Iteration  21: 133516.748 ops/s
# Warmup Iteration  22: 131803.010 ops/s
# Warmup Iteration  23: 132062.857 ops/s
# Warmup Iteration  24: 132987.693 ops/s
# Warmup Iteration  25: 133104.866 ops/s
# Warmup Iteration  26: 132578.413 ops/s
# Warmup Iteration  27: 134266.089 ops/s
# Warmup Iteration  28: 132587.611 ops/s
# Warmup Iteration  29: 133190.940 ops/s
# Warmup Iteration  30: 133247.021 ops/s
Iteration   1: 131647.996 ops/s
Iteration   2: 132520.993 ops/s
Iteration   3: 133261.524 ops/s
Iteration   4: 133500.270 ops/s
Iteration   5: 132819.391 ops/s
Iteration   6: 133705.097 ops/s
Iteration   7: 133896.101 ops/s
Iteration   8: 133376.228 ops/s
Iteration   9: 131933.294 ops/s
Iteration  10: 130817.292 ops/s
Iteration  11: 131561.179 ops/s
Iteration  12: 131540.845 ops/s
Iteration  13: 134079.135 ops/s
Iteration  14: 134028.661 ops/s
Iteration  15: 134416.582 ops/s
Iteration  16: 132018.805 ops/s
Iteration  17: 132348.203 ops/s
Iteration  18: 133368.013 ops/s
Iteration  19: 132922.731 ops/s
Iteration  20: 133805.030 ops/s
Iteration  21: 132746.127 ops/s
Iteration  22: 132633.350 ops/s
Iteration  23: 132151.332 ops/s
Iteration  24: 132196.599 ops/s
Iteration  25: 132961.455 ops/s
Iteration  26: 133761.368 ops/s
Iteration  27: 132082.273 ops/s
Iteration  28: 131515.027 ops/s
Iteration  29: 132971.524 ops/s
Iteration  30: 134106.465 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_flatMap_execute":
  132823.096 ±(99.9%) 630.633 ops/s [Average]
  (min, avg, max) = (130817.292, 132823.096, 134416.582), stdev = 943.901
  CI (99.9%): [132192.464, 133453.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_flatMap_execute  thrpt   30  132823.096 ± 630.633  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_map_enqueue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_map_enqueue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7494.770 ops/s
# Warmup Iteration   2: 13920.282 ops/s
# Warmup Iteration   3: 19086.982 ops/s
# Warmup Iteration   4: 19445.366 ops/s
# Warmup Iteration   5: 19713.025 ops/s
# Warmup Iteration   6: 24029.796 ops/s
# Warmup Iteration   7: 26996.256 ops/s
# Warmup Iteration   8: 27112.056 ops/s
# Warmup Iteration   9: 27279.821 ops/s
# Warmup Iteration  10: 27103.437 ops/s
# Warmup Iteration  11: 27554.315 ops/s
# Warmup Iteration  12: 27246.840 ops/s
# Warmup Iteration  13: 26937.272 ops/s
# Warmup Iteration  14: 26951.273 ops/s
# Warmup Iteration  15: 27115.726 ops/s
# Warmup Iteration  16: 27054.330 ops/s
# Warmup Iteration  17: 27966.343 ops/s
# Warmup Iteration  18: 27375.854 ops/s
# Warmup Iteration  19: 27859.708 ops/s
# Warmup Iteration  20: 27441.531 ops/s
# Warmup Iteration  21: 27616.531 ops/s
# Warmup Iteration  22: 27935.049 ops/s
# Warmup Iteration  23: 27887.936 ops/s
# Warmup Iteration  24: 27706.508 ops/s
# Warmup Iteration  25: 25970.694 ops/s
# Warmup Iteration  26: 20040.854 ops/s
# Warmup Iteration  27: 25339.725 ops/s
# Warmup Iteration  28: 27141.712 ops/s
# Warmup Iteration  29: 27464.997 ops/s
# Warmup Iteration  30: 27139.681 ops/s
Iteration   1: 26952.405 ops/s
Iteration   2: 27140.682 ops/s
Iteration   3: 27954.819 ops/s
Iteration   4: 27166.376 ops/s
Iteration   5: 27046.110 ops/s
Iteration   6: 27114.831 ops/s
Iteration   7: 26957.242 ops/s
Iteration   8: 26919.574 ops/s
Iteration   9: 26975.520 ops/s
Iteration  10: 26873.605 ops/s
Iteration  11: 26890.548 ops/s
Iteration  12: 27087.208 ops/s
Iteration  13: 27014.460 ops/s
Iteration  14: 27076.295 ops/s
Iteration  15: 27970.519 ops/s
Iteration  16: 27916.061 ops/s
Iteration  17: 27217.947 ops/s
Iteration  18: 26878.658 ops/s
Iteration  19: 27066.868 ops/s
Iteration  20: 27081.665 ops/s
Iteration  21: 27803.827 ops/s
Iteration  22: 27952.103 ops/s
Iteration  23: 27897.903 ops/s
Iteration  24: 27816.806 ops/s
Iteration  25: 27560.156 ops/s
Iteration  26: 27683.981 ops/s
Iteration  27: 27575.132 ops/s
Iteration  28: 27733.139 ops/s
Iteration  29: 27461.652 ops/s
Iteration  30: 27854.336 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_map_enqueue":
  27354.681 ±(99.9%) 269.728 ops/s [Average]
  (min, avg, max) = (26873.605, 27354.681, 27970.519), stdev = 403.717
  CI (99.9%): [27084.953, 27624.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_map_enqueue  thrpt   30  27354.681 ± 269.728  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_map_enqueue_mappingException$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_map_enqueue_mappingException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6921.909 ops/s
# Warmup Iteration   2: 15832.701 ops/s
# Warmup Iteration   3: 17582.775 ops/s
# Warmup Iteration   4: 17179.735 ops/s
# Warmup Iteration   5: 17682.373 ops/s
# Warmup Iteration   6: 21437.280 ops/s
# Warmup Iteration   7: 24404.347 ops/s
# Warmup Iteration   8: 24328.176 ops/s
# Warmup Iteration   9: 24368.062 ops/s
# Warmup Iteration  10: 23598.182 ops/s
# Warmup Iteration  11: 24225.357 ops/s
# Warmup Iteration  12: 23915.237 ops/s
# Warmup Iteration  13: 24255.717 ops/s
# Warmup Iteration  14: 24114.751 ops/s
# Warmup Iteration  15: 24169.123 ops/s
# Warmup Iteration  16: 24280.079 ops/s
# Warmup Iteration  17: 23807.389 ops/s
# Warmup Iteration  18: 23886.515 ops/s
# Warmup Iteration  19: 24164.540 ops/s
# Warmup Iteration  20: 24687.687 ops/s
# Warmup Iteration  21: 24217.258 ops/s
# Warmup Iteration  22: 24190.301 ops/s
# Warmup Iteration  23: 24598.052 ops/s
# Warmup Iteration  24: 24662.335 ops/s
# Warmup Iteration  25: 24145.794 ops/s
# Warmup Iteration  26: 24307.961 ops/s
# Warmup Iteration  27: 19179.926 ops/s
# Warmup Iteration  28: 20898.504 ops/s
# Warmup Iteration  29: 24397.591 ops/s
# Warmup Iteration  30: 24740.093 ops/s
Iteration   1: 24747.876 ops/s
Iteration   2: 24599.611 ops/s
Iteration   3: 24743.204 ops/s
Iteration   4: 24822.824 ops/s
Iteration   5: 24361.509 ops/s
Iteration   6: 24699.155 ops/s
Iteration   7: 24701.760 ops/s
Iteration   8: 24214.878 ops/s
Iteration   9: 23920.156 ops/s
Iteration  10: 24486.939 ops/s
Iteration  11: 25010.592 ops/s
Iteration  12: 24834.981 ops/s
Iteration  13: 24738.232 ops/s
Iteration  14: 24591.705 ops/s
Iteration  15: 24972.184 ops/s
Iteration  16: 24944.923 ops/s
Iteration  17: 24841.658 ops/s
Iteration  18: 24628.746 ops/s
Iteration  19: 24588.185 ops/s
Iteration  20: 24251.013 ops/s
Iteration  21: 24727.166 ops/s
Iteration  22: 24301.441 ops/s
Iteration  23: 23893.237 ops/s
Iteration  24: 24035.607 ops/s
Iteration  25: 24255.778 ops/s
Iteration  26: 24540.060 ops/s
Iteration  27: 24803.421 ops/s
Iteration  28: 24533.528 ops/s
Iteration  29: 23921.672 ops/s
Iteration  30: 23844.085 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_map_enqueue_mappingException":
  24518.538 ±(99.9%) 228.688 ops/s [Average]
  (min, avg, max) = (23844.085, 24518.538, 25010.592), stdev = 342.290
  CI (99.9%): [24289.850, 24747.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_map_enqueue_mappingException  thrpt   30  24518.538 ± 228.688  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_map_execute$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_map_execute

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18742.382 ops/s
# Warmup Iteration   2: 49086.184 ops/s
# Warmup Iteration   3: 71562.554 ops/s
# Warmup Iteration   4: 93101.099 ops/s
# Warmup Iteration   5: 124930.713 ops/s
# Warmup Iteration   6: 124709.641 ops/s
# Warmup Iteration   7: 123271.456 ops/s
# Warmup Iteration   8: 124571.385 ops/s
# Warmup Iteration   9: 125570.303 ops/s
# Warmup Iteration  10: 123883.725 ops/s
# Warmup Iteration  11: 122722.528 ops/s
# Warmup Iteration  12: 123823.725 ops/s
# Warmup Iteration  13: 89383.400 ops/s
# Warmup Iteration  14: 115336.349 ops/s
# Warmup Iteration  15: 124597.488 ops/s
# Warmup Iteration  16: 128818.966 ops/s
# Warmup Iteration  17: 130376.480 ops/s
# Warmup Iteration  18: 129713.533 ops/s
# Warmup Iteration  19: 129511.452 ops/s
# Warmup Iteration  20: 129612.006 ops/s
# Warmup Iteration  21: 129086.363 ops/s
# Warmup Iteration  22: 129405.176 ops/s
# Warmup Iteration  23: 128692.790 ops/s
# Warmup Iteration  24: 128826.637 ops/s
# Warmup Iteration  25: 128495.923 ops/s
# Warmup Iteration  26: 129274.397 ops/s
# Warmup Iteration  27: 125541.920 ops/s
# Warmup Iteration  28: 127335.013 ops/s
# Warmup Iteration  29: 128416.736 ops/s
# Warmup Iteration  30: 126185.573 ops/s
Iteration   1: 127741.527 ops/s
Iteration   2: 126706.574 ops/s
Iteration   3: 126242.137 ops/s
Iteration   4: 126929.734 ops/s
Iteration   5: 128337.167 ops/s
Iteration   6: 128526.391 ops/s
Iteration   7: 127954.606 ops/s
Iteration   8: 128617.346 ops/s
Iteration   9: 128340.966 ops/s
Iteration  10: 128791.529 ops/s
Iteration  11: 129107.279 ops/s
Iteration  12: 129648.626 ops/s
Iteration  13: 128619.110 ops/s
Iteration  14: 130342.742 ops/s
Iteration  15: 130658.449 ops/s
Iteration  16: 129087.669 ops/s
Iteration  17: 127994.786 ops/s
Iteration  18: 128933.528 ops/s
Iteration  19: 128152.713 ops/s
Iteration  20: 129223.159 ops/s
Iteration  21: 128115.984 ops/s
Iteration  22: 128469.137 ops/s
Iteration  23: 128783.369 ops/s
Iteration  24: 129601.695 ops/s
Iteration  25: 129389.703 ops/s
Iteration  26: 129616.871 ops/s
Iteration  27: 129053.578 ops/s
Iteration  28: 128727.798 ops/s
Iteration  29: 128408.498 ops/s
Iteration  30: 129157.167 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_map_execute":
  128642.661 ±(99.9%) 640.621 ops/s [Average]
  (min, avg, max) = (126242.137, 128642.661, 130658.449), stdev = 958.852
  CI (99.9%): [128002.040, 129283.283] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
CallTest._Benchmark.benchmark_map_execute  thrpt   30  128642.661 ± 640.621  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onError$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onError

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6952.454 ops/s
# Warmup Iteration   2: 11845.993 ops/s
# Warmup Iteration   3: 16767.317 ops/s
# Warmup Iteration   4: 17962.551 ops/s
# Warmup Iteration   5: 18565.771 ops/s
# Warmup Iteration   6: 22324.332 ops/s
# Warmup Iteration   7: 25352.546 ops/s
# Warmup Iteration   8: 25504.322 ops/s
# Warmup Iteration   9: 25190.722 ops/s
# Warmup Iteration  10: 25353.765 ops/s
# Warmup Iteration  11: 25768.975 ops/s
# Warmup Iteration  12: 25525.095 ops/s
# Warmup Iteration  13: 25522.510 ops/s
# Warmup Iteration  14: 26031.010 ops/s
# Warmup Iteration  15: 25855.901 ops/s
# Warmup Iteration  16: 25811.527 ops/s
# Warmup Iteration  17: 25389.142 ops/s
# Warmup Iteration  18: 25494.330 ops/s
# Warmup Iteration  19: 25432.542 ops/s
# Warmup Iteration  20: 25986.231 ops/s
# Warmup Iteration  21: 25453.980 ops/s
# Warmup Iteration  22: 26081.244 ops/s
# Warmup Iteration  23: 25560.598 ops/s
# Warmup Iteration  24: 26224.805 ops/s
# Warmup Iteration  25: 22833.584 ops/s
# Warmup Iteration  26: 18750.557 ops/s
# Warmup Iteration  27: 25350.701 ops/s
# Warmup Iteration  28: 25990.224 ops/s
# Warmup Iteration  29: 26480.738 ops/s
# Warmup Iteration  30: 26674.445 ops/s
Iteration   1: 25885.659 ops/s
Iteration   2: 26017.171 ops/s
Iteration   3: 26387.494 ops/s
Iteration   4: 26196.589 ops/s
Iteration   5: 25711.444 ops/s
Iteration   6: 26330.129 ops/s
Iteration   7: 26300.371 ops/s
Iteration   8: 25936.608 ops/s
Iteration   9: 26213.433 ops/s
Iteration  10: 26458.420 ops/s
Iteration  11: 26279.512 ops/s
Iteration  12: 26273.077 ops/s
Iteration  13: 26407.821 ops/s
Iteration  14: 25531.468 ops/s
Iteration  15: 26476.086 ops/s
Iteration  16: 25836.952 ops/s
Iteration  17: 25870.098 ops/s
Iteration  18: 26068.753 ops/s
Iteration  19: 26107.838 ops/s
Iteration  20: 25787.806 ops/s
Iteration  21: 25906.593 ops/s
Iteration  22: 26179.521 ops/s
Iteration  23: 26398.066 ops/s
Iteration  24: 26037.836 ops/s
Iteration  25: 25813.380 ops/s
Iteration  26: 26053.208 ops/s
Iteration  27: 26356.212 ops/s
Iteration  28: 26332.668 ops/s
Iteration  29: 26375.205 ops/s
Iteration  30: 26235.645 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onError":
  26125.502 ±(99.9%) 167.108 ops/s [Average]
  (min, avg, max) = (25531.468, 26125.502, 26476.086), stdev = 250.120
  CI (99.9%): [25958.394, 26292.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onError  thrpt   30  26125.502 ± 167.108  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7338.220 ops/s
# Warmup Iteration   2: 12476.090 ops/s
# Warmup Iteration   3: 16277.715 ops/s
# Warmup Iteration   4: 16710.671 ops/s
# Warmup Iteration   5: 17564.230 ops/s
# Warmup Iteration   6: 20288.388 ops/s
# Warmup Iteration   7: 24932.643 ops/s
# Warmup Iteration   8: 24215.827 ops/s
# Warmup Iteration   9: 24722.121 ops/s
# Warmup Iteration  10: 24687.303 ops/s
# Warmup Iteration  11: 24843.301 ops/s
# Warmup Iteration  12: 24282.962 ops/s
# Warmup Iteration  13: 24199.217 ops/s
# Warmup Iteration  14: 24376.311 ops/s
# Warmup Iteration  15: 24638.997 ops/s
# Warmup Iteration  16: 24539.857 ops/s
# Warmup Iteration  17: 24937.093 ops/s
# Warmup Iteration  18: 24973.773 ops/s
# Warmup Iteration  19: 24505.122 ops/s
# Warmup Iteration  20: 24776.238 ops/s
# Warmup Iteration  21: 25044.307 ops/s
# Warmup Iteration  22: 24893.360 ops/s
# Warmup Iteration  23: 24475.591 ops/s
# Warmup Iteration  24: 24668.607 ops/s
# Warmup Iteration  25: 25132.797 ops/s
# Warmup Iteration  26: 20383.084 ops/s
# Warmup Iteration  27: 19543.688 ops/s
# Warmup Iteration  28: 24519.171 ops/s
# Warmup Iteration  29: 24486.112 ops/s
# Warmup Iteration  30: 25079.965 ops/s
Iteration   1: 25045.709 ops/s
Iteration   2: 24371.306 ops/s
Iteration   3: 24610.020 ops/s
Iteration   4: 25224.589 ops/s
Iteration   5: 25260.218 ops/s
Iteration   6: 25225.801 ops/s
Iteration   7: 25306.738 ops/s
Iteration   8: 25268.705 ops/s
Iteration   9: 25285.470 ops/s
Iteration  10: 25242.811 ops/s
Iteration  11: 24941.203 ops/s
Iteration  12: 24907.214 ops/s
Iteration  13: 24848.890 ops/s
Iteration  14: 24858.544 ops/s
Iteration  15: 25032.737 ops/s
Iteration  16: 25148.333 ops/s
Iteration  17: 24819.176 ops/s
Iteration  18: 24795.187 ops/s
Iteration  19: 24973.381 ops/s
Iteration  20: 25128.787 ops/s
Iteration  21: 25075.313 ops/s
Iteration  22: 25008.092 ops/s
Iteration  23: 24917.277 ops/s
Iteration  24: 24947.764 ops/s
Iteration  25: 24936.782 ops/s
Iteration  26: 24552.743 ops/s
Iteration  27: 24789.297 ops/s
Iteration  28: 24194.040 ops/s
Iteration  29: 24704.887 ops/s
Iteration  30: 24769.488 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess":
  24939.683 ±(99.9%) 181.476 ops/s [Average]
  (min, avg, max) = (24194.040, 24939.683, 25306.738), stdev = 271.625
  CI (99.9%): [24758.207, 25121.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess  thrpt   30  24939.683 ± 181.476  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess_null$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7140.830 ops/s
# Warmup Iteration   2: 12779.869 ops/s
# Warmup Iteration   3: 17603.117 ops/s
# Warmup Iteration   4: 18078.219 ops/s
# Warmup Iteration   5: 18746.953 ops/s
# Warmup Iteration   6: 24129.557 ops/s
# Warmup Iteration   7: 25604.375 ops/s
# Warmup Iteration   8: 25482.416 ops/s
# Warmup Iteration   9: 25623.046 ops/s
# Warmup Iteration  10: 25219.235 ops/s
# Warmup Iteration  11: 25727.373 ops/s
# Warmup Iteration  12: 25567.505 ops/s
# Warmup Iteration  13: 25355.544 ops/s
# Warmup Iteration  14: 25171.483 ops/s
# Warmup Iteration  15: 25628.465 ops/s
# Warmup Iteration  16: 25717.678 ops/s
# Warmup Iteration  17: 26473.983 ops/s
# Warmup Iteration  18: 26153.264 ops/s
# Warmup Iteration  19: 26168.202 ops/s
# Warmup Iteration  20: 26179.034 ops/s
# Warmup Iteration  21: 25386.483 ops/s
# Warmup Iteration  22: 25339.970 ops/s
# Warmup Iteration  23: 26081.936 ops/s
# Warmup Iteration  24: 23479.372 ops/s
# Warmup Iteration  25: 18867.296 ops/s
# Warmup Iteration  26: 25199.135 ops/s
# Warmup Iteration  27: 25957.190 ops/s
# Warmup Iteration  28: 26112.976 ops/s
# Warmup Iteration  29: 26084.955 ops/s
# Warmup Iteration  30: 25781.842 ops/s
Iteration   1: 25935.369 ops/s
Iteration   2: 25338.418 ops/s
Iteration   3: 25422.824 ops/s
Iteration   4: 25792.416 ops/s
Iteration   5: 26068.944 ops/s
Iteration   6: 26144.889 ops/s
Iteration   7: 26026.852 ops/s
Iteration   8: 25978.839 ops/s
Iteration   9: 25973.378 ops/s
Iteration  10: 25952.405 ops/s
Iteration  11: 25930.057 ops/s
Iteration  12: 25883.152 ops/s
Iteration  13: 25926.563 ops/s
Iteration  14: 25614.525 ops/s
Iteration  15: 25738.057 ops/s
Iteration  16: 26215.287 ops/s
Iteration  17: 26046.795 ops/s
Iteration  18: 25773.372 ops/s
Iteration  19: 26094.795 ops/s
Iteration  20: 25959.030 ops/s
Iteration  21: 25328.981 ops/s
Iteration  22: 25348.578 ops/s
Iteration  23: 25916.703 ops/s
Iteration  24: 25241.325 ops/s
Iteration  25: 25142.839 ops/s
Iteration  26: 25301.443 ops/s
Iteration  27: 25103.829 ops/s
Iteration  28: 25149.136 ops/s
Iteration  29: 25688.922 ops/s
Iteration  30: 25887.079 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess_null":
  25730.827 ±(99.9%) 226.823 ops/s [Average]
  (min, avg, max) = (25103.829, 25730.827, 26215.287), stdev = 339.499
  CI (99.9%): [25504.003, 25957.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_onErrorReturn_enqueue_onSuccess_null  thrpt   30  25730.827 ± 226.823  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onError$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onError

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17091.330 ops/s
# Warmup Iteration   2: 48371.529 ops/s
# Warmup Iteration   3: 53926.097 ops/s
# Warmup Iteration   4: 54319.795 ops/s
# Warmup Iteration   5: 88917.315 ops/s
# Warmup Iteration   6: 89169.914 ops/s
# Warmup Iteration   7: 88403.886 ops/s
# Warmup Iteration   8: 90151.260 ops/s
# Warmup Iteration   9: 91224.905 ops/s
# Warmup Iteration  10: 91128.060 ops/s
# Warmup Iteration  11: 91006.319 ops/s
# Warmup Iteration  12: 89787.930 ops/s
# Warmup Iteration  13: 88839.267 ops/s
# Warmup Iteration  14: 89101.037 ops/s
# Warmup Iteration  15: 90975.723 ops/s
# Warmup Iteration  16: 67465.519 ops/s
# Warmup Iteration  17: 78944.715 ops/s
# Warmup Iteration  18: 93558.599 ops/s
# Warmup Iteration  19: 92593.777 ops/s
# Warmup Iteration  20: 93075.633 ops/s
# Warmup Iteration  21: 92954.604 ops/s
# Warmup Iteration  22: 93405.549 ops/s
# Warmup Iteration  23: 92869.506 ops/s
# Warmup Iteration  24: 91570.087 ops/s
# Warmup Iteration  25: 93170.844 ops/s
# Warmup Iteration  26: 92178.099 ops/s
# Warmup Iteration  27: 90912.204 ops/s
# Warmup Iteration  28: 93244.945 ops/s
# Warmup Iteration  29: 93088.525 ops/s
# Warmup Iteration  30: 93367.121 ops/s
Iteration   1: 93487.458 ops/s
Iteration   2: 92806.888 ops/s
Iteration   3: 90078.695 ops/s
Iteration   4: 89657.365 ops/s
Iteration   5: 91979.845 ops/s
Iteration   6: 91699.459 ops/s
Iteration   7: 91599.820 ops/s
Iteration   8: 90706.088 ops/s
Iteration   9: 91102.034 ops/s
Iteration  10: 92501.018 ops/s
Iteration  11: 92183.862 ops/s
Iteration  12: 92431.862 ops/s
Iteration  13: 92360.648 ops/s
Iteration  14: 92402.029 ops/s
Iteration  15: 92202.536 ops/s
Iteration  16: 92646.886 ops/s
Iteration  17: 90657.539 ops/s
Iteration  18: 90561.054 ops/s
Iteration  19: 89894.824 ops/s
Iteration  20: 93315.240 ops/s
Iteration  21: 93829.753 ops/s
Iteration  22: 91403.105 ops/s
Iteration  23: 91229.836 ops/s
Iteration  24: 93049.205 ops/s
Iteration  25: 92891.107 ops/s
Iteration  26: 89961.521 ops/s
Iteration  27: 91875.080 ops/s
Iteration  28: 93096.204 ops/s
Iteration  29: 93270.972 ops/s
Iteration  30: 92835.805 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onError":
  91923.925 ±(99.9%) 782.071 ops/s [Average]
  (min, avg, max) = (89657.365, 91923.925, 93829.753), stdev = 1170.567
  CI (99.9%): [91141.854, 92705.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_onErrorReturn_execute_onError  thrpt   30  91923.925 ± 782.071  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15663.131 ops/s
# Warmup Iteration   2: 46668.512 ops/s
# Warmup Iteration   3: 55732.142 ops/s
# Warmup Iteration   4: 59388.232 ops/s
# Warmup Iteration   5: 88313.768 ops/s
# Warmup Iteration   6: 89718.551 ops/s
# Warmup Iteration   7: 92782.268 ops/s
# Warmup Iteration   8: 93409.889 ops/s
# Warmup Iteration   9: 93170.262 ops/s
# Warmup Iteration  10: 90711.991 ops/s
# Warmup Iteration  11: 91064.399 ops/s
# Warmup Iteration  12: 93685.016 ops/s
# Warmup Iteration  13: 93924.145 ops/s
# Warmup Iteration  14: 94611.413 ops/s
# Warmup Iteration  15: 88252.227 ops/s
# Warmup Iteration  16: 66827.568 ops/s
# Warmup Iteration  17: 95696.754 ops/s
# Warmup Iteration  18: 94746.058 ops/s
# Warmup Iteration  19: 94412.629 ops/s
# Warmup Iteration  20: 96580.469 ops/s
# Warmup Iteration  21: 94440.442 ops/s
# Warmup Iteration  22: 95712.483 ops/s
# Warmup Iteration  23: 96189.630 ops/s
# Warmup Iteration  24: 96263.668 ops/s
# Warmup Iteration  25: 95315.396 ops/s
# Warmup Iteration  26: 95376.020 ops/s
# Warmup Iteration  27: 96766.450 ops/s
# Warmup Iteration  28: 95846.733 ops/s
# Warmup Iteration  29: 96152.786 ops/s
# Warmup Iteration  30: 96365.537 ops/s
Iteration   1: 96663.060 ops/s
Iteration   2: 96619.640 ops/s
Iteration   3: 96230.679 ops/s
Iteration   4: 96410.137 ops/s
Iteration   5: 96754.271 ops/s
Iteration   6: 96463.530 ops/s
Iteration   7: 96065.985 ops/s
Iteration   8: 97733.717 ops/s
Iteration   9: 96553.180 ops/s
Iteration  10: 94206.127 ops/s
Iteration  11: 94658.398 ops/s
Iteration  12: 96947.766 ops/s
Iteration  13: 97094.739 ops/s
Iteration  14: 96268.881 ops/s
Iteration  15: 93943.185 ops/s
Iteration  16: 97475.924 ops/s
Iteration  17: 96936.698 ops/s
Iteration  18: 95462.025 ops/s
Iteration  19: 95945.259 ops/s
Iteration  20: 96219.937 ops/s
Iteration  21: 95040.329 ops/s
Iteration  22: 95105.818 ops/s
Iteration  23: 94629.574 ops/s
Iteration  24: 95890.969 ops/s
Iteration  25: 93660.326 ops/s
Iteration  26: 94636.410 ops/s
Iteration  27: 96736.952 ops/s
Iteration  28: 95244.568 ops/s
Iteration  29: 95682.013 ops/s
Iteration  30: 96998.268 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess":
  95942.612 ±(99.9%) 712.868 ops/s [Average]
  (min, avg, max) = (93660.326, 95942.612, 97733.717), stdev = 1066.988
  CI (99.9%): [95229.744, 96655.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess  thrpt   30  95942.612 ± 712.868  ops/s
----------------------------------------
=== Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess_null$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15921.377 ops/s
# Warmup Iteration   2: 42419.064 ops/s
# Warmup Iteration   3: 52291.271 ops/s
# Warmup Iteration   4: 52437.292 ops/s
# Warmup Iteration   5: 81256.555 ops/s
# Warmup Iteration   6: 85951.317 ops/s
# Warmup Iteration   7: 83662.014 ops/s
# Warmup Iteration   8: 83515.155 ops/s
# Warmup Iteration   9: 83418.367 ops/s
# Warmup Iteration  10: 84711.173 ops/s
# Warmup Iteration  11: 83369.591 ops/s
# Warmup Iteration  12: 81667.130 ops/s
# Warmup Iteration  13: 80607.854 ops/s
# Warmup Iteration  14: 83672.958 ops/s
# Warmup Iteration  15: 85206.507 ops/s
# Warmup Iteration  16: 84648.757 ops/s
# Warmup Iteration  17: 57128.897 ops/s
# Warmup Iteration  18: 82376.254 ops/s
# Warmup Iteration  19: 84854.594 ops/s
# Warmup Iteration  20: 85306.131 ops/s
# Warmup Iteration  21: 85134.739 ops/s
# Warmup Iteration  22: 86302.302 ops/s
# Warmup Iteration  23: 85825.781 ops/s
# Warmup Iteration  24: 84792.466 ops/s
# Warmup Iteration  25: 84508.525 ops/s
# Warmup Iteration  26: 85371.781 ops/s
# Warmup Iteration  27: 86935.859 ops/s
# Warmup Iteration  28: 85539.844 ops/s
# Warmup Iteration  29: 85784.849 ops/s
# Warmup Iteration  30: 85831.471 ops/s
Iteration   1: 86294.150 ops/s
Iteration   2: 86956.739 ops/s
Iteration   3: 87061.819 ops/s
Iteration   4: 86656.029 ops/s
Iteration   5: 86675.805 ops/s
Iteration   6: 86672.996 ops/s
Iteration   7: 82983.229 ops/s
Iteration   8: 82813.456 ops/s
Iteration   9: 82425.047 ops/s
Iteration  10: 82373.773 ops/s
Iteration  11: 83022.434 ops/s
Iteration  12: 82796.168 ops/s
Iteration  13: 82619.856 ops/s
Iteration  14: 87814.211 ops/s
Iteration  15: 87817.385 ops/s
Iteration  16: 83880.302 ops/s
Iteration  17: 84176.208 ops/s
Iteration  18: 85073.701 ops/s
Iteration  19: 85607.222 ops/s
Iteration  20: 85369.562 ops/s
Iteration  21: 86044.486 ops/s
Iteration  22: 85446.552 ops/s
Iteration  23: 85238.868 ops/s
Iteration  24: 85332.260 ops/s
Iteration  25: 84633.368 ops/s
Iteration  26: 85020.669 ops/s
Iteration  27: 86095.683 ops/s
Iteration  28: 85179.672 ops/s
Iteration  29: 85335.881 ops/s
Iteration  30: 85659.286 ops/s


Result "zipkin2.CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess_null":
  85102.561 ±(99.9%) 1083.503 ops/s [Average]
  (min, avg, max) = (82373.773, 85102.561, 87817.385), stdev = 1621.736
  CI (99.9%): [84019.058, 86186.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score      Error  Units
CallTest._Benchmark.benchmark_onErrorReturn_execute_onSuccess_null  thrpt   30  85102.561 ± 1083.503  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_coercesZeroPortToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_coercesZeroPortToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 390791.977 ops/s
# Warmup Iteration   2: 443306.061 ops/s
# Warmup Iteration   3: 913493.752 ops/s
# Warmup Iteration   4: 900557.820 ops/s
# Warmup Iteration   5: 919839.837 ops/s
# Warmup Iteration   6: 919637.898 ops/s
# Warmup Iteration   7: 923273.254 ops/s
# Warmup Iteration   8: 719268.775 ops/s
# Warmup Iteration   9: 819584.834 ops/s
# Warmup Iteration  10: 912615.609 ops/s
# Warmup Iteration  11: 917314.667 ops/s
# Warmup Iteration  12: 914839.430 ops/s
# Warmup Iteration  13: 916647.887 ops/s
# Warmup Iteration  14: 914543.413 ops/s
# Warmup Iteration  15: 915458.592 ops/s
# Warmup Iteration  16: 915678.524 ops/s
# Warmup Iteration  17: 918412.583 ops/s
# Warmup Iteration  18: 922242.124 ops/s
# Warmup Iteration  19: 920227.492 ops/s
# Warmup Iteration  20: 922968.617 ops/s
# Warmup Iteration  21: 919853.403 ops/s
# Warmup Iteration  22: 923243.403 ops/s
# Warmup Iteration  23: 919934.080 ops/s
# Warmup Iteration  24: 916858.417 ops/s
# Warmup Iteration  25: 920947.529 ops/s
# Warmup Iteration  26: 921285.613 ops/s
# Warmup Iteration  27: 920461.319 ops/s
# Warmup Iteration  28: 918638.261 ops/s
# Warmup Iteration  29: 916198.268 ops/s
# Warmup Iteration  30: 918526.124 ops/s
Iteration   1: 914342.676 ops/s
Iteration   2: 918615.908 ops/s
Iteration   3: 921434.864 ops/s
Iteration   4: 921039.937 ops/s
Iteration   5: 920420.640 ops/s
Iteration   6: 923048.991 ops/s
Iteration   7: 919951.438 ops/s
Iteration   8: 922247.500 ops/s
Iteration   9: 921293.957 ops/s
Iteration  10: 920219.313 ops/s
Iteration  11: 913398.105 ops/s
Iteration  12: 919107.516 ops/s
Iteration  13: 920394.454 ops/s
Iteration  14: 919440.123 ops/s
Iteration  15: 918114.317 ops/s
Iteration  16: 922733.778 ops/s
Iteration  17: 914202.317 ops/s
Iteration  18: 919251.184 ops/s
Iteration  19: 920879.529 ops/s
Iteration  20: 922217.437 ops/s
Iteration  21: 922658.793 ops/s
Iteration  22: 921865.586 ops/s
Iteration  23: 921142.394 ops/s
Iteration  24: 921872.437 ops/s
Iteration  25: 922781.640 ops/s
Iteration  26: 922723.244 ops/s
Iteration  27: 919358.275 ops/s
Iteration  28: 920280.747 ops/s
Iteration  29: 920596.340 ops/s
Iteration  30: 922503.751 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_coercesZeroPortToNull":
  920271.240 ±(99.9%) 1685.087 ops/s [Average]
  (min, avg, max) = (913398.105, 920271.240, 923048.991), stdev = 2522.158
  CI (99.9%): [918586.153, 921956.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_coercesZeroPortToNull  thrpt   30  920271.240 ± 1685.087  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_addr_ipv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_addr_ipv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120232.670 ops/s
# Warmup Iteration   2: 148919.813 ops/s
# Warmup Iteration   3: 204760.073 ops/s
# Warmup Iteration   4: 258492.619 ops/s
# Warmup Iteration   5: 259763.616 ops/s
# Warmup Iteration   6: 256304.026 ops/s
# Warmup Iteration   7: 258918.545 ops/s
# Warmup Iteration   8: 258563.088 ops/s
# Warmup Iteration   9: 258850.603 ops/s
# Warmup Iteration  10: 258751.789 ops/s
# Warmup Iteration  11: 200429.331 ops/s
# Warmup Iteration  12: 235370.859 ops/s
# Warmup Iteration  13: 260113.380 ops/s
# Warmup Iteration  14: 259435.793 ops/s
# Warmup Iteration  15: 259370.096 ops/s
# Warmup Iteration  16: 260521.377 ops/s
# Warmup Iteration  17: 259169.549 ops/s
# Warmup Iteration  18: 260291.216 ops/s
# Warmup Iteration  19: 259915.247 ops/s
# Warmup Iteration  20: 260077.495 ops/s
# Warmup Iteration  21: 259727.634 ops/s
# Warmup Iteration  22: 259791.371 ops/s
# Warmup Iteration  23: 259082.416 ops/s
# Warmup Iteration  24: 259608.364 ops/s
# Warmup Iteration  25: 259418.278 ops/s
# Warmup Iteration  26: 259431.536 ops/s
# Warmup Iteration  27: 259815.237 ops/s
# Warmup Iteration  28: 259020.671 ops/s
# Warmup Iteration  29: 259941.782 ops/s
# Warmup Iteration  30: 260243.278 ops/s
Iteration   1: 259809.040 ops/s
Iteration   2: 258240.644 ops/s
Iteration   3: 258943.238 ops/s
Iteration   4: 259074.688 ops/s
Iteration   5: 260207.955 ops/s
Iteration   6: 259216.920 ops/s
Iteration   7: 260111.111 ops/s
Iteration   8: 258567.485 ops/s
Iteration   9: 258680.078 ops/s
Iteration  10: 259575.259 ops/s
Iteration  11: 258971.782 ops/s
Iteration  12: 259806.271 ops/s
Iteration  13: 259663.608 ops/s
Iteration  14: 259312.919 ops/s
Iteration  15: 259264.422 ops/s
Iteration  16: 258877.066 ops/s
Iteration  17: 260391.421 ops/s
Iteration  18: 260612.629 ops/s
Iteration  19: 260027.680 ops/s
Iteration  20: 258996.432 ops/s
Iteration  21: 259393.444 ops/s
Iteration  22: 258800.534 ops/s
Iteration  23: 259189.610 ops/s
Iteration  24: 258510.670 ops/s
Iteration  25: 258264.757 ops/s
Iteration  26: 259776.223 ops/s
Iteration  27: 257196.559 ops/s
Iteration  28: 258174.598 ops/s
Iteration  29: 258914.526 ops/s
Iteration  30: 259347.201 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_addr_ipv4":
  259197.292 ±(99.9%) 495.873 ops/s [Average]
  (min, avg, max) = (257196.559, 259197.292, 260612.629), stdev = 742.200
  CI (99.9%): [258701.419, 259693.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_addr_ipv4  thrpt   30  259197.292 ± 495.873  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_bytes_ipv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_bytes_ipv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122455.890 ops/s
# Warmup Iteration   2: 146387.524 ops/s
# Warmup Iteration   3: 203437.144 ops/s
# Warmup Iteration   4: 252341.578 ops/s
# Warmup Iteration   5: 253006.551 ops/s
# Warmup Iteration   6: 255915.580 ops/s
# Warmup Iteration   7: 254595.388 ops/s
# Warmup Iteration   8: 255491.490 ops/s
# Warmup Iteration   9: 256410.092 ops/s
# Warmup Iteration  10: 253667.141 ops/s
# Warmup Iteration  11: 178164.643 ops/s
# Warmup Iteration  12: 251346.721 ops/s
# Warmup Iteration  13: 254677.969 ops/s
# Warmup Iteration  14: 255955.207 ops/s
# Warmup Iteration  15: 253312.325 ops/s
# Warmup Iteration  16: 255591.716 ops/s
# Warmup Iteration  17: 256001.403 ops/s
# Warmup Iteration  18: 255426.272 ops/s
# Warmup Iteration  19: 253889.192 ops/s
# Warmup Iteration  20: 255331.146 ops/s
# Warmup Iteration  21: 255009.241 ops/s
# Warmup Iteration  22: 255146.429 ops/s
# Warmup Iteration  23: 254997.313 ops/s
# Warmup Iteration  24: 253434.780 ops/s
# Warmup Iteration  25: 255845.742 ops/s
# Warmup Iteration  26: 253037.984 ops/s
# Warmup Iteration  27: 253285.399 ops/s
# Warmup Iteration  28: 253489.462 ops/s
# Warmup Iteration  29: 253688.645 ops/s
# Warmup Iteration  30: 253447.611 ops/s
Iteration   1: 254070.794 ops/s
Iteration   2: 255690.084 ops/s
Iteration   3: 254032.888 ops/s
Iteration   4: 254856.103 ops/s
Iteration   5: 251914.166 ops/s
Iteration   6: 256219.325 ops/s
Iteration   7: 257061.566 ops/s
Iteration   8: 253943.293 ops/s
Iteration   9: 253861.099 ops/s
Iteration  10: 253530.282 ops/s
Iteration  11: 254598.189 ops/s
Iteration  12: 254244.877 ops/s
Iteration  13: 254754.226 ops/s
Iteration  14: 253327.428 ops/s
Iteration  15: 254469.845 ops/s
Iteration  16: 253652.311 ops/s
Iteration  17: 253897.069 ops/s
Iteration  18: 254986.499 ops/s
Iteration  19: 254602.591 ops/s
Iteration  20: 255879.795 ops/s
Iteration  21: 256357.894 ops/s
Iteration  22: 254908.512 ops/s
Iteration  23: 255302.797 ops/s
Iteration  24: 255318.714 ops/s
Iteration  25: 256371.212 ops/s
Iteration  26: 254861.875 ops/s
Iteration  27: 255766.399 ops/s
Iteration  28: 254768.261 ops/s
Iteration  29: 252848.777 ops/s
Iteration  30: 255520.278 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_bytes_ipv4":
  254720.572 ±(99.9%) 755.741 ops/s [Average]
  (min, avg, max) = (251914.166, 254720.572, 257061.566), stdev = 1131.158
  CI (99.9%): [253964.830, 255476.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_bytes_ipv4  thrpt   30  254720.572 ± 755.741  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 233193.851 ops/s
# Warmup Iteration   2: 279440.539 ops/s
# Warmup Iteration   3: 478388.836 ops/s
# Warmup Iteration   4: 536588.730 ops/s
# Warmup Iteration   5: 529958.041 ops/s
# Warmup Iteration   6: 538222.064 ops/s
# Warmup Iteration   7: 539799.664 ops/s
# Warmup Iteration   8: 539752.770 ops/s
# Warmup Iteration   9: 457196.415 ops/s
# Warmup Iteration  10: 452498.159 ops/s
# Warmup Iteration  11: 540361.897 ops/s
# Warmup Iteration  12: 539937.404 ops/s
# Warmup Iteration  13: 539086.992 ops/s
# Warmup Iteration  14: 539500.736 ops/s
# Warmup Iteration  15: 539787.190 ops/s
# Warmup Iteration  16: 539514.943 ops/s
# Warmup Iteration  17: 535819.110 ops/s
# Warmup Iteration  18: 534375.903 ops/s
# Warmup Iteration  19: 532144.491 ops/s
# Warmup Iteration  20: 533838.088 ops/s
# Warmup Iteration  21: 535172.940 ops/s
# Warmup Iteration  22: 533727.929 ops/s
# Warmup Iteration  23: 531769.144 ops/s
# Warmup Iteration  24: 532089.377 ops/s
# Warmup Iteration  25: 535355.829 ops/s
# Warmup Iteration  26: 532339.466 ops/s
# Warmup Iteration  27: 531774.526 ops/s
# Warmup Iteration  28: 534578.296 ops/s
# Warmup Iteration  29: 533781.270 ops/s
# Warmup Iteration  30: 532062.054 ops/s
Iteration   1: 531008.581 ops/s
Iteration   2: 533469.107 ops/s
Iteration   3: 531581.292 ops/s
Iteration   4: 530319.659 ops/s
Iteration   5: 531100.939 ops/s
Iteration   6: 532946.030 ops/s
Iteration   7: 535982.855 ops/s
Iteration   8: 535154.399 ops/s
Iteration   9: 533907.845 ops/s
Iteration  10: 537102.846 ops/s
Iteration  11: 536372.189 ops/s
Iteration  12: 532611.755 ops/s
Iteration  13: 529390.107 ops/s
Iteration  14: 533159.216 ops/s
Iteration  15: 534650.082 ops/s
Iteration  16: 536544.431 ops/s
Iteration  17: 535268.150 ops/s
Iteration  18: 535214.196 ops/s
Iteration  19: 534129.319 ops/s
Iteration  20: 533575.595 ops/s
Iteration  21: 534667.718 ops/s
Iteration  22: 534672.934 ops/s
Iteration  23: 534052.130 ops/s
Iteration  24: 536277.251 ops/s
Iteration  25: 533857.545 ops/s
Iteration  26: 531132.367 ops/s
Iteration  27: 534880.294 ops/s
Iteration  28: 530798.723 ops/s
Iteration  29: 532317.769 ops/s
Iteration  30: 535851.335 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6":
  533733.222 ±(99.9%) 1371.505 ops/s [Average]
  (min, avg, max) = (529390.107, 533733.222, 537102.846), stdev = 2052.805
  CI (99.9%): [532361.717, 535104.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6  thrpt   30  533733.222 ± 1371.505  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241615.364 ops/s
# Warmup Iteration   2: 290026.150 ops/s
# Warmup Iteration   3: 490552.402 ops/s
# Warmup Iteration   4: 550179.917 ops/s
# Warmup Iteration   5: 545724.687 ops/s
# Warmup Iteration   6: 553324.807 ops/s
# Warmup Iteration   7: 550281.239 ops/s
# Warmup Iteration   8: 548894.545 ops/s
# Warmup Iteration   9: 462295.277 ops/s
# Warmup Iteration  10: 463551.336 ops/s
# Warmup Iteration  11: 554328.427 ops/s
# Warmup Iteration  12: 554954.517 ops/s
# Warmup Iteration  13: 553960.573 ops/s
# Warmup Iteration  14: 552428.426 ops/s
# Warmup Iteration  15: 554325.017 ops/s
# Warmup Iteration  16: 554582.381 ops/s
# Warmup Iteration  17: 552633.950 ops/s
# Warmup Iteration  18: 553193.127 ops/s
# Warmup Iteration  19: 550770.813 ops/s
# Warmup Iteration  20: 553190.637 ops/s
# Warmup Iteration  21: 552803.386 ops/s
# Warmup Iteration  22: 551571.666 ops/s
# Warmup Iteration  23: 551714.481 ops/s
# Warmup Iteration  24: 552187.877 ops/s
# Warmup Iteration  25: 550639.411 ops/s
# Warmup Iteration  26: 551931.212 ops/s
# Warmup Iteration  27: 551877.300 ops/s
# Warmup Iteration  28: 550799.024 ops/s
# Warmup Iteration  29: 550444.868 ops/s
# Warmup Iteration  30: 550677.147 ops/s
Iteration   1: 552587.810 ops/s
Iteration   2: 552966.366 ops/s
Iteration   3: 551706.982 ops/s
Iteration   4: 554218.058 ops/s
Iteration   5: 551629.474 ops/s
Iteration   6: 552674.571 ops/s
Iteration   7: 552526.555 ops/s
Iteration   8: 551074.618 ops/s
Iteration   9: 552878.554 ops/s
Iteration  10: 551875.642 ops/s
Iteration  11: 550615.664 ops/s
Iteration  12: 548182.741 ops/s
Iteration  13: 550642.015 ops/s
Iteration  14: 552875.090 ops/s
Iteration  15: 550672.727 ops/s
Iteration  16: 552810.259 ops/s
Iteration  17: 550605.177 ops/s
Iteration  18: 553211.365 ops/s
Iteration  19: 552769.277 ops/s
Iteration  20: 551511.020 ops/s
Iteration  21: 552283.123 ops/s
Iteration  22: 551805.603 ops/s
Iteration  23: 550344.485 ops/s
Iteration  24: 551751.634 ops/s
Iteration  25: 551194.374 ops/s
Iteration  26: 551421.982 ops/s
Iteration  27: 550738.091 ops/s
Iteration  28: 549344.182 ops/s
Iteration  29: 550662.642 ops/s
Iteration  30: 552774.021 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr":
  551678.470 ±(99.9%) 845.044 ops/s [Average]
  (min, avg, max) = (548182.741, 551678.470, 554218.058), stdev = 1264.823
  CI (99.9%): [550833.426, 552523.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6_addr  thrpt   30  551678.470 ± 845.044  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr_compatIpv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr_compatIpv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107972.756 ops/s
# Warmup Iteration   2: 133174.031 ops/s
# Warmup Iteration   3: 182376.371 ops/s
# Warmup Iteration   4: 250424.245 ops/s
# Warmup Iteration   5: 252378.896 ops/s
# Warmup Iteration   6: 250937.399 ops/s
# Warmup Iteration   7: 250742.159 ops/s
# Warmup Iteration   8: 250836.771 ops/s
# Warmup Iteration   9: 251994.858 ops/s
# Warmup Iteration  10: 252435.947 ops/s
# Warmup Iteration  11: 163395.809 ops/s
# Warmup Iteration  12: 250909.090 ops/s
# Warmup Iteration  13: 251320.547 ops/s
# Warmup Iteration  14: 250655.855 ops/s
# Warmup Iteration  15: 250884.698 ops/s
# Warmup Iteration  16: 251103.886 ops/s
# Warmup Iteration  17: 251091.672 ops/s
# Warmup Iteration  18: 250856.869 ops/s
# Warmup Iteration  19: 251693.975 ops/s
# Warmup Iteration  20: 250977.887 ops/s
# Warmup Iteration  21: 250134.557 ops/s
# Warmup Iteration  22: 250103.927 ops/s
# Warmup Iteration  23: 250225.480 ops/s
# Warmup Iteration  24: 251083.407 ops/s
# Warmup Iteration  25: 250603.467 ops/s
# Warmup Iteration  26: 251459.831 ops/s
# Warmup Iteration  27: 250853.545 ops/s
# Warmup Iteration  28: 250585.769 ops/s
# Warmup Iteration  29: 250621.922 ops/s
# Warmup Iteration  30: 250151.470 ops/s
Iteration   1: 251066.732 ops/s
Iteration   2: 250466.135 ops/s
Iteration   3: 250905.198 ops/s
Iteration   4: 251875.467 ops/s
Iteration   5: 250969.001 ops/s
Iteration   6: 251388.201 ops/s
Iteration   7: 251835.849 ops/s
Iteration   8: 251798.240 ops/s
Iteration   9: 251176.661 ops/s
Iteration  10: 251868.615 ops/s
Iteration  11: 251572.525 ops/s
Iteration  12: 251660.558 ops/s
Iteration  13: 250747.218 ops/s
Iteration  14: 250454.359 ops/s
Iteration  15: 250935.263 ops/s
Iteration  16: 250903.685 ops/s
Iteration  17: 251068.401 ops/s
Iteration  18: 251893.084 ops/s
Iteration  19: 252554.266 ops/s
Iteration  20: 252572.380 ops/s
Iteration  21: 252359.054 ops/s
Iteration  22: 252308.087 ops/s
Iteration  23: 251674.792 ops/s
Iteration  24: 251048.554 ops/s
Iteration  25: 251378.238 ops/s
Iteration  26: 250705.938 ops/s
Iteration  27: 250946.878 ops/s
Iteration  28: 250123.386 ops/s
Iteration  29: 250081.116 ops/s
Iteration  30: 250670.893 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr_compatIpv4":
  251300.292 ±(99.9%) 454.691 ops/s [Average]
  (min, avg, max) = (250081.116, 251300.292, 252572.380), stdev = 680.561
  CI (99.9%): [250845.601, 251754.984] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6_addr_compatIpv4  thrpt   30  251300.292 ± 454.691  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr_mappedIpv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr_mappedIpv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 111873.184 ops/s
# Warmup Iteration   2: 140465.587 ops/s
# Warmup Iteration   3: 200910.543 ops/s
# Warmup Iteration   4: 250653.495 ops/s
# Warmup Iteration   5: 250776.154 ops/s
# Warmup Iteration   6: 249963.939 ops/s
# Warmup Iteration   7: 250464.088 ops/s
# Warmup Iteration   8: 250080.215 ops/s
# Warmup Iteration   9: 251594.293 ops/s
# Warmup Iteration  10: 252111.771 ops/s
# Warmup Iteration  11: 172604.274 ops/s
# Warmup Iteration  12: 252792.822 ops/s
# Warmup Iteration  13: 252163.033 ops/s
# Warmup Iteration  14: 252626.596 ops/s
# Warmup Iteration  15: 251842.941 ops/s
# Warmup Iteration  16: 252365.100 ops/s
# Warmup Iteration  17: 251501.502 ops/s
# Warmup Iteration  18: 251380.873 ops/s
# Warmup Iteration  19: 252854.860 ops/s
# Warmup Iteration  20: 251427.516 ops/s
# Warmup Iteration  21: 253041.539 ops/s
# Warmup Iteration  22: 252581.703 ops/s
# Warmup Iteration  23: 250945.952 ops/s
# Warmup Iteration  24: 251534.773 ops/s
# Warmup Iteration  25: 251240.226 ops/s
# Warmup Iteration  26: 252945.243 ops/s
# Warmup Iteration  27: 252789.887 ops/s
# Warmup Iteration  28: 251778.530 ops/s
# Warmup Iteration  29: 251321.206 ops/s
# Warmup Iteration  30: 251454.235 ops/s
Iteration   1: 251541.096 ops/s
Iteration   2: 250937.234 ops/s
Iteration   3: 251955.346 ops/s
Iteration   4: 251242.248 ops/s
Iteration   5: 251587.374 ops/s
Iteration   6: 251367.202 ops/s
Iteration   7: 250982.110 ops/s
Iteration   8: 249995.380 ops/s
Iteration   9: 250540.471 ops/s
Iteration  10: 250479.693 ops/s
Iteration  11: 249937.122 ops/s
Iteration  12: 250906.696 ops/s
Iteration  13: 251257.371 ops/s
Iteration  14: 251315.444 ops/s
Iteration  15: 251398.344 ops/s
Iteration  16: 251089.017 ops/s
Iteration  17: 250269.284 ops/s
Iteration  18: 251278.350 ops/s
Iteration  19: 251921.781 ops/s
Iteration  20: 251916.930 ops/s
Iteration  21: 250443.649 ops/s
Iteration  22: 251962.329 ops/s
Iteration  23: 250773.541 ops/s
Iteration  24: 250774.649 ops/s
Iteration  25: 251415.453 ops/s
Iteration  26: 251293.709 ops/s
Iteration  27: 251533.818 ops/s
Iteration  28: 250680.770 ops/s
Iteration  29: 249969.463 ops/s
Iteration  30: 250599.037 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_addr_mappedIpv4":
  251045.497 ±(99.9%) 395.380 ops/s [Average]
  (min, avg, max) = (249937.122, 251045.497, 251962.329), stdev = 591.786
  CI (99.9%): [250650.117, 251440.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6_addr_mappedIpv4  thrpt   30  251045.497 ± 395.380  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125737.577 ops/s
# Warmup Iteration   2: 150794.315 ops/s
# Warmup Iteration   3: 211422.414 ops/s
# Warmup Iteration   4: 265554.100 ops/s
# Warmup Iteration   5: 264107.570 ops/s
# Warmup Iteration   6: 264693.210 ops/s
# Warmup Iteration   7: 266194.317 ops/s
# Warmup Iteration   8: 265894.150 ops/s
# Warmup Iteration   9: 264431.005 ops/s
# Warmup Iteration  10: 266061.910 ops/s
# Warmup Iteration  11: 185057.342 ops/s
# Warmup Iteration  12: 256446.974 ops/s
# Warmup Iteration  13: 263013.032 ops/s
# Warmup Iteration  14: 263388.258 ops/s
# Warmup Iteration  15: 263201.426 ops/s
# Warmup Iteration  16: 263126.652 ops/s
# Warmup Iteration  17: 263909.391 ops/s
# Warmup Iteration  18: 263795.872 ops/s
# Warmup Iteration  19: 262968.573 ops/s
# Warmup Iteration  20: 263447.819 ops/s
# Warmup Iteration  21: 263033.372 ops/s
# Warmup Iteration  22: 263515.496 ops/s
# Warmup Iteration  23: 263878.676 ops/s
# Warmup Iteration  24: 263204.655 ops/s
# Warmup Iteration  25: 263853.923 ops/s
# Warmup Iteration  26: 263697.570 ops/s
# Warmup Iteration  27: 262666.839 ops/s
# Warmup Iteration  28: 263746.381 ops/s
# Warmup Iteration  29: 262866.270 ops/s
# Warmup Iteration  30: 263186.405 ops/s
Iteration   1: 262957.352 ops/s
Iteration   2: 259116.243 ops/s
Iteration   3: 264316.925 ops/s
Iteration   4: 263528.584 ops/s
Iteration   5: 263532.739 ops/s
Iteration   6: 265001.888 ops/s
Iteration   7: 263503.491 ops/s
Iteration   8: 262656.299 ops/s
Iteration   9: 262195.964 ops/s
Iteration  10: 263224.706 ops/s
Iteration  11: 262708.879 ops/s
Iteration  12: 261984.423 ops/s
Iteration  13: 262909.418 ops/s
Iteration  14: 263150.645 ops/s
Iteration  15: 263946.881 ops/s
Iteration  16: 263847.375 ops/s
Iteration  17: 264366.416 ops/s
Iteration  18: 264710.474 ops/s
Iteration  19: 263873.156 ops/s
Iteration  20: 264681.426 ops/s
Iteration  21: 264175.083 ops/s
Iteration  22: 263336.206 ops/s
Iteration  23: 263472.205 ops/s
Iteration  24: 263796.717 ops/s
Iteration  25: 262712.222 ops/s
Iteration  26: 262973.604 ops/s
Iteration  27: 263080.764 ops/s
Iteration  28: 263290.594 ops/s
Iteration  29: 263562.814 ops/s
Iteration  30: 262859.508 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4":
  263315.767 ±(99.9%) 717.807 ops/s [Average]
  (min, avg, max) = (259116.243, 263315.767, 265001.888), stdev = 1074.379
  CI (99.9%): [262597.960, 264033.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4  thrpt   30  263315.767 ± 717.807  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4_compressed$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4_compressed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121617.910 ops/s
# Warmup Iteration   2: 146618.479 ops/s
# Warmup Iteration   3: 205430.139 ops/s
# Warmup Iteration   4: 258947.160 ops/s
# Warmup Iteration   5: 256919.708 ops/s
# Warmup Iteration   6: 257676.223 ops/s
# Warmup Iteration   7: 260980.670 ops/s
# Warmup Iteration   8: 261057.119 ops/s
# Warmup Iteration   9: 258954.042 ops/s
# Warmup Iteration  10: 262776.234 ops/s
# Warmup Iteration  11: 200534.149 ops/s
# Warmup Iteration  12: 238527.047 ops/s
# Warmup Iteration  13: 257161.934 ops/s
# Warmup Iteration  14: 260012.225 ops/s
# Warmup Iteration  15: 261449.126 ops/s
# Warmup Iteration  16: 259123.966 ops/s
# Warmup Iteration  17: 259489.407 ops/s
# Warmup Iteration  18: 259653.299 ops/s
# Warmup Iteration  19: 261698.997 ops/s
# Warmup Iteration  20: 261065.106 ops/s
# Warmup Iteration  21: 261060.249 ops/s
# Warmup Iteration  22: 259212.470 ops/s
# Warmup Iteration  23: 261243.032 ops/s
# Warmup Iteration  24: 260121.192 ops/s
# Warmup Iteration  25: 260755.476 ops/s
# Warmup Iteration  26: 261762.367 ops/s
# Warmup Iteration  27: 258721.653 ops/s
# Warmup Iteration  28: 259361.103 ops/s
# Warmup Iteration  29: 259683.533 ops/s
# Warmup Iteration  30: 258348.485 ops/s
Iteration   1: 260457.254 ops/s
Iteration   2: 257392.040 ops/s
Iteration   3: 262195.648 ops/s
Iteration   4: 261139.250 ops/s
Iteration   5: 260044.309 ops/s
Iteration   6: 259682.935 ops/s
Iteration   7: 261281.269 ops/s
Iteration   8: 260658.995 ops/s
Iteration   9: 257805.145 ops/s
Iteration  10: 260738.849 ops/s
Iteration  11: 259225.272 ops/s
Iteration  12: 261295.818 ops/s
Iteration  13: 259075.676 ops/s
Iteration  14: 259095.296 ops/s
Iteration  15: 260267.374 ops/s
Iteration  16: 259940.897 ops/s
Iteration  17: 261358.713 ops/s
Iteration  18: 260841.874 ops/s
Iteration  19: 260720.576 ops/s
Iteration  20: 260697.661 ops/s
Iteration  21: 260226.093 ops/s
Iteration  22: 260205.767 ops/s
Iteration  23: 256921.461 ops/s
Iteration  24: 261395.577 ops/s
Iteration  25: 261961.453 ops/s
Iteration  26: 260526.342 ops/s
Iteration  27: 259174.435 ops/s
Iteration  28: 261366.433 ops/s
Iteration  29: 261277.275 ops/s
Iteration  30: 258027.324 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4_compressed":
  260166.567 ±(99.9%) 887.229 ops/s [Average]
  (min, avg, max) = (256921.461, 260166.567, 262195.648), stdev = 1327.963
  CI (99.9%): [259279.338, 261053.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6_compatIpv4_compressed  thrpt   30  260166.567 ± 887.229  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_mappedIpv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_mappedIpv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 124780.734 ops/s
# Warmup Iteration   2: 152193.103 ops/s
# Warmup Iteration   3: 208925.115 ops/s
# Warmup Iteration   4: 263415.203 ops/s
# Warmup Iteration   5: 263682.769 ops/s
# Warmup Iteration   6: 263500.409 ops/s
# Warmup Iteration   7: 264232.555 ops/s
# Warmup Iteration   8: 263315.021 ops/s
# Warmup Iteration   9: 264667.787 ops/s
# Warmup Iteration  10: 264244.806 ops/s
# Warmup Iteration  11: 193442.104 ops/s
# Warmup Iteration  12: 252448.121 ops/s
# Warmup Iteration  13: 263398.065 ops/s
# Warmup Iteration  14: 264886.488 ops/s
# Warmup Iteration  15: 263773.856 ops/s
# Warmup Iteration  16: 264144.118 ops/s
# Warmup Iteration  17: 263715.676 ops/s
# Warmup Iteration  18: 263595.426 ops/s
# Warmup Iteration  19: 263041.957 ops/s
# Warmup Iteration  20: 263470.911 ops/s
# Warmup Iteration  21: 264150.657 ops/s
# Warmup Iteration  22: 264233.532 ops/s
# Warmup Iteration  23: 264779.836 ops/s
# Warmup Iteration  24: 264531.791 ops/s
# Warmup Iteration  25: 264578.902 ops/s
# Warmup Iteration  26: 264187.117 ops/s
# Warmup Iteration  27: 263560.539 ops/s
# Warmup Iteration  28: 264791.070 ops/s
# Warmup Iteration  29: 263943.555 ops/s
# Warmup Iteration  30: 264946.621 ops/s
Iteration   1: 263950.178 ops/s
Iteration   2: 264029.124 ops/s
Iteration   3: 264704.040 ops/s
Iteration   4: 264903.578 ops/s
Iteration   5: 263951.835 ops/s
Iteration   6: 263641.250 ops/s
Iteration   7: 264934.453 ops/s
Iteration   8: 265206.866 ops/s
Iteration   9: 264717.542 ops/s
Iteration  10: 263808.914 ops/s
Iteration  11: 265168.902 ops/s
Iteration  12: 264518.527 ops/s
Iteration  13: 264841.265 ops/s
Iteration  14: 264039.317 ops/s
Iteration  15: 264929.842 ops/s
Iteration  16: 264646.924 ops/s
Iteration  17: 265242.446 ops/s
Iteration  18: 264577.077 ops/s
Iteration  19: 264761.233 ops/s
Iteration  20: 265016.773 ops/s
Iteration  21: 264551.934 ops/s
Iteration  22: 264083.252 ops/s
Iteration  23: 264548.502 ops/s
Iteration  24: 265074.270 ops/s
Iteration  25: 264432.158 ops/s
Iteration  26: 264340.826 ops/s
Iteration  27: 264349.303 ops/s
Iteration  28: 264834.458 ops/s
Iteration  29: 264546.447 ops/s
Iteration  30: 264364.118 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_ipv6_mappedIpv4":
  264557.179 ±(99.9%) 289.651 ops/s [Average]
  (min, avg, max) = (263641.250, 264557.179, 265242.446), stdev = 433.536
  CI (99.9%): [264267.528, 264846.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_ipv6_mappedIpv4  thrpt   30  264557.179 ± 289.651  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_string_ipv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ip_string_ipv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126378.128 ops/s
# Warmup Iteration   2: 149244.991 ops/s
# Warmup Iteration   3: 211650.096 ops/s
# Warmup Iteration   4: 264195.525 ops/s
# Warmup Iteration   5: 266426.030 ops/s
# Warmup Iteration   6: 266258.904 ops/s
# Warmup Iteration   7: 265799.170 ops/s
# Warmup Iteration   8: 265416.594 ops/s
# Warmup Iteration   9: 267377.834 ops/s
# Warmup Iteration  10: 266340.593 ops/s
# Warmup Iteration  11: 181349.623 ops/s
# Warmup Iteration  12: 267821.524 ops/s
# Warmup Iteration  13: 267931.877 ops/s
# Warmup Iteration  14: 266803.854 ops/s
# Warmup Iteration  15: 267486.181 ops/s
# Warmup Iteration  16: 268081.710 ops/s
# Warmup Iteration  17: 268028.478 ops/s
# Warmup Iteration  18: 267849.367 ops/s
# Warmup Iteration  19: 267412.148 ops/s
# Warmup Iteration  20: 267378.901 ops/s
# Warmup Iteration  21: 267809.743 ops/s
# Warmup Iteration  22: 268382.305 ops/s
# Warmup Iteration  23: 266407.287 ops/s
# Warmup Iteration  24: 266788.132 ops/s
# Warmup Iteration  25: 266942.878 ops/s
# Warmup Iteration  26: 267005.251 ops/s
# Warmup Iteration  27: 267143.107 ops/s
# Warmup Iteration  28: 267558.409 ops/s
# Warmup Iteration  29: 268057.457 ops/s
# Warmup Iteration  30: 267761.970 ops/s
Iteration   1: 267987.300 ops/s
Iteration   2: 267889.515 ops/s
Iteration   3: 267499.462 ops/s
Iteration   4: 265872.803 ops/s
Iteration   5: 267300.494 ops/s
Iteration   6: 268238.068 ops/s
Iteration   7: 267817.039 ops/s
Iteration   8: 268152.722 ops/s
Iteration   9: 266144.310 ops/s
Iteration  10: 266768.708 ops/s
Iteration  11: 267928.083 ops/s
Iteration  12: 266016.118 ops/s
Iteration  13: 267289.170 ops/s
Iteration  14: 267538.282 ops/s
Iteration  15: 267751.496 ops/s
Iteration  16: 266850.603 ops/s
Iteration  17: 267555.633 ops/s
Iteration  18: 266063.599 ops/s
Iteration  19: 267542.108 ops/s
Iteration  20: 267467.224 ops/s
Iteration  21: 267506.957 ops/s
Iteration  22: 267208.766 ops/s
Iteration  23: 266615.114 ops/s
Iteration  24: 267273.864 ops/s
Iteration  25: 268146.034 ops/s
Iteration  26: 267763.643 ops/s
Iteration  27: 266622.693 ops/s
Iteration  28: 266629.870 ops/s
Iteration  29: 267154.515 ops/s
Iteration  30: 268153.589 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ip_string_ipv4":
  267291.593 ±(99.9%) 458.911 ops/s [Average]
  (min, avg, max) = (265872.803, 267291.593, 268238.068), stdev = 686.877
  CI (99.9%): [266832.682, 267750.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ip_string_ipv4  thrpt   30  267291.593 ± 458.911  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_downcases$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_downcases

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 295243.052 ops/s
# Warmup Iteration   2: 353310.269 ops/s
# Warmup Iteration   3: 587820.171 ops/s
# Warmup Iteration   4: 665711.336 ops/s
# Warmup Iteration   5: 654295.097 ops/s
# Warmup Iteration   6: 660734.848 ops/s
# Warmup Iteration   7: 660152.791 ops/s
# Warmup Iteration   8: 661094.065 ops/s
# Warmup Iteration   9: 574053.075 ops/s
# Warmup Iteration  10: 537025.268 ops/s
# Warmup Iteration  11: 658412.412 ops/s
# Warmup Iteration  12: 661072.447 ops/s
# Warmup Iteration  13: 656958.865 ops/s
# Warmup Iteration  14: 660193.904 ops/s
# Warmup Iteration  15: 660567.538 ops/s
# Warmup Iteration  16: 660830.698 ops/s
# Warmup Iteration  17: 654466.251 ops/s
# Warmup Iteration  18: 650882.808 ops/s
# Warmup Iteration  19: 653380.876 ops/s
# Warmup Iteration  20: 655164.942 ops/s
# Warmup Iteration  21: 655629.726 ops/s
# Warmup Iteration  22: 654068.652 ops/s
# Warmup Iteration  23: 653928.283 ops/s
# Warmup Iteration  24: 652889.611 ops/s
# Warmup Iteration  25: 654643.762 ops/s
# Warmup Iteration  26: 651732.282 ops/s
# Warmup Iteration  27: 656935.115 ops/s
# Warmup Iteration  28: 653478.964 ops/s
# Warmup Iteration  29: 656553.350 ops/s
# Warmup Iteration  30: 653099.027 ops/s
Iteration   1: 653567.303 ops/s
Iteration   2: 655703.575 ops/s
Iteration   3: 651218.108 ops/s
Iteration   4: 653070.481 ops/s
Iteration   5: 654990.624 ops/s
Iteration   6: 654365.650 ops/s
Iteration   7: 654350.435 ops/s
Iteration   8: 651402.351 ops/s
Iteration   9: 650487.485 ops/s
Iteration  10: 652838.067 ops/s
Iteration  11: 654172.865 ops/s
Iteration  12: 655726.550 ops/s
Iteration  13: 656858.670 ops/s
Iteration  14: 657458.113 ops/s
Iteration  15: 656462.266 ops/s
Iteration  16: 656251.073 ops/s
Iteration  17: 656203.636 ops/s
Iteration  18: 655869.423 ops/s
Iteration  19: 655709.938 ops/s
Iteration  20: 653259.578 ops/s
Iteration  21: 652677.597 ops/s
Iteration  22: 655215.482 ops/s
Iteration  23: 655699.307 ops/s
Iteration  24: 655364.580 ops/s
Iteration  25: 655512.737 ops/s
Iteration  26: 653777.538 ops/s
Iteration  27: 654386.130 ops/s
Iteration  28: 655591.584 ops/s
Iteration  29: 654833.509 ops/s
Iteration  30: 649566.909 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ipv6_downcases":
  654419.719 ±(99.9%) 1286.447 ops/s [Average]
  (min, avg, max) = (649566.909, 654419.719, 657458.113), stdev = 1925.493
  CI (99.9%): [653133.272, 655706.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_ipv6_downcases  thrpt   30  654419.719 ± 1286.447  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_localhost$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_localhost

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53049.853 ops/s
# Warmup Iteration   2: 63056.327 ops/s
# Warmup Iteration   3: 74729.714 ops/s
# Warmup Iteration   4: 102774.603 ops/s
# Warmup Iteration   5: 103136.987 ops/s
# Warmup Iteration   6: 102023.455 ops/s
# Warmup Iteration   7: 103271.580 ops/s
# Warmup Iteration   8: 102864.509 ops/s
# Warmup Iteration   9: 103453.540 ops/s
# Warmup Iteration  10: 103783.441 ops/s
# Warmup Iteration  11: 103557.465 ops/s
# Warmup Iteration  12: 102619.686 ops/s
# Warmup Iteration  13: 71595.383 ops/s
# Warmup Iteration  14: 103667.454 ops/s
# Warmup Iteration  15: 103510.792 ops/s
# Warmup Iteration  16: 103634.813 ops/s
# Warmup Iteration  17: 103314.672 ops/s
# Warmup Iteration  18: 103316.614 ops/s
# Warmup Iteration  19: 102856.771 ops/s
# Warmup Iteration  20: 103302.940 ops/s
# Warmup Iteration  21: 102900.806 ops/s
# Warmup Iteration  22: 103488.007 ops/s
# Warmup Iteration  23: 102863.666 ops/s
# Warmup Iteration  24: 103287.304 ops/s
# Warmup Iteration  25: 103169.353 ops/s
# Warmup Iteration  26: 103297.468 ops/s
# Warmup Iteration  27: 102837.235 ops/s
# Warmup Iteration  28: 103119.510 ops/s
# Warmup Iteration  29: 103344.918 ops/s
# Warmup Iteration  30: 103317.794 ops/s
Iteration   1: 102981.522 ops/s
Iteration   2: 102781.893 ops/s
Iteration   3: 102688.047 ops/s
Iteration   4: 102974.813 ops/s
Iteration   5: 103651.372 ops/s
Iteration   6: 103092.473 ops/s
Iteration   7: 102250.005 ops/s
Iteration   8: 103087.532 ops/s
Iteration   9: 103645.633 ops/s
Iteration  10: 103356.076 ops/s
Iteration  11: 103150.653 ops/s
Iteration  12: 103445.576 ops/s
Iteration  13: 103493.461 ops/s
Iteration  14: 103620.289 ops/s
Iteration  15: 103543.757 ops/s
Iteration  16: 103417.896 ops/s
Iteration  17: 103563.615 ops/s
Iteration  18: 103766.540 ops/s
Iteration  19: 103775.181 ops/s
Iteration  20: 103579.068 ops/s
Iteration  21: 103541.400 ops/s
Iteration  22: 103771.557 ops/s
Iteration  23: 103760.657 ops/s
Iteration  24: 103317.635 ops/s
Iteration  25: 103371.483 ops/s
Iteration  26: 103610.050 ops/s
Iteration  27: 103832.903 ops/s
Iteration  28: 103666.455 ops/s
Iteration  29: 103509.794 ops/s
Iteration  30: 103757.908 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ipv6_localhost":
  103400.175 ±(99.9%) 251.208 ops/s [Average]
  (min, avg, max) = (102250.005, 103400.175, 103832.903), stdev = 375.997
  CI (99.9%): [103148.966, 103651.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_ipv6_localhost  thrpt   30  103400.175 ± 251.208  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_notLocalhost$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_notLocalhost

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 311855.338 ops/s
# Warmup Iteration   2: 367699.115 ops/s
# Warmup Iteration   3: 690237.773 ops/s
# Warmup Iteration   4: 727966.172 ops/s
# Warmup Iteration   5: 717441.840 ops/s
# Warmup Iteration   6: 720776.319 ops/s
# Warmup Iteration   7: 726543.562 ops/s
# Warmup Iteration   8: 689346.294 ops/s
# Warmup Iteration   9: 540555.062 ops/s
# Warmup Iteration  10: 726305.565 ops/s
# Warmup Iteration  11: 727465.922 ops/s
# Warmup Iteration  12: 723749.089 ops/s
# Warmup Iteration  13: 726211.646 ops/s
# Warmup Iteration  14: 724886.135 ops/s
# Warmup Iteration  15: 724940.369 ops/s
# Warmup Iteration  16: 724965.057 ops/s
# Warmup Iteration  17: 722711.735 ops/s
# Warmup Iteration  18: 723217.292 ops/s
# Warmup Iteration  19: 722979.736 ops/s
# Warmup Iteration  20: 723891.603 ops/s
# Warmup Iteration  21: 723747.228 ops/s
# Warmup Iteration  22: 723848.519 ops/s
# Warmup Iteration  23: 722375.390 ops/s
# Warmup Iteration  24: 723320.591 ops/s
# Warmup Iteration  25: 724143.459 ops/s
# Warmup Iteration  26: 723552.142 ops/s
# Warmup Iteration  27: 722622.577 ops/s
# Warmup Iteration  28: 723255.450 ops/s
# Warmup Iteration  29: 725266.063 ops/s
# Warmup Iteration  30: 723471.305 ops/s
Iteration   1: 725340.561 ops/s
Iteration   2: 724000.835 ops/s
Iteration   3: 726158.192 ops/s
Iteration   4: 726005.850 ops/s
Iteration   5: 725114.273 ops/s
Iteration   6: 726266.442 ops/s
Iteration   7: 724769.926 ops/s
Iteration   8: 726054.382 ops/s
Iteration   9: 725231.737 ops/s
Iteration  10: 723691.080 ops/s
Iteration  11: 726248.668 ops/s
Iteration  12: 726723.694 ops/s
Iteration  13: 727433.989 ops/s
Iteration  14: 727659.343 ops/s
Iteration  15: 726485.843 ops/s
Iteration  16: 726394.850 ops/s
Iteration  17: 725282.100 ops/s
Iteration  18: 724181.873 ops/s
Iteration  19: 724008.431 ops/s
Iteration  20: 722104.052 ops/s
Iteration  21: 724090.312 ops/s
Iteration  22: 726008.569 ops/s
Iteration  23: 724295.947 ops/s
Iteration  24: 722987.421 ops/s
Iteration  25: 722642.848 ops/s
Iteration  26: 724028.711 ops/s
Iteration  27: 725865.666 ops/s
Iteration  28: 721192.063 ops/s
Iteration  29: 723484.452 ops/s
Iteration  30: 723200.844 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ipv6_notLocalhost":
  724898.432 ±(99.9%) 1061.317 ops/s [Average]
  (min, avg, max) = (721192.063, 724898.432, 727659.343), stdev = 1588.529
  CI (99.9%): [723837.115, 725959.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_ipv6_notLocalhost  thrpt   30  724898.432 ± 1061.317  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_notMappedIpv4$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_ipv6_notMappedIpv4

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 336376.682 ops/s
# Warmup Iteration   2: 382690.155 ops/s
# Warmup Iteration   3: 760784.249 ops/s
# Warmup Iteration   4: 780390.816 ops/s
# Warmup Iteration   5: 791008.242 ops/s
# Warmup Iteration   6: 792243.066 ops/s
# Warmup Iteration   7: 794627.401 ops/s
# Warmup Iteration   8: 664651.816 ops/s
# Warmup Iteration   9: 663543.421 ops/s
# Warmup Iteration  10: 786100.145 ops/s
# Warmup Iteration  11: 791530.093 ops/s
# Warmup Iteration  12: 790378.908 ops/s
# Warmup Iteration  13: 791198.366 ops/s
# Warmup Iteration  14: 789384.280 ops/s
# Warmup Iteration  15: 790069.940 ops/s
# Warmup Iteration  16: 789587.175 ops/s
# Warmup Iteration  17: 777955.290 ops/s
# Warmup Iteration  18: 775995.330 ops/s
# Warmup Iteration  19: 780466.791 ops/s
# Warmup Iteration  20: 779152.363 ops/s
# Warmup Iteration  21: 779208.367 ops/s
# Warmup Iteration  22: 784497.164 ops/s
# Warmup Iteration  23: 779900.020 ops/s
# Warmup Iteration  24: 781162.539 ops/s
# Warmup Iteration  25: 781534.236 ops/s
# Warmup Iteration  26: 783634.423 ops/s
# Warmup Iteration  27: 775003.269 ops/s
# Warmup Iteration  28: 781088.950 ops/s
# Warmup Iteration  29: 779226.239 ops/s
# Warmup Iteration  30: 783378.233 ops/s
Iteration   1: 782283.412 ops/s
Iteration   2: 777098.489 ops/s
Iteration   3: 777105.919 ops/s
Iteration   4: 783067.049 ops/s
Iteration   5: 780381.757 ops/s
Iteration   6: 777904.976 ops/s
Iteration   7: 779999.552 ops/s
Iteration   8: 781968.006 ops/s
Iteration   9: 780808.205 ops/s
Iteration  10: 779664.739 ops/s
Iteration  11: 779788.503 ops/s
Iteration  12: 780988.696 ops/s
Iteration  13: 782831.987 ops/s
Iteration  14: 782512.058 ops/s
Iteration  15: 780551.959 ops/s
Iteration  16: 778000.125 ops/s
Iteration  17: 780975.811 ops/s
Iteration  18: 778082.751 ops/s
Iteration  19: 775296.995 ops/s
Iteration  20: 780975.797 ops/s
Iteration  21: 781489.562 ops/s
Iteration  22: 781626.859 ops/s
Iteration  23: 781855.840 ops/s
Iteration  24: 780911.121 ops/s
Iteration  25: 783426.573 ops/s
Iteration  26: 781960.502 ops/s
Iteration  27: 783859.026 ops/s
Iteration  28: 781634.068 ops/s
Iteration  29: 784955.079 ops/s
Iteration  30: 783196.118 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_ipv6_notMappedIpv4":
  780840.051 ±(99.9%) 1487.899 ops/s [Average]
  (min, avg, max) = (775296.995, 780840.051, 784955.079), stdev = 2227.017
  CI (99.9%): [779352.152, 782327.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_ipv6_notMappedIpv4  thrpt   30  780840.051 ± 1487.899  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_lowercasesServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_lowercasesServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366940.818 ops/s
# Warmup Iteration   2: 421220.808 ops/s
# Warmup Iteration   3: 752758.689 ops/s
# Warmup Iteration   4: 820497.746 ops/s
# Warmup Iteration   5: 806706.103 ops/s
# Warmup Iteration   6: 815313.871 ops/s
# Warmup Iteration   7: 813841.533 ops/s
# Warmup Iteration   8: 816963.947 ops/s
# Warmup Iteration   9: 550846.047 ops/s
# Warmup Iteration  10: 806911.779 ops/s
# Warmup Iteration  11: 807328.695 ops/s
# Warmup Iteration  12: 811256.198 ops/s
# Warmup Iteration  13: 811297.013 ops/s
# Warmup Iteration  14: 810677.459 ops/s
# Warmup Iteration  15: 810292.174 ops/s
# Warmup Iteration  16: 806707.856 ops/s
# Warmup Iteration  17: 804606.485 ops/s
# Warmup Iteration  18: 804718.541 ops/s
# Warmup Iteration  19: 804672.234 ops/s
# Warmup Iteration  20: 803323.620 ops/s
# Warmup Iteration  21: 806097.153 ops/s
# Warmup Iteration  22: 804340.264 ops/s
# Warmup Iteration  23: 807296.688 ops/s
# Warmup Iteration  24: 805123.394 ops/s
# Warmup Iteration  25: 806215.231 ops/s
# Warmup Iteration  26: 804319.323 ops/s
# Warmup Iteration  27: 805532.764 ops/s
# Warmup Iteration  28: 806796.603 ops/s
# Warmup Iteration  29: 803616.243 ops/s
# Warmup Iteration  30: 804601.080 ops/s
Iteration   1: 806190.564 ops/s
Iteration   2: 807219.184 ops/s
Iteration   3: 801214.346 ops/s
Iteration   4: 802195.973 ops/s
Iteration   5: 801902.551 ops/s
Iteration   6: 800997.992 ops/s
Iteration   7: 802186.935 ops/s
Iteration   8: 802993.597 ops/s
Iteration   9: 806976.452 ops/s
Iteration  10: 808246.304 ops/s
Iteration  11: 807982.360 ops/s
Iteration  12: 809920.479 ops/s
Iteration  13: 809417.956 ops/s
Iteration  14: 808318.302 ops/s
Iteration  15: 809578.254 ops/s
Iteration  16: 808339.822 ops/s
Iteration  17: 801683.480 ops/s
Iteration  18: 803065.743 ops/s
Iteration  19: 798567.001 ops/s
Iteration  20: 805078.350 ops/s
Iteration  21: 806158.937 ops/s
Iteration  22: 797383.988 ops/s
Iteration  23: 802983.230 ops/s
Iteration  24: 807266.276 ops/s
Iteration  25: 805803.030 ops/s
Iteration  26: 805489.875 ops/s
Iteration  27: 807807.204 ops/s
Iteration  28: 805536.626 ops/s
Iteration  29: 803253.117 ops/s
Iteration  30: 801043.297 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_lowercasesServiceName":
  804826.707 ±(99.9%) 2246.303 ops/s [Average]
  (min, avg, max) = (797383.988, 804826.707, 809920.479), stdev = 3362.161
  CI (99.9%): [802580.404, 807073.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_lowercasesServiceName  thrpt   30  804826.707 ± 2246.303  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_missingIpv4IsNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_missingIpv4IsNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394926.300 ops/s
# Warmup Iteration   2: 448278.294 ops/s
# Warmup Iteration   3: 859130.757 ops/s
# Warmup Iteration   4: 880477.730 ops/s
# Warmup Iteration   5: 885660.785 ops/s
# Warmup Iteration   6: 885620.353 ops/s
# Warmup Iteration   7: 879881.608 ops/s
# Warmup Iteration   8: 890019.870 ops/s
# Warmup Iteration   9: 608174.649 ops/s
# Warmup Iteration  10: 888746.250 ops/s
# Warmup Iteration  11: 886147.267 ops/s
# Warmup Iteration  12: 886154.697 ops/s
# Warmup Iteration  13: 884962.861 ops/s
# Warmup Iteration  14: 886179.250 ops/s
# Warmup Iteration  15: 885612.173 ops/s
# Warmup Iteration  16: 883282.471 ops/s
# Warmup Iteration  17: 889256.593 ops/s
# Warmup Iteration  18: 888553.384 ops/s
# Warmup Iteration  19: 891873.283 ops/s
# Warmup Iteration  20: 887564.459 ops/s
# Warmup Iteration  21: 889880.730 ops/s
# Warmup Iteration  22: 887970.726 ops/s
# Warmup Iteration  23: 890297.486 ops/s
# Warmup Iteration  24: 890091.178 ops/s
# Warmup Iteration  25: 883469.078 ops/s
# Warmup Iteration  26: 886474.296 ops/s
# Warmup Iteration  27: 887256.728 ops/s
# Warmup Iteration  28: 880059.587 ops/s
# Warmup Iteration  29: 884728.444 ops/s
# Warmup Iteration  30: 877389.523 ops/s
Iteration   1: 876852.120 ops/s
Iteration   2: 876234.916 ops/s
Iteration   3: 879587.131 ops/s
Iteration   4: 882739.626 ops/s
Iteration   5: 887300.860 ops/s
Iteration   6: 883905.507 ops/s
Iteration   7: 876849.342 ops/s
Iteration   8: 883794.554 ops/s
Iteration   9: 884664.505 ops/s
Iteration  10: 887702.415 ops/s
Iteration  11: 886808.118 ops/s
Iteration  12: 878142.283 ops/s
Iteration  13: 879159.604 ops/s
Iteration  14: 886915.401 ops/s
Iteration  15: 889303.575 ops/s
Iteration  16: 882664.296 ops/s
Iteration  17: 879478.977 ops/s
Iteration  18: 878872.688 ops/s
Iteration  19: 889110.451 ops/s
Iteration  20: 886669.585 ops/s
Iteration  21: 882112.048 ops/s
Iteration  22: 877872.687 ops/s
Iteration  23: 883090.670 ops/s
Iteration  24: 888791.401 ops/s
Iteration  25: 883559.845 ops/s
Iteration  26: 884922.918 ops/s
Iteration  27: 881918.355 ops/s
Iteration  28: 882187.747 ops/s
Iteration  29: 887657.715 ops/s
Iteration  30: 884059.475 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_missingIpv4IsNull":
  883097.627 ±(99.9%) 2646.989 ops/s [Average]
  (min, avg, max) = (876234.916, 883097.627, 889303.575), stdev = 3961.889
  CI (99.9%): [880450.638, 885744.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_missingIpv4IsNull  thrpt   30  883097.627 ± 2646.989  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_0CoercesToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_0CoercesToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388210.465 ops/s
# Warmup Iteration   2: 433906.257 ops/s
# Warmup Iteration   3: 885211.202 ops/s
# Warmup Iteration   4: 879614.891 ops/s
# Warmup Iteration   5: 895813.813 ops/s
# Warmup Iteration   6: 897105.663 ops/s
# Warmup Iteration   7: 894754.280 ops/s
# Warmup Iteration   8: 741146.641 ops/s
# Warmup Iteration   9: 764048.046 ops/s
# Warmup Iteration  10: 899461.977 ops/s
# Warmup Iteration  11: 895512.343 ops/s
# Warmup Iteration  12: 899078.031 ops/s
# Warmup Iteration  13: 889956.986 ops/s
# Warmup Iteration  14: 894031.314 ops/s
# Warmup Iteration  15: 892388.559 ops/s
# Warmup Iteration  16: 895552.073 ops/s
# Warmup Iteration  17: 889621.623 ops/s
# Warmup Iteration  18: 893846.073 ops/s
# Warmup Iteration  19: 893574.743 ops/s
# Warmup Iteration  20: 888694.556 ops/s
# Warmup Iteration  21: 892438.735 ops/s
# Warmup Iteration  22: 894915.201 ops/s
# Warmup Iteration  23: 895769.898 ops/s
# Warmup Iteration  24: 894050.330 ops/s
# Warmup Iteration  25: 890427.098 ops/s
# Warmup Iteration  26: 891343.074 ops/s
# Warmup Iteration  27: 891308.233 ops/s
# Warmup Iteration  28: 895720.114 ops/s
# Warmup Iteration  29: 891467.912 ops/s
# Warmup Iteration  30: 894313.328 ops/s
Iteration   1: 892305.070 ops/s
Iteration   2: 893135.838 ops/s
Iteration   3: 892238.615 ops/s
Iteration   4: 892029.323 ops/s
Iteration   5: 891115.470 ops/s
Iteration   6: 893066.937 ops/s
Iteration   7: 893937.024 ops/s
Iteration   8: 894440.076 ops/s
Iteration   9: 896240.259 ops/s
Iteration  10: 897862.327 ops/s
Iteration  11: 894549.917 ops/s
Iteration  12: 896318.719 ops/s
Iteration  13: 896750.007 ops/s
Iteration  14: 895554.696 ops/s
Iteration  15: 890200.776 ops/s
Iteration  16: 889844.666 ops/s
Iteration  17: 893379.231 ops/s
Iteration  18: 891604.906 ops/s
Iteration  19: 894933.041 ops/s
Iteration  20: 889084.266 ops/s
Iteration  21: 888650.690 ops/s
Iteration  22: 893650.762 ops/s
Iteration  23: 892190.837 ops/s
Iteration  24: 887234.645 ops/s
Iteration  25: 889607.882 ops/s
Iteration  26: 892003.398 ops/s
Iteration  27: 897998.264 ops/s
Iteration  28: 897381.184 ops/s
Iteration  29: 888369.541 ops/s
Iteration  30: 889311.130 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_0CoercesToNull":
  892832.983 ±(99.9%) 1999.543 ops/s [Average]
  (min, avg, max) = (887234.645, 892832.983, 897998.264), stdev = 2992.822
  CI (99.9%): [890833.440, 894832.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_newBuilderWithPort_0CoercesToNull  thrpt   30  892832.983 ± 1999.543  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_NegativeCoercesToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_NegativeCoercesToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 377674.243 ops/s
# Warmup Iteration   2: 433125.002 ops/s
# Warmup Iteration   3: 898589.763 ops/s
# Warmup Iteration   4: 885869.352 ops/s
# Warmup Iteration   5: 905517.133 ops/s
# Warmup Iteration   6: 903813.364 ops/s
# Warmup Iteration   7: 901672.786 ops/s
# Warmup Iteration   8: 650615.461 ops/s
# Warmup Iteration   9: 867077.303 ops/s
# Warmup Iteration  10: 904165.706 ops/s
# Warmup Iteration  11: 904686.916 ops/s
# Warmup Iteration  12: 906709.444 ops/s
# Warmup Iteration  13: 906436.914 ops/s
# Warmup Iteration  14: 906631.243 ops/s
# Warmup Iteration  15: 901212.148 ops/s
# Warmup Iteration  16: 898927.678 ops/s
# Warmup Iteration  17: 895631.668 ops/s
# Warmup Iteration  18: 897571.562 ops/s
# Warmup Iteration  19: 899360.996 ops/s
# Warmup Iteration  20: 895557.701 ops/s
# Warmup Iteration  21: 893972.421 ops/s
# Warmup Iteration  22: 894968.635 ops/s
# Warmup Iteration  23: 890842.413 ops/s
# Warmup Iteration  24: 892177.928 ops/s
# Warmup Iteration  25: 889092.491 ops/s
# Warmup Iteration  26: 895708.233 ops/s
# Warmup Iteration  27: 896289.237 ops/s
# Warmup Iteration  28: 899049.817 ops/s
# Warmup Iteration  29: 894905.608 ops/s
# Warmup Iteration  30: 892839.267 ops/s
Iteration   1: 892216.077 ops/s
Iteration   2: 891711.988 ops/s
Iteration   3: 894825.098 ops/s
Iteration   4: 891253.214 ops/s
Iteration   5: 894076.246 ops/s
Iteration   6: 889118.956 ops/s
Iteration   7: 896656.298 ops/s
Iteration   8: 894498.832 ops/s
Iteration   9: 892847.847 ops/s
Iteration  10: 889085.630 ops/s
Iteration  11: 891553.584 ops/s
Iteration  12: 893187.716 ops/s
Iteration  13: 888272.984 ops/s
Iteration  14: 890567.268 ops/s
Iteration  15: 899205.705 ops/s
Iteration  16: 892740.185 ops/s
Iteration  17: 889558.700 ops/s
Iteration  18: 889886.913 ops/s
Iteration  19: 893137.839 ops/s
Iteration  20: 895665.591 ops/s
Iteration  21: 888815.520 ops/s
Iteration  22: 893619.880 ops/s
Iteration  23: 889822.137 ops/s
Iteration  24: 898634.225 ops/s
Iteration  25: 896763.819 ops/s
Iteration  26: 891349.663 ops/s
Iteration  27: 886632.835 ops/s
Iteration  28: 894642.372 ops/s
Iteration  29: 889989.595 ops/s
Iteration  30: 892518.688 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_NegativeCoercesToNull":
  892428.514 ±(99.9%) 2049.243 ops/s [Average]
  (min, avg, max) = (886632.835, 892428.514, 899205.705), stdev = 3067.210
  CI (99.9%): [890379.271, 894477.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_newBuilderWithPort_NegativeCoercesToNull  thrpt   30  892428.514 ± 2049.243  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_highest$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_highest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 372389.658 ops/s
# Warmup Iteration   2: 431984.309 ops/s
# Warmup Iteration   3: 876536.717 ops/s
# Warmup Iteration   4: 893318.534 ops/s
# Warmup Iteration   5: 897470.028 ops/s
# Warmup Iteration   6: 899794.985 ops/s
# Warmup Iteration   7: 898801.739 ops/s
# Warmup Iteration   8: 715914.090 ops/s
# Warmup Iteration   9: 787972.278 ops/s
# Warmup Iteration  10: 897845.474 ops/s
# Warmup Iteration  11: 899693.764 ops/s
# Warmup Iteration  12: 902240.066 ops/s
# Warmup Iteration  13: 900213.014 ops/s
# Warmup Iteration  14: 897070.434 ops/s
# Warmup Iteration  15: 899441.620 ops/s
# Warmup Iteration  16: 903377.484 ops/s
# Warmup Iteration  17: 900797.584 ops/s
# Warmup Iteration  18: 902703.546 ops/s
# Warmup Iteration  19: 901347.338 ops/s
# Warmup Iteration  20: 900560.453 ops/s
# Warmup Iteration  21: 901614.652 ops/s
# Warmup Iteration  22: 901306.523 ops/s
# Warmup Iteration  23: 900254.433 ops/s
# Warmup Iteration  24: 900215.786 ops/s
# Warmup Iteration  25: 901596.732 ops/s
# Warmup Iteration  26: 902076.996 ops/s
# Warmup Iteration  27: 902643.831 ops/s
# Warmup Iteration  28: 903100.208 ops/s
# Warmup Iteration  29: 900324.463 ops/s
# Warmup Iteration  30: 900245.133 ops/s
Iteration   1: 901988.207 ops/s
Iteration   2: 901398.514 ops/s
Iteration   3: 900225.636 ops/s
Iteration   4: 900273.125 ops/s
Iteration   5: 900839.636 ops/s
Iteration   6: 901509.653 ops/s
Iteration   7: 897189.358 ops/s
Iteration   8: 902665.219 ops/s
Iteration   9: 900355.074 ops/s
Iteration  10: 901394.140 ops/s
Iteration  11: 901539.268 ops/s
Iteration  12: 900479.630 ops/s
Iteration  13: 900200.389 ops/s
Iteration  14: 898806.695 ops/s
Iteration  15: 899163.306 ops/s
Iteration  16: 901902.124 ops/s
Iteration  17: 898604.491 ops/s
Iteration  18: 900735.276 ops/s
Iteration  19: 900212.842 ops/s
Iteration  20: 901775.139 ops/s
Iteration  21: 902882.910 ops/s
Iteration  22: 898666.577 ops/s
Iteration  23: 895562.436 ops/s
Iteration  24: 897722.266 ops/s
Iteration  25: 900248.602 ops/s
Iteration  26: 902403.540 ops/s
Iteration  27: 891405.086 ops/s
Iteration  28: 891484.021 ops/s
Iteration  29: 891329.175 ops/s
Iteration  30: 898947.210 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_highest":
  899396.985 ±(99.9%) 2122.725 ops/s [Average]
  (min, avg, max) = (891329.175, 899396.985, 902882.910), stdev = 3177.195
  CI (99.9%): [897274.260, 901519.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
EndpointTest._Benchmark.benchmark_newBuilderWithPort_highest  thrpt   30  899396.985 ± 2122.725  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooHighIsInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooHighIsInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120186.122 ops/s
# Warmup Iteration   2: 133744.242 ops/s
# Warmup Iteration   3: 192861.346 ops/s
# Warmup Iteration   4: 250516.889 ops/s
# Warmup Iteration   5: 249069.182 ops/s
# Warmup Iteration   6: 253018.828 ops/s
# Warmup Iteration   7: 250619.419 ops/s
# Warmup Iteration   8: 250259.103 ops/s
# Warmup Iteration   9: 250366.758 ops/s
# Warmup Iteration  10: 249951.694 ops/s
# Warmup Iteration  11: 160560.190 ops/s
# Warmup Iteration  12: 252759.341 ops/s
# Warmup Iteration  13: 250783.790 ops/s
# Warmup Iteration  14: 250441.774 ops/s
# Warmup Iteration  15: 249844.851 ops/s
# Warmup Iteration  16: 251608.590 ops/s
# Warmup Iteration  17: 259655.580 ops/s
# Warmup Iteration  18: 257865.357 ops/s
# Warmup Iteration  19: 258393.692 ops/s
# Warmup Iteration  20: 256878.145 ops/s
# Warmup Iteration  21: 258519.657 ops/s
# Warmup Iteration  22: 258388.401 ops/s
# Warmup Iteration  23: 257552.741 ops/s
# Warmup Iteration  24: 257019.049 ops/s
# Warmup Iteration  25: 257571.529 ops/s
# Warmup Iteration  26: 258464.264 ops/s
# Warmup Iteration  27: 258292.191 ops/s
# Warmup Iteration  28: 257534.752 ops/s
# Warmup Iteration  29: 257194.920 ops/s
# Warmup Iteration  30: 258094.065 ops/s
Iteration   1: 258921.676 ops/s
Iteration   2: 258933.664 ops/s
Iteration   3: 258448.136 ops/s
Iteration   4: 258436.277 ops/s
Iteration   5: 256890.179 ops/s
Iteration   6: 258015.761 ops/s
Iteration   7: 257412.321 ops/s
Iteration   8: 258660.576 ops/s
Iteration   9: 257982.481 ops/s
Iteration  10: 258026.999 ops/s
Iteration  11: 257895.084 ops/s
Iteration  12: 258532.464 ops/s
Iteration  13: 257668.645 ops/s
Iteration  14: 256515.017 ops/s
Iteration  15: 257694.045 ops/s
Iteration  16: 256859.487 ops/s
Iteration  17: 257046.885 ops/s
Iteration  18: 257725.645 ops/s
Iteration  19: 257457.756 ops/s
Iteration  20: 260048.530 ops/s
Iteration  21: 258427.433 ops/s
Iteration  22: 258091.346 ops/s
Iteration  23: 259099.684 ops/s
Iteration  24: 257942.505 ops/s
Iteration  25: 257172.859 ops/s
Iteration  26: 258589.809 ops/s
Iteration  27: 257785.009 ops/s
Iteration  28: 257267.244 ops/s
Iteration  29: 256679.482 ops/s
Iteration  30: 256817.182 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooHighIsInvalid":
  257901.473 ±(99.9%) 547.516 ops/s [Average]
  (min, avg, max) = (256515.017, 257901.473, 260048.530), stdev = 819.496
  CI (99.9%): [257353.957, 258448.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooHighIsInvalid  thrpt   30  257901.473 ± 547.516  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooLargeIsInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooLargeIsInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121045.524 ops/s
# Warmup Iteration   2: 137595.988 ops/s
# Warmup Iteration   3: 206894.664 ops/s
# Warmup Iteration   4: 259559.213 ops/s
# Warmup Iteration   5: 260406.375 ops/s
# Warmup Iteration   6: 261592.549 ops/s
# Warmup Iteration   7: 262684.529 ops/s
# Warmup Iteration   8: 261358.719 ops/s
# Warmup Iteration   9: 260885.584 ops/s
# Warmup Iteration  10: 226266.377 ops/s
# Warmup Iteration  11: 203927.342 ops/s
# Warmup Iteration  12: 262070.646 ops/s
# Warmup Iteration  13: 261581.725 ops/s
# Warmup Iteration  14: 262189.799 ops/s
# Warmup Iteration  15: 262778.085 ops/s
# Warmup Iteration  16: 262494.792 ops/s
# Warmup Iteration  17: 268158.982 ops/s
# Warmup Iteration  18: 268815.210 ops/s
# Warmup Iteration  19: 268431.481 ops/s
# Warmup Iteration  20: 267608.633 ops/s
# Warmup Iteration  21: 268517.761 ops/s
# Warmup Iteration  22: 268638.839 ops/s
# Warmup Iteration  23: 268006.033 ops/s
# Warmup Iteration  24: 268841.861 ops/s
# Warmup Iteration  25: 267100.173 ops/s
# Warmup Iteration  26: 268305.434 ops/s
# Warmup Iteration  27: 268153.356 ops/s
# Warmup Iteration  28: 267482.875 ops/s
# Warmup Iteration  29: 267941.355 ops/s
# Warmup Iteration  30: 268679.053 ops/s
Iteration   1: 267982.524 ops/s
Iteration   2: 269057.031 ops/s
Iteration   3: 267187.429 ops/s
Iteration   4: 266175.754 ops/s
Iteration   5: 267174.667 ops/s
Iteration   6: 267018.553 ops/s
Iteration   7: 267573.467 ops/s
Iteration   8: 269036.033 ops/s
Iteration   9: 268121.007 ops/s
Iteration  10: 268545.932 ops/s
Iteration  11: 267850.088 ops/s
Iteration  12: 268925.486 ops/s
Iteration  13: 267041.600 ops/s
Iteration  14: 268596.169 ops/s
Iteration  15: 268244.768 ops/s
Iteration  16: 266120.339 ops/s
Iteration  17: 267894.541 ops/s
Iteration  18: 268008.492 ops/s
Iteration  19: 267991.839 ops/s
Iteration  20: 268003.587 ops/s
Iteration  21: 269266.971 ops/s
Iteration  22: 267401.675 ops/s
Iteration  23: 268990.387 ops/s
Iteration  24: 267317.321 ops/s
Iteration  25: 266542.682 ops/s
Iteration  26: 266378.727 ops/s
Iteration  27: 266408.201 ops/s
Iteration  28: 267131.995 ops/s
Iteration  29: 267622.947 ops/s
Iteration  30: 268560.652 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooLargeIsInvalid":
  267739.029 ±(99.9%) 607.014 ops/s [Average]
  (min, avg, max) = (266120.339, 267739.029, 269266.971), stdev = 908.550
  CI (99.9%): [267132.015, 268346.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_newBuilderWithPort_tooLargeIsInvalid  thrpt   30  267739.029 ± 607.014  ops/s
----------------------------------------
=== Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_parseIp_ipv6_bytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.EndpointTest._Benchmark.benchmark_parseIp_ipv6_bytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236132.551 ops/s
# Warmup Iteration   2: 273195.365 ops/s
# Warmup Iteration   3: 494374.011 ops/s
# Warmup Iteration   4: 534760.704 ops/s
# Warmup Iteration   5: 532689.642 ops/s
# Warmup Iteration   6: 535382.304 ops/s
# Warmup Iteration   7: 535848.523 ops/s
# Warmup Iteration   8: 535576.590 ops/s
# Warmup Iteration   9: 366884.839 ops/s
# Warmup Iteration  10: 531018.139 ops/s
# Warmup Iteration  11: 532337.041 ops/s
# Warmup Iteration  12: 532219.769 ops/s
# Warmup Iteration  13: 531799.608 ops/s
# Warmup Iteration  14: 531659.987 ops/s
# Warmup Iteration  15: 532135.615 ops/s
# Warmup Iteration  16: 531368.722 ops/s
# Warmup Iteration  17: 533676.190 ops/s
# Warmup Iteration  18: 532766.128 ops/s
# Warmup Iteration  19: 532411.831 ops/s
# Warmup Iteration  20: 532362.566 ops/s
# Warmup Iteration  21: 532976.676 ops/s
# Warmup Iteration  22: 533200.859 ops/s
# Warmup Iteration  23: 533068.273 ops/s
# Warmup Iteration  24: 532294.453 ops/s
# Warmup Iteration  25: 533987.073 ops/s
# Warmup Iteration  26: 532547.486 ops/s
# Warmup Iteration  27: 533608.256 ops/s
# Warmup Iteration  28: 533197.541 ops/s
# Warmup Iteration  29: 533078.652 ops/s
# Warmup Iteration  30: 533147.718 ops/s
Iteration   1: 532152.985 ops/s
Iteration   2: 534382.179 ops/s
Iteration   3: 534299.136 ops/s
Iteration   4: 533411.555 ops/s
Iteration   5: 534256.565 ops/s
Iteration   6: 534893.387 ops/s
Iteration   7: 533795.194 ops/s
Iteration   8: 535237.834 ops/s
Iteration   9: 534487.589 ops/s
Iteration  10: 533855.876 ops/s
Iteration  11: 533282.644 ops/s
Iteration  12: 533612.947 ops/s
Iteration  13: 534484.815 ops/s
Iteration  14: 534045.852 ops/s
Iteration  15: 532935.401 ops/s
Iteration  16: 534782.530 ops/s
Iteration  17: 531761.208 ops/s
Iteration  18: 532354.462 ops/s
Iteration  19: 532851.045 ops/s
Iteration  20: 534394.918 ops/s
Iteration  21: 534128.271 ops/s
Iteration  22: 533637.963 ops/s
Iteration  23: 533001.182 ops/s
Iteration  24: 535470.547 ops/s
Iteration  25: 533947.093 ops/s
Iteration  26: 533989.898 ops/s
Iteration  27: 535390.495 ops/s
Iteration  28: 534611.617 ops/s
Iteration  29: 533451.435 ops/s
Iteration  30: 533766.603 ops/s


Result "zipkin2.EndpointTest._Benchmark.benchmark_parseIp_ipv6_bytes":
  533889.107 ±(99.9%) 609.537 ops/s [Average]
  (min, avg, max) = (531761.208, 533889.107, 535470.547), stdev = 912.327
  CI (99.9%): [533279.570, 534498.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
EndpointTest._Benchmark.benchmark_parseIp_ipv6_bytes  thrpt   30  533889.107 ± 609.537  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81248.145 ops/s
# Warmup Iteration   2: 119208.877 ops/s
# Warmup Iteration   3: 123844.455 ops/s
# Warmup Iteration   4: 192027.014 ops/s
# Warmup Iteration   5: 189896.979 ops/s
# Warmup Iteration   6: 192252.194 ops/s
# Warmup Iteration   7: 188397.183 ops/s
# Warmup Iteration   8: 190530.969 ops/s
# Warmup Iteration   9: 192075.159 ops/s
# Warmup Iteration  10: 191102.133 ops/s
# Warmup Iteration  11: 192563.288 ops/s
# Warmup Iteration  12: 189730.331 ops/s
# Warmup Iteration  13: 172948.488 ops/s
# Warmup Iteration  14: 153927.186 ops/s
# Warmup Iteration  15: 192318.271 ops/s
# Warmup Iteration  16: 192565.651 ops/s
# Warmup Iteration  17: 192754.508 ops/s
# Warmup Iteration  18: 192476.615 ops/s
# Warmup Iteration  19: 191797.068 ops/s
# Warmup Iteration  20: 192540.099 ops/s
# Warmup Iteration  21: 192286.891 ops/s
# Warmup Iteration  22: 192510.111 ops/s
# Warmup Iteration  23: 193034.558 ops/s
# Warmup Iteration  24: 192587.705 ops/s
# Warmup Iteration  25: 193127.632 ops/s
# Warmup Iteration  26: 192570.666 ops/s
# Warmup Iteration  27: 192468.954 ops/s
# Warmup Iteration  28: 192423.420 ops/s
# Warmup Iteration  29: 192246.364 ops/s
# Warmup Iteration  30: 192514.914 ops/s
Iteration   1: 192467.606 ops/s
Iteration   2: 192085.731 ops/s
Iteration   3: 193466.802 ops/s
Iteration   4: 192726.763 ops/s
Iteration   5: 192923.010 ops/s
Iteration   6: 192927.766 ops/s
Iteration   7: 193042.288 ops/s
Iteration   8: 192307.270 ops/s
Iteration   9: 192762.335 ops/s
Iteration  10: 192834.395 ops/s
Iteration  11: 193652.689 ops/s
Iteration  12: 193105.920 ops/s
Iteration  13: 191475.711 ops/s
Iteration  14: 191461.280 ops/s
Iteration  15: 191593.317 ops/s
Iteration  16: 192469.168 ops/s
Iteration  17: 192277.374 ops/s
Iteration  18: 192235.731 ops/s
Iteration  19: 191835.557 ops/s
Iteration  20: 192514.577 ops/s
Iteration  21: 192244.645 ops/s
Iteration  22: 191461.439 ops/s
Iteration  23: 190826.316 ops/s
Iteration  24: 191470.631 ops/s
Iteration  25: 191991.473 ops/s
Iteration  26: 192497.465 ops/s
Iteration  27: 192382.495 ops/s
Iteration  28: 192252.865 ops/s
Iteration  29: 192206.891 ops/s
Iteration  30: 192534.074 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1":
  192334.453 ±(99.9%) 426.966 ops/s [Average]
  (min, avg, max) = (190826.316, 192334.453, 193652.689), stdev = 639.063
  CI (99.9%): [191907.486, 192761.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1  thrpt   30  192334.453 ± 426.966  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1_singleItem$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1_singleItem

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60131.598 ops/s
# Warmup Iteration   2: 79122.703 ops/s
# Warmup Iteration   3: 80458.845 ops/s
# Warmup Iteration   4: 80486.014 ops/s
# Warmup Iteration   5: 92691.873 ops/s
# Warmup Iteration   6: 107681.245 ops/s
# Warmup Iteration   7: 107635.629 ops/s
# Warmup Iteration   8: 106480.369 ops/s
# Warmup Iteration   9: 108019.710 ops/s
# Warmup Iteration  10: 107826.455 ops/s
# Warmup Iteration  11: 107113.199 ops/s
# Warmup Iteration  12: 107682.918 ops/s
# Warmup Iteration  13: 108154.864 ops/s
# Warmup Iteration  14: 107004.218 ops/s
# Warmup Iteration  15: 107404.052 ops/s
# Warmup Iteration  16: 107356.595 ops/s
# Warmup Iteration  17: 108316.143 ops/s
# Warmup Iteration  18: 107865.658 ops/s
# Warmup Iteration  19: 109209.318 ops/s
# Warmup Iteration  20: 109040.278 ops/s
# Warmup Iteration  21: 106557.057 ops/s
# Warmup Iteration  22: 107839.604 ops/s
# Warmup Iteration  23: 107250.492 ops/s
# Warmup Iteration  24: 95576.506 ops/s
# Warmup Iteration  25: 84011.574 ops/s
# Warmup Iteration  26: 108900.138 ops/s
# Warmup Iteration  27: 108678.713 ops/s
# Warmup Iteration  28: 109181.306 ops/s
# Warmup Iteration  29: 109068.954 ops/s
# Warmup Iteration  30: 108984.164 ops/s
Iteration   1: 108694.302 ops/s
Iteration   2: 108741.304 ops/s
Iteration   3: 108648.276 ops/s
Iteration   4: 108825.899 ops/s
Iteration   5: 108557.442 ops/s
Iteration   6: 108662.130 ops/s
Iteration   7: 108653.841 ops/s
Iteration   8: 109033.407 ops/s
Iteration   9: 109094.384 ops/s
Iteration  10: 108983.274 ops/s
Iteration  11: 108954.817 ops/s
Iteration  12: 108978.413 ops/s
Iteration  13: 108936.144 ops/s
Iteration  14: 108771.176 ops/s
Iteration  15: 108906.296 ops/s
Iteration  16: 109293.061 ops/s
Iteration  17: 109481.247 ops/s
Iteration  18: 109132.139 ops/s
Iteration  19: 108926.672 ops/s
Iteration  20: 109012.493 ops/s
Iteration  21: 109315.646 ops/s
Iteration  22: 108728.901 ops/s
Iteration  23: 109311.944 ops/s
Iteration  24: 109122.349 ops/s
Iteration  25: 109235.866 ops/s
Iteration  26: 108725.828 ops/s
Iteration  27: 109079.234 ops/s
Iteration  28: 109195.712 ops/s
Iteration  29: 109499.132 ops/s
Iteration  30: 109021.663 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1_singleItem":
  108984.100 ±(99.9%) 169.455 ops/s [Average]
  (min, avg, max) = (108557.442, 108984.100, 109499.132), stdev = 253.632
  CI (99.9%): [108814.645, 109153.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v1_singleItem  thrpt   30  108984.100 ± 169.455  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121029.464 ops/s
# Warmup Iteration   2: 177523.469 ops/s
# Warmup Iteration   3: 175751.439 ops/s
# Warmup Iteration   4: 286125.405 ops/s
# Warmup Iteration   5: 285916.306 ops/s
# Warmup Iteration   6: 288907.743 ops/s
# Warmup Iteration   7: 280131.692 ops/s
# Warmup Iteration   8: 289279.311 ops/s
# Warmup Iteration   9: 286741.272 ops/s
# Warmup Iteration  10: 286085.274 ops/s
# Warmup Iteration  11: 287282.657 ops/s
# Warmup Iteration  12: 285258.979 ops/s
# Warmup Iteration  13: 288992.716 ops/s
# Warmup Iteration  14: 213270.721 ops/s
# Warmup Iteration  15: 274289.155 ops/s
# Warmup Iteration  16: 288717.377 ops/s
# Warmup Iteration  17: 288319.596 ops/s
# Warmup Iteration  18: 289005.782 ops/s
# Warmup Iteration  19: 288562.577 ops/s
# Warmup Iteration  20: 289678.242 ops/s
# Warmup Iteration  21: 289177.132 ops/s
# Warmup Iteration  22: 289458.655 ops/s
# Warmup Iteration  23: 288539.350 ops/s
# Warmup Iteration  24: 289253.365 ops/s
# Warmup Iteration  25: 289097.499 ops/s
# Warmup Iteration  26: 288011.884 ops/s
# Warmup Iteration  27: 289412.683 ops/s
# Warmup Iteration  28: 288584.069 ops/s
# Warmup Iteration  29: 288735.402 ops/s
# Warmup Iteration  30: 288720.117 ops/s
Iteration   1: 288099.811 ops/s
Iteration   2: 289972.480 ops/s
Iteration   3: 290215.736 ops/s
Iteration   4: 288687.585 ops/s
Iteration   5: 289798.583 ops/s
Iteration   6: 289145.055 ops/s
Iteration   7: 288329.591 ops/s
Iteration   8: 289573.625 ops/s
Iteration   9: 288916.323 ops/s
Iteration  10: 289145.414 ops/s
Iteration  11: 288317.340 ops/s
Iteration  12: 288072.494 ops/s
Iteration  13: 287983.763 ops/s
Iteration  14: 289584.113 ops/s
Iteration  15: 289366.761 ops/s
Iteration  16: 288905.258 ops/s
Iteration  17: 289579.099 ops/s
Iteration  18: 289771.523 ops/s
Iteration  19: 288790.616 ops/s
Iteration  20: 287757.046 ops/s
Iteration  21: 288485.962 ops/s
Iteration  22: 287873.783 ops/s
Iteration  23: 288133.934 ops/s
Iteration  24: 288621.383 ops/s
Iteration  25: 288489.244 ops/s
Iteration  26: 289656.031 ops/s
Iteration  27: 289632.277 ops/s
Iteration  28: 289655.725 ops/s
Iteration  29: 289056.364 ops/s
Iteration  30: 290021.524 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2":
  288987.948 ±(99.9%) 482.892 ops/s [Average]
  (min, avg, max) = (287757.046, 288987.948, 290215.736), stdev = 722.771
  CI (99.9%): [288505.056, 289470.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2  thrpt   30  288987.948 ± 482.892  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_localEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_localEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 187517.070 ops/s
# Warmup Iteration   2: 255070.774 ops/s
# Warmup Iteration   3: 484634.432 ops/s
# Warmup Iteration   4: 519740.696 ops/s
# Warmup Iteration   5: 526062.446 ops/s
# Warmup Iteration   6: 523007.636 ops/s
# Warmup Iteration   7: 523015.531 ops/s
# Warmup Iteration   8: 407421.513 ops/s
# Warmup Iteration   9: 497223.633 ops/s
# Warmup Iteration  10: 531359.942 ops/s
# Warmup Iteration  11: 530722.313 ops/s
# Warmup Iteration  12: 530937.393 ops/s
# Warmup Iteration  13: 531724.427 ops/s
# Warmup Iteration  14: 531584.702 ops/s
# Warmup Iteration  15: 531024.782 ops/s
# Warmup Iteration  16: 531724.710 ops/s
# Warmup Iteration  17: 529192.768 ops/s
# Warmup Iteration  18: 529754.849 ops/s
# Warmup Iteration  19: 529991.497 ops/s
# Warmup Iteration  20: 530196.405 ops/s
# Warmup Iteration  21: 531683.128 ops/s
# Warmup Iteration  22: 529550.062 ops/s
# Warmup Iteration  23: 529736.874 ops/s
# Warmup Iteration  24: 530160.621 ops/s
# Warmup Iteration  25: 528193.407 ops/s
# Warmup Iteration  26: 529450.302 ops/s
# Warmup Iteration  27: 528380.567 ops/s
# Warmup Iteration  28: 530606.582 ops/s
# Warmup Iteration  29: 530599.190 ops/s
# Warmup Iteration  30: 529436.397 ops/s
Iteration   1: 529722.172 ops/s
Iteration   2: 529423.575 ops/s
Iteration   3: 529160.468 ops/s
Iteration   4: 526890.689 ops/s
Iteration   5: 529238.728 ops/s
Iteration   6: 529066.723 ops/s
Iteration   7: 529648.099 ops/s
Iteration   8: 527544.557 ops/s
Iteration   9: 526067.642 ops/s
Iteration  10: 530438.573 ops/s
Iteration  11: 529513.869 ops/s
Iteration  12: 529542.866 ops/s
Iteration  13: 527917.314 ops/s
Iteration  14: 530200.401 ops/s
Iteration  15: 529778.242 ops/s
Iteration  16: 528378.797 ops/s
Iteration  17: 530605.503 ops/s
Iteration  18: 528189.292 ops/s
Iteration  19: 528974.501 ops/s
Iteration  20: 529607.905 ops/s
Iteration  21: 530131.474 ops/s
Iteration  22: 530472.931 ops/s
Iteration  23: 527598.240 ops/s
Iteration  24: 529606.727 ops/s
Iteration  25: 529752.898 ops/s
Iteration  26: 529895.786 ops/s
Iteration  27: 529232.860 ops/s
Iteration  28: 529736.307 ops/s
Iteration  29: 529124.363 ops/s
Iteration  30: 529853.367 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_localEndpoint":
  529177.162 ±(99.9%) 720.894 ops/s [Average]
  (min, avg, max) = (526067.642, 529177.162, 530605.503), stdev = 1079.001
  CI (99.9%): [528456.268, 529898.057] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_localEndpoint  thrpt   30  529177.162 ± 720.894  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_remoteEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_remoteEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 185184.000 ops/s
# Warmup Iteration   2: 250079.482 ops/s
# Warmup Iteration   3: 465741.502 ops/s
# Warmup Iteration   4: 499670.870 ops/s
# Warmup Iteration   5: 502259.103 ops/s
# Warmup Iteration   6: 505780.376 ops/s
# Warmup Iteration   7: 506335.533 ops/s
# Warmup Iteration   8: 444249.623 ops/s
# Warmup Iteration   9: 429886.701 ops/s
# Warmup Iteration  10: 505691.079 ops/s
# Warmup Iteration  11: 509203.395 ops/s
# Warmup Iteration  12: 508116.808 ops/s
# Warmup Iteration  13: 507837.769 ops/s
# Warmup Iteration  14: 509405.043 ops/s
# Warmup Iteration  15: 507024.885 ops/s
# Warmup Iteration  16: 508897.857 ops/s
# Warmup Iteration  17: 507168.878 ops/s
# Warmup Iteration  18: 506237.331 ops/s
# Warmup Iteration  19: 506869.256 ops/s
# Warmup Iteration  20: 505732.938 ops/s
# Warmup Iteration  21: 506005.725 ops/s
# Warmup Iteration  22: 505165.908 ops/s
# Warmup Iteration  23: 505728.570 ops/s
# Warmup Iteration  24: 505487.026 ops/s
# Warmup Iteration  25: 504830.848 ops/s
# Warmup Iteration  26: 505748.141 ops/s
# Warmup Iteration  27: 506619.730 ops/s
# Warmup Iteration  28: 505767.191 ops/s
# Warmup Iteration  29: 507452.294 ops/s
# Warmup Iteration  30: 505873.294 ops/s
Iteration   1: 504040.118 ops/s
Iteration   2: 504378.827 ops/s
Iteration   3: 506296.643 ops/s
Iteration   4: 503175.847 ops/s
Iteration   5: 507376.742 ops/s
Iteration   6: 502798.671 ops/s
Iteration   7: 506340.262 ops/s
Iteration   8: 505355.927 ops/s
Iteration   9: 506118.981 ops/s
Iteration  10: 505414.307 ops/s
Iteration  11: 502317.940 ops/s
Iteration  12: 504380.849 ops/s
Iteration  13: 506574.334 ops/s
Iteration  14: 505149.492 ops/s
Iteration  15: 506659.866 ops/s
Iteration  16: 503233.270 ops/s
Iteration  17: 507112.571 ops/s
Iteration  18: 505315.074 ops/s
Iteration  19: 504408.232 ops/s
Iteration  20: 504803.562 ops/s
Iteration  21: 502893.496 ops/s
Iteration  22: 506349.263 ops/s
Iteration  23: 506073.566 ops/s
Iteration  24: 506491.355 ops/s
Iteration  25: 506731.999 ops/s
Iteration  26: 505122.861 ops/s
Iteration  27: 507797.190 ops/s
Iteration  28: 506623.929 ops/s
Iteration  29: 508140.954 ops/s
Iteration  30: 506765.847 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_remoteEndpoint":
  505474.732 ±(99.9%) 1040.940 ops/s [Average]
  (min, avg, max) = (502317.940, 505474.732, 508140.954), stdev = 1558.030
  CI (99.9%): [504433.792, 506515.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt       Score      Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_remoteEndpoint  thrpt   30  505474.732 ± 1040.940  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_tag$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_tag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 177344.408 ops/s
# Warmup Iteration   2: 242790.464 ops/s
# Warmup Iteration   3: 442355.742 ops/s
# Warmup Iteration   4: 482506.267 ops/s
# Warmup Iteration   5: 483700.389 ops/s
# Warmup Iteration   6: 485044.974 ops/s
# Warmup Iteration   7: 486725.270 ops/s
# Warmup Iteration   8: 446238.102 ops/s
# Warmup Iteration   9: 392800.710 ops/s
# Warmup Iteration  10: 488879.397 ops/s
# Warmup Iteration  11: 488350.041 ops/s
# Warmup Iteration  12: 490087.054 ops/s
# Warmup Iteration  13: 489820.801 ops/s
# Warmup Iteration  14: 489811.212 ops/s
# Warmup Iteration  15: 488442.564 ops/s
# Warmup Iteration  16: 489252.461 ops/s
# Warmup Iteration  17: 488359.925 ops/s
# Warmup Iteration  18: 488571.384 ops/s
# Warmup Iteration  19: 490351.773 ops/s
# Warmup Iteration  20: 488344.593 ops/s
# Warmup Iteration  21: 487417.816 ops/s
# Warmup Iteration  22: 489209.415 ops/s
# Warmup Iteration  23: 489112.768 ops/s
# Warmup Iteration  24: 486834.839 ops/s
# Warmup Iteration  25: 485944.720 ops/s
# Warmup Iteration  26: 488282.370 ops/s
# Warmup Iteration  27: 488243.789 ops/s
# Warmup Iteration  28: 488771.645 ops/s
# Warmup Iteration  29: 488956.234 ops/s
# Warmup Iteration  30: 488722.640 ops/s
Iteration   1: 487402.166 ops/s
Iteration   2: 486392.426 ops/s
Iteration   3: 487385.425 ops/s
Iteration   4: 487602.997 ops/s
Iteration   5: 487421.779 ops/s
Iteration   6: 488870.677 ops/s
Iteration   7: 488018.287 ops/s
Iteration   8: 487688.509 ops/s
Iteration   9: 489077.312 ops/s
Iteration  10: 488318.743 ops/s
Iteration  11: 488022.334 ops/s
Iteration  12: 485922.305 ops/s
Iteration  13: 488473.005 ops/s
Iteration  14: 489452.542 ops/s
Iteration  15: 486580.034 ops/s
Iteration  16: 488667.067 ops/s
Iteration  17: 486519.523 ops/s
Iteration  18: 489369.850 ops/s
Iteration  19: 488503.972 ops/s
Iteration  20: 488074.537 ops/s
Iteration  21: 487348.638 ops/s
Iteration  22: 487629.696 ops/s
Iteration  23: 488804.320 ops/s
Iteration  24: 486492.818 ops/s
Iteration  25: 489616.849 ops/s
Iteration  26: 489394.597 ops/s
Iteration  27: 488368.979 ops/s
Iteration  28: 488595.161 ops/s
Iteration  29: 489524.082 ops/s
Iteration  30: 489308.270 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_tag":
  488094.897 ±(99.9%) 698.111 ops/s [Average]
  (min, avg, max) = (485922.305, 488094.897, 489616.849), stdev = 1044.900
  CI (99.9%): [487396.785, 488793.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_partial_tag  thrpt   30  488094.897 ± 698.111  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_singleItem$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_singleItem

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105337.603 ops/s
# Warmup Iteration   2: 144494.745 ops/s
# Warmup Iteration   3: 144453.851 ops/s
# Warmup Iteration   4: 187663.509 ops/s
# Warmup Iteration   5: 225494.555 ops/s
# Warmup Iteration   6: 222489.386 ops/s
# Warmup Iteration   7: 224992.082 ops/s
# Warmup Iteration   8: 222861.520 ops/s
# Warmup Iteration   9: 224868.094 ops/s
# Warmup Iteration  10: 223742.905 ops/s
# Warmup Iteration  11: 227200.119 ops/s
# Warmup Iteration  12: 224930.332 ops/s
# Warmup Iteration  13: 226644.999 ops/s
# Warmup Iteration  14: 223848.491 ops/s
# Warmup Iteration  15: 227080.563 ops/s
# Warmup Iteration  16: 208088.879 ops/s
# Warmup Iteration  17: 177375.646 ops/s
# Warmup Iteration  18: 230491.889 ops/s
# Warmup Iteration  19: 230403.049 ops/s
# Warmup Iteration  20: 230070.722 ops/s
# Warmup Iteration  21: 230245.909 ops/s
# Warmup Iteration  22: 230009.918 ops/s
# Warmup Iteration  23: 229878.928 ops/s
# Warmup Iteration  24: 230282.447 ops/s
# Warmup Iteration  25: 229989.612 ops/s
# Warmup Iteration  26: 230184.117 ops/s
# Warmup Iteration  27: 229874.204 ops/s
# Warmup Iteration  28: 230281.383 ops/s
# Warmup Iteration  29: 230174.183 ops/s
# Warmup Iteration  30: 230051.364 ops/s
Iteration   1: 230255.646 ops/s
Iteration   2: 229653.018 ops/s
Iteration   3: 228721.340 ops/s
Iteration   4: 229015.973 ops/s
Iteration   5: 229867.002 ops/s
Iteration   6: 229320.170 ops/s
Iteration   7: 229386.232 ops/s
Iteration   8: 229518.349 ops/s
Iteration   9: 229653.168 ops/s
Iteration  10: 230037.198 ops/s
Iteration  11: 229571.079 ops/s
Iteration  12: 230315.142 ops/s
Iteration  13: 229227.879 ops/s
Iteration  14: 230306.579 ops/s
Iteration  15: 229535.602 ops/s
Iteration  16: 228437.121 ops/s
Iteration  17: 228060.549 ops/s
Iteration  18: 228386.136 ops/s
Iteration  19: 228534.445 ops/s
Iteration  20: 229562.547 ops/s
Iteration  21: 228918.060 ops/s
Iteration  22: 229029.774 ops/s
Iteration  23: 229681.138 ops/s
Iteration  24: 229427.140 ops/s
Iteration  25: 229515.046 ops/s
Iteration  26: 229343.636 ops/s
Iteration  27: 228467.831 ops/s
Iteration  28: 229057.832 ops/s
Iteration  29: 229372.488 ops/s
Iteration  30: 229704.714 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_singleItem":
  229329.428 ±(99.9%) 387.795 ops/s [Average]
  (min, avg, max) = (228060.549, 229329.428, 230315.142), stdev = 580.433
  CI (99.9%): [228941.633, 229717.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_json_v2_singleItem  thrpt   30  229329.428 ± 387.795  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176500.710 ops/s
# Warmup Iteration   2: 254079.359 ops/s
# Warmup Iteration   3: 368209.982 ops/s
# Warmup Iteration   4: 461046.362 ops/s
# Warmup Iteration   5: 459643.790 ops/s
# Warmup Iteration   6: 463234.830 ops/s
# Warmup Iteration   7: 466137.810 ops/s
# Warmup Iteration   8: 462212.176 ops/s
# Warmup Iteration   9: 460850.356 ops/s
# Warmup Iteration  10: 359857.311 ops/s
# Warmup Iteration  11: 435598.320 ops/s
# Warmup Iteration  12: 464269.500 ops/s
# Warmup Iteration  13: 465758.312 ops/s
# Warmup Iteration  14: 465668.392 ops/s
# Warmup Iteration  15: 466031.726 ops/s
# Warmup Iteration  16: 466201.212 ops/s
# Warmup Iteration  17: 465404.762 ops/s
# Warmup Iteration  18: 466147.880 ops/s
# Warmup Iteration  19: 466006.274 ops/s
# Warmup Iteration  20: 466299.435 ops/s
# Warmup Iteration  21: 464780.788 ops/s
# Warmup Iteration  22: 466772.385 ops/s
# Warmup Iteration  23: 465288.199 ops/s
# Warmup Iteration  24: 465468.767 ops/s
# Warmup Iteration  25: 465512.996 ops/s
# Warmup Iteration  26: 465783.995 ops/s
# Warmup Iteration  27: 465538.886 ops/s
# Warmup Iteration  28: 465135.242 ops/s
# Warmup Iteration  29: 465476.334 ops/s
# Warmup Iteration  30: 466576.845 ops/s
Iteration   1: 464845.148 ops/s
Iteration   2: 466630.787 ops/s
Iteration   3: 466979.835 ops/s
Iteration   4: 466206.981 ops/s
Iteration   5: 466213.295 ops/s
Iteration   6: 465887.217 ops/s
Iteration   7: 465861.549 ops/s
Iteration   8: 466737.492 ops/s
Iteration   9: 465622.141 ops/s
Iteration  10: 465580.980 ops/s
Iteration  11: 464943.434 ops/s
Iteration  12: 465752.993 ops/s
Iteration  13: 465552.304 ops/s
Iteration  14: 466085.669 ops/s
Iteration  15: 465802.532 ops/s
Iteration  16: 463616.405 ops/s
Iteration  17: 465240.448 ops/s
Iteration  18: 466240.020 ops/s
Iteration  19: 466229.829 ops/s
Iteration  20: 466914.766 ops/s
Iteration  21: 465556.676 ops/s
Iteration  22: 463389.536 ops/s
Iteration  23: 465021.100 ops/s
Iteration  24: 465470.918 ops/s
Iteration  25: 465377.910 ops/s
Iteration  26: 465829.332 ops/s
Iteration  27: 465788.823 ops/s
Iteration  28: 462515.522 ops/s
Iteration  29: 465104.774 ops/s
Iteration  30: 465259.329 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3":
  465541.925 ±(99.9%) 658.956 ops/s [Average]
  (min, avg, max) = (462515.522, 465541.925, 466979.835), stdev = 986.294
  CI (99.9%): [464882.969, 466200.880] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3  thrpt   30  465541.925 ± 658.956  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3_singleItem$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3_singleItem

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 189016.405 ops/s
# Warmup Iteration   2: 260973.802 ops/s
# Warmup Iteration   3: 410182.751 ops/s
# Warmup Iteration   4: 482060.300 ops/s
# Warmup Iteration   5: 489027.707 ops/s
# Warmup Iteration   6: 490294.439 ops/s
# Warmup Iteration   7: 489904.421 ops/s
# Warmup Iteration   8: 484014.632 ops/s
# Warmup Iteration   9: 476832.580 ops/s
# Warmup Iteration  10: 360894.451 ops/s
# Warmup Iteration  11: 493082.488 ops/s
# Warmup Iteration  12: 492850.912 ops/s
# Warmup Iteration  13: 491751.451 ops/s
# Warmup Iteration  14: 492736.767 ops/s
# Warmup Iteration  15: 492290.280 ops/s
# Warmup Iteration  16: 491860.638 ops/s
# Warmup Iteration  17: 492187.180 ops/s
# Warmup Iteration  18: 492529.715 ops/s
# Warmup Iteration  19: 491482.893 ops/s
# Warmup Iteration  20: 491042.503 ops/s
# Warmup Iteration  21: 491635.934 ops/s
# Warmup Iteration  22: 492526.541 ops/s
# Warmup Iteration  23: 492543.464 ops/s
# Warmup Iteration  24: 493249.563 ops/s
# Warmup Iteration  25: 493234.299 ops/s
# Warmup Iteration  26: 492027.583 ops/s
# Warmup Iteration  27: 492324.741 ops/s
# Warmup Iteration  28: 491939.829 ops/s
# Warmup Iteration  29: 492996.928 ops/s
# Warmup Iteration  30: 491679.404 ops/s
Iteration   1: 491687.962 ops/s
Iteration   2: 492546.080 ops/s
Iteration   3: 493536.057 ops/s
Iteration   4: 492759.918 ops/s
Iteration   5: 492497.405 ops/s
Iteration   6: 492708.149 ops/s
Iteration   7: 492628.657 ops/s
Iteration   8: 490829.201 ops/s
Iteration   9: 491891.893 ops/s
Iteration  10: 491111.864 ops/s
Iteration  11: 487775.099 ops/s
Iteration  12: 492647.112 ops/s
Iteration  13: 493784.036 ops/s
Iteration  14: 489753.827 ops/s
Iteration  15: 490388.592 ops/s
Iteration  16: 490491.097 ops/s
Iteration  17: 488124.633 ops/s
Iteration  18: 493236.219 ops/s
Iteration  19: 492656.744 ops/s
Iteration  20: 492246.027 ops/s
Iteration  21: 492630.087 ops/s
Iteration  22: 492000.387 ops/s
Iteration  23: 489629.743 ops/s
Iteration  24: 492828.552 ops/s
Iteration  25: 492010.793 ops/s
Iteration  26: 491392.930 ops/s
Iteration  27: 491564.976 ops/s
Iteration  28: 490472.089 ops/s
Iteration  29: 490076.527 ops/s
Iteration  30: 492537.662 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3_singleItem":
  491614.811 ±(99.9%) 993.982 ops/s [Average]
  (min, avg, max) = (487775.099, 491614.811, 493784.036), stdev = 1487.745
  CI (99.9%): [490620.829, 492608.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_proto3_singleItem  thrpt   30  491614.811 ± 993.982  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 111800.899 ops/s
# Warmup Iteration   2: 161109.578 ops/s
# Warmup Iteration   3: 260472.579 ops/s
# Warmup Iteration   4: 309535.239 ops/s
# Warmup Iteration   5: 309103.676 ops/s
# Warmup Iteration   6: 308563.301 ops/s
# Warmup Iteration   7: 307867.016 ops/s
# Warmup Iteration   8: 306431.893 ops/s
# Warmup Iteration   9: 270852.436 ops/s
# Warmup Iteration  10: 261718.707 ops/s
# Warmup Iteration  11: 308904.880 ops/s
# Warmup Iteration  12: 308646.121 ops/s
# Warmup Iteration  13: 307559.396 ops/s
# Warmup Iteration  14: 308490.474 ops/s
# Warmup Iteration  15: 308888.832 ops/s
# Warmup Iteration  16: 309035.975 ops/s
# Warmup Iteration  17: 306373.364 ops/s
# Warmup Iteration  18: 304948.805 ops/s
# Warmup Iteration  19: 305570.808 ops/s
# Warmup Iteration  20: 305395.869 ops/s
# Warmup Iteration  21: 304747.086 ops/s
# Warmup Iteration  22: 306092.318 ops/s
# Warmup Iteration  23: 305154.268 ops/s
# Warmup Iteration  24: 306256.789 ops/s
# Warmup Iteration  25: 305996.879 ops/s
# Warmup Iteration  26: 305966.758 ops/s
# Warmup Iteration  27: 305886.270 ops/s
# Warmup Iteration  28: 305433.852 ops/s
# Warmup Iteration  29: 305805.701 ops/s
# Warmup Iteration  30: 306265.964 ops/s
Iteration   1: 306448.433 ops/s
Iteration   2: 306893.223 ops/s
Iteration   3: 306468.133 ops/s
Iteration   4: 306370.840 ops/s
Iteration   5: 306605.204 ops/s
Iteration   6: 306676.344 ops/s
Iteration   7: 306039.521 ops/s
Iteration   8: 306826.521 ops/s
Iteration   9: 306646.957 ops/s
Iteration  10: 305644.047 ops/s
Iteration  11: 307094.738 ops/s
Iteration  12: 304987.656 ops/s
Iteration  13: 305226.696 ops/s
Iteration  14: 306101.549 ops/s
Iteration  15: 305795.413 ops/s
Iteration  16: 303672.025 ops/s
Iteration  17: 306396.761 ops/s
Iteration  18: 304800.519 ops/s
Iteration  19: 305196.183 ops/s
Iteration  20: 306888.448 ops/s
Iteration  21: 305017.102 ops/s
Iteration  22: 306604.472 ops/s
Iteration  23: 306495.826 ops/s
Iteration  24: 306358.380 ops/s
Iteration  25: 306700.522 ops/s
Iteration  26: 306939.299 ops/s
Iteration  27: 304659.489 ops/s
Iteration  28: 305521.052 ops/s
Iteration  29: 306209.852 ops/s
Iteration  30: 306130.451 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift":
  306047.188 ±(99.9%) 552.519 ops/s [Average]
  (min, avg, max) = (303672.025, 306047.188, 307094.738), stdev = 826.985
  CI (99.9%): [305494.669, 306599.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift  thrpt   30  306047.188 ± 552.519  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_incorrectFirstByte$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_incorrectFirstByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 108741.320 ops/s
# Warmup Iteration   2: 149541.686 ops/s
# Warmup Iteration   3: 243865.588 ops/s
# Warmup Iteration   4: 311119.594 ops/s
# Warmup Iteration   5: 309748.507 ops/s
# Warmup Iteration   6: 312045.770 ops/s
# Warmup Iteration   7: 311467.860 ops/s
# Warmup Iteration   8: 311963.366 ops/s
# Warmup Iteration   9: 247450.133 ops/s
# Warmup Iteration  10: 275693.171 ops/s
# Warmup Iteration  11: 315111.876 ops/s
# Warmup Iteration  12: 314390.581 ops/s
# Warmup Iteration  13: 314765.050 ops/s
# Warmup Iteration  14: 314439.600 ops/s
# Warmup Iteration  15: 314477.044 ops/s
# Warmup Iteration  16: 314547.705 ops/s
# Warmup Iteration  17: 315735.529 ops/s
# Warmup Iteration  18: 314205.824 ops/s
# Warmup Iteration  19: 313895.565 ops/s
# Warmup Iteration  20: 314778.693 ops/s
# Warmup Iteration  21: 315033.517 ops/s
# Warmup Iteration  22: 314899.769 ops/s
# Warmup Iteration  23: 315084.400 ops/s
# Warmup Iteration  24: 315409.941 ops/s
# Warmup Iteration  25: 314669.000 ops/s
# Warmup Iteration  26: 314917.964 ops/s
# Warmup Iteration  27: 313929.587 ops/s
# Warmup Iteration  28: 313066.547 ops/s
# Warmup Iteration  29: 314991.205 ops/s
# Warmup Iteration  30: 314813.930 ops/s
Iteration   1: 313402.953 ops/s
Iteration   2: 315114.329 ops/s
Iteration   3: 316396.052 ops/s
Iteration   4: 315253.324 ops/s
Iteration   5: 313977.589 ops/s
Iteration   6: 314235.190 ops/s
Iteration   7: 312809.910 ops/s
Iteration   8: 313568.457 ops/s
Iteration   9: 314165.827 ops/s
Iteration  10: 314462.181 ops/s
Iteration  11: 316045.758 ops/s
Iteration  12: 315110.915 ops/s
Iteration  13: 310904.115 ops/s
Iteration  14: 315620.330 ops/s
Iteration  15: 315199.326 ops/s
Iteration  16: 314191.740 ops/s
Iteration  17: 314285.464 ops/s
Iteration  18: 312977.750 ops/s
Iteration  19: 314395.783 ops/s
Iteration  20: 314963.998 ops/s
Iteration  21: 315416.823 ops/s
Iteration  22: 315476.254 ops/s
Iteration  23: 314626.624 ops/s
Iteration  24: 312875.730 ops/s
Iteration  25: 314186.779 ops/s
Iteration  26: 314191.402 ops/s
Iteration  27: 315747.531 ops/s
Iteration  28: 314642.096 ops/s
Iteration  29: 312419.890 ops/s
Iteration  30: 314581.771 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_incorrectFirstByte":
  314374.863 ±(99.9%) 785.903 ops/s [Average]
  (min, avg, max) = (310904.115, 314374.863, 316396.052), stdev = 1176.302
  CI (99.9%): [313588.961, 315160.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_incorrectFirstByte  thrpt   30  314374.863 ± 785.903  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_singleItem$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_singleItem

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98796.245 ops/s
# Warmup Iteration   2: 130952.724 ops/s
# Warmup Iteration   3: 138478.912 ops/s
# Warmup Iteration   4: 236621.634 ops/s
# Warmup Iteration   5: 229273.655 ops/s
# Warmup Iteration   6: 227342.893 ops/s
# Warmup Iteration   7: 232707.559 ops/s
# Warmup Iteration   8: 231018.702 ops/s
# Warmup Iteration   9: 231606.939 ops/s
# Warmup Iteration  10: 228660.980 ops/s
# Warmup Iteration  11: 227771.878 ops/s
# Warmup Iteration  12: 233251.651 ops/s
# Warmup Iteration  13: 157162.120 ops/s
# Warmup Iteration  14: 231177.025 ops/s
# Warmup Iteration  15: 232241.349 ops/s
# Warmup Iteration  16: 232233.545 ops/s
# Warmup Iteration  17: 237359.208 ops/s
# Warmup Iteration  18: 237688.210 ops/s
# Warmup Iteration  19: 236994.120 ops/s
# Warmup Iteration  20: 237252.191 ops/s
# Warmup Iteration  21: 236273.066 ops/s
# Warmup Iteration  22: 235855.349 ops/s
# Warmup Iteration  23: 237548.574 ops/s
# Warmup Iteration  24: 237242.919 ops/s
# Warmup Iteration  25: 237122.478 ops/s
# Warmup Iteration  26: 237108.604 ops/s
# Warmup Iteration  27: 237537.481 ops/s
# Warmup Iteration  28: 236630.933 ops/s
# Warmup Iteration  29: 237141.479 ops/s
# Warmup Iteration  30: 236450.775 ops/s
Iteration   1: 237853.594 ops/s
Iteration   2: 236757.377 ops/s
Iteration   3: 237243.649 ops/s
Iteration   4: 237279.177 ops/s
Iteration   5: 236891.828 ops/s
Iteration   6: 236642.920 ops/s
Iteration   7: 236631.988 ops/s
Iteration   8: 236269.098 ops/s
Iteration   9: 237760.282 ops/s
Iteration  10: 237699.662 ops/s
Iteration  11: 235545.853 ops/s
Iteration  12: 238016.656 ops/s
Iteration  13: 237326.086 ops/s
Iteration  14: 238030.853 ops/s
Iteration  15: 237072.288 ops/s
Iteration  16: 237488.563 ops/s
Iteration  17: 236563.839 ops/s
Iteration  18: 237222.199 ops/s
Iteration  19: 238288.065 ops/s
Iteration  20: 237448.549 ops/s
Iteration  21: 237853.939 ops/s
Iteration  22: 237578.807 ops/s
Iteration  23: 237044.120 ops/s
Iteration  24: 236658.425 ops/s
Iteration  25: 236974.405 ops/s
Iteration  26: 236991.420 ops/s
Iteration  27: 237045.472 ops/s
Iteration  28: 236937.156 ops/s
Iteration  29: 237361.042 ops/s
Iteration  30: 236733.644 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_singleItem":
  237173.699 ±(99.9%) 391.306 ops/s [Average]
  (min, avg, max) = (235545.853, 237173.699, 238288.065), stdev = 585.689
  CI (99.9%): [236782.392, 237565.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_thrift_singleItem  thrpt   30  237173.699 ± 391.306  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_unknown$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_unknown

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158051.807 ops/s
# Warmup Iteration   2: 197518.252 ops/s
# Warmup Iteration   3: 227062.812 ops/s
# Warmup Iteration   4: 324135.882 ops/s
# Warmup Iteration   5: 320877.497 ops/s
# Warmup Iteration   6: 322195.816 ops/s
# Warmup Iteration   7: 325907.292 ops/s
# Warmup Iteration   8: 322540.936 ops/s
# Warmup Iteration   9: 322149.922 ops/s
# Warmup Iteration  10: 325627.760 ops/s
# Warmup Iteration  11: 323242.345 ops/s
# Warmup Iteration  12: 325938.135 ops/s
# Warmup Iteration  13: 228490.864 ops/s
# Warmup Iteration  14: 324241.387 ops/s
# Warmup Iteration  15: 324835.464 ops/s
# Warmup Iteration  16: 324762.157 ops/s
# Warmup Iteration  17: 334749.143 ops/s
# Warmup Iteration  18: 335469.030 ops/s
# Warmup Iteration  19: 334798.057 ops/s
# Warmup Iteration  20: 335231.563 ops/s
# Warmup Iteration  21: 334562.552 ops/s
# Warmup Iteration  22: 335027.491 ops/s
# Warmup Iteration  23: 335691.164 ops/s
# Warmup Iteration  24: 334954.161 ops/s
# Warmup Iteration  25: 334951.247 ops/s
# Warmup Iteration  26: 335128.747 ops/s
# Warmup Iteration  27: 335317.348 ops/s
# Warmup Iteration  28: 334855.164 ops/s
# Warmup Iteration  29: 334473.238 ops/s
# Warmup Iteration  30: 335342.888 ops/s
Iteration   1: 335145.172 ops/s
Iteration   2: 334904.595 ops/s
Iteration   3: 335323.581 ops/s
Iteration   4: 336203.798 ops/s
Iteration   5: 335418.797 ops/s
Iteration   6: 335015.724 ops/s
Iteration   7: 334540.822 ops/s
Iteration   8: 334850.372 ops/s
Iteration   9: 333772.305 ops/s
Iteration  10: 333998.639 ops/s
Iteration  11: 333781.232 ops/s
Iteration  12: 333872.269 ops/s
Iteration  13: 334311.997 ops/s
Iteration  14: 335007.644 ops/s
Iteration  15: 335316.828 ops/s
Iteration  16: 335978.284 ops/s
Iteration  17: 335128.956 ops/s
Iteration  18: 335041.395 ops/s
Iteration  19: 336549.645 ops/s
Iteration  20: 335986.845 ops/s
Iteration  21: 336872.778 ops/s
Iteration  22: 336251.750 ops/s
Iteration  23: 336377.794 ops/s
Iteration  24: 336769.887 ops/s
Iteration  25: 336054.643 ops/s
Iteration  26: 335343.031 ops/s
Iteration  27: 336324.300 ops/s
Iteration  28: 336068.215 ops/s
Iteration  29: 336193.965 ops/s
Iteration  30: 336186.547 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_unknown":
  335419.727 ±(99.9%) 607.320 ops/s [Average]
  (min, avg, max) = (333772.305, 335419.727, 336872.778), stdev = 909.008
  CI (99.9%): [334812.407, 336027.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForListMessage_unknown  thrpt   30  335419.727 ± 607.320  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 108046.086 ops/s
# Warmup Iteration   2: 160595.401 ops/s
# Warmup Iteration   3: 197625.078 ops/s
# Warmup Iteration   4: 272531.305 ops/s
# Warmup Iteration   5: 270319.200 ops/s
# Warmup Iteration   6: 268771.255 ops/s
# Warmup Iteration   7: 270909.073 ops/s
# Warmup Iteration   8: 272056.204 ops/s
# Warmup Iteration   9: 269333.011 ops/s
# Warmup Iteration  10: 269221.865 ops/s
# Warmup Iteration  11: 271826.892 ops/s
# Warmup Iteration  12: 194066.138 ops/s
# Warmup Iteration  13: 272895.020 ops/s
# Warmup Iteration  14: 272334.165 ops/s
# Warmup Iteration  15: 272258.336 ops/s
# Warmup Iteration  16: 272026.594 ops/s
# Warmup Iteration  17: 273547.038 ops/s
# Warmup Iteration  18: 273469.929 ops/s
# Warmup Iteration  19: 273096.062 ops/s
# Warmup Iteration  20: 272272.188 ops/s
# Warmup Iteration  21: 272542.400 ops/s
# Warmup Iteration  22: 273719.251 ops/s
# Warmup Iteration  23: 273475.784 ops/s
# Warmup Iteration  24: 274058.746 ops/s
# Warmup Iteration  25: 273286.499 ops/s
# Warmup Iteration  26: 273290.788 ops/s
# Warmup Iteration  27: 273883.212 ops/s
# Warmup Iteration  28: 273576.935 ops/s
# Warmup Iteration  29: 273063.491 ops/s
# Warmup Iteration  30: 274221.365 ops/s
Iteration   1: 274393.069 ops/s
Iteration   2: 274787.266 ops/s
Iteration   3: 274045.862 ops/s
Iteration   4: 273340.111 ops/s
Iteration   5: 273635.810 ops/s
Iteration   6: 273585.125 ops/s
Iteration   7: 273309.138 ops/s
Iteration   8: 273221.628 ops/s
Iteration   9: 274218.288 ops/s
Iteration  10: 274306.398 ops/s
Iteration  11: 274076.030 ops/s
Iteration  12: 272974.119 ops/s
Iteration  13: 274047.914 ops/s
Iteration  14: 273715.297 ops/s
Iteration  15: 273814.760 ops/s
Iteration  16: 273614.035 ops/s
Iteration  17: 273860.147 ops/s
Iteration  18: 273360.219 ops/s
Iteration  19: 274212.657 ops/s
Iteration  20: 274346.608 ops/s
Iteration  21: 273967.334 ops/s
Iteration  22: 273602.969 ops/s
Iteration  23: 273420.391 ops/s
Iteration  24: 273941.633 ops/s
Iteration  25: 273842.796 ops/s
Iteration  26: 273679.958 ops/s
Iteration  27: 273618.812 ops/s
Iteration  28: 272419.559 ops/s
Iteration  29: 273167.240 ops/s
Iteration  30: 272582.975 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1":
  273703.605 ±(99.9%) 350.792 ops/s [Average]
  (min, avg, max) = (272419.559, 273703.605, 274787.266), stdev = 525.049
  CI (99.9%): [273352.813, 274054.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1  thrpt   30  273703.605 ± 350.792  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1_list$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41926.546 ops/s
# Warmup Iteration   2: 52457.724 ops/s
# Warmup Iteration   3: 52578.664 ops/s
# Warmup Iteration   4: 52399.633 ops/s
# Warmup Iteration   5: 52257.968 ops/s
# Warmup Iteration   6: 55690.922 ops/s
# Warmup Iteration   7: 66622.579 ops/s
# Warmup Iteration   8: 66376.355 ops/s
# Warmup Iteration   9: 66445.655 ops/s
# Warmup Iteration  10: 65241.879 ops/s
# Warmup Iteration  11: 65654.313 ops/s
# Warmup Iteration  12: 65609.693 ops/s
# Warmup Iteration  13: 65674.349 ops/s
# Warmup Iteration  14: 65636.661 ops/s
# Warmup Iteration  15: 65411.756 ops/s
# Warmup Iteration  16: 65848.331 ops/s
# Warmup Iteration  17: 65097.468 ops/s
# Warmup Iteration  18: 65504.339 ops/s
# Warmup Iteration  19: 64902.059 ops/s
# Warmup Iteration  20: 66041.048 ops/s
# Warmup Iteration  21: 65709.719 ops/s
# Warmup Iteration  22: 65844.508 ops/s
# Warmup Iteration  23: 66071.639 ops/s
# Warmup Iteration  24: 65714.060 ops/s
# Warmup Iteration  25: 66296.583 ops/s
# Warmup Iteration  26: 66082.930 ops/s
# Warmup Iteration  27: 65952.435 ops/s
# Warmup Iteration  28: 65026.106 ops/s
# Warmup Iteration  29: 65426.171 ops/s
# Warmup Iteration  30: 65419.658 ops/s
Iteration   1: 65375.756 ops/s
Iteration   2: 65715.318 ops/s
Iteration   3: 65689.704 ops/s
Iteration   4: 64631.802 ops/s
Iteration   5: 53164.763 ops/s
Iteration   6: 54220.776 ops/s
Iteration   7: 52989.115 ops/s
Iteration   8: 61710.375 ops/s
Iteration   9: 66215.777 ops/s
Iteration  10: 66229.657 ops/s
Iteration  11: 66184.451 ops/s
Iteration  12: 66333.642 ops/s
Iteration  13: 66012.618 ops/s
Iteration  14: 66191.089 ops/s
Iteration  15: 66236.028 ops/s
Iteration  16: 65948.084 ops/s
Iteration  17: 66005.987 ops/s
Iteration  18: 66387.536 ops/s
Iteration  19: 66185.147 ops/s
Iteration  20: 66286.432 ops/s
Iteration  21: 66123.311 ops/s
Iteration  22: 66231.086 ops/s
Iteration  23: 66378.634 ops/s
Iteration  24: 66118.280 ops/s
Iteration  25: 66128.402 ops/s
Iteration  26: 66271.625 ops/s
Iteration  27: 66068.933 ops/s
Iteration  28: 65845.384 ops/s
Iteration  29: 66103.087 ops/s
Iteration  30: 66207.349 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1_list":
  64639.672 ±(99.9%) 2599.775 ops/s [Average]
  (min, avg, max) = (52989.115, 64639.672, 66387.536), stdev = 3891.221
  CI (99.9%): [62039.897, 67239.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt      Score      Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v1_list  thrpt   30  64639.672 ± 2599.775  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 104836.783 ops/s
# Warmup Iteration   2: 141997.602 ops/s
# Warmup Iteration   3: 144097.291 ops/s
# Warmup Iteration   4: 177360.482 ops/s
# Warmup Iteration   5: 218462.375 ops/s
# Warmup Iteration   6: 215538.446 ops/s
# Warmup Iteration   7: 218582.450 ops/s
# Warmup Iteration   8: 214801.486 ops/s
# Warmup Iteration   9: 219100.011 ops/s
# Warmup Iteration  10: 217132.098 ops/s
# Warmup Iteration  11: 217928.950 ops/s
# Warmup Iteration  12: 217271.937 ops/s
# Warmup Iteration  13: 216670.671 ops/s
# Warmup Iteration  14: 217456.956 ops/s
# Warmup Iteration  15: 215304.250 ops/s
# Warmup Iteration  16: 217684.654 ops/s
# Warmup Iteration  17: 183886.671 ops/s
# Warmup Iteration  18: 184723.669 ops/s
# Warmup Iteration  19: 219439.044 ops/s
# Warmup Iteration  20: 219384.060 ops/s
# Warmup Iteration  21: 220349.843 ops/s
# Warmup Iteration  22: 220322.618 ops/s
# Warmup Iteration  23: 220338.327 ops/s
# Warmup Iteration  24: 220262.547 ops/s
# Warmup Iteration  25: 220068.798 ops/s
# Warmup Iteration  26: 219849.111 ops/s
# Warmup Iteration  27: 220682.494 ops/s
# Warmup Iteration  28: 219492.607 ops/s
# Warmup Iteration  29: 219750.809 ops/s
# Warmup Iteration  30: 220023.259 ops/s
Iteration   1: 220348.483 ops/s
Iteration   2: 220405.369 ops/s
Iteration   3: 219923.492 ops/s
Iteration   4: 219668.684 ops/s
Iteration   5: 220683.396 ops/s
Iteration   6: 220166.388 ops/s
Iteration   7: 219062.845 ops/s
Iteration   8: 220074.036 ops/s
Iteration   9: 220045.805 ops/s
Iteration  10: 219641.455 ops/s
Iteration  11: 219634.011 ops/s
Iteration  12: 220110.903 ops/s
Iteration  13: 220565.504 ops/s
Iteration  14: 220022.648 ops/s
Iteration  15: 219908.959 ops/s
Iteration  16: 219740.363 ops/s
Iteration  17: 219981.949 ops/s
Iteration  18: 220263.360 ops/s
Iteration  19: 219516.802 ops/s
Iteration  20: 219463.477 ops/s
Iteration  21: 219565.397 ops/s
Iteration  22: 219600.559 ops/s
Iteration  23: 220704.774 ops/s
Iteration  24: 220321.416 ops/s
Iteration  25: 219383.069 ops/s
Iteration  26: 220113.195 ops/s
Iteration  27: 220178.617 ops/s
Iteration  28: 220254.208 ops/s
Iteration  29: 220347.931 ops/s
Iteration  30: 219544.490 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2":
  219974.720 ±(99.9%) 271.574 ops/s [Average]
  (min, avg, max) = (219062.845, 219974.720, 220704.774), stdev = 406.479
  CI (99.9%): [219703.146, 220246.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2  thrpt   30  219974.720 ± 271.574  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2_list$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95937.397 ops/s
# Warmup Iteration   2: 129226.822 ops/s
# Warmup Iteration   3: 130317.708 ops/s
# Warmup Iteration   4: 149372.812 ops/s
# Warmup Iteration   5: 198509.420 ops/s
# Warmup Iteration   6: 196006.910 ops/s
# Warmup Iteration   7: 200102.484 ops/s
# Warmup Iteration   8: 199844.514 ops/s
# Warmup Iteration   9: 195673.673 ops/s
# Warmup Iteration  10: 197099.354 ops/s
# Warmup Iteration  11: 196541.547 ops/s
# Warmup Iteration  12: 198506.893 ops/s
# Warmup Iteration  13: 197887.489 ops/s
# Warmup Iteration  14: 200083.727 ops/s
# Warmup Iteration  15: 197970.947 ops/s
# Warmup Iteration  16: 199617.066 ops/s
# Warmup Iteration  17: 200068.375 ops/s
# Warmup Iteration  18: 132040.017 ops/s
# Warmup Iteration  19: 201914.203 ops/s
# Warmup Iteration  20: 201809.829 ops/s
# Warmup Iteration  21: 201321.644 ops/s
# Warmup Iteration  22: 201577.086 ops/s
# Warmup Iteration  23: 201322.014 ops/s
# Warmup Iteration  24: 201317.362 ops/s
# Warmup Iteration  25: 200964.994 ops/s
# Warmup Iteration  26: 200803.056 ops/s
# Warmup Iteration  27: 201245.642 ops/s
# Warmup Iteration  28: 200503.122 ops/s
# Warmup Iteration  29: 199731.281 ops/s
# Warmup Iteration  30: 200288.507 ops/s
Iteration   1: 200088.992 ops/s
Iteration   2: 200827.005 ops/s
Iteration   3: 200678.337 ops/s
Iteration   4: 199906.741 ops/s
Iteration   5: 199771.756 ops/s
Iteration   6: 199213.311 ops/s
Iteration   7: 199623.963 ops/s
Iteration   8: 199880.846 ops/s
Iteration   9: 200964.728 ops/s
Iteration  10: 201546.525 ops/s
Iteration  11: 200637.199 ops/s
Iteration  12: 201075.863 ops/s
Iteration  13: 200681.088 ops/s
Iteration  14: 200085.089 ops/s
Iteration  15: 200089.784 ops/s
Iteration  16: 200734.109 ops/s
Iteration  17: 199338.280 ops/s
Iteration  18: 200162.096 ops/s
Iteration  19: 199462.884 ops/s
Iteration  20: 200251.555 ops/s
Iteration  21: 200791.674 ops/s
Iteration  22: 200094.423 ops/s
Iteration  23: 198119.785 ops/s
Iteration  24: 199313.220 ops/s
Iteration  25: 199544.226 ops/s
Iteration  26: 200614.828 ops/s
Iteration  27: 200535.340 ops/s
Iteration  28: 200422.718 ops/s
Iteration  29: 200501.403 ops/s
Iteration  30: 200650.510 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2_list":
  200186.943 ±(99.9%) 464.657 ops/s [Average]
  (min, avg, max) = (198119.785, 200186.943, 201546.525), stdev = 695.477
  CI (99.9%): [199722.286, 200651.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_json_v2_list  thrpt   30  200186.943 ± 464.657  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115293.433 ops/s
# Warmup Iteration   2: 161518.782 ops/s
# Warmup Iteration   3: 163927.575 ops/s
# Warmup Iteration   4: 233806.531 ops/s
# Warmup Iteration   5: 277460.622 ops/s
# Warmup Iteration   6: 270703.582 ops/s
# Warmup Iteration   7: 270509.837 ops/s
# Warmup Iteration   8: 278277.299 ops/s
# Warmup Iteration   9: 275992.490 ops/s
# Warmup Iteration  10: 278000.606 ops/s
# Warmup Iteration  11: 273622.938 ops/s
# Warmup Iteration  12: 273056.075 ops/s
# Warmup Iteration  13: 272759.298 ops/s
# Warmup Iteration  14: 273472.301 ops/s
# Warmup Iteration  15: 171954.413 ops/s
# Warmup Iteration  16: 276275.991 ops/s
# Warmup Iteration  17: 285841.496 ops/s
# Warmup Iteration  18: 286131.573 ops/s
# Warmup Iteration  19: 286460.757 ops/s
# Warmup Iteration  20: 286415.288 ops/s
# Warmup Iteration  21: 286505.075 ops/s
# Warmup Iteration  22: 286192.030 ops/s
# Warmup Iteration  23: 287775.781 ops/s
# Warmup Iteration  24: 285803.170 ops/s
# Warmup Iteration  25: 287615.605 ops/s
# Warmup Iteration  26: 286198.807 ops/s
# Warmup Iteration  27: 285363.306 ops/s
# Warmup Iteration  28: 287220.847 ops/s
# Warmup Iteration  29: 286503.446 ops/s
# Warmup Iteration  30: 286416.610 ops/s
Iteration   1: 286719.027 ops/s
Iteration   2: 284969.960 ops/s
Iteration   3: 286095.879 ops/s
Iteration   4: 284994.790 ops/s
Iteration   5: 286679.205 ops/s
Iteration   6: 286697.497 ops/s
Iteration   7: 286036.880 ops/s
Iteration   8: 286217.619 ops/s
Iteration   9: 287191.224 ops/s
Iteration  10: 286992.284 ops/s
Iteration  11: 285881.882 ops/s
Iteration  12: 286941.669 ops/s
Iteration  13: 287141.461 ops/s
Iteration  14: 286889.706 ops/s
Iteration  15: 287287.270 ops/s
Iteration  16: 287166.642 ops/s
Iteration  17: 286994.551 ops/s
Iteration  18: 287115.493 ops/s
Iteration  19: 285688.737 ops/s
Iteration  20: 285478.650 ops/s
Iteration  21: 285806.935 ops/s
Iteration  22: 285967.481 ops/s
Iteration  23: 287948.677 ops/s
Iteration  24: 287521.842 ops/s
Iteration  25: 287596.215 ops/s
Iteration  26: 288726.401 ops/s
Iteration  27: 287267.623 ops/s
Iteration  28: 286942.330 ops/s
Iteration  29: 286792.534 ops/s
Iteration  30: 288356.578 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3":
  286736.901 ±(99.9%) 596.700 ops/s [Average]
  (min, avg, max) = (284969.960, 286736.901, 288726.401), stdev = 893.112
  CI (99.9%): [286140.202, 287333.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3  thrpt   30  286736.901 ± 596.700  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3_list$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107303.406 ops/s
# Warmup Iteration   2: 158389.222 ops/s
# Warmup Iteration   3: 159216.730 ops/s
# Warmup Iteration   4: 221626.057 ops/s
# Warmup Iteration   5: 254093.973 ops/s
# Warmup Iteration   6: 248598.615 ops/s
# Warmup Iteration   7: 251215.585 ops/s
# Warmup Iteration   8: 254399.819 ops/s
# Warmup Iteration   9: 250949.859 ops/s
# Warmup Iteration  10: 255113.009 ops/s
# Warmup Iteration  11: 253299.677 ops/s
# Warmup Iteration  12: 255374.600 ops/s
# Warmup Iteration  13: 252395.174 ops/s
# Warmup Iteration  14: 253029.991 ops/s
# Warmup Iteration  15: 204291.319 ops/s
# Warmup Iteration  16: 219604.196 ops/s
# Warmup Iteration  17: 259761.807 ops/s
# Warmup Iteration  18: 259307.055 ops/s
# Warmup Iteration  19: 260481.638 ops/s
# Warmup Iteration  20: 260423.424 ops/s
# Warmup Iteration  21: 260603.442 ops/s
# Warmup Iteration  22: 260638.238 ops/s
# Warmup Iteration  23: 261079.591 ops/s
# Warmup Iteration  24: 260873.768 ops/s
# Warmup Iteration  25: 261775.865 ops/s
# Warmup Iteration  26: 261640.286 ops/s
# Warmup Iteration  27: 260866.132 ops/s
# Warmup Iteration  28: 261872.989 ops/s
# Warmup Iteration  29: 260542.372 ops/s
# Warmup Iteration  30: 260418.573 ops/s
Iteration   1: 258326.106 ops/s
Iteration   2: 257126.474 ops/s
Iteration   3: 260505.176 ops/s
Iteration   4: 260098.876 ops/s
Iteration   5: 261668.784 ops/s
Iteration   6: 261267.980 ops/s
Iteration   7: 260645.389 ops/s
Iteration   8: 261606.307 ops/s
Iteration   9: 259924.212 ops/s
Iteration  10: 260303.595 ops/s
Iteration  11: 259217.271 ops/s
Iteration  12: 260100.551 ops/s
Iteration  13: 260082.580 ops/s
Iteration  14: 259653.113 ops/s
Iteration  15: 261835.942 ops/s
Iteration  16: 261600.884 ops/s
Iteration  17: 261962.440 ops/s
Iteration  18: 259708.611 ops/s
Iteration  19: 260381.677 ops/s
Iteration  20: 260459.066 ops/s
Iteration  21: 260337.503 ops/s
Iteration  22: 260934.251 ops/s
Iteration  23: 260640.360 ops/s
Iteration  24: 261768.027 ops/s
Iteration  25: 260685.169 ops/s
Iteration  26: 261033.637 ops/s
Iteration  27: 261759.278 ops/s
Iteration  28: 260370.868 ops/s
Iteration  29: 260720.306 ops/s
Iteration  30: 261164.558 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3_list":
  260529.633 ±(99.9%) 707.719 ops/s [Average]
  (min, avg, max) = (257126.474, 260529.633, 261962.440), stdev = 1059.280
  CI (99.9%): [259821.914, 261237.352] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_proto3_list  thrpt   30  260529.633 ± 707.719  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139104.878 ops/s
# Warmup Iteration   2: 193168.651 ops/s
# Warmup Iteration   3: 328218.412 ops/s
# Warmup Iteration   4: 392699.813 ops/s
# Warmup Iteration   5: 393665.489 ops/s
# Warmup Iteration   6: 397694.504 ops/s
# Warmup Iteration   7: 399749.885 ops/s
# Warmup Iteration   8: 398202.692 ops/s
# Warmup Iteration   9: 275396.716 ops/s
# Warmup Iteration  10: 398812.377 ops/s
# Warmup Iteration  11: 397245.903 ops/s
# Warmup Iteration  12: 398916.112 ops/s
# Warmup Iteration  13: 398742.496 ops/s
# Warmup Iteration  14: 397003.591 ops/s
# Warmup Iteration  15: 400327.671 ops/s
# Warmup Iteration  16: 399192.336 ops/s
# Warmup Iteration  17: 397443.534 ops/s
# Warmup Iteration  18: 397628.533 ops/s
# Warmup Iteration  19: 398348.126 ops/s
# Warmup Iteration  20: 397280.085 ops/s
# Warmup Iteration  21: 396922.364 ops/s
# Warmup Iteration  22: 398656.734 ops/s
# Warmup Iteration  23: 398735.219 ops/s
# Warmup Iteration  24: 398494.457 ops/s
# Warmup Iteration  25: 397156.512 ops/s
# Warmup Iteration  26: 397736.455 ops/s
# Warmup Iteration  27: 397653.659 ops/s
# Warmup Iteration  28: 398275.139 ops/s
# Warmup Iteration  29: 394761.495 ops/s
# Warmup Iteration  30: 396780.653 ops/s
Iteration   1: 398537.367 ops/s
Iteration   2: 394233.061 ops/s
Iteration   3: 399901.388 ops/s
Iteration   4: 398638.000 ops/s
Iteration   5: 400111.907 ops/s
Iteration   6: 397140.691 ops/s
Iteration   7: 398827.378 ops/s
Iteration   8: 399421.890 ops/s
Iteration   9: 396129.947 ops/s
Iteration  10: 397137.566 ops/s
Iteration  11: 397577.005 ops/s
Iteration  12: 399166.078 ops/s
Iteration  13: 398631.152 ops/s
Iteration  14: 398633.284 ops/s
Iteration  15: 399833.266 ops/s
Iteration  16: 399827.884 ops/s
Iteration  17: 397129.643 ops/s
Iteration  18: 399847.833 ops/s
Iteration  19: 397930.782 ops/s
Iteration  20: 397580.388 ops/s
Iteration  21: 397559.548 ops/s
Iteration  22: 395916.540 ops/s
Iteration  23: 398857.129 ops/s
Iteration  24: 398916.278 ops/s
Iteration  25: 397302.638 ops/s
Iteration  26: 398528.747 ops/s
Iteration  27: 395909.687 ops/s
Iteration  28: 396377.601 ops/s
Iteration  29: 396052.655 ops/s
Iteration  30: 396207.089 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift":
  397928.814 ±(99.9%) 998.483 ops/s [Average]
  (min, avg, max) = (394233.061, 397928.814, 400111.907), stdev = 1494.482
  CI (99.9%): [396930.331, 398927.297] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift  thrpt   30  397928.814 ± 998.483  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift_list$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift_list

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 85797.182 ops/s
# Warmup Iteration   2: 115048.795 ops/s
# Warmup Iteration   3: 121059.809 ops/s
# Warmup Iteration   4: 196390.637 ops/s
# Warmup Iteration   5: 196371.063 ops/s
# Warmup Iteration   6: 198781.993 ops/s
# Warmup Iteration   7: 196840.473 ops/s
# Warmup Iteration   8: 198686.418 ops/s
# Warmup Iteration   9: 201799.083 ops/s
# Warmup Iteration  10: 189971.476 ops/s
# Warmup Iteration  11: 190746.691 ops/s
# Warmup Iteration  12: 194740.669 ops/s
# Warmup Iteration  13: 134916.892 ops/s
# Warmup Iteration  14: 197090.862 ops/s
# Warmup Iteration  15: 199689.631 ops/s
# Warmup Iteration  16: 201330.254 ops/s
# Warmup Iteration  17: 207015.463 ops/s
# Warmup Iteration  18: 206361.698 ops/s
# Warmup Iteration  19: 207033.453 ops/s
# Warmup Iteration  20: 206424.451 ops/s
# Warmup Iteration  21: 205951.518 ops/s
# Warmup Iteration  22: 207812.430 ops/s
# Warmup Iteration  23: 207427.305 ops/s
# Warmup Iteration  24: 207303.980 ops/s
# Warmup Iteration  25: 207426.233 ops/s
# Warmup Iteration  26: 207507.496 ops/s
# Warmup Iteration  27: 207475.069 ops/s
# Warmup Iteration  28: 207287.395 ops/s
# Warmup Iteration  29: 206698.815 ops/s
# Warmup Iteration  30: 206918.830 ops/s
Iteration   1: 207791.103 ops/s
Iteration   2: 208093.227 ops/s
Iteration   3: 207422.208 ops/s
Iteration   4: 208303.908 ops/s
Iteration   5: 207480.618 ops/s
Iteration   6: 207317.606 ops/s
Iteration   7: 205155.620 ops/s
Iteration   8: 204858.852 ops/s
Iteration   9: 205244.761 ops/s
Iteration  10: 204163.724 ops/s
Iteration  11: 206965.962 ops/s
Iteration  12: 206526.310 ops/s
Iteration  13: 207905.410 ops/s
Iteration  14: 206496.241 ops/s
Iteration  15: 206712.928 ops/s
Iteration  16: 205183.670 ops/s
Iteration  17: 206764.839 ops/s
Iteration  18: 207080.525 ops/s
Iteration  19: 208327.616 ops/s
Iteration  20: 205760.504 ops/s
Iteration  21: 205021.893 ops/s
Iteration  22: 209064.737 ops/s
Iteration  23: 208853.265 ops/s
Iteration  24: 209217.633 ops/s
Iteration  25: 208689.479 ops/s
Iteration  26: 207532.198 ops/s
Iteration  27: 207413.185 ops/s
Iteration  28: 208522.743 ops/s
Iteration  29: 206685.006 ops/s
Iteration  30: 207064.325 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift_list":
  207054.003 ±(99.9%) 906.235 ops/s [Average]
  (min, avg, max) = (204163.724, 207054.003, 209217.633), stdev = 1356.409
  CI (99.9%): [206147.769, 207960.238] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_thrift_list  thrpt   30  207054.003 ± 906.235  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_unknown$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_unknown

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158423.982 ops/s
# Warmup Iteration   2: 198033.962 ops/s
# Warmup Iteration   3: 222173.454 ops/s
# Warmup Iteration   4: 327913.511 ops/s
# Warmup Iteration   5: 324169.244 ops/s
# Warmup Iteration   6: 323033.795 ops/s
# Warmup Iteration   7: 327002.092 ops/s
# Warmup Iteration   8: 324656.745 ops/s
# Warmup Iteration   9: 326360.382 ops/s
# Warmup Iteration  10: 326034.295 ops/s
# Warmup Iteration  11: 324245.176 ops/s
# Warmup Iteration  12: 329078.779 ops/s
# Warmup Iteration  13: 225210.182 ops/s
# Warmup Iteration  14: 324866.021 ops/s
# Warmup Iteration  15: 325826.760 ops/s
# Warmup Iteration  16: 325383.181 ops/s
# Warmup Iteration  17: 337462.070 ops/s
# Warmup Iteration  18: 336275.216 ops/s
# Warmup Iteration  19: 334196.987 ops/s
# Warmup Iteration  20: 335576.209 ops/s
# Warmup Iteration  21: 337280.650 ops/s
# Warmup Iteration  22: 336207.209 ops/s
# Warmup Iteration  23: 336186.846 ops/s
# Warmup Iteration  24: 336623.785 ops/s
# Warmup Iteration  25: 336035.628 ops/s
# Warmup Iteration  26: 336656.233 ops/s
# Warmup Iteration  27: 337747.666 ops/s
# Warmup Iteration  28: 335294.909 ops/s
# Warmup Iteration  29: 335659.180 ops/s
# Warmup Iteration  30: 336243.809 ops/s
Iteration   1: 335838.898 ops/s
Iteration   2: 336406.747 ops/s
Iteration   3: 336294.965 ops/s
Iteration   4: 335153.224 ops/s
Iteration   5: 337649.407 ops/s
Iteration   6: 337352.452 ops/s
Iteration   7: 337899.732 ops/s
Iteration   8: 336635.282 ops/s
Iteration   9: 337239.180 ops/s
Iteration  10: 337389.612 ops/s
Iteration  11: 336723.052 ops/s
Iteration  12: 337454.320 ops/s
Iteration  13: 336924.097 ops/s
Iteration  14: 335310.530 ops/s
Iteration  15: 335235.827 ops/s
Iteration  16: 335910.229 ops/s
Iteration  17: 336413.716 ops/s
Iteration  18: 334608.782 ops/s
Iteration  19: 336154.708 ops/s
Iteration  20: 335584.114 ops/s
Iteration  21: 334988.939 ops/s
Iteration  22: 336306.780 ops/s
Iteration  23: 336692.429 ops/s
Iteration  24: 336962.266 ops/s
Iteration  25: 335548.697 ops/s
Iteration  26: 334764.060 ops/s
Iteration  27: 336889.351 ops/s
Iteration  28: 336361.880 ops/s
Iteration  29: 336823.705 ops/s
Iteration  30: 338584.337 ops/s


Result "zipkin2.SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_unknown":
  336403.377 ±(99.9%) 651.051 ops/s [Average]
  (min, avg, max) = (334608.782, 336403.377, 338584.337), stdev = 974.463
  CI (99.9%): [335752.326, 337054.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SpanBytesDecoderDetectorTest._Benchmark.benchmark_decoderForMessage_unknown  thrpt   30  336403.377 ± 651.051  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_annotationsDedupe$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_annotationsDedupe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105070.184 ops/s
# Warmup Iteration   2: 161857.220 ops/s
# Warmup Iteration   3: 308940.295 ops/s
# Warmup Iteration   4: 343045.224 ops/s
# Warmup Iteration   5: 352766.062 ops/s
# Warmup Iteration   6: 353475.614 ops/s
# Warmup Iteration   7: 353061.922 ops/s
# Warmup Iteration   8: 253399.372 ops/s
# Warmup Iteration   9: 350233.108 ops/s
# Warmup Iteration  10: 357052.680 ops/s
# Warmup Iteration  11: 355888.128 ops/s
# Warmup Iteration  12: 356169.145 ops/s
# Warmup Iteration  13: 355094.414 ops/s
# Warmup Iteration  14: 355831.656 ops/s
# Warmup Iteration  15: 355580.882 ops/s
# Warmup Iteration  16: 356872.601 ops/s
# Warmup Iteration  17: 354258.311 ops/s
# Warmup Iteration  18: 353652.399 ops/s
# Warmup Iteration  19: 354717.955 ops/s
# Warmup Iteration  20: 353084.499 ops/s
# Warmup Iteration  21: 353784.144 ops/s
# Warmup Iteration  22: 354517.872 ops/s
# Warmup Iteration  23: 353805.344 ops/s
# Warmup Iteration  24: 354050.585 ops/s
# Warmup Iteration  25: 354147.954 ops/s
# Warmup Iteration  26: 354289.429 ops/s
# Warmup Iteration  27: 355297.044 ops/s
# Warmup Iteration  28: 355215.213 ops/s
# Warmup Iteration  29: 354184.643 ops/s
# Warmup Iteration  30: 354437.211 ops/s
Iteration   1: 354324.895 ops/s
Iteration   2: 351369.394 ops/s
Iteration   3: 352991.141 ops/s
Iteration   4: 354265.609 ops/s
Iteration   5: 354224.929 ops/s
Iteration   6: 354715.370 ops/s
Iteration   7: 351054.099 ops/s
Iteration   8: 352628.767 ops/s
Iteration   9: 353043.037 ops/s
Iteration  10: 354039.182 ops/s
Iteration  11: 352172.281 ops/s
Iteration  12: 352748.617 ops/s
Iteration  13: 354928.109 ops/s
Iteration  14: 355165.865 ops/s
Iteration  15: 353827.149 ops/s
Iteration  16: 351751.651 ops/s
Iteration  17: 352592.142 ops/s
Iteration  18: 352428.787 ops/s
Iteration  19: 354993.118 ops/s
Iteration  20: 354375.177 ops/s
Iteration  21: 353981.920 ops/s
Iteration  22: 353620.447 ops/s
Iteration  23: 354350.717 ops/s
Iteration  24: 354121.175 ops/s
Iteration  25: 353096.657 ops/s
Iteration  26: 353496.060 ops/s
Iteration  27: 353828.087 ops/s
Iteration  28: 353002.532 ops/s
Iteration  29: 354184.112 ops/s
Iteration  30: 353500.717 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_annotationsDedupe":
  353494.058 ±(99.9%) 711.865 ops/s [Average]
  (min, avg, max) = (351054.099, 353494.058, 355165.865), stdev = 1065.487
  CI (99.9%): [352782.193, 354205.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_annotationsDedupe  thrpt   30  353494.058 ± 711.865  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_annotationsSortByTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_annotationsSortByTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 138119.612 ops/s
# Warmup Iteration   2: 184596.747 ops/s
# Warmup Iteration   3: 386811.442 ops/s
# Warmup Iteration   4: 383981.490 ops/s
# Warmup Iteration   5: 390715.743 ops/s
# Warmup Iteration   6: 390991.264 ops/s
# Warmup Iteration   7: 388925.277 ops/s
# Warmup Iteration   8: 276020.278 ops/s
# Warmup Iteration   9: 392039.813 ops/s
# Warmup Iteration  10: 392057.154 ops/s
# Warmup Iteration  11: 392655.504 ops/s
# Warmup Iteration  12: 392265.044 ops/s
# Warmup Iteration  13: 392216.401 ops/s
# Warmup Iteration  14: 391749.883 ops/s
# Warmup Iteration  15: 391700.379 ops/s
# Warmup Iteration  16: 392146.353 ops/s
# Warmup Iteration  17: 393088.201 ops/s
# Warmup Iteration  18: 392353.676 ops/s
# Warmup Iteration  19: 390696.150 ops/s
# Warmup Iteration  20: 392037.958 ops/s
# Warmup Iteration  21: 393388.848 ops/s
# Warmup Iteration  22: 393697.178 ops/s
# Warmup Iteration  23: 391529.840 ops/s
# Warmup Iteration  24: 391480.502 ops/s
# Warmup Iteration  25: 392208.006 ops/s
# Warmup Iteration  26: 392517.647 ops/s
# Warmup Iteration  27: 392433.473 ops/s
# Warmup Iteration  28: 391429.523 ops/s
# Warmup Iteration  29: 391908.573 ops/s
# Warmup Iteration  30: 391234.206 ops/s
Iteration   1: 392217.401 ops/s
Iteration   2: 392766.828 ops/s
Iteration   3: 392165.269 ops/s
Iteration   4: 390157.912 ops/s
Iteration   5: 390002.157 ops/s
Iteration   6: 391090.153 ops/s
Iteration   7: 391405.106 ops/s
Iteration   8: 393104.332 ops/s
Iteration   9: 390214.127 ops/s
Iteration  10: 392233.688 ops/s
Iteration  11: 392935.941 ops/s
Iteration  12: 392941.114 ops/s
Iteration  13: 393470.031 ops/s
Iteration  14: 391475.425 ops/s
Iteration  15: 392621.172 ops/s
Iteration  16: 391902.397 ops/s
Iteration  17: 393442.490 ops/s
Iteration  18: 392034.651 ops/s
Iteration  19: 392799.605 ops/s
Iteration  20: 392305.289 ops/s
Iteration  21: 392823.735 ops/s
Iteration  22: 391840.233 ops/s
Iteration  23: 391025.094 ops/s
Iteration  24: 392916.308 ops/s
Iteration  25: 392014.105 ops/s
Iteration  26: 392910.983 ops/s
Iteration  27: 391559.779 ops/s
Iteration  28: 391836.276 ops/s
Iteration  29: 391589.598 ops/s
Iteration  30: 388826.526 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_annotationsSortByTimestamp":
  391954.257 ±(99.9%) 732.109 ops/s [Average]
  (min, avg, max) = (388826.526, 391954.257, 393470.031), stdev = 1095.786
  CI (99.9%): [391222.149, 392686.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_annotationsSortByTimestamp  thrpt   30  391954.257 ± 732.109  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_canUnsetParent$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_canUnsetParent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 232358.804 ops/s
# Warmup Iteration   2: 293102.944 ops/s
# Warmup Iteration   3: 642420.897 ops/s
# Warmup Iteration   4: 638521.757 ops/s
# Warmup Iteration   5: 648720.576 ops/s
# Warmup Iteration   6: 647421.039 ops/s
# Warmup Iteration   7: 632094.251 ops/s
# Warmup Iteration   8: 470891.154 ops/s
# Warmup Iteration   9: 649024.568 ops/s
# Warmup Iteration  10: 649808.572 ops/s
# Warmup Iteration  11: 649411.408 ops/s
# Warmup Iteration  12: 649659.343 ops/s
# Warmup Iteration  13: 650062.155 ops/s
# Warmup Iteration  14: 650445.690 ops/s
# Warmup Iteration  15: 650552.444 ops/s
# Warmup Iteration  16: 650930.029 ops/s
# Warmup Iteration  17: 649861.691 ops/s
# Warmup Iteration  18: 649729.679 ops/s
# Warmup Iteration  19: 651955.528 ops/s
# Warmup Iteration  20: 650955.031 ops/s
# Warmup Iteration  21: 650165.796 ops/s
# Warmup Iteration  22: 650072.172 ops/s
# Warmup Iteration  23: 649989.137 ops/s
# Warmup Iteration  24: 651288.196 ops/s
# Warmup Iteration  25: 651357.161 ops/s
# Warmup Iteration  26: 651386.744 ops/s
# Warmup Iteration  27: 650773.548 ops/s
# Warmup Iteration  28: 652365.759 ops/s
# Warmup Iteration  29: 650982.327 ops/s
# Warmup Iteration  30: 647915.987 ops/s
Iteration   1: 649271.787 ops/s
Iteration   2: 650514.710 ops/s
Iteration   3: 647606.443 ops/s
Iteration   4: 650178.340 ops/s
Iteration   5: 648304.412 ops/s
Iteration   6: 648784.831 ops/s
Iteration   7: 643476.279 ops/s
Iteration   8: 646294.022 ops/s
Iteration   9: 649284.177 ops/s
Iteration  10: 646597.790 ops/s
Iteration  11: 649403.196 ops/s
Iteration  12: 646989.415 ops/s
Iteration  13: 647633.204 ops/s
Iteration  14: 648069.464 ops/s
Iteration  15: 652777.638 ops/s
Iteration  16: 643858.217 ops/s
Iteration  17: 650930.796 ops/s
Iteration  18: 650885.973 ops/s
Iteration  19: 651746.225 ops/s
Iteration  20: 650972.955 ops/s
Iteration  21: 649524.487 ops/s
Iteration  22: 649070.589 ops/s
Iteration  23: 651640.779 ops/s
Iteration  24: 651172.965 ops/s
Iteration  25: 650175.011 ops/s
Iteration  26: 651825.824 ops/s
Iteration  27: 651067.368 ops/s
Iteration  28: 651507.564 ops/s
Iteration  29: 651181.155 ops/s
Iteration  30: 651934.759 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_canUnsetParent":
  649422.679 ±(99.9%) 1550.543 ops/s [Average]
  (min, avg, max) = (643476.279, 649422.679, 652777.638), stdev = 2320.780
  CI (99.9%): [647872.136, 650973.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_builder_canUnsetParent  thrpt   30  649422.679 ± 1550.543  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_clear$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3603.049 ops/s
# Warmup Iteration   2: 5432.440 ops/s
# Warmup Iteration   3: 5462.613 ops/s
# Warmup Iteration   4: 7069.129 ops/s
# Warmup Iteration   5: 8750.925 ops/s
# Warmup Iteration   6: 8292.722 ops/s
# Warmup Iteration   7: 8344.663 ops/s
# Warmup Iteration   8: 8217.406 ops/s
# Warmup Iteration   9: 8421.223 ops/s
# Warmup Iteration  10: 8363.783 ops/s
# Warmup Iteration  11: 8385.060 ops/s
# Warmup Iteration  12: 8253.487 ops/s
# Warmup Iteration  13: 8346.641 ops/s
# Warmup Iteration  14: 8373.895 ops/s
# Warmup Iteration  15: 8592.790 ops/s
# Warmup Iteration  16: 7455.867 ops/s
# Warmup Iteration  17: 7089.585 ops/s
# Warmup Iteration  18: 8984.291 ops/s
# Warmup Iteration  19: 9059.442 ops/s
# Warmup Iteration  20: 9089.000 ops/s
# Warmup Iteration  21: 9045.708 ops/s
# Warmup Iteration  22: 8973.346 ops/s
# Warmup Iteration  23: 8999.084 ops/s
# Warmup Iteration  24: 9058.481 ops/s
# Warmup Iteration  25: 8970.019 ops/s
# Warmup Iteration  26: 8975.181 ops/s
# Warmup Iteration  27: 8912.586 ops/s
# Warmup Iteration  28: 8975.901 ops/s
# Warmup Iteration  29: 8995.969 ops/s
# Warmup Iteration  30: 8924.721 ops/s
Iteration   1: 9005.354 ops/s
Iteration   2: 9037.645 ops/s
Iteration   3: 9026.318 ops/s
Iteration   4: 9055.623 ops/s
Iteration   5: 8983.837 ops/s
Iteration   6: 9018.709 ops/s
Iteration   7: 9010.336 ops/s
Iteration   8: 8839.197 ops/s
Iteration   9: 8874.217 ops/s
Iteration  10: 8936.171 ops/s
Iteration  11: 8996.543 ops/s
Iteration  12: 9002.206 ops/s
Iteration  13: 8950.252 ops/s
Iteration  14: 8947.577 ops/s
Iteration  15: 8918.347 ops/s
Iteration  16: 8907.542 ops/s
Iteration  17: 8915.329 ops/s
Iteration  18: 8990.496 ops/s
Iteration  19: 8969.522 ops/s
Iteration  20: 9037.619 ops/s
Iteration  21: 9034.841 ops/s
Iteration  22: 8938.847 ops/s
Iteration  23: 8921.136 ops/s
Iteration  24: 9035.760 ops/s
Iteration  25: 8872.914 ops/s
Iteration  26: 8819.224 ops/s
Iteration  27: 8975.620 ops/s
Iteration  28: 8997.677 ops/s
Iteration  29: 8942.128 ops/s
Iteration  30: 9004.871 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_clear":
  8965.529 ±(99.9%) 41.403 ops/s [Average]
  (min, avg, max) = (8819.224, 8965.529, 9055.623), stdev = 61.970
  CI (99.9%): [8924.125, 9006.932] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_clear  thrpt   30  8965.529 ± 41.403  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_clone$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_clone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3536.158 ops/s
# Warmup Iteration   2: 5573.960 ops/s
# Warmup Iteration   3: 5592.720 ops/s
# Warmup Iteration   4: 7699.170 ops/s
# Warmup Iteration   5: 9160.393 ops/s
# Warmup Iteration   6: 8896.551 ops/s
# Warmup Iteration   7: 8970.862 ops/s
# Warmup Iteration   8: 9189.347 ops/s
# Warmup Iteration   9: 9256.292 ops/s
# Warmup Iteration  10: 9301.103 ops/s
# Warmup Iteration  11: 9176.576 ops/s
# Warmup Iteration  12: 9213.548 ops/s
# Warmup Iteration  13: 9130.841 ops/s
# Warmup Iteration  14: 9258.828 ops/s
# Warmup Iteration  15: 7706.485 ops/s
# Warmup Iteration  16: 7726.800 ops/s
# Warmup Iteration  17: 9694.242 ops/s
# Warmup Iteration  18: 9684.613 ops/s
# Warmup Iteration  19: 9691.133 ops/s
# Warmup Iteration  20: 9710.119 ops/s
# Warmup Iteration  21: 9609.681 ops/s
# Warmup Iteration  22: 9603.009 ops/s
# Warmup Iteration  23: 9657.150 ops/s
# Warmup Iteration  24: 9603.046 ops/s
# Warmup Iteration  25: 9691.214 ops/s
# Warmup Iteration  26: 9657.362 ops/s
# Warmup Iteration  27: 9664.007 ops/s
# Warmup Iteration  28: 9580.464 ops/s
# Warmup Iteration  29: 9637.586 ops/s
# Warmup Iteration  30: 9656.724 ops/s
Iteration   1: 9503.919 ops/s
Iteration   2: 9600.045 ops/s
Iteration   3: 9573.834 ops/s
Iteration   4: 9508.480 ops/s
Iteration   5: 9599.771 ops/s
Iteration   6: 9657.841 ops/s
Iteration   7: 9655.778 ops/s
Iteration   8: 9667.453 ops/s
Iteration   9: 9606.857 ops/s
Iteration  10: 9671.049 ops/s
Iteration  11: 9651.618 ops/s
Iteration  12: 9657.529 ops/s
Iteration  13: 9653.568 ops/s
Iteration  14: 9644.167 ops/s
Iteration  15: 9653.465 ops/s
Iteration  16: 9682.631 ops/s
Iteration  17: 9647.985 ops/s
Iteration  18: 9653.702 ops/s
Iteration  19: 9667.906 ops/s
Iteration  20: 9684.795 ops/s
Iteration  21: 9658.416 ops/s
Iteration  22: 9593.470 ops/s
Iteration  23: 9645.032 ops/s
Iteration  24: 9683.084 ops/s
Iteration  25: 9638.827 ops/s
Iteration  26: 9645.721 ops/s
Iteration  27: 9616.177 ops/s
Iteration  28: 9566.196 ops/s
Iteration  29: 9555.407 ops/s
Iteration  30: 9583.975 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_clone":
  9627.623 ±(99.9%) 32.496 ops/s [Average]
  (min, avg, max) = (9503.919, 9627.623, 9684.795), stdev = 48.638
  CI (99.9%): [9595.127, 9660.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_clone  thrpt   30  9627.623 ± 32.496  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_annotations$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_annotations

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129110.684 ops/s
# Warmup Iteration   2: 179866.108 ops/s
# Warmup Iteration   3: 411291.229 ops/s
# Warmup Iteration   4: 432679.712 ops/s
# Warmup Iteration   5: 438866.910 ops/s
# Warmup Iteration   6: 432322.582 ops/s
# Warmup Iteration   7: 332735.420 ops/s
# Warmup Iteration   8: 417376.485 ops/s
# Warmup Iteration   9: 438804.901 ops/s
# Warmup Iteration  10: 438396.092 ops/s
# Warmup Iteration  11: 438928.267 ops/s
# Warmup Iteration  12: 440509.141 ops/s
# Warmup Iteration  13: 439481.450 ops/s
# Warmup Iteration  14: 439151.958 ops/s
# Warmup Iteration  15: 439404.455 ops/s
# Warmup Iteration  16: 437355.957 ops/s
# Warmup Iteration  17: 434803.754 ops/s
# Warmup Iteration  18: 435644.921 ops/s
# Warmup Iteration  19: 435336.324 ops/s
# Warmup Iteration  20: 436218.191 ops/s
# Warmup Iteration  21: 435363.160 ops/s
# Warmup Iteration  22: 438471.934 ops/s
# Warmup Iteration  23: 437002.194 ops/s
# Warmup Iteration  24: 435694.393 ops/s
# Warmup Iteration  25: 435928.039 ops/s
# Warmup Iteration  26: 434259.771 ops/s
# Warmup Iteration  27: 435473.071 ops/s
# Warmup Iteration  28: 436166.683 ops/s
# Warmup Iteration  29: 434076.250 ops/s
# Warmup Iteration  30: 436993.143 ops/s
Iteration   1: 438652.391 ops/s
Iteration   2: 435449.986 ops/s
Iteration   3: 436402.095 ops/s
Iteration   4: 436941.031 ops/s
Iteration   5: 437128.137 ops/s
Iteration   6: 435048.822 ops/s
Iteration   7: 437470.952 ops/s
Iteration   8: 436252.190 ops/s
Iteration   9: 435657.311 ops/s
Iteration  10: 434267.925 ops/s
Iteration  11: 436000.533 ops/s
Iteration  12: 434276.918 ops/s
Iteration  13: 435011.534 ops/s
Iteration  14: 435320.076 ops/s
Iteration  15: 436362.447 ops/s
Iteration  16: 436719.975 ops/s
Iteration  17: 434643.666 ops/s
Iteration  18: 434399.306 ops/s
Iteration  19: 435598.476 ops/s
Iteration  20: 435685.251 ops/s
Iteration  21: 436070.190 ops/s
Iteration  22: 433666.920 ops/s
Iteration  23: 434691.891 ops/s
Iteration  24: 435121.940 ops/s
Iteration  25: 437465.225 ops/s
Iteration  26: 435777.026 ops/s
Iteration  27: 434186.338 ops/s
Iteration  28: 434664.527 ops/s
Iteration  29: 437344.987 ops/s
Iteration  30: 433513.970 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_annotations":
  435659.734 ±(99.9%) 835.423 ops/s [Average]
  (min, avg, max) = (433513.970, 435659.734, 438652.391), stdev = 1250.422
  CI (99.9%): [434824.311, 436495.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_builder_merge_annotations  thrpt   30  435659.734 ± 835.423  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_annotations_concat$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_annotations_concat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3492.750 ops/s
# Warmup Iteration   2: 5567.047 ops/s
# Warmup Iteration   3: 5539.230 ops/s
# Warmup Iteration   4: 7189.623 ops/s
# Warmup Iteration   5: 8866.622 ops/s
# Warmup Iteration   6: 8639.360 ops/s
# Warmup Iteration   7: 8737.626 ops/s
# Warmup Iteration   8: 8764.481 ops/s
# Warmup Iteration   9: 9017.462 ops/s
# Warmup Iteration  10: 8945.130 ops/s
# Warmup Iteration  11: 9002.363 ops/s
# Warmup Iteration  12: 8897.322 ops/s
# Warmup Iteration  13: 8861.199 ops/s
# Warmup Iteration  14: 8944.277 ops/s
# Warmup Iteration  15: 8491.839 ops/s
# Warmup Iteration  16: 6353.065 ops/s
# Warmup Iteration  17: 9128.752 ops/s
# Warmup Iteration  18: 9106.701 ops/s
# Warmup Iteration  19: 9131.361 ops/s
# Warmup Iteration  20: 9162.165 ops/s
# Warmup Iteration  21: 9157.719 ops/s
# Warmup Iteration  22: 9153.002 ops/s
# Warmup Iteration  23: 9170.982 ops/s
# Warmup Iteration  24: 9160.077 ops/s
# Warmup Iteration  25: 9154.907 ops/s
# Warmup Iteration  26: 9231.342 ops/s
# Warmup Iteration  27: 9122.063 ops/s
# Warmup Iteration  28: 9131.122 ops/s
# Warmup Iteration  29: 9124.123 ops/s
# Warmup Iteration  30: 9197.671 ops/s
Iteration   1: 9179.216 ops/s
Iteration   2: 9186.230 ops/s
Iteration   3: 9177.456 ops/s
Iteration   4: 9205.121 ops/s
Iteration   5: 9211.913 ops/s
Iteration   6: 9139.696 ops/s
Iteration   7: 9190.915 ops/s
Iteration   8: 9199.567 ops/s
Iteration   9: 9173.464 ops/s
Iteration  10: 9194.732 ops/s
Iteration  11: 9093.196 ops/s
Iteration  12: 9132.347 ops/s
Iteration  13: 9170.430 ops/s
Iteration  14: 9168.961 ops/s
Iteration  15: 9155.857 ops/s
Iteration  16: 9120.589 ops/s
Iteration  17: 9120.224 ops/s
Iteration  18: 9139.863 ops/s
Iteration  19: 9212.279 ops/s
Iteration  20: 9161.486 ops/s
Iteration  21: 9111.129 ops/s
Iteration  22: 9133.351 ops/s
Iteration  23: 9068.721 ops/s
Iteration  24: 9194.734 ops/s
Iteration  25: 9233.918 ops/s
Iteration  26: 9179.898 ops/s
Iteration  27: 9209.835 ops/s
Iteration  28: 9265.364 ops/s
Iteration  29: 9254.874 ops/s
Iteration  30: 9123.264 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_annotations_concat":
  9170.288 ±(99.9%) 30.737 ops/s [Average]
  (min, avg, max) = (9068.721, 9170.288, 9265.364), stdev = 46.006
  CI (99.9%): [9139.550, 9201.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_annotations_concat  thrpt   30  9170.288 ± 30.737  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_flags$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_flags

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3662.710 ops/s
# Warmup Iteration   2: 5717.093 ops/s
# Warmup Iteration   3: 5706.976 ops/s
# Warmup Iteration   4: 7484.964 ops/s
# Warmup Iteration   5: 8922.395 ops/s
# Warmup Iteration   6: 8793.695 ops/s
# Warmup Iteration   7: 9037.899 ops/s
# Warmup Iteration   8: 8970.759 ops/s
# Warmup Iteration   9: 9241.707 ops/s
# Warmup Iteration  10: 9069.330 ops/s
# Warmup Iteration  11: 9123.888 ops/s
# Warmup Iteration  12: 9054.313 ops/s
# Warmup Iteration  13: 9113.635 ops/s
# Warmup Iteration  14: 8963.648 ops/s
# Warmup Iteration  15: 9011.610 ops/s
# Warmup Iteration  16: 5971.678 ops/s
# Warmup Iteration  17: 9192.225 ops/s
# Warmup Iteration  18: 9227.243 ops/s
# Warmup Iteration  19: 9194.520 ops/s
# Warmup Iteration  20: 9209.852 ops/s
# Warmup Iteration  21: 9194.344 ops/s
# Warmup Iteration  22: 9218.797 ops/s
# Warmup Iteration  23: 9300.056 ops/s
# Warmup Iteration  24: 9215.631 ops/s
# Warmup Iteration  25: 9195.259 ops/s
# Warmup Iteration  26: 9202.188 ops/s
# Warmup Iteration  27: 9289.545 ops/s
# Warmup Iteration  28: 9283.956 ops/s
# Warmup Iteration  29: 9248.692 ops/s
# Warmup Iteration  30: 9222.606 ops/s
Iteration   1: 9249.865 ops/s
Iteration   2: 9283.782 ops/s
Iteration   3: 9207.951 ops/s
Iteration   4: 9282.892 ops/s
Iteration   5: 9180.686 ops/s
Iteration   6: 9203.806 ops/s
Iteration   7: 9187.979 ops/s
Iteration   8: 9335.840 ops/s
Iteration   9: 9253.050 ops/s
Iteration  10: 9207.178 ops/s
Iteration  11: 9132.445 ops/s
Iteration  12: 9124.036 ops/s
Iteration  13: 9135.289 ops/s
Iteration  14: 9133.671 ops/s
Iteration  15: 9263.965 ops/s
Iteration  16: 9247.555 ops/s
Iteration  17: 9166.061 ops/s
Iteration  18: 9270.710 ops/s
Iteration  19: 9188.374 ops/s
Iteration  20: 9108.824 ops/s
Iteration  21: 9150.713 ops/s
Iteration  22: 9141.164 ops/s
Iteration  23: 9114.969 ops/s
Iteration  24: 9243.592 ops/s
Iteration  25: 9191.228 ops/s
Iteration  26: 9203.004 ops/s
Iteration  27: 9257.415 ops/s
Iteration  28: 9250.081 ops/s
Iteration  29: 9230.819 ops/s
Iteration  30: 9237.158 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_flags":
  9206.137 ±(99.9%) 39.287 ops/s [Average]
  (min, avg, max) = (9108.824, 9206.137, 9335.840), stdev = 58.804
  CI (99.9%): [9166.849, 9245.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_flags  thrpt   30  9206.137 ± 39.287  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3606.655 ops/s
# Warmup Iteration   2: 5383.235 ops/s
# Warmup Iteration   3: 5384.068 ops/s
# Warmup Iteration   4: 7037.158 ops/s
# Warmup Iteration   5: 8871.341 ops/s
# Warmup Iteration   6: 8587.324 ops/s
# Warmup Iteration   7: 8586.425 ops/s
# Warmup Iteration   8: 8703.468 ops/s
# Warmup Iteration   9: 9028.868 ops/s
# Warmup Iteration  10: 8974.052 ops/s
# Warmup Iteration  11: 9014.690 ops/s
# Warmup Iteration  12: 8957.086 ops/s
# Warmup Iteration  13: 9079.084 ops/s
# Warmup Iteration  14: 8944.700 ops/s
# Warmup Iteration  15: 9060.766 ops/s
# Warmup Iteration  16: 5626.589 ops/s
# Warmup Iteration  17: 9041.179 ops/s
# Warmup Iteration  18: 9103.455 ops/s
# Warmup Iteration  19: 9179.093 ops/s
# Warmup Iteration  20: 9209.845 ops/s
# Warmup Iteration  21: 9167.089 ops/s
# Warmup Iteration  22: 9116.360 ops/s
# Warmup Iteration  23: 9206.973 ops/s
# Warmup Iteration  24: 9163.825 ops/s
# Warmup Iteration  25: 9149.847 ops/s
# Warmup Iteration  26: 9137.019 ops/s
# Warmup Iteration  27: 9156.577 ops/s
# Warmup Iteration  28: 9134.878 ops/s
# Warmup Iteration  29: 9131.137 ops/s
# Warmup Iteration  30: 9122.630 ops/s
Iteration   1: 9145.313 ops/s
Iteration   2: 9144.036 ops/s
Iteration   3: 9258.297 ops/s
Iteration   4: 9216.533 ops/s
Iteration   5: 9106.855 ops/s
Iteration   6: 9124.658 ops/s
Iteration   7: 9189.899 ops/s
Iteration   8: 9227.021 ops/s
Iteration   9: 9137.844 ops/s
Iteration  10: 9100.605 ops/s
Iteration  11: 9070.326 ops/s
Iteration  12: 9158.950 ops/s
Iteration  13: 9169.723 ops/s
Iteration  14: 9141.155 ops/s
Iteration  15: 9141.250 ops/s
Iteration  16: 9081.299 ops/s
Iteration  17: 9148.895 ops/s
Iteration  18: 9126.369 ops/s
Iteration  19: 9076.067 ops/s
Iteration  20: 9110.825 ops/s
Iteration  21: 9180.515 ops/s
Iteration  22: 9179.206 ops/s
Iteration  23: 9152.799 ops/s
Iteration  24: 9118.812 ops/s
Iteration  25: 9196.415 ops/s
Iteration  26: 9173.372 ops/s
Iteration  27: 9107.686 ops/s
Iteration  28: 9179.749 ops/s
Iteration  29: 9137.304 ops/s
Iteration  30: 9095.885 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint":
  9146.589 ±(99.9%) 30.126 ops/s [Average]
  (min, avg, max) = (9070.326, 9146.589, 9258.297), stdev = 45.091
  CI (99.9%): [9116.463, 9176.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_localEndpoint  thrpt   30  9146.589 ± 30.126  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_merge$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_merge

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3269.399 ops/s
# Warmup Iteration   2: 5018.587 ops/s
# Warmup Iteration   3: 5310.206 ops/s
# Warmup Iteration   4: 6518.872 ops/s
# Warmup Iteration   5: 8450.451 ops/s
# Warmup Iteration   6: 8486.773 ops/s
# Warmup Iteration   7: 8604.608 ops/s
# Warmup Iteration   8: 8453.138 ops/s
# Warmup Iteration   9: 8645.977 ops/s
# Warmup Iteration  10: 8500.767 ops/s
# Warmup Iteration  11: 8494.711 ops/s
# Warmup Iteration  12: 8541.941 ops/s
# Warmup Iteration  13: 8759.003 ops/s
# Warmup Iteration  14: 8629.663 ops/s
# Warmup Iteration  15: 8744.230 ops/s
# Warmup Iteration  16: 6676.448 ops/s
# Warmup Iteration  17: 7993.991 ops/s
# Warmup Iteration  18: 8942.989 ops/s
# Warmup Iteration  19: 8946.983 ops/s
# Warmup Iteration  20: 8934.926 ops/s
# Warmup Iteration  21: 8928.165 ops/s
# Warmup Iteration  22: 8932.763 ops/s
# Warmup Iteration  23: 9003.227 ops/s
# Warmup Iteration  24: 8978.867 ops/s
# Warmup Iteration  25: 8950.751 ops/s
# Warmup Iteration  26: 9000.679 ops/s
# Warmup Iteration  27: 8997.274 ops/s
# Warmup Iteration  28: 8996.434 ops/s
# Warmup Iteration  29: 8993.889 ops/s
# Warmup Iteration  30: 8961.439 ops/s
Iteration   1: 9044.907 ops/s
Iteration   2: 9025.902 ops/s
Iteration   3: 9079.361 ops/s
Iteration   4: 9012.816 ops/s
Iteration   5: 9024.183 ops/s
Iteration   6: 8974.618 ops/s
Iteration   7: 8978.855 ops/s
Iteration   8: 9039.574 ops/s
Iteration   9: 9008.426 ops/s
Iteration  10: 9020.370 ops/s
Iteration  11: 8909.916 ops/s
Iteration  12: 8877.609 ops/s
Iteration  13: 8844.775 ops/s
Iteration  14: 8938.574 ops/s
Iteration  15: 8938.695 ops/s
Iteration  16: 8860.503 ops/s
Iteration  17: 8961.780 ops/s
Iteration  18: 8943.109 ops/s
Iteration  19: 8930.909 ops/s
Iteration  20: 8972.519 ops/s
Iteration  21: 8899.088 ops/s
Iteration  22: 8956.669 ops/s
Iteration  23: 8881.794 ops/s
Iteration  24: 8936.630 ops/s
Iteration  25: 8924.816 ops/s
Iteration  26: 8933.227 ops/s
Iteration  27: 8978.327 ops/s
Iteration  28: 8980.100 ops/s
Iteration  29: 8938.511 ops/s
Iteration  30: 9042.695 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_merge":
  8961.975 ±(99.9%) 39.338 ops/s [Average]
  (min, avg, max) = (8844.775, 8961.975, 9079.361), stdev = 58.880
  CI (99.9%): [8922.637, 9001.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_merge  thrpt   30  8961.975 ± 39.338  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_null$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3640.750 ops/s
# Warmup Iteration   2: 5344.517 ops/s
# Warmup Iteration   3: 5481.529 ops/s
# Warmup Iteration   4: 6946.386 ops/s
# Warmup Iteration   5: 8539.361 ops/s
# Warmup Iteration   6: 8426.878 ops/s
# Warmup Iteration   7: 8375.039 ops/s
# Warmup Iteration   8: 8312.860 ops/s
# Warmup Iteration   9: 8372.709 ops/s
# Warmup Iteration  10: 8496.457 ops/s
# Warmup Iteration  11: 8748.955 ops/s
# Warmup Iteration  12: 8737.912 ops/s
# Warmup Iteration  13: 8790.721 ops/s
# Warmup Iteration  14: 8700.663 ops/s
# Warmup Iteration  15: 8712.284 ops/s
# Warmup Iteration  16: 7373.152 ops/s
# Warmup Iteration  17: 7585.768 ops/s
# Warmup Iteration  18: 9077.022 ops/s
# Warmup Iteration  19: 9040.334 ops/s
# Warmup Iteration  20: 9016.692 ops/s
# Warmup Iteration  21: 9014.292 ops/s
# Warmup Iteration  22: 8935.703 ops/s
# Warmup Iteration  23: 9155.320 ops/s
# Warmup Iteration  24: 9118.700 ops/s
# Warmup Iteration  25: 9118.062 ops/s
# Warmup Iteration  26: 9085.185 ops/s
# Warmup Iteration  27: 9076.116 ops/s
# Warmup Iteration  28: 9060.077 ops/s
# Warmup Iteration  29: 9062.533 ops/s
# Warmup Iteration  30: 9067.150 ops/s
Iteration   1: 8980.918 ops/s
Iteration   2: 9096.893 ops/s
Iteration   3: 9121.508 ops/s
Iteration   4: 9040.032 ops/s
Iteration   5: 8941.520 ops/s
Iteration   6: 8990.437 ops/s
Iteration   7: 8965.207 ops/s
Iteration   8: 9100.379 ops/s
Iteration   9: 9100.252 ops/s
Iteration  10: 9086.386 ops/s
Iteration  11: 9082.694 ops/s
Iteration  12: 9108.706 ops/s
Iteration  13: 9104.449 ops/s
Iteration  14: 9125.835 ops/s
Iteration  15: 9084.836 ops/s
Iteration  16: 9070.131 ops/s
Iteration  17: 9082.077 ops/s
Iteration  18: 9048.742 ops/s
Iteration  19: 9103.364 ops/s
Iteration  20: 9108.216 ops/s
Iteration  21: 9076.645 ops/s
Iteration  22: 9050.707 ops/s
Iteration  23: 9077.815 ops/s
Iteration  24: 9013.549 ops/s
Iteration  25: 9022.950 ops/s
Iteration  26: 9011.640 ops/s
Iteration  27: 9115.991 ops/s
Iteration  28: 9098.219 ops/s
Iteration  29: 9110.024 ops/s
Iteration  30: 9100.447 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_null":
  9067.352 ±(99.9%) 33.291 ops/s [Average]
  (min, avg, max) = (8941.520, 9067.352, 9125.835), stdev = 49.829
  CI (99.9%): [9034.061, 9100.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_null  thrpt   30  9067.352 ± 33.291  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_redundant$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_redundant

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3780.826 ops/s
# Warmup Iteration   2: 5738.024 ops/s
# Warmup Iteration   3: 5781.777 ops/s
# Warmup Iteration   4: 7771.531 ops/s
# Warmup Iteration   5: 9111.334 ops/s
# Warmup Iteration   6: 8919.190 ops/s
# Warmup Iteration   7: 9039.212 ops/s
# Warmup Iteration   8: 9023.054 ops/s
# Warmup Iteration   9: 9230.792 ops/s
# Warmup Iteration  10: 9269.150 ops/s
# Warmup Iteration  11: 9178.925 ops/s
# Warmup Iteration  12: 9246.785 ops/s
# Warmup Iteration  13: 9140.244 ops/s
# Warmup Iteration  14: 9250.840 ops/s
# Warmup Iteration  15: 8261.412 ops/s
# Warmup Iteration  16: 7001.753 ops/s
# Warmup Iteration  17: 9623.298 ops/s
# Warmup Iteration  18: 9660.840 ops/s
# Warmup Iteration  19: 9593.785 ops/s
# Warmup Iteration  20: 9632.429 ops/s
# Warmup Iteration  21: 9573.296 ops/s
# Warmup Iteration  22: 9606.996 ops/s
# Warmup Iteration  23: 9598.906 ops/s
# Warmup Iteration  24: 9612.652 ops/s
# Warmup Iteration  25: 9630.870 ops/s
# Warmup Iteration  26: 9471.808 ops/s
# Warmup Iteration  27: 9548.851 ops/s
# Warmup Iteration  28: 9573.344 ops/s
# Warmup Iteration  29: 9560.256 ops/s
# Warmup Iteration  30: 9545.452 ops/s
Iteration   1: 9597.901 ops/s
Iteration   2: 9426.229 ops/s
Iteration   3: 9483.815 ops/s
Iteration   4: 9544.662 ops/s
Iteration   5: 9561.741 ops/s
Iteration   6: 9596.127 ops/s
Iteration   7: 9582.795 ops/s
Iteration   8: 9603.791 ops/s
Iteration   9: 9507.332 ops/s
Iteration  10: 9547.778 ops/s
Iteration  11: 9553.397 ops/s
Iteration  12: 9606.042 ops/s
Iteration  13: 9600.553 ops/s
Iteration  14: 9579.233 ops/s
Iteration  15: 9514.813 ops/s
Iteration  16: 9557.781 ops/s
Iteration  17: 9548.065 ops/s
Iteration  18: 9591.979 ops/s
Iteration  19: 9555.822 ops/s
Iteration  20: 9532.851 ops/s
Iteration  21: 9492.759 ops/s
Iteration  22: 9511.270 ops/s
Iteration  23: 9619.524 ops/s
Iteration  24: 9502.837 ops/s
Iteration  25: 9565.887 ops/s
Iteration  26: 9593.448 ops/s
Iteration  27: 9610.076 ops/s
Iteration  28: 9592.009 ops/s
Iteration  29: 9575.232 ops/s
Iteration  30: 9613.377 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_redundant":
  9558.971 ±(99.9%) 30.799 ops/s [Average]
  (min, avg, max) = (9426.229, 9558.971, 9619.524), stdev = 46.098
  CI (99.9%): [9528.172, 9589.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_localEndpoint_redundant  thrpt   30  9558.971 ± 30.799  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_redundant$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_redundant

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3608.907 ops/s
# Warmup Iteration   2: 5424.738 ops/s
# Warmup Iteration   3: 5692.690 ops/s
# Warmup Iteration   4: 7717.355 ops/s
# Warmup Iteration   5: 9054.652 ops/s
# Warmup Iteration   6: 8671.308 ops/s
# Warmup Iteration   7: 8846.755 ops/s
# Warmup Iteration   8: 9043.601 ops/s
# Warmup Iteration   9: 8928.001 ops/s
# Warmup Iteration  10: 9176.305 ops/s
# Warmup Iteration  11: 9018.232 ops/s
# Warmup Iteration  12: 8924.951 ops/s
# Warmup Iteration  13: 8821.831 ops/s
# Warmup Iteration  14: 8831.737 ops/s
# Warmup Iteration  15: 7672.319 ops/s
# Warmup Iteration  16: 7043.707 ops/s
# Warmup Iteration  17: 9321.796 ops/s
# Warmup Iteration  18: 9289.109 ops/s
# Warmup Iteration  19: 9366.862 ops/s
# Warmup Iteration  20: 9283.376 ops/s
# Warmup Iteration  21: 9343.398 ops/s
# Warmup Iteration  22: 9335.249 ops/s
# Warmup Iteration  23: 9369.158 ops/s
# Warmup Iteration  24: 9381.191 ops/s
# Warmup Iteration  25: 9319.674 ops/s
# Warmup Iteration  26: 9377.506 ops/s
# Warmup Iteration  27: 9345.886 ops/s
# Warmup Iteration  28: 9393.285 ops/s
# Warmup Iteration  29: 9363.766 ops/s
# Warmup Iteration  30: 9311.625 ops/s
Iteration   1: 9421.223 ops/s
Iteration   2: 9329.065 ops/s
Iteration   3: 9341.843 ops/s
Iteration   4: 9331.354 ops/s
Iteration   5: 9329.962 ops/s
Iteration   6: 9353.665 ops/s
Iteration   7: 9352.571 ops/s
Iteration   8: 9293.836 ops/s
Iteration   9: 9244.445 ops/s
Iteration  10: 9316.320 ops/s
Iteration  11: 9281.467 ops/s
Iteration  12: 9322.784 ops/s
Iteration  13: 9327.901 ops/s
Iteration  14: 9287.900 ops/s
Iteration  15: 9279.568 ops/s
Iteration  16: 9380.799 ops/s
Iteration  17: 9365.167 ops/s
Iteration  18: 9388.565 ops/s
Iteration  19: 9317.665 ops/s
Iteration  20: 9343.009 ops/s
Iteration  21: 9314.635 ops/s
Iteration  22: 9269.899 ops/s
Iteration  23: 9306.619 ops/s
Iteration  24: 9319.605 ops/s
Iteration  25: 9373.924 ops/s
Iteration  26: 9344.252 ops/s
Iteration  27: 9318.339 ops/s
Iteration  28: 9370.502 ops/s
Iteration  29: 9334.229 ops/s
Iteration  30: 9314.264 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_redundant":
  9329.179 ±(99.9%) 25.214 ops/s [Average]
  (min, avg, max) = (9244.445, 9329.179, 9421.223), stdev = 37.739
  CI (99.9%): [9303.965, 9354.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_redundant  thrpt   30  9329.179 ± 25.214  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3887.153 ops/s
# Warmup Iteration   2: 5759.647 ops/s
# Warmup Iteration   3: 5803.490 ops/s
# Warmup Iteration   4: 7857.154 ops/s
# Warmup Iteration   5: 9104.084 ops/s
# Warmup Iteration   6: 9271.506 ops/s
# Warmup Iteration   7: 9380.295 ops/s
# Warmup Iteration   8: 9486.083 ops/s
# Warmup Iteration   9: 9531.534 ops/s
# Warmup Iteration  10: 9684.345 ops/s
# Warmup Iteration  11: 9578.026 ops/s
# Warmup Iteration  12: 9627.619 ops/s
# Warmup Iteration  13: 9541.514 ops/s
# Warmup Iteration  14: 9632.603 ops/s
# Warmup Iteration  15: 7326.004 ops/s
# Warmup Iteration  16: 8740.423 ops/s
# Warmup Iteration  17: 9854.710 ops/s
# Warmup Iteration  18: 9818.901 ops/s
# Warmup Iteration  19: 9872.826 ops/s
# Warmup Iteration  20: 9761.917 ops/s
# Warmup Iteration  21: 9825.640 ops/s
# Warmup Iteration  22: 9904.154 ops/s
# Warmup Iteration  23: 9835.625 ops/s
# Warmup Iteration  24: 9841.410 ops/s
# Warmup Iteration  25: 9796.222 ops/s
# Warmup Iteration  26: 9878.522 ops/s
# Warmup Iteration  27: 9794.089 ops/s
# Warmup Iteration  28: 9854.409 ops/s
# Warmup Iteration  29: 9789.011 ops/s
# Warmup Iteration  30: 9806.827 ops/s
Iteration   1: 9888.414 ops/s
Iteration   2: 9856.062 ops/s
Iteration   3: 9893.417 ops/s
Iteration   4: 9817.787 ops/s
Iteration   5: 9874.441 ops/s
Iteration   6: 9838.001 ops/s
Iteration   7: 9889.642 ops/s
Iteration   8: 9848.697 ops/s
Iteration   9: 9815.764 ops/s
Iteration  10: 9827.744 ops/s
Iteration  11: 9788.523 ops/s
Iteration  12: 9837.665 ops/s
Iteration  13: 9772.318 ops/s
Iteration  14: 9794.359 ops/s
Iteration  15: 9865.592 ops/s
Iteration  16: 9900.005 ops/s
Iteration  17: 9804.254 ops/s
Iteration  18: 9798.090 ops/s
Iteration  19: 9778.834 ops/s
Iteration  20: 9787.754 ops/s
Iteration  21: 9787.351 ops/s
Iteration  22: 9872.857 ops/s
Iteration  23: 9828.976 ops/s
Iteration  24: 9910.679 ops/s
Iteration  25: 9925.073 ops/s
Iteration  26: 9848.818 ops/s
Iteration  27: 9849.140 ops/s
Iteration  28: 9924.625 ops/s
Iteration  29: 9920.686 ops/s
Iteration  30: 9930.603 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint":
  9849.206 ±(99.9%) 32.637 ops/s [Average]
  (min, avg, max) = (9772.318, 9849.206, 9930.603), stdev = 48.850
  CI (99.9%): [9816.569, 9881.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint  thrpt   30  9849.206 ± 32.637  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_merge$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_merge

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3454.440 ops/s
# Warmup Iteration   2: 5202.463 ops/s
# Warmup Iteration   3: 5243.130 ops/s
# Warmup Iteration   4: 6809.961 ops/s
# Warmup Iteration   5: 8738.525 ops/s
# Warmup Iteration   6: 8659.463 ops/s
# Warmup Iteration   7: 8806.157 ops/s
# Warmup Iteration   8: 8681.649 ops/s
# Warmup Iteration   9: 8866.036 ops/s
# Warmup Iteration  10: 8884.341 ops/s
# Warmup Iteration  11: 8950.892 ops/s
# Warmup Iteration  12: 8967.824 ops/s
# Warmup Iteration  13: 8992.673 ops/s
# Warmup Iteration  14: 9009.536 ops/s
# Warmup Iteration  15: 8806.573 ops/s
# Warmup Iteration  16: 6445.626 ops/s
# Warmup Iteration  17: 9005.153 ops/s
# Warmup Iteration  18: 8987.481 ops/s
# Warmup Iteration  19: 8954.665 ops/s
# Warmup Iteration  20: 9028.944 ops/s
# Warmup Iteration  21: 8881.690 ops/s
# Warmup Iteration  22: 8897.107 ops/s
# Warmup Iteration  23: 8937.070 ops/s
# Warmup Iteration  24: 8926.426 ops/s
# Warmup Iteration  25: 9027.402 ops/s
# Warmup Iteration  26: 8920.995 ops/s
# Warmup Iteration  27: 8970.057 ops/s
# Warmup Iteration  28: 8996.780 ops/s
# Warmup Iteration  29: 8909.408 ops/s
# Warmup Iteration  30: 8935.248 ops/s
Iteration   1: 9004.972 ops/s
Iteration   2: 8997.913 ops/s
Iteration   3: 8907.362 ops/s
Iteration   4: 9057.919 ops/s
Iteration   5: 8934.478 ops/s
Iteration   6: 8974.490 ops/s
Iteration   7: 9040.462 ops/s
Iteration   8: 8991.086 ops/s
Iteration   9: 9013.908 ops/s
Iteration  10: 8914.931 ops/s
Iteration  11: 8968.783 ops/s
Iteration  12: 8905.304 ops/s
Iteration  13: 8947.825 ops/s
Iteration  14: 8968.839 ops/s
Iteration  15: 8946.130 ops/s
Iteration  16: 9087.941 ops/s
Iteration  17: 9076.029 ops/s
Iteration  18: 9000.819 ops/s
Iteration  19: 8944.651 ops/s
Iteration  20: 8856.980 ops/s
Iteration  21: 8870.990 ops/s
Iteration  22: 8901.225 ops/s
Iteration  23: 8977.646 ops/s
Iteration  24: 8985.578 ops/s
Iteration  25: 8922.451 ops/s
Iteration  26: 8901.249 ops/s
Iteration  27: 9039.116 ops/s
Iteration  28: 8831.243 ops/s
Iteration  29: 8787.275 ops/s
Iteration  30: 8890.101 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_merge":
  8954.923 ±(99.9%) 47.871 ops/s [Average]
  (min, avg, max) = (8787.275, 8954.923, 9087.941), stdev = 71.651
  CI (99.9%): [8907.052, 9002.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_merge  thrpt   30  8954.923 ± 47.871  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_null$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3634.800 ops/s
# Warmup Iteration   2: 5682.716 ops/s
# Warmup Iteration   3: 5696.840 ops/s
# Warmup Iteration   4: 7553.557 ops/s
# Warmup Iteration   5: 8943.962 ops/s
# Warmup Iteration   6: 8804.460 ops/s
# Warmup Iteration   7: 8904.923 ops/s
# Warmup Iteration   8: 8852.514 ops/s
# Warmup Iteration   9: 9144.126 ops/s
# Warmup Iteration  10: 9005.258 ops/s
# Warmup Iteration  11: 9055.688 ops/s
# Warmup Iteration  12: 9040.880 ops/s
# Warmup Iteration  13: 9028.392 ops/s
# Warmup Iteration  14: 9128.785 ops/s
# Warmup Iteration  15: 8629.869 ops/s
# Warmup Iteration  16: 6621.701 ops/s
# Warmup Iteration  17: 9284.140 ops/s
# Warmup Iteration  18: 9239.484 ops/s
# Warmup Iteration  19: 9232.738 ops/s
# Warmup Iteration  20: 9270.461 ops/s
# Warmup Iteration  21: 9269.231 ops/s
# Warmup Iteration  22: 9265.888 ops/s
# Warmup Iteration  23: 9320.296 ops/s
# Warmup Iteration  24: 9276.204 ops/s
# Warmup Iteration  25: 9291.908 ops/s
# Warmup Iteration  26: 9296.901 ops/s
# Warmup Iteration  27: 9260.895 ops/s
# Warmup Iteration  28: 9248.178 ops/s
# Warmup Iteration  29: 9250.386 ops/s
# Warmup Iteration  30: 9340.346 ops/s
Iteration   1: 9266.496 ops/s
Iteration   2: 9238.133 ops/s
Iteration   3: 9286.306 ops/s
Iteration   4: 9295.626 ops/s
Iteration   5: 9295.583 ops/s
Iteration   6: 9311.750 ops/s
Iteration   7: 9300.541 ops/s
Iteration   8: 9266.514 ops/s
Iteration   9: 9206.050 ops/s
Iteration  10: 9144.050 ops/s
Iteration  11: 9165.266 ops/s
Iteration  12: 9308.566 ops/s
Iteration  13: 9331.606 ops/s
Iteration  14: 9287.738 ops/s
Iteration  15: 9232.705 ops/s
Iteration  16: 9317.382 ops/s
Iteration  17: 9269.354 ops/s
Iteration  18: 9291.123 ops/s
Iteration  19: 9279.948 ops/s
Iteration  20: 9220.982 ops/s
Iteration  21: 9317.700 ops/s
Iteration  22: 9276.236 ops/s
Iteration  23: 9328.760 ops/s
Iteration  24: 9338.085 ops/s
Iteration  25: 9316.407 ops/s
Iteration  26: 9188.695 ops/s
Iteration  27: 9235.484 ops/s
Iteration  28: 9262.339 ops/s
Iteration  29: 9332.526 ops/s
Iteration  30: 9322.177 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_null":
  9274.471 ±(99.9%) 33.942 ops/s [Average]
  (min, avg, max) = (9144.050, 9274.471, 9338.085), stdev = 50.802
  CI (99.9%): [9240.529, 9308.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_null  thrpt   30  9274.471 ± 33.942  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_redundant$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_redundant

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3714.233 ops/s
# Warmup Iteration   2: 5651.442 ops/s
# Warmup Iteration   3: 5704.109 ops/s
# Warmup Iteration   4: 7572.124 ops/s
# Warmup Iteration   5: 9185.592 ops/s
# Warmup Iteration   6: 9085.737 ops/s
# Warmup Iteration   7: 9288.644 ops/s
# Warmup Iteration   8: 9197.916 ops/s
# Warmup Iteration   9: 9220.491 ops/s
# Warmup Iteration  10: 9420.751 ops/s
# Warmup Iteration  11: 9393.981 ops/s
# Warmup Iteration  12: 9448.317 ops/s
# Warmup Iteration  13: 9344.662 ops/s
# Warmup Iteration  14: 9509.651 ops/s
# Warmup Iteration  15: 7851.555 ops/s
# Warmup Iteration  16: 7548.392 ops/s
# Warmup Iteration  17: 9808.995 ops/s
# Warmup Iteration  18: 9788.365 ops/s
# Warmup Iteration  19: 9767.423 ops/s
# Warmup Iteration  20: 9724.242 ops/s
# Warmup Iteration  21: 9769.526 ops/s
# Warmup Iteration  22: 9775.712 ops/s
# Warmup Iteration  23: 9772.571 ops/s
# Warmup Iteration  24: 9730.208 ops/s
# Warmup Iteration  25: 9693.035 ops/s
# Warmup Iteration  26: 9738.944 ops/s
# Warmup Iteration  27: 9750.993 ops/s
# Warmup Iteration  28: 9782.655 ops/s
# Warmup Iteration  29: 9779.587 ops/s
# Warmup Iteration  30: 9747.720 ops/s
Iteration   1: 9653.486 ops/s
Iteration   2: 9743.891 ops/s
Iteration   3: 9792.992 ops/s
Iteration   4: 9757.612 ops/s
Iteration   5: 9757.866 ops/s
Iteration   6: 9799.356 ops/s
Iteration   7: 9743.278 ops/s
Iteration   8: 9784.952 ops/s
Iteration   9: 9766.843 ops/s
Iteration  10: 9826.439 ops/s
Iteration  11: 9803.232 ops/s
Iteration  12: 9802.122 ops/s
Iteration  13: 9768.402 ops/s
Iteration  14: 9753.519 ops/s
Iteration  15: 9741.744 ops/s
Iteration  16: 9703.110 ops/s
Iteration  17: 9631.858 ops/s
Iteration  18: 9774.825 ops/s
Iteration  19: 9798.669 ops/s
Iteration  20: 9800.034 ops/s
Iteration  21: 9728.449 ops/s
Iteration  22: 9723.289 ops/s
Iteration  23: 9690.410 ops/s
Iteration  24: 9755.342 ops/s
Iteration  25: 9752.526 ops/s
Iteration  26: 9711.000 ops/s
Iteration  27: 9745.762 ops/s
Iteration  28: 9724.059 ops/s
Iteration  29: 9738.400 ops/s
Iteration  30: 9762.888 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_redundant":
  9751.212 ±(99.9%) 29.358 ops/s [Average]
  (min, avg, max) = (9631.858, 9751.212, 9826.439), stdev = 43.942
  CI (99.9%): [9721.854, 9780.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_remoteEndpoint_redundant  thrpt   30  9751.212 ± 29.358  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_tags$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_tags

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 180974.712 ops/s
# Warmup Iteration   2: 268239.728 ops/s
# Warmup Iteration   3: 527663.995 ops/s
# Warmup Iteration   4: 583761.753 ops/s
# Warmup Iteration   5: 583927.156 ops/s
# Warmup Iteration   6: 588173.513 ops/s
# Warmup Iteration   7: 585176.493 ops/s
# Warmup Iteration   8: 412018.939 ops/s
# Warmup Iteration   9: 590146.346 ops/s
# Warmup Iteration  10: 590228.517 ops/s
# Warmup Iteration  11: 587725.673 ops/s
# Warmup Iteration  12: 588558.368 ops/s
# Warmup Iteration  13: 590425.864 ops/s
# Warmup Iteration  14: 587031.423 ops/s
# Warmup Iteration  15: 587716.174 ops/s
# Warmup Iteration  16: 584578.392 ops/s
# Warmup Iteration  17: 591207.113 ops/s
# Warmup Iteration  18: 590102.432 ops/s
# Warmup Iteration  19: 591355.617 ops/s
# Warmup Iteration  20: 590779.199 ops/s
# Warmup Iteration  21: 588679.832 ops/s
# Warmup Iteration  22: 590900.474 ops/s
# Warmup Iteration  23: 589985.381 ops/s
# Warmup Iteration  24: 591801.790 ops/s
# Warmup Iteration  25: 590052.972 ops/s
# Warmup Iteration  26: 590964.336 ops/s
# Warmup Iteration  27: 590583.083 ops/s
# Warmup Iteration  28: 588504.491 ops/s
# Warmup Iteration  29: 590850.522 ops/s
# Warmup Iteration  30: 588236.772 ops/s
Iteration   1: 588468.009 ops/s
Iteration   2: 590833.526 ops/s
Iteration   3: 588988.474 ops/s
Iteration   4: 592707.752 ops/s
Iteration   5: 588887.714 ops/s
Iteration   6: 591644.356 ops/s
Iteration   7: 592635.536 ops/s
Iteration   8: 585832.144 ops/s
Iteration   9: 589708.903 ops/s
Iteration  10: 592545.204 ops/s
Iteration  11: 590616.950 ops/s
Iteration  12: 587644.206 ops/s
Iteration  13: 590319.673 ops/s
Iteration  14: 587220.751 ops/s
Iteration  15: 590499.144 ops/s
Iteration  16: 588388.632 ops/s
Iteration  17: 591504.324 ops/s
Iteration  18: 590253.649 ops/s
Iteration  19: 591636.324 ops/s
Iteration  20: 591316.638 ops/s
Iteration  21: 590223.975 ops/s
Iteration  22: 589831.502 ops/s
Iteration  23: 590133.891 ops/s
Iteration  24: 590277.731 ops/s
Iteration  25: 588997.579 ops/s
Iteration  26: 589905.378 ops/s
Iteration  27: 588979.465 ops/s
Iteration  28: 590988.250 ops/s
Iteration  29: 590801.573 ops/s
Iteration  30: 591440.393 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_tags":
  590107.721 ±(99.9%) 1075.393 ops/s [Average]
  (min, avg, max) = (585832.144, 590107.721, 592707.752), stdev = 1609.598
  CI (99.9%): [589032.328, 591183.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_builder_merge_tags  thrpt   30  590107.721 ± 1075.393  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_tags_concat$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_builder_merge_tags_concat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3548.261 ops/s
# Warmup Iteration   2: 5493.737 ops/s
# Warmup Iteration   3: 5461.395 ops/s
# Warmup Iteration   4: 7351.784 ops/s
# Warmup Iteration   5: 8872.813 ops/s
# Warmup Iteration   6: 8650.290 ops/s
# Warmup Iteration   7: 8692.860 ops/s
# Warmup Iteration   8: 8592.881 ops/s
# Warmup Iteration   9: 8617.202 ops/s
# Warmup Iteration  10: 8629.027 ops/s
# Warmup Iteration  11: 8747.272 ops/s
# Warmup Iteration  12: 8568.821 ops/s
# Warmup Iteration  13: 8618.435 ops/s
# Warmup Iteration  14: 8650.486 ops/s
# Warmup Iteration  15: 8734.992 ops/s
# Warmup Iteration  16: 5715.870 ops/s
# Warmup Iteration  17: 9172.473 ops/s
# Warmup Iteration  18: 9191.603 ops/s
# Warmup Iteration  19: 9141.902 ops/s
# Warmup Iteration  20: 9195.803 ops/s
# Warmup Iteration  21: 9195.588 ops/s
# Warmup Iteration  22: 9150.061 ops/s
# Warmup Iteration  23: 9181.920 ops/s
# Warmup Iteration  24: 9158.933 ops/s
# Warmup Iteration  25: 9170.489 ops/s
# Warmup Iteration  26: 9136.950 ops/s
# Warmup Iteration  27: 9181.695 ops/s
# Warmup Iteration  28: 9136.638 ops/s
# Warmup Iteration  29: 9149.902 ops/s
# Warmup Iteration  30: 9193.570 ops/s
Iteration   1: 9216.735 ops/s
Iteration   2: 9209.491 ops/s
Iteration   3: 9147.067 ops/s
Iteration   4: 9162.039 ops/s
Iteration   5: 9201.744 ops/s
Iteration   6: 9167.497 ops/s
Iteration   7: 9184.035 ops/s
Iteration   8: 9180.798 ops/s
Iteration   9: 9140.622 ops/s
Iteration  10: 9159.722 ops/s
Iteration  11: 9164.041 ops/s
Iteration  12: 9109.050 ops/s
Iteration  13: 9186.220 ops/s
Iteration  14: 9155.371 ops/s
Iteration  15: 9126.038 ops/s
Iteration  16: 9189.275 ops/s
Iteration  17: 9157.518 ops/s
Iteration  18: 9110.405 ops/s
Iteration  19: 9155.358 ops/s
Iteration  20: 9150.118 ops/s
Iteration  21: 9110.384 ops/s
Iteration  22: 9116.664 ops/s
Iteration  23: 9183.589 ops/s
Iteration  24: 9128.097 ops/s
Iteration  25: 9187.659 ops/s
Iteration  26: 9194.843 ops/s
Iteration  27: 9141.223 ops/s
Iteration  28: 9148.122 ops/s
Iteration  29: 9089.161 ops/s
Iteration  30: 9114.171 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_builder_merge_tags_concat":
  9156.235 ±(99.9%) 22.201 ops/s [Average]
  (min, avg, max) = (9089.161, 9156.235, 9216.735), stdev = 33.229
  CI (99.9%): [9134.035, 9178.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_builder_merge_tags_concat  thrpt   30  9156.235 ± 22.201  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_canUsePrimitiveOverloads$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_canUsePrimitiveOverloads

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3809.235 ops/s
# Warmup Iteration   2: 5610.370 ops/s
# Warmup Iteration   3: 5635.235 ops/s
# Warmup Iteration   4: 7690.437 ops/s
# Warmup Iteration   5: 8941.331 ops/s
# Warmup Iteration   6: 8745.899 ops/s
# Warmup Iteration   7: 8863.919 ops/s
# Warmup Iteration   8: 8752.524 ops/s
# Warmup Iteration   9: 9026.752 ops/s
# Warmup Iteration  10: 9034.899 ops/s
# Warmup Iteration  11: 9104.342 ops/s
# Warmup Iteration  12: 9041.029 ops/s
# Warmup Iteration  13: 8939.721 ops/s
# Warmup Iteration  14: 9118.086 ops/s
# Warmup Iteration  15: 8559.602 ops/s
# Warmup Iteration  16: 6516.759 ops/s
# Warmup Iteration  17: 9401.047 ops/s
# Warmup Iteration  18: 9405.309 ops/s
# Warmup Iteration  19: 9371.974 ops/s
# Warmup Iteration  20: 9421.243 ops/s
# Warmup Iteration  21: 9469.477 ops/s
# Warmup Iteration  22: 9435.793 ops/s
# Warmup Iteration  23: 9419.763 ops/s
# Warmup Iteration  24: 9442.305 ops/s
# Warmup Iteration  25: 9444.059 ops/s
# Warmup Iteration  26: 9416.187 ops/s
# Warmup Iteration  27: 9442.050 ops/s
# Warmup Iteration  28: 9413.446 ops/s
# Warmup Iteration  29: 9404.865 ops/s
# Warmup Iteration  30: 9452.940 ops/s
Iteration   1: 9414.378 ops/s
Iteration   2: 9470.423 ops/s
Iteration   3: 9426.064 ops/s
Iteration   4: 9417.923 ops/s
Iteration   5: 9439.605 ops/s
Iteration   6: 9461.477 ops/s
Iteration   7: 9349.527 ops/s
Iteration   8: 9464.372 ops/s
Iteration   9: 9419.708 ops/s
Iteration  10: 9443.427 ops/s
Iteration  11: 9418.788 ops/s
Iteration  12: 9389.102 ops/s
Iteration  13: 9432.813 ops/s
Iteration  14: 9415.715 ops/s
Iteration  15: 9400.676 ops/s
Iteration  16: 9412.344 ops/s
Iteration  17: 9475.009 ops/s
Iteration  18: 9435.522 ops/s
Iteration  19: 9462.263 ops/s
Iteration  20: 9441.236 ops/s
Iteration  21: 9452.375 ops/s
Iteration  22: 9464.859 ops/s
Iteration  23: 9452.930 ops/s
Iteration  24: 9455.801 ops/s
Iteration  25: 9397.388 ops/s
Iteration  26: 9433.971 ops/s
Iteration  27: 9417.225 ops/s
Iteration  28: 9398.319 ops/s
Iteration  29: 9388.598 ops/s
Iteration  30: 9507.870 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_canUsePrimitiveOverloads":
  9431.990 ±(99.9%) 21.590 ops/s [Average]
  (min, avg, max) = (9349.527, 9431.990, 9507.870), stdev = 32.315
  CI (99.9%): [9410.400, 9453.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_canUsePrimitiveOverloads  thrpt   30  9431.990 ± 21.590  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_clone_differentCollections$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_clone_differentCollections

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120351.594 ops/s
# Warmup Iteration   2: 190119.002 ops/s
# Warmup Iteration   3: 454662.451 ops/s
# Warmup Iteration   4: 450515.140 ops/s
# Warmup Iteration   5: 455599.139 ops/s
# Warmup Iteration   6: 458559.584 ops/s
# Warmup Iteration   7: 326919.537 ops/s
# Warmup Iteration   8: 459210.551 ops/s
# Warmup Iteration   9: 459133.280 ops/s
# Warmup Iteration  10: 459205.537 ops/s
# Warmup Iteration  11: 459802.641 ops/s
# Warmup Iteration  12: 459924.875 ops/s
# Warmup Iteration  13: 458648.390 ops/s
# Warmup Iteration  14: 459770.155 ops/s
# Warmup Iteration  15: 460087.251 ops/s
# Warmup Iteration  16: 460573.023 ops/s
# Warmup Iteration  17: 459733.760 ops/s
# Warmup Iteration  18: 459696.779 ops/s
# Warmup Iteration  19: 461130.050 ops/s
# Warmup Iteration  20: 458224.391 ops/s
# Warmup Iteration  21: 457585.183 ops/s
# Warmup Iteration  22: 459003.208 ops/s
# Warmup Iteration  23: 460514.590 ops/s
# Warmup Iteration  24: 459851.441 ops/s
# Warmup Iteration  25: 460555.091 ops/s
# Warmup Iteration  26: 461979.459 ops/s
# Warmup Iteration  27: 461269.351 ops/s
# Warmup Iteration  28: 461975.238 ops/s
# Warmup Iteration  29: 460421.107 ops/s
# Warmup Iteration  30: 460500.744 ops/s
Iteration   1: 460004.400 ops/s
Iteration   2: 462358.888 ops/s
Iteration   3: 461471.892 ops/s
Iteration   4: 461501.010 ops/s
Iteration   5: 459108.224 ops/s
Iteration   6: 460388.249 ops/s
Iteration   7: 460200.214 ops/s
Iteration   8: 460149.116 ops/s
Iteration   9: 460649.065 ops/s
Iteration  10: 460082.241 ops/s
Iteration  11: 458955.845 ops/s
Iteration  12: 458946.320 ops/s
Iteration  13: 459586.151 ops/s
Iteration  14: 460544.021 ops/s
Iteration  15: 460479.125 ops/s
Iteration  16: 459752.482 ops/s
Iteration  17: 459609.127 ops/s
Iteration  18: 458536.726 ops/s
Iteration  19: 461077.928 ops/s
Iteration  20: 461469.056 ops/s
Iteration  21: 460710.164 ops/s
Iteration  22: 460751.364 ops/s
Iteration  23: 458032.718 ops/s
Iteration  24: 459228.849 ops/s
Iteration  25: 461933.140 ops/s
Iteration  26: 462004.529 ops/s
Iteration  27: 459929.878 ops/s
Iteration  28: 459669.482 ops/s
Iteration  29: 458088.311 ops/s
Iteration  30: 457755.345 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_clone_differentCollections":
  460099.129 ±(99.9%) 802.063 ops/s [Average]
  (min, avg, max) = (457755.345, 460099.129, 462358.888), stdev = 1200.490
  CI (99.9%): [459297.066, 460901.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_clone_differentCollections  thrpt   30  460099.129 ± 802.063  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_coercesZeroTimestampsToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_coercesZeroTimestampsToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235090.770 ops/s
# Warmup Iteration   2: 308247.798 ops/s
# Warmup Iteration   3: 663305.915 ops/s
# Warmup Iteration   4: 663537.071 ops/s
# Warmup Iteration   5: 672367.263 ops/s
# Warmup Iteration   6: 664506.214 ops/s
# Warmup Iteration   7: 566087.905 ops/s
# Warmup Iteration   8: 591410.637 ops/s
# Warmup Iteration   9: 676906.346 ops/s
# Warmup Iteration  10: 675966.193 ops/s
# Warmup Iteration  11: 675177.815 ops/s
# Warmup Iteration  12: 674547.212 ops/s
# Warmup Iteration  13: 674646.594 ops/s
# Warmup Iteration  14: 674556.743 ops/s
# Warmup Iteration  15: 674932.140 ops/s
# Warmup Iteration  16: 677319.572 ops/s
# Warmup Iteration  17: 676666.380 ops/s
# Warmup Iteration  18: 674890.963 ops/s
# Warmup Iteration  19: 675050.525 ops/s
# Warmup Iteration  20: 676743.257 ops/s
# Warmup Iteration  21: 674003.774 ops/s
# Warmup Iteration  22: 673194.613 ops/s
# Warmup Iteration  23: 675654.174 ops/s
# Warmup Iteration  24: 678353.096 ops/s
# Warmup Iteration  25: 676626.204 ops/s
# Warmup Iteration  26: 674979.637 ops/s
# Warmup Iteration  27: 675774.375 ops/s
# Warmup Iteration  28: 676211.181 ops/s
# Warmup Iteration  29: 676258.022 ops/s
# Warmup Iteration  30: 673304.759 ops/s
Iteration   1: 676829.851 ops/s
Iteration   2: 673590.379 ops/s
Iteration   3: 678202.375 ops/s
Iteration   4: 674620.298 ops/s
Iteration   5: 676035.670 ops/s
Iteration   6: 675591.084 ops/s
Iteration   7: 677064.547 ops/s
Iteration   8: 675628.157 ops/s
Iteration   9: 673259.336 ops/s
Iteration  10: 673388.951 ops/s
Iteration  11: 675987.836 ops/s
Iteration  12: 677646.745 ops/s
Iteration  13: 674855.081 ops/s
Iteration  14: 677637.629 ops/s
Iteration  15: 676201.392 ops/s
Iteration  16: 676224.650 ops/s
Iteration  17: 672623.572 ops/s
Iteration  18: 675054.302 ops/s
Iteration  19: 675868.619 ops/s
Iteration  20: 673993.515 ops/s
Iteration  21: 674650.035 ops/s
Iteration  22: 675855.697 ops/s
Iteration  23: 674707.938 ops/s
Iteration  24: 675652.380 ops/s
Iteration  25: 672556.010 ops/s
Iteration  26: 674384.645 ops/s
Iteration  27: 675820.064 ops/s
Iteration  28: 675344.613 ops/s
Iteration  29: 676360.459 ops/s
Iteration  30: 676029.609 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_coercesZeroTimestampsToNull":
  675388.848 ±(99.9%) 958.141 ops/s [Average]
  (min, avg, max) = (672556.010, 675388.848, 678202.375), stdev = 1434.101
  CI (99.9%): [674430.707, 676346.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_coercesZeroTimestampsToNull  thrpt   30  675388.848 ± 958.141  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_debug_canDisable$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_debug_canDisable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 264627.611 ops/s
# Warmup Iteration   2: 338502.658 ops/s
# Warmup Iteration   3: 673014.498 ops/s
# Warmup Iteration   4: 712741.644 ops/s
# Warmup Iteration   5: 709756.006 ops/s
# Warmup Iteration   6: 712902.000 ops/s
# Warmup Iteration   7: 712395.373 ops/s
# Warmup Iteration   8: 508696.306 ops/s
# Warmup Iteration   9: 720678.847 ops/s
# Warmup Iteration  10: 720358.072 ops/s
# Warmup Iteration  11: 720123.270 ops/s
# Warmup Iteration  12: 716620.502 ops/s
# Warmup Iteration  13: 718773.564 ops/s
# Warmup Iteration  14: 719649.893 ops/s
# Warmup Iteration  15: 720929.047 ops/s
# Warmup Iteration  16: 719940.473 ops/s
# Warmup Iteration  17: 714198.533 ops/s
# Warmup Iteration  18: 715374.376 ops/s
# Warmup Iteration  19: 714182.986 ops/s
# Warmup Iteration  20: 716744.920 ops/s
# Warmup Iteration  21: 717316.250 ops/s
# Warmup Iteration  22: 716274.478 ops/s
# Warmup Iteration  23: 715428.972 ops/s
# Warmup Iteration  24: 717619.540 ops/s
# Warmup Iteration  25: 717060.574 ops/s
# Warmup Iteration  26: 719339.162 ops/s
# Warmup Iteration  27: 716905.495 ops/s
# Warmup Iteration  28: 714988.582 ops/s
# Warmup Iteration  29: 716261.563 ops/s
# Warmup Iteration  30: 717835.408 ops/s
Iteration   1: 718678.829 ops/s
Iteration   2: 714803.927 ops/s
Iteration   3: 716300.570 ops/s
Iteration   4: 713929.100 ops/s
Iteration   5: 714816.156 ops/s
Iteration   6: 710893.493 ops/s
Iteration   7: 720509.853 ops/s
Iteration   8: 719843.627 ops/s
Iteration   9: 717443.567 ops/s
Iteration  10: 719752.910 ops/s
Iteration  11: 713972.532 ops/s
Iteration  12: 717935.073 ops/s
Iteration  13: 716173.025 ops/s
Iteration  14: 719085.997 ops/s
Iteration  15: 717694.921 ops/s
Iteration  16: 711805.861 ops/s
Iteration  17: 715126.769 ops/s
Iteration  18: 715733.110 ops/s
Iteration  19: 716262.092 ops/s
Iteration  20: 715497.752 ops/s
Iteration  21: 717264.078 ops/s
Iteration  22: 719032.996 ops/s
Iteration  23: 715538.157 ops/s
Iteration  24: 719116.198 ops/s
Iteration  25: 716750.866 ops/s
Iteration  26: 718005.409 ops/s
Iteration  27: 716583.784 ops/s
Iteration  28: 716950.670 ops/s
Iteration  29: 718026.169 ops/s
Iteration  30: 719019.287 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_debug_canDisable":
  716751.559 ±(99.9%) 1537.601 ops/s [Average]
  (min, avg, max) = (710893.493, 716751.559, 720509.853), stdev = 2301.409
  CI (99.9%): [715213.958, 718289.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_debug_canDisable  thrpt   30  716751.559 ± 1537.601  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_debug_canUnset$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_debug_canUnset

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 267399.442 ops/s
# Warmup Iteration   2: 339924.918 ops/s
# Warmup Iteration   3: 673885.428 ops/s
# Warmup Iteration   4: 712225.300 ops/s
# Warmup Iteration   5: 709842.888 ops/s
# Warmup Iteration   6: 712193.644 ops/s
# Warmup Iteration   7: 714408.149 ops/s
# Warmup Iteration   8: 505094.055 ops/s
# Warmup Iteration   9: 722630.593 ops/s
# Warmup Iteration  10: 720702.648 ops/s
# Warmup Iteration  11: 718885.903 ops/s
# Warmup Iteration  12: 721895.366 ops/s
# Warmup Iteration  13: 722139.305 ops/s
# Warmup Iteration  14: 720441.517 ops/s
# Warmup Iteration  15: 719910.864 ops/s
# Warmup Iteration  16: 717147.379 ops/s
# Warmup Iteration  17: 715679.172 ops/s
# Warmup Iteration  18: 717795.378 ops/s
# Warmup Iteration  19: 719885.642 ops/s
# Warmup Iteration  20: 717194.705 ops/s
# Warmup Iteration  21: 717207.841 ops/s
# Warmup Iteration  22: 718226.093 ops/s
# Warmup Iteration  23: 717538.294 ops/s
# Warmup Iteration  24: 718904.541 ops/s
# Warmup Iteration  25: 719420.868 ops/s
# Warmup Iteration  26: 720034.724 ops/s
# Warmup Iteration  27: 718685.149 ops/s
# Warmup Iteration  28: 720253.016 ops/s
# Warmup Iteration  29: 718683.616 ops/s
# Warmup Iteration  30: 718143.258 ops/s
Iteration   1: 717172.617 ops/s
Iteration   2: 709416.154 ops/s
Iteration   3: 718506.561 ops/s
Iteration   4: 717154.356 ops/s
Iteration   5: 719390.534 ops/s
Iteration   6: 716062.457 ops/s
Iteration   7: 713851.277 ops/s
Iteration   8: 712450.461 ops/s
Iteration   9: 717358.169 ops/s
Iteration  10: 717024.637 ops/s
Iteration  11: 717122.704 ops/s
Iteration  12: 718855.636 ops/s
Iteration  13: 717611.341 ops/s
Iteration  14: 712415.426 ops/s
Iteration  15: 713043.481 ops/s
Iteration  16: 710969.670 ops/s
Iteration  17: 719990.989 ops/s
Iteration  18: 712966.397 ops/s
Iteration  19: 720522.448 ops/s
Iteration  20: 719441.508 ops/s
Iteration  21: 718483.083 ops/s
Iteration  22: 718898.698 ops/s
Iteration  23: 716608.867 ops/s
Iteration  24: 717676.655 ops/s
Iteration  25: 718708.938 ops/s
Iteration  26: 719736.967 ops/s
Iteration  27: 719746.317 ops/s
Iteration  28: 720458.523 ops/s
Iteration  29: 721747.503 ops/s
Iteration  30: 719019.026 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_debug_canUnset":
  717080.380 ±(99.9%) 2077.418 ops/s [Average]
  (min, avg, max) = (709416.154, 717080.380, 721747.503), stdev = 3109.381
  CI (99.9%): [715002.962, 719157.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_debug_canUnset  thrpt   30  717080.380 ± 2077.418  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_idFromLong$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_idFromLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 252104.201 ops/s
# Warmup Iteration   2: 325259.437 ops/s
# Warmup Iteration   3: 627894.304 ops/s
# Warmup Iteration   4: 672760.389 ops/s
# Warmup Iteration   5: 670890.734 ops/s
# Warmup Iteration   6: 670428.739 ops/s
# Warmup Iteration   7: 671091.352 ops/s
# Warmup Iteration   8: 491946.334 ops/s
# Warmup Iteration   9: 665929.094 ops/s
# Warmup Iteration  10: 677927.747 ops/s
# Warmup Iteration  11: 679076.594 ops/s
# Warmup Iteration  12: 676784.273 ops/s
# Warmup Iteration  13: 678760.604 ops/s
# Warmup Iteration  14: 676422.160 ops/s
# Warmup Iteration  15: 677770.838 ops/s
# Warmup Iteration  16: 677337.742 ops/s
# Warmup Iteration  17: 671963.256 ops/s
# Warmup Iteration  18: 673024.300 ops/s
# Warmup Iteration  19: 674612.547 ops/s
# Warmup Iteration  20: 674556.903 ops/s
# Warmup Iteration  21: 671009.561 ops/s
# Warmup Iteration  22: 672375.572 ops/s
# Warmup Iteration  23: 673340.507 ops/s
# Warmup Iteration  24: 672791.422 ops/s
# Warmup Iteration  25: 673125.750 ops/s
# Warmup Iteration  26: 675923.842 ops/s
# Warmup Iteration  27: 673187.379 ops/s
# Warmup Iteration  28: 674797.199 ops/s
# Warmup Iteration  29: 676599.304 ops/s
# Warmup Iteration  30: 674060.632 ops/s
Iteration   1: 672156.461 ops/s
Iteration   2: 673319.783 ops/s
Iteration   3: 669344.292 ops/s
Iteration   4: 675493.571 ops/s
Iteration   5: 674616.311 ops/s
Iteration   6: 675130.067 ops/s
Iteration   7: 676325.825 ops/s
Iteration   8: 670887.894 ops/s
Iteration   9: 676201.589 ops/s
Iteration  10: 672485.823 ops/s
Iteration  11: 675332.751 ops/s
Iteration  12: 673607.515 ops/s
Iteration  13: 671083.867 ops/s
Iteration  14: 673076.375 ops/s
Iteration  15: 672711.775 ops/s
Iteration  16: 674126.526 ops/s
Iteration  17: 671917.001 ops/s
Iteration  18: 671136.979 ops/s
Iteration  19: 674976.613 ops/s
Iteration  20: 669434.334 ops/s
Iteration  21: 668114.163 ops/s
Iteration  22: 673048.965 ops/s
Iteration  23: 674373.552 ops/s
Iteration  24: 672366.449 ops/s
Iteration  25: 671619.110 ops/s
Iteration  26: 673379.213 ops/s
Iteration  27: 672784.821 ops/s
Iteration  28: 671856.468 ops/s
Iteration  29: 675114.026 ops/s
Iteration  30: 671871.058 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_idFromLong":
  672929.773 ±(99.9%) 1363.870 ops/s [Average]
  (min, avg, max) = (668114.163, 672929.773, 676325.825), stdev = 2041.377
  CI (99.9%): [671565.902, 674293.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_idFromLong  thrpt   30  672929.773 ± 1363.870  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_idFromLong_invalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_idFromLong_invalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 156614.668 ops/s
# Warmup Iteration   2: 191423.123 ops/s
# Warmup Iteration   3: 206632.485 ops/s
# Warmup Iteration   4: 332674.069 ops/s
# Warmup Iteration   5: 330680.041 ops/s
# Warmup Iteration   6: 331363.659 ops/s
# Warmup Iteration   7: 331835.507 ops/s
# Warmup Iteration   8: 329536.519 ops/s
# Warmup Iteration   9: 331324.211 ops/s
# Warmup Iteration  10: 329852.456 ops/s
# Warmup Iteration  11: 328045.076 ops/s
# Warmup Iteration  12: 332862.650 ops/s
# Warmup Iteration  13: 261525.378 ops/s
# Warmup Iteration  14: 296488.975 ops/s
# Warmup Iteration  15: 330956.848 ops/s
# Warmup Iteration  16: 330809.947 ops/s
# Warmup Iteration  17: 338706.805 ops/s
# Warmup Iteration  18: 338735.889 ops/s
# Warmup Iteration  19: 340524.302 ops/s
# Warmup Iteration  20: 338971.383 ops/s
# Warmup Iteration  21: 339767.953 ops/s
# Warmup Iteration  22: 338734.940 ops/s
# Warmup Iteration  23: 339642.429 ops/s
# Warmup Iteration  24: 339026.035 ops/s
# Warmup Iteration  25: 339033.508 ops/s
# Warmup Iteration  26: 339520.203 ops/s
# Warmup Iteration  27: 339374.351 ops/s
# Warmup Iteration  28: 339349.017 ops/s
# Warmup Iteration  29: 340347.879 ops/s
# Warmup Iteration  30: 336990.924 ops/s
Iteration   1: 339803.405 ops/s
Iteration   2: 338213.565 ops/s
Iteration   3: 339137.578 ops/s
Iteration   4: 338735.469 ops/s
Iteration   5: 338768.208 ops/s
Iteration   6: 338642.763 ops/s
Iteration   7: 338311.193 ops/s
Iteration   8: 339244.195 ops/s
Iteration   9: 339420.837 ops/s
Iteration  10: 338248.572 ops/s
Iteration  11: 340123.031 ops/s
Iteration  12: 338181.823 ops/s
Iteration  13: 339750.523 ops/s
Iteration  14: 339381.990 ops/s
Iteration  15: 339567.217 ops/s
Iteration  16: 336720.623 ops/s
Iteration  17: 339826.071 ops/s
Iteration  18: 339939.935 ops/s
Iteration  19: 339575.470 ops/s
Iteration  20: 338050.210 ops/s
Iteration  21: 339224.903 ops/s
Iteration  22: 340493.577 ops/s
Iteration  23: 339570.074 ops/s
Iteration  24: 339533.989 ops/s
Iteration  25: 339841.118 ops/s
Iteration  26: 340023.672 ops/s
Iteration  27: 339918.220 ops/s
Iteration  28: 337582.762 ops/s
Iteration  29: 340131.393 ops/s
Iteration  30: 339271.670 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_idFromLong_invalid":
  339174.469 ±(99.9%) 578.011 ops/s [Average]
  (min, avg, max) = (336720.623, 339174.469, 340493.577), stdev = 865.139
  CI (99.9%): [338596.458, 339752.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_idFromLong_invalid  thrpt   30  339174.469 ± 578.011  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_idFromLong_minValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_idFromLong_minValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235072.834 ops/s
# Warmup Iteration   2: 309804.651 ops/s
# Warmup Iteration   3: 620788.013 ops/s
# Warmup Iteration   4: 646622.051 ops/s
# Warmup Iteration   5: 641888.016 ops/s
# Warmup Iteration   6: 641953.272 ops/s
# Warmup Iteration   7: 647025.103 ops/s
# Warmup Iteration   8: 461207.046 ops/s
# Warmup Iteration   9: 653983.718 ops/s
# Warmup Iteration  10: 651849.586 ops/s
# Warmup Iteration  11: 652908.095 ops/s
# Warmup Iteration  12: 653703.926 ops/s
# Warmup Iteration  13: 654354.890 ops/s
# Warmup Iteration  14: 653651.720 ops/s
# Warmup Iteration  15: 653772.189 ops/s
# Warmup Iteration  16: 652078.530 ops/s
# Warmup Iteration  17: 650061.777 ops/s
# Warmup Iteration  18: 650491.496 ops/s
# Warmup Iteration  19: 649400.250 ops/s
# Warmup Iteration  20: 649551.537 ops/s
# Warmup Iteration  21: 651785.647 ops/s
# Warmup Iteration  22: 647625.809 ops/s
# Warmup Iteration  23: 648841.217 ops/s
# Warmup Iteration  24: 650209.700 ops/s
# Warmup Iteration  25: 651649.234 ops/s
# Warmup Iteration  26: 653584.383 ops/s
# Warmup Iteration  27: 653761.944 ops/s
# Warmup Iteration  28: 649662.497 ops/s
# Warmup Iteration  29: 649852.371 ops/s
# Warmup Iteration  30: 651622.174 ops/s
Iteration   1: 652412.315 ops/s
Iteration   2: 648910.928 ops/s
Iteration   3: 652192.802 ops/s
Iteration   4: 649929.601 ops/s
Iteration   5: 652654.610 ops/s
Iteration   6: 648956.961 ops/s
Iteration   7: 652077.687 ops/s
Iteration   8: 650495.622 ops/s
Iteration   9: 650839.210 ops/s
Iteration  10: 647081.267 ops/s
Iteration  11: 649763.662 ops/s
Iteration  12: 646233.249 ops/s
Iteration  13: 646598.405 ops/s
Iteration  14: 652509.247 ops/s
Iteration  15: 643605.389 ops/s
Iteration  16: 644547.097 ops/s
Iteration  17: 651743.843 ops/s
Iteration  18: 651682.976 ops/s
Iteration  19: 649865.468 ops/s
Iteration  20: 649001.085 ops/s
Iteration  21: 652533.249 ops/s
Iteration  22: 650222.253 ops/s
Iteration  23: 651993.641 ops/s
Iteration  24: 650764.953 ops/s
Iteration  25: 649660.582 ops/s
Iteration  26: 651020.288 ops/s
Iteration  27: 650146.595 ops/s
Iteration  28: 651520.498 ops/s
Iteration  29: 650915.616 ops/s
Iteration  30: 650878.048 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_idFromLong_minValue":
  650025.238 ±(99.9%) 1566.724 ops/s [Average]
  (min, avg, max) = (643605.389, 650025.238, 652654.610), stdev = 2344.999
  CI (99.9%): [648458.514, 651591.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_idFromLong_minValue  thrpt   30  650025.238 ± 1566.724  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_id_emptyInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_id_emptyInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154926.559 ops/s
# Warmup Iteration   2: 193277.071 ops/s
# Warmup Iteration   3: 197098.837 ops/s
# Warmup Iteration   4: 302515.835 ops/s
# Warmup Iteration   5: 304022.391 ops/s
# Warmup Iteration   6: 312142.665 ops/s
# Warmup Iteration   7: 310450.058 ops/s
# Warmup Iteration   8: 311705.616 ops/s
# Warmup Iteration   9: 309573.702 ops/s
# Warmup Iteration  10: 308854.876 ops/s
# Warmup Iteration  11: 312323.238 ops/s
# Warmup Iteration  12: 308397.564 ops/s
# Warmup Iteration  13: 309562.466 ops/s
# Warmup Iteration  14: 259778.234 ops/s
# Warmup Iteration  15: 263102.798 ops/s
# Warmup Iteration  16: 309907.565 ops/s
# Warmup Iteration  17: 317507.902 ops/s
# Warmup Iteration  18: 319220.875 ops/s
# Warmup Iteration  19: 318469.429 ops/s
# Warmup Iteration  20: 317483.403 ops/s
# Warmup Iteration  21: 318479.350 ops/s
# Warmup Iteration  22: 318915.019 ops/s
# Warmup Iteration  23: 319223.656 ops/s
# Warmup Iteration  24: 318335.016 ops/s
# Warmup Iteration  25: 318303.210 ops/s
# Warmup Iteration  26: 317481.232 ops/s
# Warmup Iteration  27: 316764.456 ops/s
# Warmup Iteration  28: 315484.965 ops/s
# Warmup Iteration  29: 316618.555 ops/s
# Warmup Iteration  30: 317158.068 ops/s
Iteration   1: 314766.712 ops/s
Iteration   2: 318136.742 ops/s
Iteration   3: 318769.079 ops/s
Iteration   4: 318689.892 ops/s
Iteration   5: 317338.713 ops/s
Iteration   6: 317391.157 ops/s
Iteration   7: 316695.914 ops/s
Iteration   8: 317793.210 ops/s
Iteration   9: 318514.845 ops/s
Iteration  10: 318138.199 ops/s
Iteration  11: 316312.141 ops/s
Iteration  12: 317266.316 ops/s
Iteration  13: 317212.919 ops/s
Iteration  14: 317009.066 ops/s
Iteration  15: 316455.315 ops/s
Iteration  16: 316850.880 ops/s
Iteration  17: 315985.072 ops/s
Iteration  18: 316494.247 ops/s
Iteration  19: 316462.100 ops/s
Iteration  20: 315414.253 ops/s
Iteration  21: 317569.895 ops/s
Iteration  22: 317597.894 ops/s
Iteration  23: 316556.103 ops/s
Iteration  24: 317050.096 ops/s
Iteration  25: 315888.874 ops/s
Iteration  26: 316578.305 ops/s
Iteration  27: 317522.429 ops/s
Iteration  28: 316567.394 ops/s
Iteration  29: 316456.557 ops/s
Iteration  30: 314802.155 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_id_emptyInvalid":
  316942.882 ±(99.9%) 675.277 ops/s [Average]
  (min, avg, max) = (314766.712, 316942.882, 318769.079), stdev = 1010.723
  CI (99.9%): [316267.605, 317618.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_id_emptyInvalid  thrpt   30  316942.882 ± 675.277  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_id_zerosInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_id_zerosInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147549.306 ops/s
# Warmup Iteration   2: 184859.489 ops/s
# Warmup Iteration   3: 186746.348 ops/s
# Warmup Iteration   4: 281533.288 ops/s
# Warmup Iteration   5: 301380.680 ops/s
# Warmup Iteration   6: 305302.421 ops/s
# Warmup Iteration   7: 302851.435 ops/s
# Warmup Iteration   8: 306859.723 ops/s
# Warmup Iteration   9: 303497.991 ops/s
# Warmup Iteration  10: 305319.730 ops/s
# Warmup Iteration  11: 302817.371 ops/s
# Warmup Iteration  12: 304364.240 ops/s
# Warmup Iteration  13: 302576.811 ops/s
# Warmup Iteration  14: 289718.936 ops/s
# Warmup Iteration  15: 209754.417 ops/s
# Warmup Iteration  16: 303535.987 ops/s
# Warmup Iteration  17: 308908.091 ops/s
# Warmup Iteration  18: 310617.485 ops/s
# Warmup Iteration  19: 311854.731 ops/s
# Warmup Iteration  20: 308996.348 ops/s
# Warmup Iteration  21: 310232.679 ops/s
# Warmup Iteration  22: 310817.054 ops/s
# Warmup Iteration  23: 312253.451 ops/s
# Warmup Iteration  24: 311353.784 ops/s
# Warmup Iteration  25: 312102.265 ops/s
# Warmup Iteration  26: 310336.492 ops/s
# Warmup Iteration  27: 311277.021 ops/s
# Warmup Iteration  28: 311296.362 ops/s
# Warmup Iteration  29: 311059.802 ops/s
# Warmup Iteration  30: 309689.783 ops/s
Iteration   1: 309880.493 ops/s
Iteration   2: 310639.530 ops/s
Iteration   3: 309822.143 ops/s
Iteration   4: 311719.703 ops/s
Iteration   5: 311087.256 ops/s
Iteration   6: 311919.058 ops/s
Iteration   7: 311032.011 ops/s
Iteration   8: 310355.482 ops/s
Iteration   9: 308794.870 ops/s
Iteration  10: 311165.144 ops/s
Iteration  11: 311202.285 ops/s
Iteration  12: 310570.562 ops/s
Iteration  13: 310597.397 ops/s
Iteration  14: 311552.840 ops/s
Iteration  15: 310952.328 ops/s
Iteration  16: 310050.293 ops/s
Iteration  17: 311113.511 ops/s
Iteration  18: 310051.616 ops/s
Iteration  19: 311251.857 ops/s
Iteration  20: 311456.647 ops/s
Iteration  21: 310575.828 ops/s
Iteration  22: 310407.007 ops/s
Iteration  23: 311572.520 ops/s
Iteration  24: 309620.393 ops/s
Iteration  25: 309204.344 ops/s
Iteration  26: 312652.227 ops/s
Iteration  27: 310758.819 ops/s
Iteration  28: 310272.828 ops/s
Iteration  29: 309314.321 ops/s
Iteration  30: 308720.252 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_id_zerosInvalid":
  310610.452 ±(99.9%) 620.561 ops/s [Average]
  (min, avg, max) = (308720.252, 310610.452, 312652.227), stdev = 928.827
  CI (99.9%): [309989.891, 311231.013] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_id_zerosInvalid  thrpt   30  310610.452 ± 620.561  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_localEndpoint_emptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_localEndpoint_emptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 247654.728 ops/s
# Warmup Iteration   2: 319322.653 ops/s
# Warmup Iteration   3: 643209.878 ops/s
# Warmup Iteration   4: 665826.057 ops/s
# Warmup Iteration   5: 671433.749 ops/s
# Warmup Iteration   6: 676349.482 ops/s
# Warmup Iteration   7: 674239.807 ops/s
# Warmup Iteration   8: 480069.500 ops/s
# Warmup Iteration   9: 678815.349 ops/s
# Warmup Iteration  10: 678833.048 ops/s
# Warmup Iteration  11: 678084.188 ops/s
# Warmup Iteration  12: 677775.638 ops/s
# Warmup Iteration  13: 677354.495 ops/s
# Warmup Iteration  14: 675748.365 ops/s
# Warmup Iteration  15: 676297.573 ops/s
# Warmup Iteration  16: 675407.913 ops/s
# Warmup Iteration  17: 674589.125 ops/s
# Warmup Iteration  18: 678857.793 ops/s
# Warmup Iteration  19: 674300.128 ops/s
# Warmup Iteration  20: 678348.003 ops/s
# Warmup Iteration  21: 677020.659 ops/s
# Warmup Iteration  22: 676733.829 ops/s
# Warmup Iteration  23: 677840.387 ops/s
# Warmup Iteration  24: 678230.698 ops/s
# Warmup Iteration  25: 678461.653 ops/s
# Warmup Iteration  26: 678283.606 ops/s
# Warmup Iteration  27: 680156.295 ops/s
# Warmup Iteration  28: 677928.123 ops/s
# Warmup Iteration  29: 677786.805 ops/s
# Warmup Iteration  30: 677921.122 ops/s
Iteration   1: 678760.931 ops/s
Iteration   2: 677409.751 ops/s
Iteration   3: 679541.082 ops/s
Iteration   4: 681294.448 ops/s
Iteration   5: 676272.565 ops/s
Iteration   6: 673824.348 ops/s
Iteration   7: 678295.005 ops/s
Iteration   8: 672840.867 ops/s
Iteration   9: 678436.018 ops/s
Iteration  10: 678156.242 ops/s
Iteration  11: 677615.118 ops/s
Iteration  12: 674549.308 ops/s
Iteration  13: 673428.114 ops/s
Iteration  14: 679844.580 ops/s
Iteration  15: 676490.458 ops/s
Iteration  16: 679502.528 ops/s
Iteration  17: 678162.242 ops/s
Iteration  18: 679301.555 ops/s
Iteration  19: 681879.499 ops/s
Iteration  20: 680357.008 ops/s
Iteration  21: 680826.363 ops/s
Iteration  22: 678396.019 ops/s
Iteration  23: 680476.073 ops/s
Iteration  24: 677294.173 ops/s
Iteration  25: 679479.353 ops/s
Iteration  26: 679181.702 ops/s
Iteration  27: 679792.934 ops/s
Iteration  28: 678226.074 ops/s
Iteration  29: 680225.642 ops/s
Iteration  30: 679659.041 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_localEndpoint_emptyToNull":
  678317.301 ±(99.9%) 1524.679 ops/s [Average]
  (min, avg, max) = (672840.867, 678317.301, 681879.499), stdev = 2282.068
  CI (99.9%): [676792.623, 679841.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_localEndpoint_emptyToNull  thrpt   30  678317.301 ± 1524.679  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_localServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_localServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236944.933 ops/s
# Warmup Iteration   2: 304702.659 ops/s
# Warmup Iteration   3: 664329.327 ops/s
# Warmup Iteration   4: 670260.770 ops/s
# Warmup Iteration   5: 671492.750 ops/s
# Warmup Iteration   6: 668391.902 ops/s
# Warmup Iteration   7: 635290.304 ops/s
# Warmup Iteration   8: 506673.955 ops/s
# Warmup Iteration   9: 677667.405 ops/s
# Warmup Iteration  10: 680444.266 ops/s
# Warmup Iteration  11: 677602.902 ops/s
# Warmup Iteration  12: 676944.995 ops/s
# Warmup Iteration  13: 680481.414 ops/s
# Warmup Iteration  14: 678108.355 ops/s
# Warmup Iteration  15: 678835.678 ops/s
# Warmup Iteration  16: 680633.502 ops/s
# Warmup Iteration  17: 679923.223 ops/s
# Warmup Iteration  18: 681513.513 ops/s
# Warmup Iteration  19: 680340.257 ops/s
# Warmup Iteration  20: 679845.467 ops/s
# Warmup Iteration  21: 674408.285 ops/s
# Warmup Iteration  22: 678608.040 ops/s
# Warmup Iteration  23: 681051.594 ops/s
# Warmup Iteration  24: 679631.529 ops/s
# Warmup Iteration  25: 680294.190 ops/s
# Warmup Iteration  26: 679556.858 ops/s
# Warmup Iteration  27: 677814.009 ops/s
# Warmup Iteration  28: 681967.243 ops/s
# Warmup Iteration  29: 677793.230 ops/s
# Warmup Iteration  30: 681518.975 ops/s
Iteration   1: 681245.571 ops/s
Iteration   2: 674372.852 ops/s
Iteration   3: 680538.834 ops/s
Iteration   4: 679247.890 ops/s
Iteration   5: 679867.012 ops/s
Iteration   6: 678236.468 ops/s
Iteration   7: 678522.875 ops/s
Iteration   8: 679037.782 ops/s
Iteration   9: 680441.691 ops/s
Iteration  10: 681216.057 ops/s
Iteration  11: 677807.145 ops/s
Iteration  12: 682109.710 ops/s
Iteration  13: 678577.821 ops/s
Iteration  14: 680224.754 ops/s
Iteration  15: 675760.117 ops/s
Iteration  16: 679837.089 ops/s
Iteration  17: 675103.931 ops/s
Iteration  18: 673406.186 ops/s
Iteration  19: 677746.869 ops/s
Iteration  20: 680553.591 ops/s
Iteration  21: 676399.398 ops/s
Iteration  22: 682432.115 ops/s
Iteration  23: 675865.469 ops/s
Iteration  24: 675418.298 ops/s
Iteration  25: 674540.318 ops/s
Iteration  26: 676945.994 ops/s
Iteration  27: 675733.043 ops/s
Iteration  28: 680989.293 ops/s
Iteration  29: 679088.219 ops/s
Iteration  30: 675254.890 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_localServiceName":
  678217.376 ±(99.9%) 1698.618 ops/s [Average]
  (min, avg, max) = (673406.186, 678217.376, 682432.115), stdev = 2542.412
  CI (99.9%): [676518.758, 679915.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_localServiceName  thrpt   30  678217.376 ± 1698.618  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_badCharacters$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_badCharacters

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143009.472 ops/s
# Warmup Iteration   2: 176027.735 ops/s
# Warmup Iteration   3: 181101.694 ops/s
# Warmup Iteration   4: 294491.863 ops/s
# Warmup Iteration   5: 292242.856 ops/s
# Warmup Iteration   6: 294945.435 ops/s
# Warmup Iteration   7: 294747.163 ops/s
# Warmup Iteration   8: 295225.666 ops/s
# Warmup Iteration   9: 296507.820 ops/s
# Warmup Iteration  10: 293135.310 ops/s
# Warmup Iteration  11: 295768.117 ops/s
# Warmup Iteration  12: 290888.144 ops/s
# Warmup Iteration  13: 277944.000 ops/s
# Warmup Iteration  14: 211756.923 ops/s
# Warmup Iteration  15: 296363.582 ops/s
# Warmup Iteration  16: 296727.794 ops/s
# Warmup Iteration  17: 303848.270 ops/s
# Warmup Iteration  18: 302564.328 ops/s
# Warmup Iteration  19: 303440.904 ops/s
# Warmup Iteration  20: 304201.876 ops/s
# Warmup Iteration  21: 304141.370 ops/s
# Warmup Iteration  22: 304167.559 ops/s
# Warmup Iteration  23: 303466.640 ops/s
# Warmup Iteration  24: 303054.263 ops/s
# Warmup Iteration  25: 303870.182 ops/s
# Warmup Iteration  26: 303153.535 ops/s
# Warmup Iteration  27: 302097.676 ops/s
# Warmup Iteration  28: 302987.286 ops/s
# Warmup Iteration  29: 303126.629 ops/s
# Warmup Iteration  30: 303330.106 ops/s
Iteration   1: 303245.160 ops/s
Iteration   2: 303818.599 ops/s
Iteration   3: 304932.451 ops/s
Iteration   4: 305459.941 ops/s
Iteration   5: 304093.896 ops/s
Iteration   6: 303459.615 ops/s
Iteration   7: 303296.135 ops/s
Iteration   8: 302691.796 ops/s
Iteration   9: 300867.823 ops/s
Iteration  10: 302476.222 ops/s
Iteration  11: 303236.818 ops/s
Iteration  12: 302339.290 ops/s
Iteration  13: 304834.568 ops/s
Iteration  14: 302942.333 ops/s
Iteration  15: 303631.030 ops/s
Iteration  16: 302753.836 ops/s
Iteration  17: 303634.131 ops/s
Iteration  18: 301958.682 ops/s
Iteration  19: 302138.137 ops/s
Iteration  20: 302268.441 ops/s
Iteration  21: 302150.764 ops/s
Iteration  22: 303029.211 ops/s
Iteration  23: 303500.629 ops/s
Iteration  24: 303262.483 ops/s
Iteration  25: 302795.407 ops/s
Iteration  26: 303593.181 ops/s
Iteration  27: 301798.496 ops/s
Iteration  28: 302357.975 ops/s
Iteration  29: 302925.403 ops/s
Iteration  30: 302185.778 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_badCharacters":
  303055.941 ±(99.9%) 655.055 ops/s [Average]
  (min, avg, max) = (300867.823, 303055.941, 305459.941), stdev = 980.456
  CI (99.9%): [302400.886, 303710.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_normalizeTraceId_badCharacters  thrpt   30  303055.941 ± 655.055  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo128$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo128

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244993.059 ops/s
# Warmup Iteration   2: 315494.164 ops/s
# Warmup Iteration   3: 620652.933 ops/s
# Warmup Iteration   4: 645107.534 ops/s
# Warmup Iteration   5: 651903.306 ops/s
# Warmup Iteration   6: 655244.901 ops/s
# Warmup Iteration   7: 652790.859 ops/s
# Warmup Iteration   8: 467432.222 ops/s
# Warmup Iteration   9: 657981.344 ops/s
# Warmup Iteration  10: 657799.881 ops/s
# Warmup Iteration  11: 657357.632 ops/s
# Warmup Iteration  12: 657337.382 ops/s
# Warmup Iteration  13: 659403.215 ops/s
# Warmup Iteration  14: 658659.230 ops/s
# Warmup Iteration  15: 656877.755 ops/s
# Warmup Iteration  16: 657868.607 ops/s
# Warmup Iteration  17: 654609.386 ops/s
# Warmup Iteration  18: 656066.214 ops/s
# Warmup Iteration  19: 656509.421 ops/s
# Warmup Iteration  20: 656222.897 ops/s
# Warmup Iteration  21: 657794.324 ops/s
# Warmup Iteration  22: 658255.360 ops/s
# Warmup Iteration  23: 658385.143 ops/s
# Warmup Iteration  24: 659069.640 ops/s
# Warmup Iteration  25: 657869.199 ops/s
# Warmup Iteration  26: 653809.041 ops/s
# Warmup Iteration  27: 658610.237 ops/s
# Warmup Iteration  28: 658708.548 ops/s
# Warmup Iteration  29: 657068.365 ops/s
# Warmup Iteration  30: 654265.816 ops/s
Iteration   1: 655366.739 ops/s
Iteration   2: 658526.094 ops/s
Iteration   3: 655960.132 ops/s
Iteration   4: 657956.863 ops/s
Iteration   5: 656530.019 ops/s
Iteration   6: 658917.295 ops/s
Iteration   7: 652413.285 ops/s
Iteration   8: 660834.779 ops/s
Iteration   9: 658157.418 ops/s
Iteration  10: 657556.232 ops/s
Iteration  11: 657877.359 ops/s
Iteration  12: 651352.516 ops/s
Iteration  13: 659540.784 ops/s
Iteration  14: 658818.961 ops/s
Iteration  15: 659611.525 ops/s
Iteration  16: 656996.624 ops/s
Iteration  17: 659726.929 ops/s
Iteration  18: 658583.965 ops/s
Iteration  19: 657421.175 ops/s
Iteration  20: 659695.947 ops/s
Iteration  21: 655894.891 ops/s
Iteration  22: 657325.528 ops/s
Iteration  23: 657128.537 ops/s
Iteration  24: 657619.876 ops/s
Iteration  25: 658467.342 ops/s
Iteration  26: 650941.498 ops/s
Iteration  27: 657788.872 ops/s
Iteration  28: 654464.742 ops/s
Iteration  29: 656733.798 ops/s
Iteration  30: 658385.509 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo128":
  657219.841 ±(99.9%) 1584.440 ops/s [Average]
  (min, avg, max) = (650941.498, 657219.841, 660834.779), stdev = 2371.516
  CI (99.9%): [655635.401, 658804.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo128  thrpt   30  657219.841 ± 1584.440  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo64$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo64

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241847.954 ops/s
# Warmup Iteration   2: 308512.478 ops/s
# Warmup Iteration   3: 631550.656 ops/s
# Warmup Iteration   4: 664689.597 ops/s
# Warmup Iteration   5: 670290.866 ops/s
# Warmup Iteration   6: 670886.339 ops/s
# Warmup Iteration   7: 669839.596 ops/s
# Warmup Iteration   8: 470280.662 ops/s
# Warmup Iteration   9: 677736.091 ops/s
# Warmup Iteration  10: 675683.666 ops/s
# Warmup Iteration  11: 675846.908 ops/s
# Warmup Iteration  12: 676196.937 ops/s
# Warmup Iteration  13: 675108.589 ops/s
# Warmup Iteration  14: 675795.151 ops/s
# Warmup Iteration  15: 670318.315 ops/s
# Warmup Iteration  16: 669973.874 ops/s
# Warmup Iteration  17: 669499.360 ops/s
# Warmup Iteration  18: 670397.132 ops/s
# Warmup Iteration  19: 670866.553 ops/s
# Warmup Iteration  20: 673002.765 ops/s
# Warmup Iteration  21: 673597.793 ops/s
# Warmup Iteration  22: 672556.953 ops/s
# Warmup Iteration  23: 671636.269 ops/s
# Warmup Iteration  24: 672676.866 ops/s
# Warmup Iteration  25: 670811.271 ops/s
# Warmup Iteration  26: 672345.025 ops/s
# Warmup Iteration  27: 672366.906 ops/s
# Warmup Iteration  28: 670997.604 ops/s
# Warmup Iteration  29: 669961.413 ops/s
# Warmup Iteration  30: 671211.416 ops/s
Iteration   1: 674005.879 ops/s
Iteration   2: 675830.907 ops/s
Iteration   3: 668047.782 ops/s
Iteration   4: 673630.209 ops/s
Iteration   5: 667771.992 ops/s
Iteration   6: 669338.329 ops/s
Iteration   7: 666621.046 ops/s
Iteration   8: 674095.030 ops/s
Iteration   9: 676534.431 ops/s
Iteration  10: 672749.303 ops/s
Iteration  11: 674540.044 ops/s
Iteration  12: 671427.049 ops/s
Iteration  13: 672535.881 ops/s
Iteration  14: 673320.851 ops/s
Iteration  15: 674366.498 ops/s
Iteration  16: 674392.991 ops/s
Iteration  17: 672370.118 ops/s
Iteration  18: 675327.437 ops/s
Iteration  19: 674638.071 ops/s
Iteration  20: 675168.107 ops/s
Iteration  21: 671311.167 ops/s
Iteration  22: 672448.758 ops/s
Iteration  23: 672803.063 ops/s
Iteration  24: 673492.753 ops/s
Iteration  25: 675287.073 ops/s
Iteration  26: 673305.782 ops/s
Iteration  27: 672712.440 ops/s
Iteration  28: 673926.000 ops/s
Iteration  29: 672873.098 ops/s
Iteration  30: 673428.608 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo64":
  672943.357 ±(99.9%) 1574.741 ops/s [Average]
  (min, avg, max) = (666621.046, 672943.357, 676534.431), stdev = 2356.998
  CI (99.9%): [671368.616, 674518.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_normalizeTraceId_padsTo64  thrpt   30  672943.357 ± 1574.741  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_truncates64BitZeroPrefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_truncates64BitZeroPrefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236678.796 ops/s
# Warmup Iteration   2: 306001.459 ops/s
# Warmup Iteration   3: 608260.236 ops/s
# Warmup Iteration   4: 631208.024 ops/s
# Warmup Iteration   5: 638418.604 ops/s
# Warmup Iteration   6: 637410.092 ops/s
# Warmup Iteration   7: 635852.589 ops/s
# Warmup Iteration   8: 473010.103 ops/s
# Warmup Iteration   9: 624166.972 ops/s
# Warmup Iteration  10: 643104.036 ops/s
# Warmup Iteration  11: 644500.025 ops/s
# Warmup Iteration  12: 644512.640 ops/s
# Warmup Iteration  13: 641986.198 ops/s
# Warmup Iteration  14: 643906.117 ops/s
# Warmup Iteration  15: 645098.223 ops/s
# Warmup Iteration  16: 645304.031 ops/s
# Warmup Iteration  17: 642066.506 ops/s
# Warmup Iteration  18: 641063.464 ops/s
# Warmup Iteration  19: 642997.779 ops/s
# Warmup Iteration  20: 641924.490 ops/s
# Warmup Iteration  21: 635639.127 ops/s
# Warmup Iteration  22: 639945.785 ops/s
# Warmup Iteration  23: 643791.736 ops/s
# Warmup Iteration  24: 641778.103 ops/s
# Warmup Iteration  25: 641451.187 ops/s
# Warmup Iteration  26: 642262.542 ops/s
# Warmup Iteration  27: 641854.402 ops/s
# Warmup Iteration  28: 640378.876 ops/s
# Warmup Iteration  29: 641127.657 ops/s
# Warmup Iteration  30: 639895.733 ops/s
Iteration   1: 641648.261 ops/s
Iteration   2: 643182.539 ops/s
Iteration   3: 642957.824 ops/s
Iteration   4: 637987.283 ops/s
Iteration   5: 641228.478 ops/s
Iteration   6: 641017.631 ops/s
Iteration   7: 642485.077 ops/s
Iteration   8: 635618.123 ops/s
Iteration   9: 638699.542 ops/s
Iteration  10: 639781.509 ops/s
Iteration  11: 640372.544 ops/s
Iteration  12: 641487.159 ops/s
Iteration  13: 636557.279 ops/s
Iteration  14: 641543.595 ops/s
Iteration  15: 635100.648 ops/s
Iteration  16: 639387.546 ops/s
Iteration  17: 643434.974 ops/s
Iteration  18: 638874.656 ops/s
Iteration  19: 643495.842 ops/s
Iteration  20: 637403.202 ops/s
Iteration  21: 645931.773 ops/s
Iteration  22: 639342.428 ops/s
Iteration  23: 637195.130 ops/s
Iteration  24: 643315.068 ops/s
Iteration  25: 640323.872 ops/s
Iteration  26: 638723.122 ops/s
Iteration  27: 640598.998 ops/s
Iteration  28: 638782.723 ops/s
Iteration  29: 642755.119 ops/s
Iteration  30: 641767.394 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_normalizeTraceId_truncates64BitZeroPrefix":
  640366.645 ±(99.9%) 1723.714 ops/s [Average]
  (min, avg, max) = (635100.648, 640366.645, 645931.773), stdev = 2579.974
  CI (99.9%): [638642.930, 642090.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_normalizeTraceId_truncates64BitZeroPrefix  thrpt   30  640366.645 ± 1723.714  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_nullToZeroOrFalse$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_nullToZeroOrFalse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3689.832 ops/s
# Warmup Iteration   2: 5623.702 ops/s
# Warmup Iteration   3: 5654.350 ops/s
# Warmup Iteration   4: 7644.105 ops/s
# Warmup Iteration   5: 9001.315 ops/s
# Warmup Iteration   6: 8719.142 ops/s
# Warmup Iteration   7: 8894.414 ops/s
# Warmup Iteration   8: 8745.060 ops/s
# Warmup Iteration   9: 9112.646 ops/s
# Warmup Iteration  10: 8974.037 ops/s
# Warmup Iteration  11: 9008.861 ops/s
# Warmup Iteration  12: 8712.083 ops/s
# Warmup Iteration  13: 8566.490 ops/s
# Warmup Iteration  14: 8677.035 ops/s
# Warmup Iteration  15: 8739.044 ops/s
# Warmup Iteration  16: 5853.186 ops/s
# Warmup Iteration  17: 9106.525 ops/s
# Warmup Iteration  18: 9106.228 ops/s
# Warmup Iteration  19: 9143.785 ops/s
# Warmup Iteration  20: 9154.883 ops/s
# Warmup Iteration  21: 9100.622 ops/s
# Warmup Iteration  22: 9225.209 ops/s
# Warmup Iteration  23: 9087.321 ops/s
# Warmup Iteration  24: 9174.354 ops/s
# Warmup Iteration  25: 9112.556 ops/s
# Warmup Iteration  26: 9102.271 ops/s
# Warmup Iteration  27: 9162.630 ops/s
# Warmup Iteration  28: 9061.337 ops/s
# Warmup Iteration  29: 9135.063 ops/s
# Warmup Iteration  30: 9177.774 ops/s
Iteration   1: 9086.709 ops/s
Iteration   2: 9056.100 ops/s
Iteration   3: 9178.418 ops/s
Iteration   4: 9102.318 ops/s
Iteration   5: 9090.156 ops/s
Iteration   6: 9151.911 ops/s
Iteration   7: 9042.749 ops/s
Iteration   8: 9118.382 ops/s
Iteration   9: 9142.027 ops/s
Iteration  10: 9228.096 ops/s
Iteration  11: 9152.651 ops/s
Iteration  12: 9174.386 ops/s
Iteration  13: 9216.310 ops/s
Iteration  14: 9129.576 ops/s
Iteration  15: 9155.989 ops/s
Iteration  16: 9102.659 ops/s
Iteration  17: 9165.408 ops/s
Iteration  18: 9121.919 ops/s
Iteration  19: 9120.581 ops/s
Iteration  20: 9157.457 ops/s
Iteration  21: 9137.416 ops/s
Iteration  22: 9046.215 ops/s
Iteration  23: 9167.359 ops/s
Iteration  24: 9132.580 ops/s
Iteration  25: 9153.316 ops/s
Iteration  26: 9172.966 ops/s
Iteration  27: 9098.246 ops/s
Iteration  28: 9078.292 ops/s
Iteration  29: 9091.910 ops/s
Iteration  30: 9088.841 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_nullToZeroOrFalse":
  9128.698 ±(99.9%) 30.689 ops/s [Average]
  (min, avg, max) = (9042.749, 9128.698, 9228.096), stdev = 45.934
  CI (99.9%): [9098.009, 9159.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt     Score    Error  Units
SpanTest._Benchmark.benchmark_nullToZeroOrFalse  thrpt   30  9128.698 ± 30.689  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentIdFromLong$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentIdFromLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242409.533 ops/s
# Warmup Iteration   2: 316568.687 ops/s
# Warmup Iteration   3: 631589.789 ops/s
# Warmup Iteration   4: 665328.764 ops/s
# Warmup Iteration   5: 672968.125 ops/s
# Warmup Iteration   6: 676103.856 ops/s
# Warmup Iteration   7: 673334.675 ops/s
# Warmup Iteration   8: 467807.083 ops/s
# Warmup Iteration   9: 679348.889 ops/s
# Warmup Iteration  10: 673530.909 ops/s
# Warmup Iteration  11: 679483.491 ops/s
# Warmup Iteration  12: 680367.264 ops/s
# Warmup Iteration  13: 679243.570 ops/s
# Warmup Iteration  14: 676304.572 ops/s
# Warmup Iteration  15: 676427.065 ops/s
# Warmup Iteration  16: 680613.406 ops/s
# Warmup Iteration  17: 681358.819 ops/s
# Warmup Iteration  18: 679395.190 ops/s
# Warmup Iteration  19: 679801.677 ops/s
# Warmup Iteration  20: 673761.116 ops/s
# Warmup Iteration  21: 672331.946 ops/s
# Warmup Iteration  22: 682094.540 ops/s
# Warmup Iteration  23: 679014.120 ops/s
# Warmup Iteration  24: 674822.988 ops/s
# Warmup Iteration  25: 677243.861 ops/s
# Warmup Iteration  26: 680592.828 ops/s
# Warmup Iteration  27: 681316.230 ops/s
# Warmup Iteration  28: 678160.953 ops/s
# Warmup Iteration  29: 676943.296 ops/s
# Warmup Iteration  30: 680270.097 ops/s
Iteration   1: 679996.946 ops/s
Iteration   2: 680921.675 ops/s
Iteration   3: 676721.647 ops/s
Iteration   4: 681837.399 ops/s
Iteration   5: 679866.712 ops/s
Iteration   6: 680038.515 ops/s
Iteration   7: 677668.734 ops/s
Iteration   8: 681160.100 ops/s
Iteration   9: 678647.219 ops/s
Iteration  10: 675747.678 ops/s
Iteration  11: 683130.678 ops/s
Iteration  12: 678361.635 ops/s
Iteration  13: 680222.323 ops/s
Iteration  14: 679749.823 ops/s
Iteration  15: 678205.881 ops/s
Iteration  16: 679380.592 ops/s
Iteration  17: 672113.911 ops/s
Iteration  18: 680634.398 ops/s
Iteration  19: 679841.182 ops/s
Iteration  20: 677426.386 ops/s
Iteration  21: 678399.467 ops/s
Iteration  22: 678034.472 ops/s
Iteration  23: 680863.445 ops/s
Iteration  24: 679114.150 ops/s
Iteration  25: 679582.904 ops/s
Iteration  26: 676053.261 ops/s
Iteration  27: 676976.852 ops/s
Iteration  28: 682407.339 ops/s
Iteration  29: 681658.884 ops/s
Iteration  30: 682044.127 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_parentIdFromLong":
  679226.944 ±(99.9%) 1543.453 ops/s [Average]
  (min, avg, max) = (672113.911, 679226.944, 683130.678), stdev = 2310.168
  CI (99.9%): [677683.492, 680770.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_parentIdFromLong  thrpt   30  679226.944 ± 1543.453  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentIdFromLong_zeroSameAsNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentIdFromLong_zeroSameAsNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228203.105 ops/s
# Warmup Iteration   2: 290453.724 ops/s
# Warmup Iteration   3: 635660.586 ops/s
# Warmup Iteration   4: 634537.580 ops/s
# Warmup Iteration   5: 640279.799 ops/s
# Warmup Iteration   6: 637259.543 ops/s
# Warmup Iteration   7: 592555.645 ops/s
# Warmup Iteration   8: 492738.139 ops/s
# Warmup Iteration   9: 638643.629 ops/s
# Warmup Iteration  10: 644756.651 ops/s
# Warmup Iteration  11: 643707.303 ops/s
# Warmup Iteration  12: 644111.883 ops/s
# Warmup Iteration  13: 642187.611 ops/s
# Warmup Iteration  14: 644689.647 ops/s
# Warmup Iteration  15: 642744.906 ops/s
# Warmup Iteration  16: 643909.712 ops/s
# Warmup Iteration  17: 641749.538 ops/s
# Warmup Iteration  18: 642973.613 ops/s
# Warmup Iteration  19: 641047.355 ops/s
# Warmup Iteration  20: 642730.484 ops/s
# Warmup Iteration  21: 641960.866 ops/s
# Warmup Iteration  22: 638372.365 ops/s
# Warmup Iteration  23: 635992.212 ops/s
# Warmup Iteration  24: 643679.530 ops/s
# Warmup Iteration  25: 637817.509 ops/s
# Warmup Iteration  26: 639745.777 ops/s
# Warmup Iteration  27: 640229.683 ops/s
# Warmup Iteration  28: 640264.407 ops/s
# Warmup Iteration  29: 634333.584 ops/s
# Warmup Iteration  30: 641613.510 ops/s
Iteration   1: 644118.586 ops/s
Iteration   2: 634630.102 ops/s
Iteration   3: 642617.313 ops/s
Iteration   4: 642295.836 ops/s
Iteration   5: 640631.041 ops/s
Iteration   6: 637645.722 ops/s
Iteration   7: 631662.402 ops/s
Iteration   8: 642193.793 ops/s
Iteration   9: 634389.713 ops/s
Iteration  10: 640395.174 ops/s
Iteration  11: 637905.490 ops/s
Iteration  12: 638225.014 ops/s
Iteration  13: 636726.047 ops/s
Iteration  14: 641112.390 ops/s
Iteration  15: 639477.169 ops/s
Iteration  16: 639669.430 ops/s
Iteration  17: 639422.260 ops/s
Iteration  18: 642389.470 ops/s
Iteration  19: 635939.445 ops/s
Iteration  20: 640214.326 ops/s
Iteration  21: 641854.037 ops/s
Iteration  22: 635136.971 ops/s
Iteration  23: 631634.768 ops/s
Iteration  24: 631344.754 ops/s
Iteration  25: 635807.007 ops/s
Iteration  26: 634002.998 ops/s
Iteration  27: 640690.154 ops/s
Iteration  28: 638084.671 ops/s
Iteration  29: 641243.764 ops/s
Iteration  30: 639660.402 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_parentIdFromLong_zeroSameAsNull":
  638370.675 ±(99.9%) 2366.895 ops/s [Average]
  (min, avg, max) = (631344.754, 638370.675, 644118.586), stdev = 3542.658
  CI (99.9%): [636003.780, 640737.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_parentIdFromLong_zeroSameAsNull  thrpt   30  638370.675 ± 2366.895  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentId_emptyInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentId_emptyInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150680.122 ops/s
# Warmup Iteration   2: 184736.080 ops/s
# Warmup Iteration   3: 190161.567 ops/s
# Warmup Iteration   4: 308048.352 ops/s
# Warmup Iteration   5: 305108.710 ops/s
# Warmup Iteration   6: 305427.477 ops/s
# Warmup Iteration   7: 304915.104 ops/s
# Warmup Iteration   8: 305207.750 ops/s
# Warmup Iteration   9: 308204.668 ops/s
# Warmup Iteration  10: 303134.431 ops/s
# Warmup Iteration  11: 307365.799 ops/s
# Warmup Iteration  12: 306770.054 ops/s
# Warmup Iteration  13: 310831.076 ops/s
# Warmup Iteration  14: 210310.058 ops/s
# Warmup Iteration  15: 307928.404 ops/s
# Warmup Iteration  16: 306546.045 ops/s
# Warmup Iteration  17: 315573.272 ops/s
# Warmup Iteration  18: 316108.799 ops/s
# Warmup Iteration  19: 315604.097 ops/s
# Warmup Iteration  20: 315763.511 ops/s
# Warmup Iteration  21: 314427.315 ops/s
# Warmup Iteration  22: 315754.813 ops/s
# Warmup Iteration  23: 317502.839 ops/s
# Warmup Iteration  24: 315823.554 ops/s
# Warmup Iteration  25: 315776.222 ops/s
# Warmup Iteration  26: 316570.377 ops/s
# Warmup Iteration  27: 316026.123 ops/s
# Warmup Iteration  28: 317246.645 ops/s
# Warmup Iteration  29: 315919.548 ops/s
# Warmup Iteration  30: 315264.865 ops/s
Iteration   1: 315108.972 ops/s
Iteration   2: 316129.850 ops/s
Iteration   3: 316780.057 ops/s
Iteration   4: 315389.590 ops/s
Iteration   5: 315292.070 ops/s
Iteration   6: 316234.696 ops/s
Iteration   7: 313553.747 ops/s
Iteration   8: 311476.484 ops/s
Iteration   9: 313350.177 ops/s
Iteration  10: 313498.055 ops/s
Iteration  11: 314315.839 ops/s
Iteration  12: 318546.658 ops/s
Iteration  13: 313951.352 ops/s
Iteration  14: 315722.370 ops/s
Iteration  15: 313727.993 ops/s
Iteration  16: 316656.532 ops/s
Iteration  17: 315410.692 ops/s
Iteration  18: 316037.807 ops/s
Iteration  19: 316615.013 ops/s
Iteration  20: 316371.096 ops/s
Iteration  21: 315793.293 ops/s
Iteration  22: 315156.066 ops/s
Iteration  23: 314703.224 ops/s
Iteration  24: 316669.458 ops/s
Iteration  25: 316841.894 ops/s
Iteration  26: 316514.088 ops/s
Iteration  27: 314946.758 ops/s
Iteration  28: 314133.942 ops/s
Iteration  29: 315759.782 ops/s
Iteration  30: 316866.141 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_parentId_emptyInvalid":
  315385.123 ±(99.9%) 961.362 ops/s [Average]
  (min, avg, max) = (311476.484, 315385.123, 318546.658), stdev = 1438.922
  CI (99.9%): [314423.761, 316346.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_parentId_emptyInvalid  thrpt   30  315385.123 ± 961.362  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentId_sameAsIdCoerseToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_parentId_sameAsIdCoerseToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 224656.686 ops/s
# Warmup Iteration   2: 294015.050 ops/s
# Warmup Iteration   3: 543000.880 ops/s
# Warmup Iteration   4: 603722.903 ops/s
# Warmup Iteration   5: 602175.097 ops/s
# Warmup Iteration   6: 604242.882 ops/s
# Warmup Iteration   7: 602605.130 ops/s
# Warmup Iteration   8: 564852.473 ops/s
# Warmup Iteration   9: 473172.332 ops/s
# Warmup Iteration  10: 607339.245 ops/s
# Warmup Iteration  11: 606100.852 ops/s
# Warmup Iteration  12: 607807.314 ops/s
# Warmup Iteration  13: 608650.562 ops/s
# Warmup Iteration  14: 608150.726 ops/s
# Warmup Iteration  15: 606754.393 ops/s
# Warmup Iteration  16: 604027.746 ops/s
# Warmup Iteration  17: 615279.416 ops/s
# Warmup Iteration  18: 616914.726 ops/s
# Warmup Iteration  19: 615889.784 ops/s
# Warmup Iteration  20: 616442.932 ops/s
# Warmup Iteration  21: 615083.689 ops/s
# Warmup Iteration  22: 615390.368 ops/s
# Warmup Iteration  23: 617030.836 ops/s
# Warmup Iteration  24: 612731.931 ops/s
# Warmup Iteration  25: 615321.162 ops/s
# Warmup Iteration  26: 614876.422 ops/s
# Warmup Iteration  27: 615227.936 ops/s
# Warmup Iteration  28: 614904.290 ops/s
# Warmup Iteration  29: 617190.060 ops/s
# Warmup Iteration  30: 614899.062 ops/s
Iteration   1: 618326.389 ops/s
Iteration   2: 615656.477 ops/s
Iteration   3: 617414.118 ops/s
Iteration   4: 616691.974 ops/s
Iteration   5: 615969.142 ops/s
Iteration   6: 614648.011 ops/s
Iteration   7: 611041.395 ops/s
Iteration   8: 615149.924 ops/s
Iteration   9: 617246.077 ops/s
Iteration  10: 614861.696 ops/s
Iteration  11: 617505.454 ops/s
Iteration  12: 616637.597 ops/s
Iteration  13: 616629.454 ops/s
Iteration  14: 616268.713 ops/s
Iteration  15: 615998.367 ops/s
Iteration  16: 610377.238 ops/s
Iteration  17: 614480.799 ops/s
Iteration  18: 613866.034 ops/s
Iteration  19: 612483.845 ops/s
Iteration  20: 612825.500 ops/s
Iteration  21: 614803.157 ops/s
Iteration  22: 615541.898 ops/s
Iteration  23: 620104.520 ops/s
Iteration  24: 619008.130 ops/s
Iteration  25: 619133.248 ops/s
Iteration  26: 614140.639 ops/s
Iteration  27: 615837.279 ops/s
Iteration  28: 614622.654 ops/s
Iteration  29: 612851.396 ops/s
Iteration  30: 617915.079 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_parentId_sameAsIdCoerseToNull":
  615601.207 ±(99.9%) 1537.621 ops/s [Average]
  (min, avg, max) = (610377.238, 615601.207, 620104.520), stdev = 2301.439
  CI (99.9%): [614063.585, 617138.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_parentId_sameAsIdCoerseToNull  thrpt   30  615601.207 ± 1537.621  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_putTagOverwritesValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_putTagOverwritesValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169572.898 ops/s
# Warmup Iteration   2: 242905.319 ops/s
# Warmup Iteration   3: 559910.511 ops/s
# Warmup Iteration   4: 557416.961 ops/s
# Warmup Iteration   5: 558223.056 ops/s
# Warmup Iteration   6: 561222.030 ops/s
# Warmup Iteration   7: 395939.326 ops/s
# Warmup Iteration   8: 567692.029 ops/s
# Warmup Iteration   9: 567147.716 ops/s
# Warmup Iteration  10: 567029.320 ops/s
# Warmup Iteration  11: 565364.890 ops/s
# Warmup Iteration  12: 568632.623 ops/s
# Warmup Iteration  13: 568437.730 ops/s
# Warmup Iteration  14: 567105.011 ops/s
# Warmup Iteration  15: 566587.937 ops/s
# Warmup Iteration  16: 564886.207 ops/s
# Warmup Iteration  17: 562641.065 ops/s
# Warmup Iteration  18: 562469.095 ops/s
# Warmup Iteration  19: 558778.499 ops/s
# Warmup Iteration  20: 563329.872 ops/s
# Warmup Iteration  21: 562528.017 ops/s
# Warmup Iteration  22: 562331.677 ops/s
# Warmup Iteration  23: 561720.445 ops/s
# Warmup Iteration  24: 564685.010 ops/s
# Warmup Iteration  25: 562955.227 ops/s
# Warmup Iteration  26: 565841.150 ops/s
# Warmup Iteration  27: 564921.902 ops/s
# Warmup Iteration  28: 565509.764 ops/s
# Warmup Iteration  29: 563687.175 ops/s
# Warmup Iteration  30: 564658.890 ops/s
Iteration   1: 560981.058 ops/s
Iteration   2: 564567.361 ops/s
Iteration   3: 561399.790 ops/s
Iteration   4: 563590.544 ops/s
Iteration   5: 561789.630 ops/s
Iteration   6: 560816.346 ops/s
Iteration   7: 561926.731 ops/s
Iteration   8: 564012.465 ops/s
Iteration   9: 561571.460 ops/s
Iteration  10: 564028.596 ops/s
Iteration  11: 565064.555 ops/s
Iteration  12: 566246.756 ops/s
Iteration  13: 563550.830 ops/s
Iteration  14: 562773.803 ops/s
Iteration  15: 563992.828 ops/s
Iteration  16: 563470.075 ops/s
Iteration  17: 564402.666 ops/s
Iteration  18: 564638.932 ops/s
Iteration  19: 560443.946 ops/s
Iteration  20: 560527.105 ops/s
Iteration  21: 562309.424 ops/s
Iteration  22: 563310.433 ops/s
Iteration  23: 564263.474 ops/s
Iteration  24: 563060.392 ops/s
Iteration  25: 563289.380 ops/s
Iteration  26: 564912.528 ops/s
Iteration  27: 563928.564 ops/s
Iteration  28: 564153.005 ops/s
Iteration  29: 562029.689 ops/s
Iteration  30: 564939.907 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_putTagOverwritesValue":
  563199.742 ±(99.9%) 1009.688 ops/s [Average]
  (min, avg, max) = (560443.946, 563199.742, 566246.756), stdev = 1511.254
  CI (99.9%): [562190.054, 564209.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_putTagOverwritesValue  thrpt   30  563199.742 ± 1009.688  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_remoteEndpoint_emptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_remoteEndpoint_emptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 253344.380 ops/s
# Warmup Iteration   2: 317488.722 ops/s
# Warmup Iteration   3: 666773.062 ops/s
# Warmup Iteration   4: 670306.932 ops/s
# Warmup Iteration   5: 678029.791 ops/s
# Warmup Iteration   6: 677523.712 ops/s
# Warmup Iteration   7: 682989.652 ops/s
# Warmup Iteration   8: 482937.407 ops/s
# Warmup Iteration   9: 686519.988 ops/s
# Warmup Iteration  10: 687246.391 ops/s
# Warmup Iteration  11: 687555.601 ops/s
# Warmup Iteration  12: 687178.160 ops/s
# Warmup Iteration  13: 687436.634 ops/s
# Warmup Iteration  14: 688848.045 ops/s
# Warmup Iteration  15: 686244.375 ops/s
# Warmup Iteration  16: 687378.802 ops/s
# Warmup Iteration  17: 688923.928 ops/s
# Warmup Iteration  18: 688999.504 ops/s
# Warmup Iteration  19: 685577.502 ops/s
# Warmup Iteration  20: 689018.030 ops/s
# Warmup Iteration  21: 684693.982 ops/s
# Warmup Iteration  22: 689421.804 ops/s
# Warmup Iteration  23: 690446.149 ops/s
# Warmup Iteration  24: 688570.875 ops/s
# Warmup Iteration  25: 687632.501 ops/s
# Warmup Iteration  26: 689153.649 ops/s
# Warmup Iteration  27: 688669.111 ops/s
# Warmup Iteration  28: 687343.024 ops/s
# Warmup Iteration  29: 689073.652 ops/s
# Warmup Iteration  30: 689043.663 ops/s
Iteration   1: 685678.507 ops/s
Iteration   2: 689264.286 ops/s
Iteration   3: 689002.315 ops/s
Iteration   4: 688754.798 ops/s
Iteration   5: 686180.480 ops/s
Iteration   6: 689435.356 ops/s
Iteration   7: 687906.437 ops/s
Iteration   8: 684666.012 ops/s
Iteration   9: 686844.781 ops/s
Iteration  10: 686329.270 ops/s
Iteration  11: 690084.356 ops/s
Iteration  12: 690434.254 ops/s
Iteration  13: 683885.030 ops/s
Iteration  14: 681360.043 ops/s
Iteration  15: 688116.409 ops/s
Iteration  16: 689401.951 ops/s
Iteration  17: 688225.199 ops/s
Iteration  18: 690472.429 ops/s
Iteration  19: 688883.911 ops/s
Iteration  20: 683450.638 ops/s
Iteration  21: 687783.365 ops/s
Iteration  22: 689991.811 ops/s
Iteration  23: 686601.400 ops/s
Iteration  24: 691506.160 ops/s
Iteration  25: 689921.431 ops/s
Iteration  26: 690006.389 ops/s
Iteration  27: 689414.209 ops/s
Iteration  28: 684011.505 ops/s
Iteration  29: 688289.277 ops/s
Iteration  30: 688382.956 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_remoteEndpoint_emptyToNull":
  687809.499 ±(99.9%) 1632.423 ops/s [Average]
  (min, avg, max) = (681360.043, 687809.499, 691506.160), stdev = 2443.334
  CI (99.9%): [686177.076, 689441.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_remoteEndpoint_emptyToNull  thrpt   30  687809.499 ± 1632.423  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_remoteServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_remoteServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 229075.677 ops/s
# Warmup Iteration   2: 293598.654 ops/s
# Warmup Iteration   3: 646403.419 ops/s
# Warmup Iteration   4: 644179.683 ops/s
# Warmup Iteration   5: 648495.015 ops/s
# Warmup Iteration   6: 649735.072 ops/s
# Warmup Iteration   7: 596140.529 ops/s
# Warmup Iteration   8: 513346.085 ops/s
# Warmup Iteration   9: 657225.428 ops/s
# Warmup Iteration  10: 657635.918 ops/s
# Warmup Iteration  11: 659096.995 ops/s
# Warmup Iteration  12: 658976.783 ops/s
# Warmup Iteration  13: 654514.981 ops/s
# Warmup Iteration  14: 656051.288 ops/s
# Warmup Iteration  15: 657312.674 ops/s
# Warmup Iteration  16: 656808.411 ops/s
# Warmup Iteration  17: 653871.365 ops/s
# Warmup Iteration  18: 654665.560 ops/s
# Warmup Iteration  19: 656666.229 ops/s
# Warmup Iteration  20: 654383.036 ops/s
# Warmup Iteration  21: 652217.601 ops/s
# Warmup Iteration  22: 656289.777 ops/s
# Warmup Iteration  23: 658010.914 ops/s
# Warmup Iteration  24: 659472.468 ops/s
# Warmup Iteration  25: 658121.428 ops/s
# Warmup Iteration  26: 658512.099 ops/s
# Warmup Iteration  27: 656144.325 ops/s
# Warmup Iteration  28: 655244.980 ops/s
# Warmup Iteration  29: 653306.965 ops/s
# Warmup Iteration  30: 655876.512 ops/s
Iteration   1: 652159.366 ops/s
Iteration   2: 652233.274 ops/s
Iteration   3: 656133.810 ops/s
Iteration   4: 654552.174 ops/s
Iteration   5: 655428.290 ops/s
Iteration   6: 652126.402 ops/s
Iteration   7: 655709.807 ops/s
Iteration   8: 657274.233 ops/s
Iteration   9: 653129.073 ops/s
Iteration  10: 652621.801 ops/s
Iteration  11: 656436.120 ops/s
Iteration  12: 653248.000 ops/s
Iteration  13: 657815.451 ops/s
Iteration  14: 656105.261 ops/s
Iteration  15: 656487.978 ops/s
Iteration  16: 656734.044 ops/s
Iteration  17: 655069.790 ops/s
Iteration  18: 656455.607 ops/s
Iteration  19: 655868.011 ops/s
Iteration  20: 658697.841 ops/s
Iteration  21: 658344.382 ops/s
Iteration  22: 657801.634 ops/s
Iteration  23: 657575.182 ops/s
Iteration  24: 657484.343 ops/s
Iteration  25: 655569.856 ops/s
Iteration  26: 655056.335 ops/s
Iteration  27: 654361.747 ops/s
Iteration  28: 658309.794 ops/s
Iteration  29: 658111.798 ops/s
Iteration  30: 656947.803 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_remoteServiceName":
  655794.974 ±(99.9%) 1328.028 ops/s [Average]
  (min, avg, max) = (652126.402, 655794.974, 658697.841), stdev = 1987.729
  CI (99.9%): [654466.946, 657123.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_remoteServiceName  thrpt   30  655794.974 ± 1328.028  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_removesSharedFlagFromClientSpans$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_removesSharedFlagFromClientSpans

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240253.221 ops/s
# Warmup Iteration   2: 311445.312 ops/s
# Warmup Iteration   3: 635342.867 ops/s
# Warmup Iteration   4: 687000.377 ops/s
# Warmup Iteration   5: 680643.506 ops/s
# Warmup Iteration   6: 679833.878 ops/s
# Warmup Iteration   7: 682827.714 ops/s
# Warmup Iteration   8: 471165.963 ops/s
# Warmup Iteration   9: 690677.160 ops/s
# Warmup Iteration  10: 693141.798 ops/s
# Warmup Iteration  11: 691169.762 ops/s
# Warmup Iteration  12: 689082.340 ops/s
# Warmup Iteration  13: 690872.934 ops/s
# Warmup Iteration  14: 692013.114 ops/s
# Warmup Iteration  15: 690636.157 ops/s
# Warmup Iteration  16: 689490.900 ops/s
# Warmup Iteration  17: 688387.415 ops/s
# Warmup Iteration  18: 690619.749 ops/s
# Warmup Iteration  19: 688031.992 ops/s
# Warmup Iteration  20: 687155.950 ops/s
# Warmup Iteration  21: 684459.781 ops/s
# Warmup Iteration  22: 686879.332 ops/s
# Warmup Iteration  23: 687688.003 ops/s
# Warmup Iteration  24: 689397.717 ops/s
# Warmup Iteration  25: 690336.626 ops/s
# Warmup Iteration  26: 689502.768 ops/s
# Warmup Iteration  27: 690519.690 ops/s
# Warmup Iteration  28: 687733.435 ops/s
# Warmup Iteration  29: 689263.917 ops/s
# Warmup Iteration  30: 685923.671 ops/s
Iteration   1: 689304.380 ops/s
Iteration   2: 688745.900 ops/s
Iteration   3: 685664.825 ops/s
Iteration   4: 689562.949 ops/s
Iteration   5: 679959.598 ops/s
Iteration   6: 688659.009 ops/s
Iteration   7: 686292.505 ops/s
Iteration   8: 685966.657 ops/s
Iteration   9: 687417.648 ops/s
Iteration  10: 692350.064 ops/s
Iteration  11: 688924.150 ops/s
Iteration  12: 689327.696 ops/s
Iteration  13: 682706.016 ops/s
Iteration  14: 687448.348 ops/s
Iteration  15: 691747.436 ops/s
Iteration  16: 688917.710 ops/s
Iteration  17: 690165.242 ops/s
Iteration  18: 684971.019 ops/s
Iteration  19: 691378.895 ops/s
Iteration  20: 690176.134 ops/s
Iteration  21: 690242.965 ops/s
Iteration  22: 688823.619 ops/s
Iteration  23: 689295.558 ops/s
Iteration  24: 688023.558 ops/s
Iteration  25: 687560.452 ops/s
Iteration  26: 689753.902 ops/s
Iteration  27: 686557.513 ops/s
Iteration  28: 692377.898 ops/s
Iteration  29: 691046.534 ops/s
Iteration  30: 687402.088 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_removesSharedFlagFromClientSpans":
  688359.009 ±(99.9%) 1819.466 ops/s [Average]
  (min, avg, max) = (679959.598, 688359.009, 692377.898), stdev = 2723.292
  CI (99.9%): [686539.543, 690178.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_removesSharedFlagFromClientSpans  thrpt   30  688359.009 ± 1819.466  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26719.344 ops/s
# Warmup Iteration   2: 52954.734 ops/s
# Warmup Iteration   3: 54225.156 ops/s
# Warmup Iteration   4: 83681.296 ops/s
# Warmup Iteration   5: 95644.276 ops/s
# Warmup Iteration   6: 95056.492 ops/s
# Warmup Iteration   7: 94762.800 ops/s
# Warmup Iteration   8: 93586.795 ops/s
# Warmup Iteration   9: 95711.392 ops/s
# Warmup Iteration  10: 95702.140 ops/s
# Warmup Iteration  11: 95570.605 ops/s
# Warmup Iteration  12: 96135.129 ops/s
# Warmup Iteration  13: 81065.050 ops/s
# Warmup Iteration  14: 81006.927 ops/s
# Warmup Iteration  15: 95059.397 ops/s
# Warmup Iteration  16: 95736.919 ops/s
# Warmup Iteration  17: 97630.535 ops/s
# Warmup Iteration  18: 97920.276 ops/s
# Warmup Iteration  19: 97972.804 ops/s
# Warmup Iteration  20: 97661.535 ops/s
# Warmup Iteration  21: 96909.078 ops/s
# Warmup Iteration  22: 96795.759 ops/s
# Warmup Iteration  23: 97971.141 ops/s
# Warmup Iteration  24: 97409.730 ops/s
# Warmup Iteration  25: 96482.948 ops/s
# Warmup Iteration  26: 97236.466 ops/s
# Warmup Iteration  27: 97719.188 ops/s
# Warmup Iteration  28: 97628.156 ops/s
# Warmup Iteration  29: 98233.289 ops/s
# Warmup Iteration  30: 96784.231 ops/s
Iteration   1: 95625.997 ops/s
Iteration   2: 96849.834 ops/s
Iteration   3: 96880.237 ops/s
Iteration   4: 96544.346 ops/s
Iteration   5: 96856.180 ops/s
Iteration   6: 96769.901 ops/s
Iteration   7: 94891.746 ops/s
Iteration   8: 97970.789 ops/s
Iteration   9: 98838.416 ops/s
Iteration  10: 98456.412 ops/s
Iteration  11: 95672.745 ops/s
Iteration  12: 94434.032 ops/s
Iteration  13: 94147.748 ops/s
Iteration  14: 98903.929 ops/s
Iteration  15: 95588.737 ops/s
Iteration  16: 94609.598 ops/s
Iteration  17: 96770.226 ops/s
Iteration  18: 97072.452 ops/s
Iteration  19: 94629.216 ops/s
Iteration  20: 93377.690 ops/s
Iteration  21: 95978.516 ops/s
Iteration  22: 94535.275 ops/s
Iteration  23: 94766.824 ops/s
Iteration  24: 94079.650 ops/s
Iteration  25: 95844.282 ops/s
Iteration  26: 94300.601 ops/s
Iteration  27: 93085.504 ops/s
Iteration  28: 94503.432 ops/s
Iteration  29: 95276.667 ops/s
Iteration  30: 94719.010 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_serialization":
  95732.666 ±(99.9%) 1041.757 ops/s [Average]
  (min, avg, max) = (93085.504, 95732.666, 98903.929), stdev = 1559.253
  CI (99.9%): [94690.909, 96774.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt      Score      Error  Units
SpanTest._Benchmark.benchmark_serialization  thrpt   30  95732.666 ± 1041.757  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_shared_canDisable$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_shared_canDisable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 252856.455 ops/s
# Warmup Iteration   2: 322029.339 ops/s
# Warmup Iteration   3: 678179.428 ops/s
# Warmup Iteration   4: 679352.343 ops/s
# Warmup Iteration   5: 689088.717 ops/s
# Warmup Iteration   6: 687623.897 ops/s
# Warmup Iteration   7: 685152.484 ops/s
# Warmup Iteration   8: 488275.703 ops/s
# Warmup Iteration   9: 693944.375 ops/s
# Warmup Iteration  10: 691276.313 ops/s
# Warmup Iteration  11: 691376.118 ops/s
# Warmup Iteration  12: 692261.015 ops/s
# Warmup Iteration  13: 690802.569 ops/s
# Warmup Iteration  14: 692007.147 ops/s
# Warmup Iteration  15: 690948.517 ops/s
# Warmup Iteration  16: 690068.911 ops/s
# Warmup Iteration  17: 687111.365 ops/s
# Warmup Iteration  18: 687524.952 ops/s
# Warmup Iteration  19: 688721.388 ops/s
# Warmup Iteration  20: 687701.460 ops/s
# Warmup Iteration  21: 683824.480 ops/s
# Warmup Iteration  22: 686453.450 ops/s
# Warmup Iteration  23: 687452.189 ops/s
# Warmup Iteration  24: 688470.503 ops/s
# Warmup Iteration  25: 690147.215 ops/s
# Warmup Iteration  26: 688465.118 ops/s
# Warmup Iteration  27: 687380.043 ops/s
# Warmup Iteration  28: 684847.295 ops/s
# Warmup Iteration  29: 688260.839 ops/s
# Warmup Iteration  30: 690345.017 ops/s
Iteration   1: 686376.530 ops/s
Iteration   2: 691035.737 ops/s
Iteration   3: 688661.513 ops/s
Iteration   4: 688867.547 ops/s
Iteration   5: 681069.624 ops/s
Iteration   6: 688253.443 ops/s
Iteration   7: 686621.369 ops/s
Iteration   8: 689527.934 ops/s
Iteration   9: 688405.594 ops/s
Iteration  10: 683565.913 ops/s
Iteration  11: 687560.117 ops/s
Iteration  12: 687676.825 ops/s
Iteration  13: 691671.851 ops/s
Iteration  14: 689448.219 ops/s
Iteration  15: 691246.324 ops/s
Iteration  16: 686711.563 ops/s
Iteration  17: 686292.252 ops/s
Iteration  18: 690961.507 ops/s
Iteration  19: 686853.700 ops/s
Iteration  20: 686331.787 ops/s
Iteration  21: 686296.892 ops/s
Iteration  22: 686662.649 ops/s
Iteration  23: 682657.755 ops/s
Iteration  24: 689494.611 ops/s
Iteration  25: 686725.213 ops/s
Iteration  26: 688639.384 ops/s
Iteration  27: 689245.009 ops/s
Iteration  28: 688414.326 ops/s
Iteration  29: 689074.548 ops/s
Iteration  30: 687205.810 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_shared_canDisable":
  687718.518 ±(99.9%) 1606.557 ops/s [Average]
  (min, avg, max) = (681069.624, 687718.518, 691671.851), stdev = 2404.620
  CI (99.9%): [686111.961, 689325.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_shared_canDisable  thrpt   30  687718.518 ± 1606.557  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_shared_canUnset$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_shared_canUnset

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262440.613 ops/s
# Warmup Iteration   2: 339792.575 ops/s
# Warmup Iteration   3: 667020.744 ops/s
# Warmup Iteration   4: 710782.341 ops/s
# Warmup Iteration   5: 702933.569 ops/s
# Warmup Iteration   6: 704545.232 ops/s
# Warmup Iteration   7: 699517.352 ops/s
# Warmup Iteration   8: 498321.520 ops/s
# Warmup Iteration   9: 712893.799 ops/s
# Warmup Iteration  10: 713009.775 ops/s
# Warmup Iteration  11: 713010.453 ops/s
# Warmup Iteration  12: 712418.628 ops/s
# Warmup Iteration  13: 712860.425 ops/s
# Warmup Iteration  14: 712274.594 ops/s
# Warmup Iteration  15: 712027.493 ops/s
# Warmup Iteration  16: 709348.892 ops/s
# Warmup Iteration  17: 707446.825 ops/s
# Warmup Iteration  18: 710739.538 ops/s
# Warmup Iteration  19: 709499.225 ops/s
# Warmup Iteration  20: 706126.731 ops/s
# Warmup Iteration  21: 709159.504 ops/s
# Warmup Iteration  22: 711736.391 ops/s
# Warmup Iteration  23: 711723.417 ops/s
# Warmup Iteration  24: 709508.047 ops/s
# Warmup Iteration  25: 710047.789 ops/s
# Warmup Iteration  26: 707244.702 ops/s
# Warmup Iteration  27: 709545.396 ops/s
# Warmup Iteration  28: 707620.486 ops/s
# Warmup Iteration  29: 707704.126 ops/s
# Warmup Iteration  30: 707046.357 ops/s
Iteration   1: 709746.569 ops/s
Iteration   2: 703807.669 ops/s
Iteration   3: 708787.590 ops/s
Iteration   4: 709332.260 ops/s
Iteration   5: 705723.706 ops/s
Iteration   6: 706254.597 ops/s
Iteration   7: 702699.690 ops/s
Iteration   8: 709473.004 ops/s
Iteration   9: 709565.694 ops/s
Iteration  10: 708884.437 ops/s
Iteration  11: 711190.940 ops/s
Iteration  12: 705343.361 ops/s
Iteration  13: 706446.903 ops/s
Iteration  14: 709518.556 ops/s
Iteration  15: 710003.723 ops/s
Iteration  16: 705320.527 ops/s
Iteration  17: 708887.371 ops/s
Iteration  18: 710053.089 ops/s
Iteration  19: 710524.548 ops/s
Iteration  20: 712316.185 ops/s
Iteration  21: 707344.812 ops/s
Iteration  22: 708770.335 ops/s
Iteration  23: 706794.640 ops/s
Iteration  24: 709654.460 ops/s
Iteration  25: 706752.429 ops/s
Iteration  26: 710108.580 ops/s
Iteration  27: 710104.335 ops/s
Iteration  28: 709268.138 ops/s
Iteration  29: 709436.852 ops/s
Iteration  30: 710546.695 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_shared_canUnset":
  708422.057 ±(99.9%) 1511.165 ops/s [Average]
  (min, avg, max) = (702699.690, 708422.057, 712316.185), stdev = 2261.841
  CI (99.9%): [706910.892, 709933.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_shared_canUnset  thrpt   30  708422.057 ± 1511.165  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_spanNamesLowercase$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_spanNamesLowercase

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 237115.600 ops/s
# Warmup Iteration   2: 296398.624 ops/s
# Warmup Iteration   3: 617087.767 ops/s
# Warmup Iteration   4: 643626.953 ops/s
# Warmup Iteration   5: 650481.467 ops/s
# Warmup Iteration   6: 648443.800 ops/s
# Warmup Iteration   7: 645160.603 ops/s
# Warmup Iteration   8: 462667.766 ops/s
# Warmup Iteration   9: 653256.783 ops/s
# Warmup Iteration  10: 652599.220 ops/s
# Warmup Iteration  11: 651210.537 ops/s
# Warmup Iteration  12: 652433.976 ops/s
# Warmup Iteration  13: 652337.378 ops/s
# Warmup Iteration  14: 651074.405 ops/s
# Warmup Iteration  15: 654480.840 ops/s
# Warmup Iteration  16: 654347.222 ops/s
# Warmup Iteration  17: 647100.501 ops/s
# Warmup Iteration  18: 648781.678 ops/s
# Warmup Iteration  19: 648171.209 ops/s
# Warmup Iteration  20: 645614.943 ops/s
# Warmup Iteration  21: 644656.962 ops/s
# Warmup Iteration  22: 645210.329 ops/s
# Warmup Iteration  23: 647894.145 ops/s
# Warmup Iteration  24: 647372.232 ops/s
# Warmup Iteration  25: 646960.691 ops/s
# Warmup Iteration  26: 646518.337 ops/s
# Warmup Iteration  27: 646492.697 ops/s
# Warmup Iteration  28: 646461.656 ops/s
# Warmup Iteration  29: 646352.018 ops/s
# Warmup Iteration  30: 647076.903 ops/s
Iteration   1: 646961.427 ops/s
Iteration   2: 644163.331 ops/s
Iteration   3: 647050.711 ops/s
Iteration   4: 645437.359 ops/s
Iteration   5: 643167.212 ops/s
Iteration   6: 647220.528 ops/s
Iteration   7: 644411.847 ops/s
Iteration   8: 648444.377 ops/s
Iteration   9: 643544.537 ops/s
Iteration  10: 646125.748 ops/s
Iteration  11: 643494.211 ops/s
Iteration  12: 647169.874 ops/s
Iteration  13: 645958.078 ops/s
Iteration  14: 648535.168 ops/s
Iteration  15: 646554.661 ops/s
Iteration  16: 643867.264 ops/s
Iteration  17: 647172.124 ops/s
Iteration  18: 644416.222 ops/s
Iteration  19: 644766.659 ops/s
Iteration  20: 645078.754 ops/s
Iteration  21: 649650.461 ops/s
Iteration  22: 644993.411 ops/s
Iteration  23: 646186.661 ops/s
Iteration  24: 648206.186 ops/s
Iteration  25: 649126.375 ops/s
Iteration  26: 648375.863 ops/s
Iteration  27: 645630.879 ops/s
Iteration  28: 645865.033 ops/s
Iteration  29: 645414.793 ops/s
Iteration  30: 644433.008 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_spanNamesLowercase":
  646047.425 ±(99.9%) 1193.253 ops/s [Average]
  (min, avg, max) = (643167.212, 646047.425, 649650.461), stdev = 1786.006
  CI (99.9%): [644854.172, 647240.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_spanNamesLowercase  thrpt   30  646047.425 ± 1193.253  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_toString_isJson$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_toString_isJson

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 203034.466 ops/s
# Warmup Iteration   2: 280109.544 ops/s
# Warmup Iteration   3: 493499.428 ops/s
# Warmup Iteration   4: 553644.276 ops/s
# Warmup Iteration   5: 546937.401 ops/s
# Warmup Iteration   6: 555996.303 ops/s
# Warmup Iteration   7: 557577.623 ops/s
# Warmup Iteration   8: 553817.610 ops/s
# Warmup Iteration   9: 397385.985 ops/s
# Warmup Iteration  10: 563235.313 ops/s
# Warmup Iteration  11: 562731.936 ops/s
# Warmup Iteration  12: 560697.902 ops/s
# Warmup Iteration  13: 563127.059 ops/s
# Warmup Iteration  14: 560994.586 ops/s
# Warmup Iteration  15: 559589.934 ops/s
# Warmup Iteration  16: 562318.305 ops/s
# Warmup Iteration  17: 556583.723 ops/s
# Warmup Iteration  18: 554004.418 ops/s
# Warmup Iteration  19: 557326.210 ops/s
# Warmup Iteration  20: 556584.939 ops/s
# Warmup Iteration  21: 559672.997 ops/s
# Warmup Iteration  22: 559963.859 ops/s
# Warmup Iteration  23: 559719.308 ops/s
# Warmup Iteration  24: 557813.283 ops/s
# Warmup Iteration  25: 556631.426 ops/s
# Warmup Iteration  26: 556794.345 ops/s
# Warmup Iteration  27: 555725.787 ops/s
# Warmup Iteration  28: 558576.646 ops/s
# Warmup Iteration  29: 555879.354 ops/s
# Warmup Iteration  30: 555957.714 ops/s
Iteration   1: 554949.335 ops/s
Iteration   2: 555151.653 ops/s
Iteration   3: 554966.822 ops/s
Iteration   4: 549952.630 ops/s
Iteration   5: 552609.063 ops/s
Iteration   6: 558304.386 ops/s
Iteration   7: 557535.697 ops/s
Iteration   8: 556196.751 ops/s
Iteration   9: 552655.464 ops/s
Iteration  10: 559003.680 ops/s
Iteration  11: 559012.289 ops/s
Iteration  12: 555211.910 ops/s
Iteration  13: 556893.186 ops/s
Iteration  14: 555538.454 ops/s
Iteration  15: 558524.024 ops/s
Iteration  16: 557871.504 ops/s
Iteration  17: 555266.149 ops/s
Iteration  18: 557945.379 ops/s
Iteration  19: 555466.742 ops/s
Iteration  20: 555577.914 ops/s
Iteration  21: 557166.858 ops/s
Iteration  22: 555779.211 ops/s
Iteration  23: 560839.867 ops/s
Iteration  24: 560222.563 ops/s
Iteration  25: 554334.170 ops/s
Iteration  26: 557504.405 ops/s
Iteration  27: 557596.364 ops/s
Iteration  28: 554469.685 ops/s
Iteration  29: 555085.764 ops/s
Iteration  30: 556037.992 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_toString_isJson":
  556255.664 ±(99.9%) 1548.133 ops/s [Average]
  (min, avg, max) = (549952.630, 556255.664, 560839.867), stdev = 2317.173
  CI (99.9%): [554707.530, 557803.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_toString_isJson  thrpt   30  556255.664 ± 1548.133  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251706.624 ops/s
# Warmup Iteration   2: 321850.897 ops/s
# Warmup Iteration   3: 627782.814 ops/s
# Warmup Iteration   4: 664972.319 ops/s
# Warmup Iteration   5: 668867.201 ops/s
# Warmup Iteration   6: 672443.702 ops/s
# Warmup Iteration   7: 670649.027 ops/s
# Warmup Iteration   8: 481007.520 ops/s
# Warmup Iteration   9: 680596.057 ops/s
# Warmup Iteration  10: 678035.323 ops/s
# Warmup Iteration  11: 679103.808 ops/s
# Warmup Iteration  12: 677485.387 ops/s
# Warmup Iteration  13: 678874.857 ops/s
# Warmup Iteration  14: 675225.484 ops/s
# Warmup Iteration  15: 677272.442 ops/s
# Warmup Iteration  16: 678754.925 ops/s
# Warmup Iteration  17: 675532.239 ops/s
# Warmup Iteration  18: 674769.801 ops/s
# Warmup Iteration  19: 676336.554 ops/s
# Warmup Iteration  20: 675129.491 ops/s
# Warmup Iteration  21: 673623.645 ops/s
# Warmup Iteration  22: 675932.442 ops/s
# Warmup Iteration  23: 676315.370 ops/s
# Warmup Iteration  24: 676227.917 ops/s
# Warmup Iteration  25: 675899.031 ops/s
# Warmup Iteration  26: 675695.822 ops/s
# Warmup Iteration  27: 676571.938 ops/s
# Warmup Iteration  28: 675174.038 ops/s
# Warmup Iteration  29: 674433.088 ops/s
# Warmup Iteration  30: 677625.424 ops/s
Iteration   1: 675323.262 ops/s
Iteration   2: 675811.510 ops/s
Iteration   3: 671198.534 ops/s
Iteration   4: 676339.162 ops/s
Iteration   5: 674719.507 ops/s
Iteration   6: 677158.404 ops/s
Iteration   7: 677722.520 ops/s
Iteration   8: 671020.080 ops/s
Iteration   9: 676485.769 ops/s
Iteration  10: 676522.063 ops/s
Iteration  11: 676468.120 ops/s
Iteration  12: 672486.353 ops/s
Iteration  13: 674454.273 ops/s
Iteration  14: 674851.682 ops/s
Iteration  15: 675566.557 ops/s
Iteration  16: 674155.662 ops/s
Iteration  17: 673035.292 ops/s
Iteration  18: 676971.570 ops/s
Iteration  19: 675257.278 ops/s
Iteration  20: 676583.160 ops/s
Iteration  21: 676375.527 ops/s
Iteration  22: 674296.879 ops/s
Iteration  23: 675863.653 ops/s
Iteration  24: 675610.870 ops/s
Iteration  25: 677200.443 ops/s
Iteration  26: 677522.447 ops/s
Iteration  27: 676386.194 ops/s
Iteration  28: 677584.598 ops/s
Iteration  29: 676018.395 ops/s
Iteration  30: 676762.165 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong":
  675525.064 ±(99.9%) 1169.456 ops/s [Average]
  (min, avg, max) = (671020.080, 675525.064, 677722.520), stdev = 1750.386
  CI (99.9%): [674355.609, 676694.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_traceIdFromLong  thrpt   30  675525.064 ± 1169.456  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong_128$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong_128

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235220.697 ops/s
# Warmup Iteration   2: 300353.137 ops/s
# Warmup Iteration   3: 639807.116 ops/s
# Warmup Iteration   4: 636635.502 ops/s
# Warmup Iteration   5: 646657.315 ops/s
# Warmup Iteration   6: 644528.973 ops/s
# Warmup Iteration   7: 646153.872 ops/s
# Warmup Iteration   8: 463434.485 ops/s
# Warmup Iteration   9: 655358.139 ops/s
# Warmup Iteration  10: 655547.339 ops/s
# Warmup Iteration  11: 657500.418 ops/s
# Warmup Iteration  12: 656761.120 ops/s
# Warmup Iteration  13: 656264.752 ops/s
# Warmup Iteration  14: 656316.670 ops/s
# Warmup Iteration  15: 656036.362 ops/s
# Warmup Iteration  16: 654333.297 ops/s
# Warmup Iteration  17: 659742.512 ops/s
# Warmup Iteration  18: 659023.021 ops/s
# Warmup Iteration  19: 659843.951 ops/s
# Warmup Iteration  20: 661270.366 ops/s
# Warmup Iteration  21: 661495.286 ops/s
# Warmup Iteration  22: 659789.660 ops/s
# Warmup Iteration  23: 658742.741 ops/s
# Warmup Iteration  24: 659258.982 ops/s
# Warmup Iteration  25: 660644.520 ops/s
# Warmup Iteration  26: 658312.206 ops/s
# Warmup Iteration  27: 657046.728 ops/s
# Warmup Iteration  28: 657060.980 ops/s
# Warmup Iteration  29: 657289.940 ops/s
# Warmup Iteration  30: 658361.050 ops/s
Iteration   1: 658911.604 ops/s
Iteration   2: 655678.436 ops/s
Iteration   3: 651399.954 ops/s
Iteration   4: 660049.230 ops/s
Iteration   5: 653069.809 ops/s
Iteration   6: 659555.570 ops/s
Iteration   7: 655639.386 ops/s
Iteration   8: 659664.177 ops/s
Iteration   9: 656692.577 ops/s
Iteration  10: 657438.714 ops/s
Iteration  11: 660217.965 ops/s
Iteration  12: 657257.350 ops/s
Iteration  13: 656001.684 ops/s
Iteration  14: 653178.430 ops/s
Iteration  15: 656655.877 ops/s
Iteration  16: 657552.607 ops/s
Iteration  17: 657656.732 ops/s
Iteration  18: 655045.594 ops/s
Iteration  19: 656762.060 ops/s
Iteration  20: 657339.022 ops/s
Iteration  21: 654338.307 ops/s
Iteration  22: 655302.276 ops/s
Iteration  23: 655675.502 ops/s
Iteration  24: 658524.181 ops/s
Iteration  25: 658491.042 ops/s
Iteration  26: 655181.475 ops/s
Iteration  27: 654101.386 ops/s
Iteration  28: 654367.456 ops/s
Iteration  29: 658150.681 ops/s
Iteration  30: 656021.650 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong_128":
  656530.691 ±(99.9%) 1461.246 ops/s [Average]
  (min, avg, max) = (651399.954, 656530.691, 660217.965), stdev = 2187.125
  CI (99.9%): [655069.445, 657991.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_traceIdFromLong_128  thrpt   30  656530.691 ± 1461.246  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong_invalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong_invalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 159043.734 ops/s
# Warmup Iteration   2: 200039.054 ops/s
# Warmup Iteration   3: 214670.397 ops/s
# Warmup Iteration   4: 329220.377 ops/s
# Warmup Iteration   5: 324648.275 ops/s
# Warmup Iteration   6: 325737.219 ops/s
# Warmup Iteration   7: 328408.707 ops/s
# Warmup Iteration   8: 326729.082 ops/s
# Warmup Iteration   9: 329612.112 ops/s
# Warmup Iteration  10: 325561.765 ops/s
# Warmup Iteration  11: 323740.688 ops/s
# Warmup Iteration  12: 328539.889 ops/s
# Warmup Iteration  13: 261382.240 ops/s
# Warmup Iteration  14: 280701.008 ops/s
# Warmup Iteration  15: 317515.705 ops/s
# Warmup Iteration  16: 315429.489 ops/s
# Warmup Iteration  17: 329294.082 ops/s
# Warmup Iteration  18: 327895.245 ops/s
# Warmup Iteration  19: 328988.707 ops/s
# Warmup Iteration  20: 327235.924 ops/s
# Warmup Iteration  21: 328357.632 ops/s
# Warmup Iteration  22: 327355.972 ops/s
# Warmup Iteration  23: 328178.664 ops/s
# Warmup Iteration  24: 327131.574 ops/s
# Warmup Iteration  25: 329472.092 ops/s
# Warmup Iteration  26: 327554.003 ops/s
# Warmup Iteration  27: 328621.019 ops/s
# Warmup Iteration  28: 329669.007 ops/s
# Warmup Iteration  29: 325658.882 ops/s
# Warmup Iteration  30: 328177.507 ops/s
Iteration   1: 328169.834 ops/s
Iteration   2: 328637.741 ops/s
Iteration   3: 328908.096 ops/s
Iteration   4: 327656.519 ops/s
Iteration   5: 330055.962 ops/s
Iteration   6: 328275.912 ops/s
Iteration   7: 329651.307 ops/s
Iteration   8: 325262.105 ops/s
Iteration   9: 324071.630 ops/s
Iteration  10: 326587.739 ops/s
Iteration  11: 326750.165 ops/s
Iteration  12: 328512.513 ops/s
Iteration  13: 329142.624 ops/s
Iteration  14: 326331.766 ops/s
Iteration  15: 328917.166 ops/s
Iteration  16: 327618.470 ops/s
Iteration  17: 324811.393 ops/s
Iteration  18: 329247.246 ops/s
Iteration  19: 328320.193 ops/s
Iteration  20: 325409.144 ops/s
Iteration  21: 324319.306 ops/s
Iteration  22: 326784.084 ops/s
Iteration  23: 325453.284 ops/s
Iteration  24: 325190.288 ops/s
Iteration  25: 329629.541 ops/s
Iteration  26: 329894.227 ops/s
Iteration  27: 328092.869 ops/s
Iteration  28: 327478.576 ops/s
Iteration  29: 326286.430 ops/s
Iteration  30: 327807.838 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceIdFromLong_invalid":
  327442.466 ±(99.9%) 1166.129 ops/s [Average]
  (min, avg, max) = (324071.630, 327442.466, 330055.962), stdev = 1745.406
  CI (99.9%): [326276.337, 328608.594] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_traceIdFromLong_invalid  thrpt   30  327442.466 ± 1166.129  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdString$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceIdString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 243502.837 ops/s
# Warmup Iteration   2: 314474.125 ops/s
# Warmup Iteration   3: 614760.065 ops/s
# Warmup Iteration   4: 660401.933 ops/s
# Warmup Iteration   5: 674362.196 ops/s
# Warmup Iteration   6: 670851.539 ops/s
# Warmup Iteration   7: 671328.479 ops/s
# Warmup Iteration   8: 551014.130 ops/s
# Warmup Iteration   9: 579939.841 ops/s
# Warmup Iteration  10: 675469.150 ops/s
# Warmup Iteration  11: 675646.690 ops/s
# Warmup Iteration  12: 675563.579 ops/s
# Warmup Iteration  13: 673290.041 ops/s
# Warmup Iteration  14: 673106.856 ops/s
# Warmup Iteration  15: 673983.344 ops/s
# Warmup Iteration  16: 673735.984 ops/s
# Warmup Iteration  17: 674668.379 ops/s
# Warmup Iteration  18: 672434.796 ops/s
# Warmup Iteration  19: 675070.969 ops/s
# Warmup Iteration  20: 673973.366 ops/s
# Warmup Iteration  21: 673179.639 ops/s
# Warmup Iteration  22: 673980.308 ops/s
# Warmup Iteration  23: 670972.360 ops/s
# Warmup Iteration  24: 671302.056 ops/s
# Warmup Iteration  25: 673363.301 ops/s
# Warmup Iteration  26: 673891.724 ops/s
# Warmup Iteration  27: 674416.043 ops/s
# Warmup Iteration  28: 673124.256 ops/s
# Warmup Iteration  29: 673740.013 ops/s
# Warmup Iteration  30: 669738.625 ops/s
Iteration   1: 672259.472 ops/s
Iteration   2: 672243.704 ops/s
Iteration   3: 674954.254 ops/s
Iteration   4: 675499.753 ops/s
Iteration   5: 668528.518 ops/s
Iteration   6: 673980.335 ops/s
Iteration   7: 674061.380 ops/s
Iteration   8: 671923.595 ops/s
Iteration   9: 674118.472 ops/s
Iteration  10: 670560.363 ops/s
Iteration  11: 671657.067 ops/s
Iteration  12: 673343.731 ops/s
Iteration  13: 676045.961 ops/s
Iteration  14: 675776.896 ops/s
Iteration  15: 669251.857 ops/s
Iteration  16: 668520.174 ops/s
Iteration  17: 671815.061 ops/s
Iteration  18: 675411.891 ops/s
Iteration  19: 673765.313 ops/s
Iteration  20: 667800.033 ops/s
Iteration  21: 671424.854 ops/s
Iteration  22: 671862.865 ops/s
Iteration  23: 672729.778 ops/s
Iteration  24: 673962.000 ops/s
Iteration  25: 672309.233 ops/s
Iteration  26: 675818.087 ops/s
Iteration  27: 671350.943 ops/s
Iteration  28: 671648.101 ops/s
Iteration  29: 671866.369 ops/s
Iteration  30: 670745.295 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceIdString":
  672507.845 ±(99.9%) 1500.868 ops/s [Average]
  (min, avg, max) = (667800.033, 672507.845, 676045.961), stdev = 2246.429
  CI (99.9%): [671006.977, 674008.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
SpanTest._Benchmark.benchmark_traceIdString  thrpt   30  672507.845 ± 1500.868  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceId_emptyInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceId_emptyInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140747.751 ops/s
# Warmup Iteration   2: 174484.032 ops/s
# Warmup Iteration   3: 177359.224 ops/s
# Warmup Iteration   4: 264610.261 ops/s
# Warmup Iteration   5: 288893.613 ops/s
# Warmup Iteration   6: 299111.610 ops/s
# Warmup Iteration   7: 298511.911 ops/s
# Warmup Iteration   8: 299071.462 ops/s
# Warmup Iteration   9: 291332.343 ops/s
# Warmup Iteration  10: 292208.477 ops/s
# Warmup Iteration  11: 290577.860 ops/s
# Warmup Iteration  12: 292947.897 ops/s
# Warmup Iteration  13: 288880.045 ops/s
# Warmup Iteration  14: 288719.253 ops/s
# Warmup Iteration  15: 189976.916 ops/s
# Warmup Iteration  16: 298533.616 ops/s
# Warmup Iteration  17: 305748.427 ops/s
# Warmup Iteration  18: 305333.165 ops/s
# Warmup Iteration  19: 304393.958 ops/s
# Warmup Iteration  20: 304222.819 ops/s
# Warmup Iteration  21: 305544.753 ops/s
# Warmup Iteration  22: 306159.731 ops/s
# Warmup Iteration  23: 305437.442 ops/s
# Warmup Iteration  24: 305464.643 ops/s
# Warmup Iteration  25: 305140.008 ops/s
# Warmup Iteration  26: 305658.932 ops/s
# Warmup Iteration  27: 305813.767 ops/s
# Warmup Iteration  28: 305800.642 ops/s
# Warmup Iteration  29: 305004.135 ops/s
# Warmup Iteration  30: 305510.992 ops/s
Iteration   1: 304475.435 ops/s
Iteration   2: 303631.998 ops/s
Iteration   3: 305840.386 ops/s
Iteration   4: 305098.855 ops/s
Iteration   5: 305155.312 ops/s
Iteration   6: 303920.541 ops/s
Iteration   7: 306114.721 ops/s
Iteration   8: 305379.457 ops/s
Iteration   9: 305904.625 ops/s
Iteration  10: 305271.438 ops/s
Iteration  11: 305279.773 ops/s
Iteration  12: 304518.402 ops/s
Iteration  13: 304809.066 ops/s
Iteration  14: 305228.153 ops/s
Iteration  15: 303566.440 ops/s
Iteration  16: 304207.362 ops/s
Iteration  17: 305133.044 ops/s
Iteration  18: 304198.006 ops/s
Iteration  19: 304019.594 ops/s
Iteration  20: 302796.817 ops/s
Iteration  21: 306202.363 ops/s
Iteration  22: 306978.978 ops/s
Iteration  23: 305669.796 ops/s
Iteration  24: 305328.716 ops/s
Iteration  25: 305550.714 ops/s
Iteration  26: 306808.719 ops/s
Iteration  27: 305806.941 ops/s
Iteration  28: 306459.337 ops/s
Iteration  29: 304153.853 ops/s
Iteration  30: 305487.300 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceId_emptyInvalid":
  305099.871 ±(99.9%) 666.005 ops/s [Average]
  (min, avg, max) = (302796.817, 305099.871, 306978.978), stdev = 996.844
  CI (99.9%): [304433.867, 305765.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_traceId_emptyInvalid  thrpt   30  305099.871 ± 666.005  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceId_uuidInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceId_uuidInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77348.512 ops/s
# Warmup Iteration   2: 125207.516 ops/s
# Warmup Iteration   3: 126817.040 ops/s
# Warmup Iteration   4: 148045.617 ops/s
# Warmup Iteration   5: 194257.986 ops/s
# Warmup Iteration   6: 191124.275 ops/s
# Warmup Iteration   7: 189313.936 ops/s
# Warmup Iteration   8: 187433.203 ops/s
# Warmup Iteration   9: 189820.209 ops/s
# Warmup Iteration  10: 188726.324 ops/s
# Warmup Iteration  11: 194740.030 ops/s
# Warmup Iteration  12: 197212.199 ops/s
# Warmup Iteration  13: 192354.108 ops/s
# Warmup Iteration  14: 192414.241 ops/s
# Warmup Iteration  15: 188730.984 ops/s
# Warmup Iteration  16: 189910.879 ops/s
# Warmup Iteration  17: 170258.669 ops/s
# Warmup Iteration  18: 151497.368 ops/s
# Warmup Iteration  19: 192141.425 ops/s
# Warmup Iteration  20: 192302.386 ops/s
# Warmup Iteration  21: 191583.170 ops/s
# Warmup Iteration  22: 192710.277 ops/s
# Warmup Iteration  23: 193935.488 ops/s
# Warmup Iteration  24: 192752.487 ops/s
# Warmup Iteration  25: 191574.011 ops/s
# Warmup Iteration  26: 193989.317 ops/s
# Warmup Iteration  27: 193041.757 ops/s
# Warmup Iteration  28: 190995.786 ops/s
# Warmup Iteration  29: 191183.059 ops/s
# Warmup Iteration  30: 191980.534 ops/s
Iteration   1: 192547.300 ops/s
Iteration   2: 193337.421 ops/s
Iteration   3: 192533.917 ops/s
Iteration   4: 191026.659 ops/s
Iteration   5: 191915.849 ops/s
Iteration   6: 192443.455 ops/s
Iteration   7: 193428.845 ops/s
Iteration   8: 192601.747 ops/s
Iteration   9: 192421.120 ops/s
Iteration  10: 192193.931 ops/s
Iteration  11: 191417.732 ops/s
Iteration  12: 191818.408 ops/s
Iteration  13: 193143.017 ops/s
Iteration  14: 192271.658 ops/s
Iteration  15: 190216.443 ops/s
Iteration  16: 193066.827 ops/s
Iteration  17: 191321.764 ops/s
Iteration  18: 191629.309 ops/s
Iteration  19: 192329.436 ops/s
Iteration  20: 193070.144 ops/s
Iteration  21: 191777.663 ops/s
Iteration  22: 188337.321 ops/s
Iteration  23: 193246.711 ops/s
Iteration  24: 193056.130 ops/s
Iteration  25: 191821.810 ops/s
Iteration  26: 191061.872 ops/s
Iteration  27: 192566.671 ops/s
Iteration  28: 192562.491 ops/s
Iteration  29: 193490.195 ops/s
Iteration  30: 192517.027 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceId_uuidInvalid":
  192172.429 ±(99.9%) 716.423 ops/s [Average]
  (min, avg, max) = (188337.321, 192172.429, 193490.195), stdev = 1072.308
  CI (99.9%): [191456.006, 192888.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_traceId_uuidInvalid  thrpt   30  192172.429 ± 716.423  ops/s
----------------------------------------
=== Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceId_zerosInvalid$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.SpanTest._Benchmark.benchmark_traceId_zerosInvalid

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144103.061 ops/s
# Warmup Iteration   2: 178870.875 ops/s
# Warmup Iteration   3: 177015.421 ops/s
# Warmup Iteration   4: 272243.379 ops/s
# Warmup Iteration   5: 286748.781 ops/s
# Warmup Iteration   6: 292906.379 ops/s
# Warmup Iteration   7: 289738.359 ops/s
# Warmup Iteration   8: 292712.716 ops/s
# Warmup Iteration   9: 290194.613 ops/s
# Warmup Iteration  10: 293141.716 ops/s
# Warmup Iteration  11: 289168.444 ops/s
# Warmup Iteration  12: 291439.248 ops/s
# Warmup Iteration  13: 290035.236 ops/s
# Warmup Iteration  14: 288632.656 ops/s
# Warmup Iteration  15: 195218.228 ops/s
# Warmup Iteration  16: 293095.584 ops/s
# Warmup Iteration  17: 298744.868 ops/s
# Warmup Iteration  18: 298752.858 ops/s
# Warmup Iteration  19: 298821.222 ops/s
# Warmup Iteration  20: 297965.298 ops/s
# Warmup Iteration  21: 299379.958 ops/s
# Warmup Iteration  22: 298600.343 ops/s
# Warmup Iteration  23: 298856.623 ops/s
# Warmup Iteration  24: 297320.601 ops/s
# Warmup Iteration  25: 298993.207 ops/s
# Warmup Iteration  26: 298017.328 ops/s
# Warmup Iteration  27: 298966.492 ops/s
# Warmup Iteration  28: 297765.273 ops/s
# Warmup Iteration  29: 296924.038 ops/s
# Warmup Iteration  30: 299688.722 ops/s
Iteration   1: 298257.006 ops/s
Iteration   2: 299829.353 ops/s
Iteration   3: 298479.013 ops/s
Iteration   4: 298117.700 ops/s
Iteration   5: 299130.228 ops/s
Iteration   6: 297345.322 ops/s
Iteration   7: 297811.747 ops/s
Iteration   8: 296823.971 ops/s
Iteration   9: 299652.642 ops/s
Iteration  10: 298981.567 ops/s
Iteration  11: 298214.295 ops/s
Iteration  12: 298564.053 ops/s
Iteration  13: 297484.553 ops/s
Iteration  14: 297859.308 ops/s
Iteration  15: 296260.623 ops/s
Iteration  16: 297938.465 ops/s
Iteration  17: 298955.713 ops/s
Iteration  18: 299020.929 ops/s
Iteration  19: 298910.381 ops/s
Iteration  20: 300529.760 ops/s
Iteration  21: 298159.048 ops/s
Iteration  22: 299694.284 ops/s
Iteration  23: 300724.031 ops/s
Iteration  24: 299223.767 ops/s
Iteration  25: 298380.170 ops/s
Iteration  26: 298732.034 ops/s
Iteration  27: 299878.703 ops/s
Iteration  28: 301238.277 ops/s
Iteration  29: 299640.833 ops/s
Iteration  30: 299797.695 ops/s


Result "zipkin2.SpanTest._Benchmark.benchmark_traceId_zerosInvalid":
  298787.849 ±(99.9%) 756.200 ops/s [Average]
  (min, avg, max) = (296260.623, 298787.849, 301238.277), stdev = 1131.845
  CI (99.9%): [298031.649, 299544.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
SpanTest._Benchmark.benchmark_traceId_zerosInvalid  thrpt   30  298787.849 ± 756.200  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_emptyList_json$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_emptyList_json

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 399022.192 ops/s
# Warmup Iteration   2: 448754.562 ops/s
# Warmup Iteration   3: 896371.370 ops/s
# Warmup Iteration   4: 900683.101 ops/s
# Warmup Iteration   5: 921230.695 ops/s
# Warmup Iteration   6: 919418.723 ops/s
# Warmup Iteration   7: 919877.766 ops/s
# Warmup Iteration   8: 799674.709 ops/s
# Warmup Iteration   9: 734823.881 ops/s
# Warmup Iteration  10: 917157.992 ops/s
# Warmup Iteration  11: 918944.052 ops/s
# Warmup Iteration  12: 923569.623 ops/s
# Warmup Iteration  13: 921351.271 ops/s
# Warmup Iteration  14: 918723.867 ops/s
# Warmup Iteration  15: 922733.942 ops/s
# Warmup Iteration  16: 922982.880 ops/s
# Warmup Iteration  17: 921520.283 ops/s
# Warmup Iteration  18: 919739.102 ops/s
# Warmup Iteration  19: 921034.056 ops/s
# Warmup Iteration  20: 920443.160 ops/s
# Warmup Iteration  21: 920321.144 ops/s
# Warmup Iteration  22: 920814.356 ops/s
# Warmup Iteration  23: 917419.543 ops/s
# Warmup Iteration  24: 919125.554 ops/s
# Warmup Iteration  25: 914887.909 ops/s
# Warmup Iteration  26: 918828.808 ops/s
# Warmup Iteration  27: 920013.753 ops/s
# Warmup Iteration  28: 917773.942 ops/s
# Warmup Iteration  29: 919677.902 ops/s
# Warmup Iteration  30: 921775.084 ops/s
Iteration   1: 920010.549 ops/s
Iteration   2: 921926.634 ops/s
Iteration   3: 918081.133 ops/s
Iteration   4: 920357.637 ops/s
Iteration   5: 919262.052 ops/s
Iteration   6: 918902.478 ops/s
Iteration   7: 919929.750 ops/s
Iteration   8: 921714.252 ops/s
Iteration   9: 920627.706 ops/s
Iteration  10: 924248.288 ops/s
Iteration  11: 921026.133 ops/s
Iteration  12: 923143.364 ops/s
Iteration  13: 921615.507 ops/s
Iteration  14: 923312.405 ops/s
Iteration  15: 923337.201 ops/s
Iteration  16: 920954.870 ops/s
Iteration  17: 921756.286 ops/s
Iteration  18: 922591.620 ops/s
Iteration  19: 923344.621 ops/s
Iteration  20: 925839.677 ops/s
Iteration  21: 925123.857 ops/s
Iteration  22: 921406.829 ops/s
Iteration  23: 922652.776 ops/s
Iteration  24: 923567.909 ops/s
Iteration  25: 923128.649 ops/s
Iteration  26: 920572.139 ops/s
Iteration  27: 922195.745 ops/s
Iteration  28: 922548.235 ops/s
Iteration  29: 922660.071 ops/s
Iteration  30: 924253.591 ops/s


Result "zipkin2.codec.EncodingTest._Benchmark.benchmark_emptyList_json":
  922003.065 ±(99.9%) 1219.015 ops/s [Average]
  (min, avg, max) = (918081.133, 922003.065, 925839.677), stdev = 1824.564
  CI (99.9%): [920784.050, 923222.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
EncodingTest._Benchmark.benchmark_emptyList_json  thrpt   30  922003.065 ± 1219.015  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_emptyList_proto3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_emptyList_proto3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 413766.241 ops/s
# Warmup Iteration   2: 467799.069 ops/s
# Warmup Iteration   3: 880065.832 ops/s
# Warmup Iteration   4: 917500.273 ops/s
# Warmup Iteration   5: 903826.527 ops/s
# Warmup Iteration   6: 914739.999 ops/s
# Warmup Iteration   7: 910513.449 ops/s
# Warmup Iteration   8: 879400.326 ops/s
# Warmup Iteration   9: 646681.121 ops/s
# Warmup Iteration  10: 916602.103 ops/s
# Warmup Iteration  11: 917751.341 ops/s
# Warmup Iteration  12: 916732.220 ops/s
# Warmup Iteration  13: 916255.967 ops/s
# Warmup Iteration  14: 914223.267 ops/s
# Warmup Iteration  15: 912023.944 ops/s
# Warmup Iteration  16: 914678.126 ops/s
# Warmup Iteration  17: 919036.802 ops/s
# Warmup Iteration  18: 917379.164 ops/s
# Warmup Iteration  19: 914778.543 ops/s
# Warmup Iteration  20: 920784.580 ops/s
# Warmup Iteration  21: 918751.255 ops/s
# Warmup Iteration  22: 919756.992 ops/s
# Warmup Iteration  23: 920440.781 ops/s
# Warmup Iteration  24: 923078.728 ops/s
# Warmup Iteration  25: 920348.654 ops/s
# Warmup Iteration  26: 920975.331 ops/s
# Warmup Iteration  27: 918111.263 ops/s
# Warmup Iteration  28: 920443.255 ops/s
# Warmup Iteration  29: 919532.559 ops/s
# Warmup Iteration  30: 917667.168 ops/s
Iteration   1: 919347.282 ops/s
Iteration   2: 919102.658 ops/s
Iteration   3: 922627.198 ops/s
Iteration   4: 917418.816 ops/s
Iteration   5: 915873.839 ops/s
Iteration   6: 914833.992 ops/s
Iteration   7: 912567.506 ops/s
Iteration   8: 915647.632 ops/s
Iteration   9: 920576.526 ops/s
Iteration  10: 922339.680 ops/s
Iteration  11: 921797.699 ops/s
Iteration  12: 918685.079 ops/s
Iteration  13: 914519.924 ops/s
Iteration  14: 917552.225 ops/s
Iteration  15: 913417.458 ops/s
Iteration  16: 919445.243 ops/s
Iteration  17: 917021.996 ops/s
Iteration  18: 916194.670 ops/s
Iteration  19: 916553.613 ops/s
Iteration  20: 918528.649 ops/s
Iteration  21: 914302.784 ops/s
Iteration  22: 919403.426 ops/s
Iteration  23: 915980.981 ops/s
Iteration  24: 917551.787 ops/s
Iteration  25: 918313.690 ops/s
Iteration  26: 921634.169 ops/s
Iteration  27: 915904.779 ops/s
Iteration  28: 920664.057 ops/s
Iteration  29: 913722.273 ops/s
Iteration  30: 917159.642 ops/s


Result "zipkin2.codec.EncodingTest._Benchmark.benchmark_emptyList_proto3":
  917622.976 ±(99.9%) 1824.098 ops/s [Average]
  (min, avg, max) = (912567.506, 917622.976, 922627.198), stdev = 2730.224
  CI (99.9%): [915798.878, 919447.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
EncodingTest._Benchmark.benchmark_emptyList_proto3  thrpt   30  917622.976 ± 1824.098  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_multiItemList_json$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_multiItemList_json

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 372658.330 ops/s
# Warmup Iteration   2: 419816.264 ops/s
# Warmup Iteration   3: 861166.233 ops/s
# Warmup Iteration   4: 864599.393 ops/s
# Warmup Iteration   5: 875947.805 ops/s
# Warmup Iteration   6: 872997.672 ops/s
# Warmup Iteration   7: 870632.314 ops/s
# Warmup Iteration   8: 587462.258 ops/s
# Warmup Iteration   9: 872346.746 ops/s
# Warmup Iteration  10: 871650.155 ops/s
# Warmup Iteration  11: 874483.870 ops/s
# Warmup Iteration  12: 871440.731 ops/s
# Warmup Iteration  13: 873917.498 ops/s
# Warmup Iteration  14: 874703.793 ops/s
# Warmup Iteration  15: 872500.269 ops/s
# Warmup Iteration  16: 874132.567 ops/s
# Warmup Iteration  17: 867679.070 ops/s
# Warmup Iteration  18: 867010.290 ops/s
# Warmup Iteration  19: 867619.627 ops/s
# Warmup Iteration  20: 863073.021 ops/s
# Warmup Iteration  21: 869587.233 ops/s
# Warmup Iteration  22: 865601.426 ops/s
# Warmup Iteration  23: 865811.086 ops/s
# Warmup Iteration  24: 866106.046 ops/s
# Warmup Iteration  25: 867961.513 ops/s
# Warmup Iteration  26: 867128.320 ops/s
# Warmup Iteration  27: 872553.368 ops/s
# Warmup Iteration  28: 868371.488 ops/s
# Warmup Iteration  29: 868833.990 ops/s
# Warmup Iteration  30: 868230.514 ops/s
Iteration   1: 866357.649 ops/s
Iteration   2: 865658.170 ops/s
Iteration   3: 866270.877 ops/s
Iteration   4: 863303.546 ops/s
Iteration   5: 867140.946 ops/s
Iteration   6: 865475.296 ops/s
Iteration   7: 867376.293 ops/s
Iteration   8: 870170.785 ops/s
Iteration   9: 868090.604 ops/s
Iteration  10: 875263.907 ops/s
Iteration  11: 872239.353 ops/s
Iteration  12: 869337.261 ops/s
Iteration  13: 864478.756 ops/s
Iteration  14: 862084.949 ops/s
Iteration  15: 869018.403 ops/s
Iteration  16: 868391.915 ops/s
Iteration  17: 867197.885 ops/s
Iteration  18: 870611.371 ops/s
Iteration  19: 870355.488 ops/s
Iteration  20: 870798.282 ops/s
Iteration  21: 867211.030 ops/s
Iteration  22: 867940.339 ops/s
Iteration  23: 869337.278 ops/s
Iteration  24: 865708.554 ops/s
Iteration  25: 868396.787 ops/s
Iteration  26: 871000.668 ops/s
Iteration  27: 868535.249 ops/s
Iteration  28: 871022.337 ops/s
Iteration  29: 870772.444 ops/s
Iteration  30: 867803.805 ops/s


Result "zipkin2.codec.EncodingTest._Benchmark.benchmark_multiItemList_json":
  868245.008 ±(99.9%) 1838.368 ops/s [Average]
  (min, avg, max) = (862084.949, 868245.008, 875263.907), stdev = 2751.583
  CI (99.9%): [866406.639, 870083.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
EncodingTest._Benchmark.benchmark_multiItemList_json  thrpt   30  868245.008 ± 1838.368  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_multiItemList_proto3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_multiItemList_proto3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366920.070 ops/s
# Warmup Iteration   2: 417217.611 ops/s
# Warmup Iteration   3: 861615.859 ops/s
# Warmup Iteration   4: 858910.834 ops/s
# Warmup Iteration   5: 866880.981 ops/s
# Warmup Iteration   6: 863766.592 ops/s
# Warmup Iteration   7: 865838.524 ops/s
# Warmup Iteration   8: 585313.340 ops/s
# Warmup Iteration   9: 872717.198 ops/s
# Warmup Iteration  10: 869721.492 ops/s
# Warmup Iteration  11: 872936.318 ops/s
# Warmup Iteration  12: 873210.680 ops/s
# Warmup Iteration  13: 870849.463 ops/s
# Warmup Iteration  14: 872850.827 ops/s
# Warmup Iteration  15: 870600.718 ops/s
# Warmup Iteration  16: 871378.280 ops/s
# Warmup Iteration  17: 870500.423 ops/s
# Warmup Iteration  18: 870152.397 ops/s
# Warmup Iteration  19: 866470.086 ops/s
# Warmup Iteration  20: 870744.238 ops/s
# Warmup Iteration  21: 870862.690 ops/s
# Warmup Iteration  22: 870342.671 ops/s
# Warmup Iteration  23: 872549.969 ops/s
# Warmup Iteration  24: 867368.167 ops/s
# Warmup Iteration  25: 867170.838 ops/s
# Warmup Iteration  26: 869975.768 ops/s
# Warmup Iteration  27: 868828.856 ops/s
# Warmup Iteration  28: 870254.132 ops/s
# Warmup Iteration  29: 868298.641 ops/s
# Warmup Iteration  30: 869397.345 ops/s
Iteration   1: 873693.306 ops/s
Iteration   2: 867715.152 ops/s
Iteration   3: 868753.335 ops/s
Iteration   4: 869899.622 ops/s
Iteration   5: 869388.924 ops/s
Iteration   6: 871640.441 ops/s
Iteration   7: 866237.281 ops/s
Iteration   8: 869035.169 ops/s
Iteration   9: 872614.813 ops/s
Iteration  10: 872545.269 ops/s
Iteration  11: 871114.750 ops/s
Iteration  12: 871903.022 ops/s
Iteration  13: 866846.982 ops/s
Iteration  14: 864498.424 ops/s
Iteration  15: 864879.709 ops/s
Iteration  16: 869119.572 ops/s
Iteration  17: 867505.854 ops/s
Iteration  18: 865955.441 ops/s
Iteration  19: 873687.269 ops/s
Iteration  20: 870799.228 ops/s
Iteration  21: 872905.786 ops/s
Iteration  22: 873083.245 ops/s
Iteration  23: 873351.414 ops/s
Iteration  24: 872472.597 ops/s
Iteration  25: 870413.350 ops/s
Iteration  26: 873608.417 ops/s
Iteration  27: 869221.668 ops/s
Iteration  28: 871091.247 ops/s
Iteration  29: 868326.607 ops/s
Iteration  30: 870284.221 ops/s


Result "zipkin2.codec.EncodingTest._Benchmark.benchmark_multiItemList_proto3":
  870086.404 ±(99.9%) 1813.711 ops/s [Average]
  (min, avg, max) = (864498.424, 870086.404, 873693.306), stdev = 2714.678
  CI (99.9%): [868272.693, 871900.115] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
EncodingTest._Benchmark.benchmark_multiItemList_proto3  thrpt   30  870086.404 ± 1813.711  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_singletonList_json$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_singletonList_json

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 372121.280 ops/s
# Warmup Iteration   2: 425351.982 ops/s
# Warmup Iteration   3: 875789.196 ops/s
# Warmup Iteration   4: 850719.057 ops/s
# Warmup Iteration   5: 873312.420 ops/s
# Warmup Iteration   6: 880116.798 ops/s
# Warmup Iteration   7: 879086.020 ops/s
# Warmup Iteration   8: 619755.393 ops/s
# Warmup Iteration   9: 849954.105 ops/s
# Warmup Iteration  10: 874611.256 ops/s
# Warmup Iteration  11: 875725.215 ops/s
# Warmup Iteration  12: 877595.225 ops/s
# Warmup Iteration  13: 877180.191 ops/s
# Warmup Iteration  14: 878574.910 ops/s
# Warmup Iteration  15: 878105.090 ops/s
# Warmup Iteration  16: 874769.913 ops/s
# Warmup Iteration  17: 874133.266 ops/s
# Warmup Iteration  18: 873352.260 ops/s
# Warmup Iteration  19: 875335.760 ops/s
# Warmup Iteration  20: 876583.300 ops/s
# Warmup Iteration  21: 875843.318 ops/s
# Warmup Iteration  22: 871461.113 ops/s
# Warmup Iteration  23: 875874.973 ops/s
# Warmup Iteration  24: 872628.043 ops/s
# Warmup Iteration  25: 876392.260 ops/s
# Warmup Iteration  26: 871072.876 ops/s
# Warmup Iteration  27: 874751.402 ops/s
# Warmup Iteration  28: 872169.134 ops/s
# Warmup Iteration  29: 873010.278 ops/s
# Warmup Iteration  30: 872915.018 ops/s
Iteration   1: 875828.898 ops/s
Iteration   2: 873307.170 ops/s
Iteration   3: 868676.594 ops/s
Iteration   4: 871455.780 ops/s
Iteration   5: 872308.618 ops/s
Iteration   6: 873192.197 ops/s
Iteration   7: 868660.850 ops/s
Iteration   8: 871761.048 ops/s
Iteration   9: 875635.983 ops/s
Iteration  10: 872067.207 ops/s
Iteration  11: 873110.858 ops/s
Iteration  12: 877119.320 ops/s
Iteration  13: 872020.116 ops/s
Iteration  14: 873557.397 ops/s
Iteration  15: 874814.683 ops/s
Iteration  16: 868042.386 ops/s
Iteration  17: 873412.705 ops/s
Iteration  18: 874041.136 ops/s
Iteration  19: 875585.658 ops/s
Iteration  20: 873668.563 ops/s
Iteration  21: 874734.354 ops/s
Iteration  22: 873022.621 ops/s
Iteration  23: 877189.823 ops/s
Iteration  24: 872593.556 ops/s
Iteration  25: 873992.430 ops/s
Iteration  26: 869417.394 ops/s
Iteration  27: 870778.494 ops/s
Iteration  28: 871090.053 ops/s
Iteration  29: 874107.977 ops/s
Iteration  30: 872850.214 ops/s


Result "zipkin2.codec.EncodingTest._Benchmark.benchmark_singletonList_json":
  872934.803 ±(99.9%) 1552.722 ops/s [Average]
  (min, avg, max) = (868042.386, 872934.803, 877189.823), stdev = 2324.041
  CI (99.9%): [871382.081, 874487.525] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
EncodingTest._Benchmark.benchmark_singletonList_json  thrpt   30  872934.803 ± 1552.722  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_singletonList_proto3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.EncodingTest._Benchmark.benchmark_singletonList_proto3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374678.480 ops/s
# Warmup Iteration   2: 425369.964 ops/s
# Warmup Iteration   3: 876476.956 ops/s
# Warmup Iteration   4: 873546.800 ops/s
# Warmup Iteration   5: 878500.822 ops/s
# Warmup Iteration   6: 875724.083 ops/s
# Warmup Iteration   7: 884391.979 ops/s
# Warmup Iteration   8: 600276.323 ops/s
# Warmup Iteration   9: 881522.505 ops/s
# Warmup Iteration  10: 881014.092 ops/s
# Warmup Iteration  11: 878540.524 ops/s
# Warmup Iteration  12: 877414.289 ops/s
# Warmup Iteration  13: 876797.580 ops/s
# Warmup Iteration  14: 878944.977 ops/s
# Warmup Iteration  15: 881290.877 ops/s
# Warmup Iteration  16: 877525.768 ops/s
# Warmup Iteration  17: 881841.047 ops/s
# Warmup Iteration  18: 878715.799 ops/s
# Warmup Iteration  19: 881934.074 ops/s
# Warmup Iteration  20: 879757.838 ops/s
# Warmup Iteration  21: 870836.314 ops/s
# Warmup Iteration  22: 880183.893 ops/s
# Warmup Iteration  23: 876593.364 ops/s
# Warmup Iteration  24: 878856.177 ops/s
# Warmup Iteration  25: 879335.382 ops/s
# Warmup Iteration  26: 876836.976 ops/s
# Warmup Iteration  27: 878029.753 ops/s
# Warmup Iteration  28: 877208.620 ops/s
# Warmup Iteration  29: 881055.287 ops/s
# Warmup Iteration  30: 879258.896 ops/s
Iteration   1: 878771.971 ops/s
Iteration   2: 877726.330 ops/s
Iteration   3: 876641.151 ops/s
Iteration   4: 877320.060 ops/s
Iteration   5: 877581.673 ops/s
Iteration   6: 880672.617 ops/s
Iteration   7: 875712.622 ops/s
Iteration   8: 878178.567 ops/s
Iteration   9: 876986.939 ops/s
Iteration  10: 877520.002 ops/s
Iteration  11: 875321.476 ops/s
Iteration  12: 869582.532 ops/s
Iteration  13: 875683.165 ops/s
Iteration  14: 880978.941 ops/s
Iteration  15: 878105.109 ops/s
Iteration  16: 877545.944 ops/s
Iteration  17: 881576.530 ops/s
Iteration  18: 881138.106 ops/s
Iteration  19: 880297.313 ops/s
Iteration  20: 881916.270 ops/s
Iteration  21: 878687.590 ops/s
Iteration  22: 877142.795 ops/s
Iteration  23: 874403.168 ops/s
Iteration  24: 878215.030 ops/s
Iteration  25: 876208.413 ops/s
Iteration  26: 875143.913 ops/s
Iteration  27: 878570.974 ops/s
Iteration  28: 879143.784 ops/s
Iteration  29: 874101.322 ops/s
Iteration  30: 883870.865 ops/s


Result "zipkin2.codec.EncodingTest._Benchmark.benchmark_singletonList_proto3":
  877824.839 ±(99.9%) 1875.393 ops/s [Average]
  (min, avg, max) = (869582.532, 877824.839, 883870.865), stdev = 2807.000
  CI (99.9%): [875949.446, 879700.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
EncodingTest._Benchmark.benchmark_singletonList_proto3  thrpt   30  877824.839 ± 1875.393  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_annotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_annotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7807.170 ops/s
# Warmup Iteration   2: 11992.516 ops/s
# Warmup Iteration   3: 12074.798 ops/s
# Warmup Iteration   4: 12063.121 ops/s
# Warmup Iteration   5: 12109.345 ops/s
# Warmup Iteration   6: 12434.173 ops/s
# Warmup Iteration   7: 13026.442 ops/s
# Warmup Iteration   8: 14488.802 ops/s
# Warmup Iteration   9: 14900.663 ops/s
# Warmup Iteration  10: 14573.721 ops/s
# Warmup Iteration  11: 14736.968 ops/s
# Warmup Iteration  12: 14770.139 ops/s
# Warmup Iteration  13: 15034.295 ops/s
# Warmup Iteration  14: 14569.909 ops/s
# Warmup Iteration  15: 15087.724 ops/s
# Warmup Iteration  16: 15021.002 ops/s
# Warmup Iteration  17: 15072.399 ops/s
# Warmup Iteration  18: 15367.315 ops/s
# Warmup Iteration  19: 15215.367 ops/s
# Warmup Iteration  20: 14891.664 ops/s
# Warmup Iteration  21: 14806.714 ops/s
# Warmup Iteration  22: 15217.286 ops/s
# Warmup Iteration  23: 15208.014 ops/s
# Warmup Iteration  24: 15286.771 ops/s
# Warmup Iteration  25: 14661.721 ops/s
# Warmup Iteration  26: 15013.785 ops/s
# Warmup Iteration  27: 14924.214 ops/s
# Warmup Iteration  28: 15119.107 ops/s
# Warmup Iteration  29: 15054.363 ops/s
# Warmup Iteration  30: 15028.131 ops/s
Iteration   1: 14935.481 ops/s
Iteration   2: 14982.846 ops/s
Iteration   3: 14770.456 ops/s
Iteration   4: 15192.706 ops/s
Iteration   5: 14744.683 ops/s
Iteration   6: 14742.890 ops/s
Iteration   7: 15276.277 ops/s
Iteration   8: 14668.693 ops/s
Iteration   9: 14617.439 ops/s
Iteration  10: 14595.155 ops/s
Iteration  11: 14585.294 ops/s
Iteration  12: 14683.699 ops/s
Iteration  13: 14734.511 ops/s
Iteration  14: 15056.302 ops/s
Iteration  15: 14463.014 ops/s
Iteration  16: 12283.228 ops/s
Iteration  17: 12272.175 ops/s
Iteration  18: 12658.652 ops/s
Iteration  19: 12587.981 ops/s
Iteration  20: 14927.863 ops/s
Iteration  21: 15093.805 ops/s
Iteration  22: 15095.710 ops/s
Iteration  23: 15132.594 ops/s
Iteration  24: 15128.385 ops/s
Iteration  25: 15132.700 ops/s
Iteration  26: 15132.758 ops/s
Iteration  27: 15136.625 ops/s
Iteration  28: 15158.575 ops/s
Iteration  29: 15137.278 ops/s
Iteration  30: 15091.072 ops/s


Result "zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_annotation":
  14600.628 ±(99.9%) 593.132 ops/s [Average]
  (min, avg, max) = (12272.175, 14600.628, 15276.277), stdev = 887.773
  CI (99.9%): [14007.496, 15193.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
KryoTest._Benchmark.benchmark_kryoJavaSerialization_annotation  thrpt   30  14600.628 ± 593.132  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_dependencyLink$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_dependencyLink

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6448.905 ops/s
# Warmup Iteration   2: 9803.309 ops/s
# Warmup Iteration   3: 10456.831 ops/s
# Warmup Iteration   4: 10602.026 ops/s
# Warmup Iteration   5: 10178.915 ops/s
# Warmup Iteration   6: 12598.361 ops/s
# Warmup Iteration   7: 12957.375 ops/s
# Warmup Iteration   8: 13028.394 ops/s
# Warmup Iteration   9: 13357.321 ops/s
# Warmup Iteration  10: 13678.735 ops/s
# Warmup Iteration  11: 13495.218 ops/s
# Warmup Iteration  12: 13410.000 ops/s
# Warmup Iteration  13: 12982.600 ops/s
# Warmup Iteration  14: 13358.833 ops/s
# Warmup Iteration  15: 13209.422 ops/s
# Warmup Iteration  16: 13237.775 ops/s
# Warmup Iteration  17: 13293.550 ops/s
# Warmup Iteration  18: 13716.342 ops/s
# Warmup Iteration  19: 13717.682 ops/s
# Warmup Iteration  20: 13663.983 ops/s
# Warmup Iteration  21: 13612.054 ops/s
# Warmup Iteration  22: 13606.555 ops/s
# Warmup Iteration  23: 13598.209 ops/s
# Warmup Iteration  24: 13058.049 ops/s
# Warmup Iteration  25: 13054.684 ops/s
# Warmup Iteration  26: 13054.778 ops/s
# Warmup Iteration  27: 13035.819 ops/s
# Warmup Iteration  28: 10952.550 ops/s
# Warmup Iteration  29: 11313.921 ops/s
# Warmup Iteration  30: 13584.152 ops/s
Iteration   1: 13560.906 ops/s
Iteration   2: 13613.301 ops/s
Iteration   3: 13618.898 ops/s
Iteration   4: 13677.753 ops/s
Iteration   5: 13719.525 ops/s
Iteration   6: 13724.900 ops/s
Iteration   7: 13725.052 ops/s
Iteration   8: 13043.194 ops/s
Iteration   9: 13104.863 ops/s
Iteration  10: 13095.049 ops/s
Iteration  11: 13069.544 ops/s
Iteration  12: 13049.553 ops/s
Iteration  13: 13045.063 ops/s
Iteration  14: 13728.572 ops/s
Iteration  15: 13547.958 ops/s
Iteration  16: 13631.750 ops/s
Iteration  17: 13673.939 ops/s
Iteration  18: 13599.684 ops/s
Iteration  19: 13620.789 ops/s
Iteration  20: 13697.923 ops/s
Iteration  21: 13540.062 ops/s
Iteration  22: 13573.831 ops/s
Iteration  23: 13619.193 ops/s
Iteration  24: 13594.003 ops/s
Iteration  25: 13509.618 ops/s
Iteration  26: 13530.210 ops/s
Iteration  27: 13393.070 ops/s
Iteration  28: 13596.706 ops/s
Iteration  29: 13626.758 ops/s
Iteration  30: 13257.451 ops/s


Result "zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_dependencyLink":
  13492.971 ±(99.9%) 158.241 ops/s [Average]
  (min, avg, max) = (13043.194, 13492.971, 13728.572), stdev = 236.848
  CI (99.9%): [13334.729, 13651.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
KryoTest._Benchmark.benchmark_kryoJavaSerialization_dependencyLink  thrpt   30  13492.971 ± 158.241  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_endpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_endpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6404.394 ops/s
# Warmup Iteration   2: 10458.330 ops/s
# Warmup Iteration   3: 10315.294 ops/s
# Warmup Iteration   4: 10459.878 ops/s
# Warmup Iteration   5: 10636.243 ops/s
# Warmup Iteration   6: 10580.337 ops/s
# Warmup Iteration   7: 10489.309 ops/s
# Warmup Iteration   8: 12911.684 ops/s
# Warmup Iteration   9: 13250.768 ops/s
# Warmup Iteration  10: 13630.560 ops/s
# Warmup Iteration  11: 13639.744 ops/s
# Warmup Iteration  12: 13315.272 ops/s
# Warmup Iteration  13: 13341.846 ops/s
# Warmup Iteration  14: 13243.831 ops/s
# Warmup Iteration  15: 13356.913 ops/s
# Warmup Iteration  16: 13073.735 ops/s
# Warmup Iteration  17: 13173.332 ops/s
# Warmup Iteration  18: 13036.646 ops/s
# Warmup Iteration  19: 13545.408 ops/s
# Warmup Iteration  20: 13433.978 ops/s
# Warmup Iteration  21: 13121.342 ops/s
# Warmup Iteration  22: 13030.236 ops/s
# Warmup Iteration  23: 12987.789 ops/s
# Warmup Iteration  24: 13025.501 ops/s
# Warmup Iteration  25: 13215.247 ops/s
# Warmup Iteration  26: 13501.984 ops/s
# Warmup Iteration  27: 13581.738 ops/s
# Warmup Iteration  28: 13358.955 ops/s
# Warmup Iteration  29: 13313.875 ops/s
# Warmup Iteration  30: 13293.782 ops/s
Iteration   1: 13357.468 ops/s
Iteration   2: 13546.275 ops/s
Iteration   3: 12977.328 ops/s
Iteration   4: 13082.551 ops/s
Iteration   5: 13144.595 ops/s
Iteration   6: 13058.226 ops/s
Iteration   7: 13487.178 ops/s
Iteration   8: 13038.670 ops/s
Iteration   9: 13330.479 ops/s
Iteration  10: 13412.375 ops/s
Iteration  11: 13550.711 ops/s
Iteration  12: 13452.735 ops/s
Iteration  13: 13301.480 ops/s
Iteration  14: 13303.140 ops/s
Iteration  15: 12946.349 ops/s
Iteration  16: 13410.052 ops/s
Iteration  17: 13571.014 ops/s
Iteration  18: 13544.593 ops/s
Iteration  19: 13515.581 ops/s
Iteration  20: 11213.251 ops/s
Iteration  21: 11168.310 ops/s
Iteration  22: 11374.793 ops/s
Iteration  23: 10833.844 ops/s
Iteration  24: 13732.676 ops/s
Iteration  25: 13285.711 ops/s
Iteration  26: 12981.941 ops/s
Iteration  27: 13288.655 ops/s
Iteration  28: 13328.074 ops/s
Iteration  29: 13545.591 ops/s
Iteration  30: 13484.845 ops/s


Result "zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_endpoint":
  13042.283 ±(99.9%) 524.848 ops/s [Average]
  (min, avg, max) = (10833.844, 13042.283, 13732.676), stdev = 785.568
  CI (99.9%): [12517.435, 13567.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
KryoTest._Benchmark.benchmark_kryoJavaSerialization_endpoint  thrpt   30  13042.283 ± 524.848  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_span$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_span

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5486.444 ops/s
# Warmup Iteration   2: 10224.922 ops/s
# Warmup Iteration   3: 10823.721 ops/s
# Warmup Iteration   4: 10373.781 ops/s
# Warmup Iteration   5: 10548.330 ops/s
# Warmup Iteration   6: 10393.286 ops/s
# Warmup Iteration   7: 10444.776 ops/s
# Warmup Iteration   8: 12566.630 ops/s
# Warmup Iteration   9: 13056.659 ops/s
# Warmup Iteration  10: 12866.438 ops/s
# Warmup Iteration  11: 12889.478 ops/s
# Warmup Iteration  12: 12820.009 ops/s
# Warmup Iteration  13: 13096.852 ops/s
# Warmup Iteration  14: 12847.980 ops/s
# Warmup Iteration  15: 13407.544 ops/s
# Warmup Iteration  16: 13415.755 ops/s
# Warmup Iteration  17: 13397.362 ops/s
# Warmup Iteration  18: 13288.049 ops/s
# Warmup Iteration  19: 13584.023 ops/s
# Warmup Iteration  20: 13602.817 ops/s
# Warmup Iteration  21: 13481.422 ops/s
# Warmup Iteration  22: 12855.043 ops/s
# Warmup Iteration  23: 13181.127 ops/s
# Warmup Iteration  24: 13064.930 ops/s
# Warmup Iteration  25: 13226.874 ops/s
# Warmup Iteration  26: 13433.020 ops/s
# Warmup Iteration  27: 13457.366 ops/s
# Warmup Iteration  28: 13430.690 ops/s
# Warmup Iteration  29: 12785.512 ops/s
# Warmup Iteration  30: 12810.961 ops/s
Iteration   1: 13340.507 ops/s
Iteration   2: 13533.834 ops/s
Iteration   3: 13070.551 ops/s
Iteration   4: 12902.324 ops/s
Iteration   5: 12837.805 ops/s
Iteration   6: 12920.934 ops/s
Iteration   7: 12853.039 ops/s
Iteration   8: 12917.560 ops/s
Iteration   9: 13194.155 ops/s
Iteration  10: 13047.603 ops/s
Iteration  11: 13340.840 ops/s
Iteration  12: 13434.381 ops/s
Iteration  13: 13472.625 ops/s
Iteration  14: 13168.417 ops/s
Iteration  15: 12968.707 ops/s
Iteration  16: 13100.857 ops/s
Iteration  17: 13054.419 ops/s
Iteration  18: 12840.743 ops/s
Iteration  19: 11033.519 ops/s
Iteration  20: 11186.586 ops/s
Iteration  21: 11355.750 ops/s
Iteration  22: 10815.458 ops/s
Iteration  23: 13337.815 ops/s
Iteration  24: 12800.154 ops/s
Iteration  25: 13384.632 ops/s
Iteration  26: 13162.369 ops/s
Iteration  27: 13124.387 ops/s
Iteration  28: 12948.034 ops/s
Iteration  29: 13346.655 ops/s
Iteration  30: 13263.697 ops/s


Result "zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJavaSerialization_span":
  12858.612 ±(99.9%) 491.278 ops/s [Average]
  (min, avg, max) = (10815.458, 12858.612, 13533.834), stdev = 735.322
  CI (99.9%): [12367.334, 13349.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
KryoTest._Benchmark.benchmark_kryoJavaSerialization_span  thrpt   30  12858.612 ± 491.278  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJson2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJson2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6482.255 ops/s
# Warmup Iteration   2: 10692.655 ops/s
# Warmup Iteration   3: 10595.556 ops/s
# Warmup Iteration   4: 10432.332 ops/s
# Warmup Iteration   5: 10574.212 ops/s
# Warmup Iteration   6: 11584.398 ops/s
# Warmup Iteration   7: 13379.480 ops/s
# Warmup Iteration   8: 13366.396 ops/s
# Warmup Iteration   9: 13663.867 ops/s
# Warmup Iteration  10: 13416.452 ops/s
# Warmup Iteration  11: 13474.839 ops/s
# Warmup Iteration  12: 13377.895 ops/s
# Warmup Iteration  13: 13316.480 ops/s
# Warmup Iteration  14: 13198.108 ops/s
# Warmup Iteration  15: 13224.553 ops/s
# Warmup Iteration  16: 13258.417 ops/s
# Warmup Iteration  17: 13598.653 ops/s
# Warmup Iteration  18: 13560.051 ops/s
# Warmup Iteration  19: 13334.360 ops/s
# Warmup Iteration  20: 13585.489 ops/s
# Warmup Iteration  21: 13499.536 ops/s
# Warmup Iteration  22: 13413.754 ops/s
# Warmup Iteration  23: 13261.358 ops/s
# Warmup Iteration  24: 13652.890 ops/s
# Warmup Iteration  25: 13632.908 ops/s
# Warmup Iteration  26: 13568.040 ops/s
# Warmup Iteration  27: 13444.363 ops/s
# Warmup Iteration  28: 13601.236 ops/s
# Warmup Iteration  29: 13695.228 ops/s
# Warmup Iteration  30: 13473.502 ops/s
Iteration   1: 13798.700 ops/s
Iteration   2: 12612.208 ops/s
Iteration   3: 10746.384 ops/s
Iteration   4: 10976.865 ops/s
Iteration   5: 10838.760 ops/s
Iteration   6: 13622.973 ops/s
Iteration   7: 13588.481 ops/s
Iteration   8: 13695.768 ops/s
Iteration   9: 13758.615 ops/s
Iteration  10: 13642.159 ops/s
Iteration  11: 13273.365 ops/s
Iteration  12: 13193.162 ops/s
Iteration  13: 13208.645 ops/s
Iteration  14: 13187.356 ops/s
Iteration  15: 13276.412 ops/s
Iteration  16: 13218.253 ops/s
Iteration  17: 13199.779 ops/s
Iteration  18: 13261.486 ops/s
Iteration  19: 13298.974 ops/s
Iteration  20: 13258.337 ops/s
Iteration  21: 13244.318 ops/s
Iteration  22: 13136.241 ops/s
Iteration  23: 13221.395 ops/s
Iteration  24: 13141.925 ops/s
Iteration  25: 13175.177 ops/s
Iteration  26: 13257.840 ops/s
Iteration  27: 13231.165 ops/s
Iteration  28: 13205.215 ops/s
Iteration  29: 13260.359 ops/s
Iteration  30: 13643.871 ops/s


Result "zipkin2.codec.KryoTest._Benchmark.benchmark_kryoJson2":
  13072.473 ±(99.9%) 527.556 ops/s [Average]
  (min, avg, max) = (10746.384, 13072.473, 13798.700), stdev = 789.621
  CI (99.9%): [12544.917, 13600.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt      Score     Error  Units
KryoTest._Benchmark.benchmark_kryoJson2  thrpt   30  13072.473 ± 527.556  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78411.092 ops/s
# Warmup Iteration   2: 201461.293 ops/s
# Warmup Iteration   3: 278494.847 ops/s
# Warmup Iteration   4: 272800.558 ops/s
# Warmup Iteration   5: 218271.637 ops/s
# Warmup Iteration   6: 283510.304 ops/s
# Warmup Iteration   7: 279725.322 ops/s
# Warmup Iteration   8: 281211.530 ops/s
# Warmup Iteration   9: 280304.782 ops/s
# Warmup Iteration  10: 280920.324 ops/s
# Warmup Iteration  11: 280361.961 ops/s
# Warmup Iteration  12: 279148.306 ops/s
# Warmup Iteration  13: 283534.374 ops/s
# Warmup Iteration  14: 281043.152 ops/s
# Warmup Iteration  15: 281851.193 ops/s
# Warmup Iteration  16: 281243.761 ops/s
# Warmup Iteration  17: 277308.248 ops/s
# Warmup Iteration  18: 280890.677 ops/s
# Warmup Iteration  19: 281220.251 ops/s
# Warmup Iteration  20: 279996.673 ops/s
# Warmup Iteration  21: 282558.940 ops/s
# Warmup Iteration  22: 281264.262 ops/s
# Warmup Iteration  23: 281349.771 ops/s
# Warmup Iteration  24: 283451.687 ops/s
# Warmup Iteration  25: 284357.954 ops/s
# Warmup Iteration  26: 281993.838 ops/s
# Warmup Iteration  27: 280024.721 ops/s
# Warmup Iteration  28: 280322.550 ops/s
# Warmup Iteration  29: 281236.596 ops/s
# Warmup Iteration  30: 282694.254 ops/s
Iteration   1: 282642.870 ops/s
Iteration   2: 282097.050 ops/s
Iteration   3: 282015.230 ops/s
Iteration   4: 281311.428 ops/s
Iteration   5: 277944.790 ops/s
Iteration   6: 277087.818 ops/s
Iteration   7: 279110.407 ops/s
Iteration   8: 279972.709 ops/s
Iteration   9: 282078.349 ops/s
Iteration  10: 279364.612 ops/s
Iteration  11: 282423.166 ops/s
Iteration  12: 283886.351 ops/s
Iteration  13: 282482.431 ops/s
Iteration  14: 282617.429 ops/s
Iteration  15: 281605.424 ops/s
Iteration  16: 281973.706 ops/s
Iteration  17: 282306.050 ops/s
Iteration  18: 280245.887 ops/s
Iteration  19: 282838.703 ops/s
Iteration  20: 282204.311 ops/s
Iteration  21: 281233.501 ops/s
Iteration  22: 275567.299 ops/s
Iteration  23: 280513.578 ops/s
Iteration  24: 282130.546 ops/s
Iteration  25: 283085.257 ops/s
Iteration  26: 281871.659 ops/s
Iteration  27: 281032.911 ops/s
Iteration  28: 281959.699 ops/s
Iteration  29: 280554.941 ops/s
Iteration  30: 281218.224 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V1":
  281179.211 ±(99.9%) 1228.932 ops/s [Average]
  (min, avg, max) = (275567.299, 281179.211, 283886.351), stdev = 1839.408
  CI (99.9%): [279950.279, 282408.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V1  thrpt   30  281179.211 ± 1228.932  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78416.707 ops/s
# Warmup Iteration   2: 204934.584 ops/s
# Warmup Iteration   3: 276398.368 ops/s
# Warmup Iteration   4: 276414.278 ops/s
# Warmup Iteration   5: 211670.025 ops/s
# Warmup Iteration   6: 286389.989 ops/s
# Warmup Iteration   7: 285830.466 ops/s
# Warmup Iteration   8: 286632.853 ops/s
# Warmup Iteration   9: 284525.301 ops/s
# Warmup Iteration  10: 284435.591 ops/s
# Warmup Iteration  11: 283291.263 ops/s
# Warmup Iteration  12: 284658.499 ops/s
# Warmup Iteration  13: 286663.531 ops/s
# Warmup Iteration  14: 282587.794 ops/s
# Warmup Iteration  15: 283649.388 ops/s
# Warmup Iteration  16: 282127.060 ops/s
# Warmup Iteration  17: 283110.727 ops/s
# Warmup Iteration  18: 284297.449 ops/s
# Warmup Iteration  19: 280688.993 ops/s
# Warmup Iteration  20: 280937.030 ops/s
# Warmup Iteration  21: 282852.618 ops/s
# Warmup Iteration  22: 284800.664 ops/s
# Warmup Iteration  23: 284273.916 ops/s
# Warmup Iteration  24: 285699.712 ops/s
# Warmup Iteration  25: 283012.437 ops/s
# Warmup Iteration  26: 279366.370 ops/s
# Warmup Iteration  27: 282193.050 ops/s
# Warmup Iteration  28: 285961.153 ops/s
# Warmup Iteration  29: 282134.303 ops/s
# Warmup Iteration  30: 283825.860 ops/s
Iteration   1: 285714.343 ops/s
Iteration   2: 285345.899 ops/s
Iteration   3: 283880.771 ops/s
Iteration   4: 283982.425 ops/s
Iteration   5: 285827.167 ops/s
Iteration   6: 282830.257 ops/s
Iteration   7: 280787.280 ops/s
Iteration   8: 281647.746 ops/s
Iteration   9: 282979.929 ops/s
Iteration  10: 285215.076 ops/s
Iteration  11: 283704.371 ops/s
Iteration  12: 282968.913 ops/s
Iteration  13: 287967.010 ops/s
Iteration  14: 285439.679 ops/s
Iteration  15: 285941.235 ops/s
Iteration  16: 284051.737 ops/s
Iteration  17: 285039.571 ops/s
Iteration  18: 284585.583 ops/s
Iteration  19: 285202.147 ops/s
Iteration  20: 285268.184 ops/s
Iteration  21: 286092.423 ops/s
Iteration  22: 286084.007 ops/s
Iteration  23: 282252.864 ops/s
Iteration  24: 281807.890 ops/s
Iteration  25: 285305.610 ops/s
Iteration  26: 283618.431 ops/s
Iteration  27: 286050.914 ops/s
Iteration  28: 286158.005 ops/s
Iteration  29: 285907.542 ops/s
Iteration  30: 281992.224 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V2":
  284454.975 ±(99.9%) 1135.754 ops/s [Average]
  (min, avg, max) = (280787.280, 284454.975, 287967.010), stdev = 1699.943
  CI (99.9%): [283319.221, 285590.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_JSON_V2  thrpt   30  284454.975 ± 1135.754  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 338344.743 ops/s
# Warmup Iteration   2: 424401.540 ops/s
# Warmup Iteration   3: 817157.609 ops/s
# Warmup Iteration   4: 876395.114 ops/s
# Warmup Iteration   5: 883083.805 ops/s
# Warmup Iteration   6: 875828.133 ops/s
# Warmup Iteration   7: 877326.950 ops/s
# Warmup Iteration   8: 706817.224 ops/s
# Warmup Iteration   9: 797539.700 ops/s
# Warmup Iteration  10: 889100.405 ops/s
# Warmup Iteration  11: 892267.421 ops/s
# Warmup Iteration  12: 891403.011 ops/s
# Warmup Iteration  13: 889208.021 ops/s
# Warmup Iteration  14: 885760.599 ops/s
# Warmup Iteration  15: 887729.413 ops/s
# Warmup Iteration  16: 890547.964 ops/s
# Warmup Iteration  17: 886102.136 ops/s
# Warmup Iteration  18: 887042.261 ops/s
# Warmup Iteration  19: 885447.842 ops/s
# Warmup Iteration  20: 887223.372 ops/s
# Warmup Iteration  21: 887173.849 ops/s
# Warmup Iteration  22: 887055.438 ops/s
# Warmup Iteration  23: 888553.626 ops/s
# Warmup Iteration  24: 889070.426 ops/s
# Warmup Iteration  25: 890145.418 ops/s
# Warmup Iteration  26: 882601.316 ops/s
# Warmup Iteration  27: 885817.553 ops/s
# Warmup Iteration  28: 886617.244 ops/s
# Warmup Iteration  29: 882353.066 ops/s
# Warmup Iteration  30: 884889.326 ops/s
Iteration   1: 887477.649 ops/s
Iteration   2: 886194.401 ops/s
Iteration   3: 885946.454 ops/s
Iteration   4: 890524.681 ops/s
Iteration   5: 886014.675 ops/s
Iteration   6: 890102.625 ops/s
Iteration   7: 887066.300 ops/s
Iteration   8: 885272.042 ops/s
Iteration   9: 889320.452 ops/s
Iteration  10: 885954.545 ops/s
Iteration  11: 886770.524 ops/s
Iteration  12: 886128.168 ops/s
Iteration  13: 887563.684 ops/s
Iteration  14: 883729.137 ops/s
Iteration  15: 887787.848 ops/s
Iteration  16: 888894.208 ops/s
Iteration  17: 885580.856 ops/s
Iteration  18: 886477.692 ops/s
Iteration  19: 881444.445 ops/s
Iteration  20: 885669.083 ops/s
Iteration  21: 882277.001 ops/s
Iteration  22: 886350.351 ops/s
Iteration  23: 886156.360 ops/s
Iteration  24: 885760.703 ops/s
Iteration  25: 890384.940 ops/s
Iteration  26: 890794.879 ops/s
Iteration  27: 889568.030 ops/s
Iteration  28: 889492.309 ops/s
Iteration  29: 889509.935 ops/s
Iteration  30: 891613.983 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_PROTO3":
  887194.265 ±(99.9%) 1643.731 ops/s [Average]
  (min, avg, max) = (881444.445, 887194.265, 891613.983), stdev = 2460.260
  CI (99.9%): [885550.534, 888837.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_PROTO3  thrpt   30  887194.265 ± 1643.731  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56346.949 ops/s
# Warmup Iteration   2: 118090.055 ops/s
# Warmup Iteration   3: 191024.650 ops/s
# Warmup Iteration   4: 192947.031 ops/s
# Warmup Iteration   5: 193889.754 ops/s
# Warmup Iteration   6: 149104.913 ops/s
# Warmup Iteration   7: 194206.951 ops/s
# Warmup Iteration   8: 193418.317 ops/s
# Warmup Iteration   9: 195086.760 ops/s
# Warmup Iteration  10: 196051.705 ops/s
# Warmup Iteration  11: 195810.265 ops/s
# Warmup Iteration  12: 196427.423 ops/s
# Warmup Iteration  13: 193517.066 ops/s
# Warmup Iteration  14: 195278.448 ops/s
# Warmup Iteration  15: 195993.154 ops/s
# Warmup Iteration  16: 195480.403 ops/s
# Warmup Iteration  17: 195672.119 ops/s
# Warmup Iteration  18: 195339.135 ops/s
# Warmup Iteration  19: 196600.420 ops/s
# Warmup Iteration  20: 193782.625 ops/s
# Warmup Iteration  21: 194943.689 ops/s
# Warmup Iteration  22: 195514.590 ops/s
# Warmup Iteration  23: 194470.195 ops/s
# Warmup Iteration  24: 194404.999 ops/s
# Warmup Iteration  25: 192397.565 ops/s
# Warmup Iteration  26: 192517.653 ops/s
# Warmup Iteration  27: 193202.983 ops/s
# Warmup Iteration  28: 194380.094 ops/s
# Warmup Iteration  29: 194648.256 ops/s
# Warmup Iteration  30: 194018.779 ops/s
Iteration   1: 194922.200 ops/s
Iteration   2: 193902.050 ops/s
Iteration   3: 194229.991 ops/s
Iteration   4: 193711.431 ops/s
Iteration   5: 195236.177 ops/s
Iteration   6: 195213.116 ops/s
Iteration   7: 195441.506 ops/s
Iteration   8: 195043.574 ops/s
Iteration   9: 195949.365 ops/s
Iteration  10: 192946.909 ops/s
Iteration  11: 194551.482 ops/s
Iteration  12: 193531.996 ops/s
Iteration  13: 191938.987 ops/s
Iteration  14: 191976.693 ops/s
Iteration  15: 193250.104 ops/s
Iteration  16: 192615.090 ops/s
Iteration  17: 194390.140 ops/s
Iteration  18: 195407.498 ops/s
Iteration  19: 193785.872 ops/s
Iteration  20: 193213.813 ops/s
Iteration  21: 192780.521 ops/s
Iteration  22: 193242.849 ops/s
Iteration  23: 194475.828 ops/s
Iteration  24: 194655.827 ops/s
Iteration  25: 194390.589 ops/s
Iteration  26: 195483.456 ops/s
Iteration  27: 195872.551 ops/s
Iteration  28: 196005.248 ops/s
Iteration  29: 194786.123 ops/s
Iteration  30: 194886.316 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_JSON_V2":
  194261.243 ±(99.9%) 766.479 ops/s [Average]
  (min, avg, max) = (191938.987, 194261.243, 196005.248), stdev = 1147.230
  CI (99.9%): [193494.764, 195027.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_JSON_V2  thrpt   30  194261.243 ± 766.479  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 175235.480 ops/s
# Warmup Iteration   2: 264988.408 ops/s
# Warmup Iteration   3: 381015.150 ops/s
# Warmup Iteration   4: 492353.055 ops/s
# Warmup Iteration   5: 489622.113 ops/s
# Warmup Iteration   6: 496340.705 ops/s
# Warmup Iteration   7: 496964.468 ops/s
# Warmup Iteration   8: 496239.463 ops/s
# Warmup Iteration   9: 494414.992 ops/s
# Warmup Iteration  10: 346886.020 ops/s
# Warmup Iteration  11: 500519.668 ops/s
# Warmup Iteration  12: 499183.992 ops/s
# Warmup Iteration  13: 498908.786 ops/s
# Warmup Iteration  14: 499979.682 ops/s
# Warmup Iteration  15: 499614.666 ops/s
# Warmup Iteration  16: 500229.421 ops/s
# Warmup Iteration  17: 499877.382 ops/s
# Warmup Iteration  18: 500082.443 ops/s
# Warmup Iteration  19: 499151.029 ops/s
# Warmup Iteration  20: 498444.634 ops/s
# Warmup Iteration  21: 499262.191 ops/s
# Warmup Iteration  22: 500593.674 ops/s
# Warmup Iteration  23: 500075.739 ops/s
# Warmup Iteration  24: 499578.700 ops/s
# Warmup Iteration  25: 497995.215 ops/s
# Warmup Iteration  26: 498894.973 ops/s
# Warmup Iteration  27: 500075.882 ops/s
# Warmup Iteration  28: 497832.271 ops/s
# Warmup Iteration  29: 499571.842 ops/s
# Warmup Iteration  30: 499967.881 ops/s
Iteration   1: 499677.705 ops/s
Iteration   2: 500072.091 ops/s
Iteration   3: 501931.868 ops/s
Iteration   4: 501379.710 ops/s
Iteration   5: 499753.098 ops/s
Iteration   6: 500347.333 ops/s
Iteration   7: 497543.215 ops/s
Iteration   8: 498674.722 ops/s
Iteration   9: 500486.220 ops/s
Iteration  10: 500407.040 ops/s
Iteration  11: 497120.164 ops/s
Iteration  12: 499853.833 ops/s
Iteration  13: 500447.620 ops/s
Iteration  14: 496403.509 ops/s
Iteration  15: 498175.970 ops/s
Iteration  16: 497990.798 ops/s
Iteration  17: 498611.065 ops/s
Iteration  18: 500667.618 ops/s
Iteration  19: 500090.883 ops/s
Iteration  20: 495510.955 ops/s
Iteration  21: 500541.706 ops/s
Iteration  22: 502164.857 ops/s
Iteration  23: 499864.067 ops/s
Iteration  24: 500345.552 ops/s
Iteration  25: 499544.080 ops/s
Iteration  26: 494736.690 ops/s
Iteration  27: 497635.356 ops/s
Iteration  28: 499084.015 ops/s
Iteration  29: 497495.268 ops/s
Iteration  30: 500732.162 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_PROTO3":
  499242.972 ±(99.9%) 1206.341 ops/s [Average]
  (min, avg, max) = (494736.690, 499242.972, 502164.857), stdev = 1805.595
  CI (99.9%): [498036.631, 500449.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_errorSpanRoundTrip_PROTO3  thrpt   30  499242.972 ± 1206.341  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 354648.074 ops/s
# Warmup Iteration   2: 440740.753 ops/s
# Warmup Iteration   3: 813232.119 ops/s
# Warmup Iteration   4: 875403.781 ops/s
# Warmup Iteration   5: 872126.441 ops/s
# Warmup Iteration   6: 875768.088 ops/s
# Warmup Iteration   7: 877393.932 ops/s
# Warmup Iteration   8: 846521.756 ops/s
# Warmup Iteration   9: 661388.159 ops/s
# Warmup Iteration  10: 880736.956 ops/s
# Warmup Iteration  11: 882058.786 ops/s
# Warmup Iteration  12: 880061.525 ops/s
# Warmup Iteration  13: 878082.575 ops/s
# Warmup Iteration  14: 881431.410 ops/s
# Warmup Iteration  15: 882295.714 ops/s
# Warmup Iteration  16: 881388.558 ops/s
# Warmup Iteration  17: 884866.809 ops/s
# Warmup Iteration  18: 880049.520 ops/s
# Warmup Iteration  19: 883586.284 ops/s
# Warmup Iteration  20: 879896.990 ops/s
# Warmup Iteration  21: 882582.148 ops/s
# Warmup Iteration  22: 881991.587 ops/s
# Warmup Iteration  23: 878548.684 ops/s
# Warmup Iteration  24: 876659.011 ops/s
# Warmup Iteration  25: 883627.636 ops/s
# Warmup Iteration  26: 881174.979 ops/s
# Warmup Iteration  27: 882553.114 ops/s
# Warmup Iteration  28: 883697.281 ops/s
# Warmup Iteration  29: 881938.894 ops/s
# Warmup Iteration  30: 880447.228 ops/s
Iteration   1: 880059.304 ops/s
Iteration   2: 883909.664 ops/s
Iteration   3: 880624.817 ops/s
Iteration   4: 881121.572 ops/s
Iteration   5: 878717.481 ops/s
Iteration   6: 873843.533 ops/s
Iteration   7: 877381.950 ops/s
Iteration   8: 878619.182 ops/s
Iteration   9: 884030.605 ops/s
Iteration  10: 884653.501 ops/s
Iteration  11: 884342.177 ops/s
Iteration  12: 884924.814 ops/s
Iteration  13: 877287.148 ops/s
Iteration  14: 880271.600 ops/s
Iteration  15: 885055.236 ops/s
Iteration  16: 884490.675 ops/s
Iteration  17: 887153.442 ops/s
Iteration  18: 881541.132 ops/s
Iteration  19: 882673.355 ops/s
Iteration  20: 882143.926 ops/s
Iteration  21: 881302.628 ops/s
Iteration  22: 880965.887 ops/s
Iteration  23: 880824.964 ops/s
Iteration  24: 882983.990 ops/s
Iteration  25: 884326.275 ops/s
Iteration  26: 880699.874 ops/s
Iteration  27: 886485.463 ops/s
Iteration  28: 885075.051 ops/s
Iteration  29: 886214.900 ops/s
Iteration  30: 885753.407 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V2":
  882249.252 ±(99.9%) 2090.384 ops/s [Average]
  (min, avg, max) = (873843.533, 882249.252, 887153.442), stdev = 3128.789
  CI (99.9%): [880158.868, 884339.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V2  thrpt   30  882249.252 ± 2090.384  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 353313.452 ops/s
# Warmup Iteration   2: 442828.251 ops/s
# Warmup Iteration   3: 827590.828 ops/s
# Warmup Iteration   4: 880508.575 ops/s
# Warmup Iteration   5: 872942.329 ops/s
# Warmup Iteration   6: 891429.754 ops/s
# Warmup Iteration   7: 885484.357 ops/s
# Warmup Iteration   8: 822173.459 ops/s
# Warmup Iteration   9: 684716.953 ops/s
# Warmup Iteration  10: 889909.910 ops/s
# Warmup Iteration  11: 892393.790 ops/s
# Warmup Iteration  12: 891738.903 ops/s
# Warmup Iteration  13: 890146.134 ops/s
# Warmup Iteration  14: 891308.156 ops/s
# Warmup Iteration  15: 891378.882 ops/s
# Warmup Iteration  16: 892962.928 ops/s
# Warmup Iteration  17: 893662.985 ops/s
# Warmup Iteration  18: 894558.181 ops/s
# Warmup Iteration  19: 897747.068 ops/s
# Warmup Iteration  20: 894313.320 ops/s
# Warmup Iteration  21: 892137.794 ops/s
# Warmup Iteration  22: 892633.721 ops/s
# Warmup Iteration  23: 894232.776 ops/s
# Warmup Iteration  24: 891198.287 ops/s
# Warmup Iteration  25: 892933.470 ops/s
# Warmup Iteration  26: 894323.841 ops/s
# Warmup Iteration  27: 895121.096 ops/s
# Warmup Iteration  28: 894111.248 ops/s
# Warmup Iteration  29: 894809.025 ops/s
# Warmup Iteration  30: 895995.564 ops/s
Iteration   1: 896268.449 ops/s
Iteration   2: 891978.756 ops/s
Iteration   3: 894902.473 ops/s
Iteration   4: 894157.474 ops/s
Iteration   5: 893202.964 ops/s
Iteration   6: 896464.461 ops/s
Iteration   7: 891284.726 ops/s
Iteration   8: 895958.185 ops/s
Iteration   9: 898182.820 ops/s
Iteration  10: 894764.142 ops/s
Iteration  11: 891216.530 ops/s
Iteration  12: 886805.730 ops/s
Iteration  13: 894882.630 ops/s
Iteration  14: 894790.877 ops/s
Iteration  15: 893273.815 ops/s
Iteration  16: 889202.824 ops/s
Iteration  17: 883071.160 ops/s
Iteration  18: 895028.453 ops/s
Iteration  19: 891855.525 ops/s
Iteration  20: 895859.367 ops/s
Iteration  21: 896240.090 ops/s
Iteration  22: 889947.783 ops/s
Iteration  23: 897018.975 ops/s
Iteration  24: 891665.990 ops/s
Iteration  25: 890530.672 ops/s
Iteration  26: 894935.316 ops/s
Iteration  27: 889439.068 ops/s
Iteration  28: 890994.882 ops/s
Iteration  29: 893339.675 ops/s
Iteration  30: 891875.394 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_PROTO3":
  892971.307 ±(99.9%) 2187.980 ops/s [Average]
  (min, avg, max) = (883071.160, 892971.307, 898182.820), stdev = 3274.866
  CI (99.9%): [890783.327, 895159.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_PROTO3  thrpt   30  892971.307 ± 2187.980  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54827.493 ops/s
# Warmup Iteration   2: 115668.301 ops/s
# Warmup Iteration   3: 186515.359 ops/s
# Warmup Iteration   4: 189213.606 ops/s
# Warmup Iteration   5: 190627.092 ops/s
# Warmup Iteration   6: 145307.145 ops/s
# Warmup Iteration   7: 191749.621 ops/s
# Warmup Iteration   8: 191162.543 ops/s
# Warmup Iteration   9: 190807.402 ops/s
# Warmup Iteration  10: 191523.782 ops/s
# Warmup Iteration  11: 190444.282 ops/s
# Warmup Iteration  12: 192556.388 ops/s
# Warmup Iteration  13: 191232.529 ops/s
# Warmup Iteration  14: 192507.087 ops/s
# Warmup Iteration  15: 192648.852 ops/s
# Warmup Iteration  16: 192656.970 ops/s
# Warmup Iteration  17: 190532.229 ops/s
# Warmup Iteration  18: 192906.431 ops/s
# Warmup Iteration  19: 192158.586 ops/s
# Warmup Iteration  20: 190689.641 ops/s
# Warmup Iteration  21: 192103.911 ops/s
# Warmup Iteration  22: 191647.673 ops/s
# Warmup Iteration  23: 190932.393 ops/s
# Warmup Iteration  24: 191392.349 ops/s
# Warmup Iteration  25: 191193.969 ops/s
# Warmup Iteration  26: 191819.672 ops/s
# Warmup Iteration  27: 191300.762 ops/s
# Warmup Iteration  28: 190610.471 ops/s
# Warmup Iteration  29: 190347.837 ops/s
# Warmup Iteration  30: 191757.365 ops/s
Iteration   1: 191581.168 ops/s
Iteration   2: 192432.949 ops/s
Iteration   3: 191570.842 ops/s
Iteration   4: 192389.840 ops/s
Iteration   5: 190316.516 ops/s
Iteration   6: 191510.002 ops/s
Iteration   7: 192039.021 ops/s
Iteration   8: 191500.839 ops/s
Iteration   9: 191907.866 ops/s
Iteration  10: 191996.036 ops/s
Iteration  11: 190836.107 ops/s
Iteration  12: 191674.397 ops/s
Iteration  13: 190231.628 ops/s
Iteration  14: 190086.444 ops/s
Iteration  15: 191582.592 ops/s
Iteration  16: 190898.711 ops/s
Iteration  17: 190212.158 ops/s
Iteration  18: 191211.275 ops/s
Iteration  19: 193461.818 ops/s
Iteration  20: 191375.664 ops/s
Iteration  21: 192128.264 ops/s
Iteration  22: 191091.189 ops/s
Iteration  23: 193750.009 ops/s
Iteration  24: 192225.054 ops/s
Iteration  25: 191891.461 ops/s
Iteration  26: 192910.729 ops/s
Iteration  27: 191615.723 ops/s
Iteration  28: 192554.000 ops/s
Iteration  29: 191412.002 ops/s
Iteration  30: 192132.232 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields":
  191684.218 ±(99.9%) 590.286 ops/s [Average]
  (min, avg, max) = (190086.444, 191684.218, 193750.009), stdev = 883.512
  CI (99.9%): [191093.932, 192274.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields  thrpt   30  191684.218 ± 590.286  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63420.187 ops/s
# Warmup Iteration   2: 127571.508 ops/s
# Warmup Iteration   3: 186241.722 ops/s
# Warmup Iteration   4: 187347.192 ops/s
# Warmup Iteration   5: 180693.666 ops/s
# Warmup Iteration   6: 151191.435 ops/s
# Warmup Iteration   7: 189404.719 ops/s
# Warmup Iteration   8: 188434.212 ops/s
# Warmup Iteration   9: 191408.938 ops/s
# Warmup Iteration  10: 190451.288 ops/s
# Warmup Iteration  11: 191119.244 ops/s
# Warmup Iteration  12: 190683.955 ops/s
# Warmup Iteration  13: 190566.963 ops/s
# Warmup Iteration  14: 191026.074 ops/s
# Warmup Iteration  15: 190426.886 ops/s
# Warmup Iteration  16: 191127.916 ops/s
# Warmup Iteration  17: 190248.197 ops/s
# Warmup Iteration  18: 190231.275 ops/s
# Warmup Iteration  19: 189876.067 ops/s
# Warmup Iteration  20: 189494.128 ops/s
# Warmup Iteration  21: 189996.053 ops/s
# Warmup Iteration  22: 190766.806 ops/s
# Warmup Iteration  23: 189737.588 ops/s
# Warmup Iteration  24: 189881.466 ops/s
# Warmup Iteration  25: 190324.581 ops/s
# Warmup Iteration  26: 191768.946 ops/s
# Warmup Iteration  27: 188736.100 ops/s
# Warmup Iteration  28: 189658.310 ops/s
# Warmup Iteration  29: 191415.519 ops/s
# Warmup Iteration  30: 189528.823 ops/s
Iteration   1: 192052.291 ops/s
Iteration   2: 192379.475 ops/s
Iteration   3: 190459.284 ops/s
Iteration   4: 190588.261 ops/s
Iteration   5: 193320.279 ops/s
Iteration   6: 191591.783 ops/s
Iteration   7: 189739.420 ops/s
Iteration   8: 190378.681 ops/s
Iteration   9: 189989.574 ops/s
Iteration  10: 189840.302 ops/s
Iteration  11: 191967.788 ops/s
Iteration  12: 188619.773 ops/s
Iteration  13: 189162.355 ops/s
Iteration  14: 188363.724 ops/s
Iteration  15: 189299.960 ops/s
Iteration  16: 190659.432 ops/s
Iteration  17: 191894.012 ops/s
Iteration  18: 190877.088 ops/s
Iteration  19: 191814.839 ops/s
Iteration  20: 192381.468 ops/s
Iteration  21: 190643.538 ops/s
Iteration  22: 189860.901 ops/s
Iteration  23: 189451.136 ops/s
Iteration  24: 190017.298 ops/s
Iteration  25: 190998.845 ops/s
Iteration  26: 192007.930 ops/s
Iteration  27: 191448.230 ops/s
Iteration  28: 189563.055 ops/s
Iteration  29: 188156.834 ops/s
Iteration  30: 189207.288 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields":
  190557.828 ±(99.9%) 880.531 ops/s [Average]
  (min, avg, max) = (188156.834, 190557.828, 193320.279), stdev = 1317.937
  CI (99.9%): [189677.297, 191438.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields  thrpt   30  190557.828 ± 880.531  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50890.901 ops/s
# Warmup Iteration   2: 102035.975 ops/s
# Warmup Iteration   3: 175585.565 ops/s
# Warmup Iteration   4: 178004.521 ops/s
# Warmup Iteration   5: 178112.496 ops/s
# Warmup Iteration   6: 136225.257 ops/s
# Warmup Iteration   7: 181355.882 ops/s
# Warmup Iteration   8: 180974.625 ops/s
# Warmup Iteration   9: 178677.504 ops/s
# Warmup Iteration  10: 180364.992 ops/s
# Warmup Iteration  11: 181342.101 ops/s
# Warmup Iteration  12: 181149.929 ops/s
# Warmup Iteration  13: 181473.658 ops/s
# Warmup Iteration  14: 179859.411 ops/s
# Warmup Iteration  15: 180235.450 ops/s
# Warmup Iteration  16: 180669.799 ops/s
# Warmup Iteration  17: 180712.422 ops/s
# Warmup Iteration  18: 178798.428 ops/s
# Warmup Iteration  19: 180085.056 ops/s
# Warmup Iteration  20: 179849.883 ops/s
# Warmup Iteration  21: 179320.945 ops/s
# Warmup Iteration  22: 178732.058 ops/s
# Warmup Iteration  23: 179365.414 ops/s
# Warmup Iteration  24: 180315.928 ops/s
# Warmup Iteration  25: 179344.548 ops/s
# Warmup Iteration  26: 179991.727 ops/s
# Warmup Iteration  27: 179972.875 ops/s
# Warmup Iteration  28: 180109.646 ops/s
# Warmup Iteration  29: 181678.677 ops/s
# Warmup Iteration  30: 179550.479 ops/s
Iteration   1: 179996.574 ops/s
Iteration   2: 181065.861 ops/s
Iteration   3: 182181.319 ops/s
Iteration   4: 181032.372 ops/s
Iteration   5: 180857.410 ops/s
Iteration   6: 179266.677 ops/s
Iteration   7: 178987.464 ops/s
Iteration   8: 179811.937 ops/s
Iteration   9: 181333.931 ops/s
Iteration  10: 181540.360 ops/s
Iteration  11: 181775.224 ops/s
Iteration  12: 180713.581 ops/s
Iteration  13: 181722.628 ops/s
Iteration  14: 181190.700 ops/s
Iteration  15: 180533.773 ops/s
Iteration  16: 181893.702 ops/s
Iteration  17: 180754.031 ops/s
Iteration  18: 181211.099 ops/s
Iteration  19: 180418.126 ops/s
Iteration  20: 181447.867 ops/s
Iteration  21: 181554.633 ops/s
Iteration  22: 181375.075 ops/s
Iteration  23: 181668.937 ops/s
Iteration  24: 181601.119 ops/s
Iteration  25: 179567.494 ops/s
Iteration  26: 181509.923 ops/s
Iteration  27: 181431.038 ops/s
Iteration  28: 182157.220 ops/s
Iteration  29: 181463.904 ops/s
Iteration  30: 181021.119 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V2":
  181036.170 ±(99.9%) 547.440 ops/s [Average]
  (min, avg, max) = (178987.464, 181036.170, 182181.319), stdev = 819.382
  CI (99.9%): [180488.730, 181583.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V2  thrpt   30  181036.170 ± 547.440  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 190994.454 ops/s
# Warmup Iteration   2: 269329.025 ops/s
# Warmup Iteration   3: 356548.271 ops/s
# Warmup Iteration   4: 457656.528 ops/s
# Warmup Iteration   5: 465687.951 ops/s
# Warmup Iteration   6: 456407.002 ops/s
# Warmup Iteration   7: 462066.621 ops/s
# Warmup Iteration   8: 462652.260 ops/s
# Warmup Iteration   9: 466139.031 ops/s
# Warmup Iteration  10: 460141.507 ops/s
# Warmup Iteration  11: 362382.153 ops/s
# Warmup Iteration  12: 430858.454 ops/s
# Warmup Iteration  13: 464676.530 ops/s
# Warmup Iteration  14: 467084.665 ops/s
# Warmup Iteration  15: 465997.064 ops/s
# Warmup Iteration  16: 466452.576 ops/s
# Warmup Iteration  17: 474837.749 ops/s
# Warmup Iteration  18: 471941.869 ops/s
# Warmup Iteration  19: 472443.381 ops/s
# Warmup Iteration  20: 472823.805 ops/s
# Warmup Iteration  21: 472994.444 ops/s
# Warmup Iteration  22: 473202.834 ops/s
# Warmup Iteration  23: 473179.648 ops/s
# Warmup Iteration  24: 472321.378 ops/s
# Warmup Iteration  25: 473310.155 ops/s
# Warmup Iteration  26: 473901.721 ops/s
# Warmup Iteration  27: 471623.713 ops/s
# Warmup Iteration  28: 473627.592 ops/s
# Warmup Iteration  29: 473218.634 ops/s
# Warmup Iteration  30: 474776.873 ops/s
Iteration   1: 473084.682 ops/s
Iteration   2: 472758.154 ops/s
Iteration   3: 474742.367 ops/s
Iteration   4: 473179.084 ops/s
Iteration   5: 472477.993 ops/s
Iteration   6: 473880.542 ops/s
Iteration   7: 473484.501 ops/s
Iteration   8: 472277.840 ops/s
Iteration   9: 473113.554 ops/s
Iteration  10: 474732.386 ops/s
Iteration  11: 473013.746 ops/s
Iteration  12: 473373.619 ops/s
Iteration  13: 473258.251 ops/s
Iteration  14: 475096.229 ops/s
Iteration  15: 473570.610 ops/s
Iteration  16: 473928.293 ops/s
Iteration  17: 472331.681 ops/s
Iteration  18: 472336.558 ops/s
Iteration  19: 474487.585 ops/s
Iteration  20: 474615.183 ops/s
Iteration  21: 473289.178 ops/s
Iteration  22: 474181.584 ops/s
Iteration  23: 474674.877 ops/s
Iteration  24: 470916.846 ops/s
Iteration  25: 472630.354 ops/s
Iteration  26: 473973.840 ops/s
Iteration  27: 473116.822 ops/s
Iteration  28: 473689.786 ops/s
Iteration  29: 474635.522 ops/s
Iteration  30: 474590.522 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_PROTO3":
  473514.740 ±(99.9%) 643.506 ops/s [Average]
  (min, avg, max) = (470916.846, 473514.740, 475096.229), stdev = 963.170
  CI (99.9%): [472871.234, 474158.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_PROTO3  thrpt   30  473514.740 ± 643.506  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31301.872 ops/s
# Warmup Iteration   2: 43408.328 ops/s
# Warmup Iteration   3: 81477.069 ops/s
# Warmup Iteration   4: 85066.910 ops/s
# Warmup Iteration   5: 86007.398 ops/s
# Warmup Iteration   6: 85919.225 ops/s
# Warmup Iteration   7: 86279.278 ops/s
# Warmup Iteration   8: 71687.261 ops/s
# Warmup Iteration   9: 77736.722 ops/s
# Warmup Iteration  10: 85868.317 ops/s
# Warmup Iteration  11: 86564.186 ops/s
# Warmup Iteration  12: 86552.020 ops/s
# Warmup Iteration  13: 85360.157 ops/s
# Warmup Iteration  14: 86499.461 ops/s
# Warmup Iteration  15: 86690.617 ops/s
# Warmup Iteration  16: 85897.366 ops/s
# Warmup Iteration  17: 88077.096 ops/s
# Warmup Iteration  18: 87847.876 ops/s
# Warmup Iteration  19: 87563.272 ops/s
# Warmup Iteration  20: 87859.350 ops/s
# Warmup Iteration  21: 87445.353 ops/s
# Warmup Iteration  22: 87351.378 ops/s
# Warmup Iteration  23: 87248.128 ops/s
# Warmup Iteration  24: 86998.125 ops/s
# Warmup Iteration  25: 87621.870 ops/s
# Warmup Iteration  26: 88336.076 ops/s
# Warmup Iteration  27: 88428.119 ops/s
# Warmup Iteration  28: 88140.981 ops/s
# Warmup Iteration  29: 87804.301 ops/s
# Warmup Iteration  30: 87455.261 ops/s
Iteration   1: 88117.470 ops/s
Iteration   2: 87882.881 ops/s
Iteration   3: 87596.559 ops/s
Iteration   4: 87767.668 ops/s
Iteration   5: 87151.489 ops/s
Iteration   6: 87849.670 ops/s
Iteration   7: 87730.448 ops/s
Iteration   8: 86848.661 ops/s
Iteration   9: 87027.804 ops/s
Iteration  10: 86286.220 ops/s
Iteration  11: 87748.162 ops/s
Iteration  12: 86901.979 ops/s
Iteration  13: 87574.222 ops/s
Iteration  14: 86366.311 ops/s
Iteration  15: 86980.811 ops/s
Iteration  16: 87038.253 ops/s
Iteration  17: 86717.309 ops/s
Iteration  18: 87847.766 ops/s
Iteration  19: 88045.040 ops/s
Iteration  20: 87998.916 ops/s
Iteration  21: 88060.710 ops/s
Iteration  22: 87961.359 ops/s
Iteration  23: 87411.846 ops/s
Iteration  24: 86954.075 ops/s
Iteration  25: 86976.103 ops/s
Iteration  26: 87450.050 ops/s
Iteration  27: 86861.416 ops/s
Iteration  28: 86975.265 ops/s
Iteration  29: 87360.165 ops/s
Iteration  30: 87757.427 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation":
  87374.869 ±(99.9%) 348.879 ops/s [Average]
  (min, avg, max) = (86286.220, 87374.869, 88117.470), stdev = 522.186
  CI (99.9%): [87025.990, 87723.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation  thrpt   30  87374.869 ± 348.879  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35859.757 ops/s
# Warmup Iteration   2: 46588.445 ops/s
# Warmup Iteration   3: 92289.780 ops/s
# Warmup Iteration   4: 95185.562 ops/s
# Warmup Iteration   5: 94769.529 ops/s
# Warmup Iteration   6: 94365.677 ops/s
# Warmup Iteration   7: 94302.573 ops/s
# Warmup Iteration   8: 69207.600 ops/s
# Warmup Iteration   9: 95257.037 ops/s
# Warmup Iteration  10: 95306.636 ops/s
# Warmup Iteration  11: 94717.035 ops/s
# Warmup Iteration  12: 93491.209 ops/s
# Warmup Iteration  13: 95149.485 ops/s
# Warmup Iteration  14: 94974.524 ops/s
# Warmup Iteration  15: 94330.685 ops/s
# Warmup Iteration  16: 93729.711 ops/s
# Warmup Iteration  17: 95765.632 ops/s
# Warmup Iteration  18: 97070.828 ops/s
# Warmup Iteration  19: 96746.279 ops/s
# Warmup Iteration  20: 96358.797 ops/s
# Warmup Iteration  21: 96900.767 ops/s
# Warmup Iteration  22: 96376.893 ops/s
# Warmup Iteration  23: 96559.439 ops/s
# Warmup Iteration  24: 96187.687 ops/s
# Warmup Iteration  25: 96064.761 ops/s
# Warmup Iteration  26: 96798.346 ops/s
# Warmup Iteration  27: 95677.843 ops/s
# Warmup Iteration  28: 95406.685 ops/s
# Warmup Iteration  29: 96428.079 ops/s
# Warmup Iteration  30: 96484.010 ops/s
Iteration   1: 96710.863 ops/s
Iteration   2: 97227.223 ops/s
Iteration   3: 97742.028 ops/s
Iteration   4: 97485.840 ops/s
Iteration   5: 97406.024 ops/s
Iteration   6: 97136.760 ops/s
Iteration   7: 96073.463 ops/s
Iteration   8: 97031.820 ops/s
Iteration   9: 97257.579 ops/s
Iteration  10: 95598.995 ops/s
Iteration  11: 95881.325 ops/s
Iteration  12: 95270.776 ops/s
Iteration  13: 96670.339 ops/s
Iteration  14: 96302.108 ops/s
Iteration  15: 97301.564 ops/s
Iteration  16: 97215.860 ops/s
Iteration  17: 97706.470 ops/s
Iteration  18: 97394.982 ops/s
Iteration  19: 97402.439 ops/s
Iteration  20: 97254.215 ops/s
Iteration  21: 97505.380 ops/s
Iteration  22: 97503.840 ops/s
Iteration  23: 97314.400 ops/s
Iteration  24: 97050.786 ops/s
Iteration  25: 96686.364 ops/s
Iteration  26: 96899.777 ops/s
Iteration  27: 96571.655 ops/s
Iteration  28: 96477.668 ops/s
Iteration  29: 97204.020 ops/s
Iteration  30: 96511.761 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V2":
  96926.544 ±(99.9%) 414.167 ops/s [Average]
  (min, avg, max) = (95270.776, 96926.544, 97742.028), stdev = 619.906
  CI (99.9%): [96512.377, 97340.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V2  thrpt   30  96926.544 ± 414.167  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61563.107 ops/s
# Warmup Iteration   2: 78475.016 ops/s
# Warmup Iteration   3: 78053.179 ops/s
# Warmup Iteration   4: 132610.292 ops/s
# Warmup Iteration   5: 131368.073 ops/s
# Warmup Iteration   6: 132921.119 ops/s
# Warmup Iteration   7: 131572.374 ops/s
# Warmup Iteration   8: 131583.255 ops/s
# Warmup Iteration   9: 132014.475 ops/s
# Warmup Iteration  10: 130854.262 ops/s
# Warmup Iteration  11: 131238.664 ops/s
# Warmup Iteration  12: 130699.124 ops/s
# Warmup Iteration  13: 132917.568 ops/s
# Warmup Iteration  14: 87267.025 ops/s
# Warmup Iteration  15: 132293.333 ops/s
# Warmup Iteration  16: 131735.136 ops/s
# Warmup Iteration  17: 133795.315 ops/s
# Warmup Iteration  18: 135230.282 ops/s
# Warmup Iteration  19: 134433.892 ops/s
# Warmup Iteration  20: 133788.483 ops/s
# Warmup Iteration  21: 133650.671 ops/s
# Warmup Iteration  22: 133807.693 ops/s
# Warmup Iteration  23: 134443.932 ops/s
# Warmup Iteration  24: 134687.864 ops/s
# Warmup Iteration  25: 133415.421 ops/s
# Warmup Iteration  26: 133464.621 ops/s
# Warmup Iteration  27: 133971.446 ops/s
# Warmup Iteration  28: 134931.686 ops/s
# Warmup Iteration  29: 134982.430 ops/s
# Warmup Iteration  30: 134774.323 ops/s
Iteration   1: 135071.312 ops/s
Iteration   2: 134689.415 ops/s
Iteration   3: 134584.546 ops/s
Iteration   4: 134622.421 ops/s
Iteration   5: 134585.055 ops/s
Iteration   6: 134960.715 ops/s
Iteration   7: 134882.341 ops/s
Iteration   8: 135376.907 ops/s
Iteration   9: 135123.742 ops/s
Iteration  10: 133545.044 ops/s
Iteration  11: 133650.908 ops/s
Iteration  12: 134149.512 ops/s
Iteration  13: 135285.348 ops/s
Iteration  14: 134632.425 ops/s
Iteration  15: 134071.872 ops/s
Iteration  16: 133545.889 ops/s
Iteration  17: 134965.537 ops/s
Iteration  18: 135636.857 ops/s
Iteration  19: 135029.184 ops/s
Iteration  20: 134689.982 ops/s
Iteration  21: 133867.972 ops/s
Iteration  22: 134490.420 ops/s
Iteration  23: 135077.950 ops/s
Iteration  24: 134015.429 ops/s
Iteration  25: 133761.903 ops/s
Iteration  26: 134680.785 ops/s
Iteration  27: 134723.447 ops/s
Iteration  28: 134780.970 ops/s
Iteration  29: 134019.236 ops/s
Iteration  30: 133843.106 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_PROTO3":
  134545.341 ±(99.9%) 382.250 ops/s [Average]
  (min, avg, max) = (133545.044, 134545.341, 135636.857), stdev = 572.134
  CI (99.9%): [134163.091, 134927.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_PROTO3  thrpt   30  134545.341 ± 382.250  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30499.206 ops/s
# Warmup Iteration   2: 40259.816 ops/s
# Warmup Iteration   3: 75387.941 ops/s
# Warmup Iteration   4: 77823.667 ops/s
# Warmup Iteration   5: 77786.446 ops/s
# Warmup Iteration   6: 79443.546 ops/s
# Warmup Iteration   7: 81124.065 ops/s
# Warmup Iteration   8: 76636.610 ops/s
# Warmup Iteration   9: 62614.277 ops/s
# Warmup Iteration  10: 80899.146 ops/s
# Warmup Iteration  11: 80975.119 ops/s
# Warmup Iteration  12: 81294.557 ops/s
# Warmup Iteration  13: 81387.949 ops/s
# Warmup Iteration  14: 81741.205 ops/s
# Warmup Iteration  15: 81725.742 ops/s
# Warmup Iteration  16: 81416.965 ops/s
# Warmup Iteration  17: 82154.541 ops/s
# Warmup Iteration  18: 83395.453 ops/s
# Warmup Iteration  19: 82831.223 ops/s
# Warmup Iteration  20: 83370.938 ops/s
# Warmup Iteration  21: 83332.950 ops/s
# Warmup Iteration  22: 83373.588 ops/s
# Warmup Iteration  23: 82847.924 ops/s
# Warmup Iteration  24: 82754.280 ops/s
# Warmup Iteration  25: 82195.121 ops/s
# Warmup Iteration  26: 82896.646 ops/s
# Warmup Iteration  27: 83066.292 ops/s
# Warmup Iteration  28: 81899.812 ops/s
# Warmup Iteration  29: 82723.145 ops/s
# Warmup Iteration  30: 82646.266 ops/s
Iteration   1: 81661.277 ops/s
Iteration   2: 81959.701 ops/s
Iteration   3: 82475.761 ops/s
Iteration   4: 82457.012 ops/s
Iteration   5: 83568.900 ops/s
Iteration   6: 82890.581 ops/s
Iteration   7: 83644.576 ops/s
Iteration   8: 82709.469 ops/s
Iteration   9: 82721.175 ops/s
Iteration  10: 81544.910 ops/s
Iteration  11: 83014.958 ops/s
Iteration  12: 83432.044 ops/s
Iteration  13: 83503.869 ops/s
Iteration  14: 83214.417 ops/s
Iteration  15: 83460.925 ops/s
Iteration  16: 82710.410 ops/s
Iteration  17: 81974.401 ops/s
Iteration  18: 82497.240 ops/s
Iteration  19: 83342.981 ops/s
Iteration  20: 82855.121 ops/s
Iteration  21: 82061.124 ops/s
Iteration  22: 82087.295 ops/s
Iteration  23: 82531.934 ops/s
Iteration  24: 82463.431 ops/s
Iteration  25: 82197.127 ops/s
Iteration  26: 81060.621 ops/s
Iteration  27: 83118.926 ops/s
Iteration  28: 82722.009 ops/s
Iteration  29: 82900.656 ops/s
Iteration  30: 83064.800 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp":
  82661.588 ±(99.9%) 429.740 ops/s [Average]
  (min, avg, max) = (81060.621, 82661.588, 83644.576), stdev = 643.215
  CI (99.9%): [82231.848, 83091.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp  thrpt   30  82661.588 ± 429.740  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31443.719 ops/s
# Warmup Iteration   2: 40800.278 ops/s
# Warmup Iteration   3: 74164.527 ops/s
# Warmup Iteration   4: 79421.872 ops/s
# Warmup Iteration   5: 80389.359 ops/s
# Warmup Iteration   6: 79839.839 ops/s
# Warmup Iteration   7: 79094.120 ops/s
# Warmup Iteration   8: 73145.006 ops/s
# Warmup Iteration   9: 64259.201 ops/s
# Warmup Iteration  10: 80166.550 ops/s
# Warmup Iteration  11: 79271.278 ops/s
# Warmup Iteration  12: 79519.296 ops/s
# Warmup Iteration  13: 79295.633 ops/s
# Warmup Iteration  14: 80191.066 ops/s
# Warmup Iteration  15: 79484.212 ops/s
# Warmup Iteration  16: 78657.827 ops/s
# Warmup Iteration  17: 80218.147 ops/s
# Warmup Iteration  18: 79360.897 ops/s
# Warmup Iteration  19: 80300.846 ops/s
# Warmup Iteration  20: 80800.828 ops/s
# Warmup Iteration  21: 79880.353 ops/s
# Warmup Iteration  22: 80434.422 ops/s
# Warmup Iteration  23: 80833.651 ops/s
# Warmup Iteration  24: 80572.403 ops/s
# Warmup Iteration  25: 79975.029 ops/s
# Warmup Iteration  26: 80144.627 ops/s
# Warmup Iteration  27: 79155.453 ops/s
# Warmup Iteration  28: 80329.851 ops/s
# Warmup Iteration  29: 80300.915 ops/s
# Warmup Iteration  30: 79388.219 ops/s
Iteration   1: 80342.889 ops/s
Iteration   2: 79142.811 ops/s
Iteration   3: 79464.547 ops/s
Iteration   4: 79131.758 ops/s
Iteration   5: 80996.520 ops/s
Iteration   6: 79462.322 ops/s
Iteration   7: 80824.381 ops/s
Iteration   8: 79532.846 ops/s
Iteration   9: 79831.069 ops/s
Iteration  10: 79726.685 ops/s
Iteration  11: 80509.061 ops/s
Iteration  12: 80728.791 ops/s
Iteration  13: 80296.263 ops/s
Iteration  14: 79445.377 ops/s
Iteration  15: 80928.733 ops/s
Iteration  16: 81191.421 ops/s
Iteration  17: 80205.554 ops/s
Iteration  18: 80442.994 ops/s
Iteration  19: 80033.871 ops/s
Iteration  20: 80045.589 ops/s
Iteration  21: 79137.569 ops/s
Iteration  22: 79907.979 ops/s
Iteration  23: 80008.454 ops/s
Iteration  24: 79907.794 ops/s
Iteration  25: 79915.812 ops/s
Iteration  26: 80235.692 ops/s
Iteration  27: 80238.906 ops/s
Iteration  28: 79561.703 ops/s
Iteration  29: 79674.582 ops/s
Iteration  30: 79859.593 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue":
  80024.386 ±(99.9%) 373.558 ops/s [Average]
  (min, avg, max) = (79131.758, 80024.386, 81191.421), stdev = 559.123
  CI (99.9%): [79650.828, 80397.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue  thrpt   30  80024.386 ± 373.558  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32145.086 ops/s
# Warmup Iteration   2: 42430.540 ops/s
# Warmup Iteration   3: 79784.192 ops/s
# Warmup Iteration   4: 86027.249 ops/s
# Warmup Iteration   5: 86628.713 ops/s
# Warmup Iteration   6: 87880.323 ops/s
# Warmup Iteration   7: 87385.579 ops/s
# Warmup Iteration   8: 75515.196 ops/s
# Warmup Iteration   9: 76947.518 ops/s
# Warmup Iteration  10: 89509.556 ops/s
# Warmup Iteration  11: 89087.584 ops/s
# Warmup Iteration  12: 89880.299 ops/s
# Warmup Iteration  13: 89516.748 ops/s
# Warmup Iteration  14: 89268.486 ops/s
# Warmup Iteration  15: 89245.861 ops/s
# Warmup Iteration  16: 89625.067 ops/s
# Warmup Iteration  17: 92109.302 ops/s
# Warmup Iteration  18: 91891.648 ops/s
# Warmup Iteration  19: 91728.850 ops/s
# Warmup Iteration  20: 91911.929 ops/s
# Warmup Iteration  21: 92175.455 ops/s
# Warmup Iteration  22: 91082.004 ops/s
# Warmup Iteration  23: 90955.557 ops/s
# Warmup Iteration  24: 92015.790 ops/s
# Warmup Iteration  25: 90986.909 ops/s
# Warmup Iteration  26: 90453.576 ops/s
# Warmup Iteration  27: 91032.028 ops/s
# Warmup Iteration  28: 91096.777 ops/s
# Warmup Iteration  29: 90846.397 ops/s
# Warmup Iteration  30: 90500.957 ops/s
Iteration   1: 91521.571 ops/s
Iteration   2: 90600.648 ops/s
Iteration   3: 91264.441 ops/s
Iteration   4: 89122.404 ops/s
Iteration   5: 91562.330 ops/s
Iteration   6: 90719.150 ops/s
Iteration   7: 91271.311 ops/s
Iteration   8: 91337.468 ops/s
Iteration   9: 90719.957 ops/s
Iteration  10: 91380.138 ops/s
Iteration  11: 91238.373 ops/s
Iteration  12: 91530.821 ops/s
Iteration  13: 90703.416 ops/s
Iteration  14: 91282.086 ops/s
Iteration  15: 91411.234 ops/s
Iteration  16: 90778.239 ops/s
Iteration  17: 90709.111 ops/s
Iteration  18: 91085.554 ops/s
Iteration  19: 91544.165 ops/s
Iteration  20: 91670.933 ops/s
Iteration  21: 91776.033 ops/s
Iteration  22: 91412.248 ops/s
Iteration  23: 91305.915 ops/s
Iteration  24: 90364.510 ops/s
Iteration  25: 90940.072 ops/s
Iteration  26: 91528.759 ops/s
Iteration  27: 92040.765 ops/s
Iteration  28: 91515.851 ops/s
Iteration  29: 91607.823 ops/s
Iteration  30: 91571.425 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id":
  91183.892 ±(99.9%) 371.752 ops/s [Average]
  (min, avg, max) = (89122.404, 91183.892, 92040.765), stdev = 556.421
  CI (99.9%): [90812.140, 91555.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id  thrpt   30  91183.892 ± 371.752  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_tagValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_tagValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32963.452 ops/s
# Warmup Iteration   2: 43706.698 ops/s
# Warmup Iteration   3: 81749.073 ops/s
# Warmup Iteration   4: 84881.572 ops/s
# Warmup Iteration   5: 87559.399 ops/s
# Warmup Iteration   6: 86909.290 ops/s
# Warmup Iteration   7: 87123.669 ops/s
# Warmup Iteration   8: 78263.720 ops/s
# Warmup Iteration   9: 72491.574 ops/s
# Warmup Iteration  10: 86230.121 ops/s
# Warmup Iteration  11: 86578.038 ops/s
# Warmup Iteration  12: 86158.386 ops/s
# Warmup Iteration  13: 86837.349 ops/s
# Warmup Iteration  14: 85263.136 ops/s
# Warmup Iteration  15: 86086.522 ops/s
# Warmup Iteration  16: 86811.715 ops/s
# Warmup Iteration  17: 88825.004 ops/s
# Warmup Iteration  18: 87566.015 ops/s
# Warmup Iteration  19: 87551.057 ops/s
# Warmup Iteration  20: 88166.993 ops/s
# Warmup Iteration  21: 87153.151 ops/s
# Warmup Iteration  22: 87633.423 ops/s
# Warmup Iteration  23: 87167.932 ops/s
# Warmup Iteration  24: 87730.216 ops/s
# Warmup Iteration  25: 87055.210 ops/s
# Warmup Iteration  26: 87753.086 ops/s
# Warmup Iteration  27: 88375.636 ops/s
# Warmup Iteration  28: 88507.145 ops/s
# Warmup Iteration  29: 87731.837 ops/s
# Warmup Iteration  30: 87361.803 ops/s
Iteration   1: 86905.649 ops/s
Iteration   2: 87780.878 ops/s
Iteration   3: 87211.433 ops/s
Iteration   4: 87880.207 ops/s
Iteration   5: 88338.271 ops/s
Iteration   6: 88123.733 ops/s
Iteration   7: 86676.931 ops/s
Iteration   8: 88825.050 ops/s
Iteration   9: 87458.109 ops/s
Iteration  10: 87661.271 ops/s
Iteration  11: 88385.231 ops/s
Iteration  12: 86855.818 ops/s
Iteration  13: 86648.185 ops/s
Iteration  14: 87348.165 ops/s
Iteration  15: 86651.101 ops/s
Iteration  16: 87720.696 ops/s
Iteration  17: 87429.621 ops/s
Iteration  18: 88444.771 ops/s
Iteration  19: 87935.097 ops/s
Iteration  20: 88055.340 ops/s
Iteration  21: 87727.430 ops/s
Iteration  22: 87621.696 ops/s
Iteration  23: 85954.734 ops/s
Iteration  24: 87402.801 ops/s
Iteration  25: 88425.836 ops/s
Iteration  26: 88130.474 ops/s
Iteration  27: 88241.124 ops/s
Iteration  28: 88316.719 ops/s
Iteration  29: 88167.263 ops/s
Iteration  30: 88109.436 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_tagValue":
  87681.102 ±(99.9%) 448.905 ops/s [Average]
  (min, avg, max) = (85954.734, 87681.102, 88825.050), stdev = 671.900
  CI (99.9%): [87232.198, 88130.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_tagValue  thrpt   30  87681.102 ± 448.905  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34591.865 ops/s
# Warmup Iteration   2: 45300.789 ops/s
# Warmup Iteration   3: 89264.435 ops/s
# Warmup Iteration   4: 88872.408 ops/s
# Warmup Iteration   5: 89113.492 ops/s
# Warmup Iteration   6: 89776.520 ops/s
# Warmup Iteration   7: 88004.643 ops/s
# Warmup Iteration   8: 64682.392 ops/s
# Warmup Iteration   9: 89855.369 ops/s
# Warmup Iteration  10: 88884.282 ops/s
# Warmup Iteration  11: 89824.560 ops/s
# Warmup Iteration  12: 89296.763 ops/s
# Warmup Iteration  13: 89665.386 ops/s
# Warmup Iteration  14: 89681.454 ops/s
# Warmup Iteration  15: 89472.975 ops/s
# Warmup Iteration  16: 88186.495 ops/s
# Warmup Iteration  17: 88660.058 ops/s
# Warmup Iteration  18: 90013.044 ops/s
# Warmup Iteration  19: 90369.490 ops/s
# Warmup Iteration  20: 89557.024 ops/s
# Warmup Iteration  21: 90566.344 ops/s
# Warmup Iteration  22: 90444.750 ops/s
# Warmup Iteration  23: 89715.417 ops/s
# Warmup Iteration  24: 89645.514 ops/s
# Warmup Iteration  25: 89833.602 ops/s
# Warmup Iteration  26: 90159.892 ops/s
# Warmup Iteration  27: 89964.720 ops/s
# Warmup Iteration  28: 89564.882 ops/s
# Warmup Iteration  29: 89675.468 ops/s
# Warmup Iteration  30: 89219.561 ops/s
Iteration   1: 88918.196 ops/s
Iteration   2: 88620.693 ops/s
Iteration   3: 88518.625 ops/s
Iteration   4: 88669.073 ops/s
Iteration   5: 90853.104 ops/s
Iteration   6: 90829.225 ops/s
Iteration   7: 90371.716 ops/s
Iteration   8: 89194.924 ops/s
Iteration   9: 88443.546 ops/s
Iteration  10: 89515.155 ops/s
Iteration  11: 89627.182 ops/s
Iteration  12: 88082.844 ops/s
Iteration  13: 88540.446 ops/s
Iteration  14: 88635.400 ops/s
Iteration  15: 90664.828 ops/s
Iteration  16: 89609.809 ops/s
Iteration  17: 90305.209 ops/s
Iteration  18: 89799.757 ops/s
Iteration  19: 90392.746 ops/s
Iteration  20: 89519.485 ops/s
Iteration  21: 89916.011 ops/s
Iteration  22: 89744.852 ops/s
Iteration  23: 88812.537 ops/s
Iteration  24: 89458.859 ops/s
Iteration  25: 89397.757 ops/s
Iteration  26: 90158.519 ops/s
Iteration  27: 90362.361 ops/s
Iteration  28: 90198.145 ops/s
Iteration  29: 89399.010 ops/s
Iteration  30: 91315.742 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId":
  89595.858 ±(99.9%) 559.581 ops/s [Average]
  (min, avg, max) = (88082.844, 89595.858, 91315.742), stdev = 837.554
  CI (99.9%): [89036.278, 90155.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId  thrpt   30  89595.858 ± 559.581  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47083.251 ops/s
# Warmup Iteration   2: 67851.561 ops/s
# Warmup Iteration   3: 67848.642 ops/s
# Warmup Iteration   4: 85557.649 ops/s
# Warmup Iteration   5: 104543.226 ops/s
# Warmup Iteration   6: 104639.915 ops/s
# Warmup Iteration   7: 106780.652 ops/s
# Warmup Iteration   8: 105889.212 ops/s
# Warmup Iteration   9: 105956.126 ops/s
# Warmup Iteration  10: 106055.184 ops/s
# Warmup Iteration  11: 107581.062 ops/s
# Warmup Iteration  12: 103778.795 ops/s
# Warmup Iteration  13: 105863.942 ops/s
# Warmup Iteration  14: 104906.812 ops/s
# Warmup Iteration  15: 107761.973 ops/s
# Warmup Iteration  16: 93871.481 ops/s
# Warmup Iteration  17: 84961.397 ops/s
# Warmup Iteration  18: 108843.675 ops/s
# Warmup Iteration  19: 108873.614 ops/s
# Warmup Iteration  20: 108757.386 ops/s
# Warmup Iteration  21: 108946.138 ops/s
# Warmup Iteration  22: 108738.500 ops/s
# Warmup Iteration  23: 109323.073 ops/s
# Warmup Iteration  24: 109404.280 ops/s
# Warmup Iteration  25: 109403.160 ops/s
# Warmup Iteration  26: 109945.419 ops/s
# Warmup Iteration  27: 109657.159 ops/s
# Warmup Iteration  28: 108679.091 ops/s
# Warmup Iteration  29: 107396.766 ops/s
# Warmup Iteration  30: 107319.671 ops/s
Iteration   1: 107059.128 ops/s
Iteration   2: 107995.412 ops/s
Iteration   3: 107909.298 ops/s
Iteration   4: 107870.045 ops/s
Iteration   5: 108727.348 ops/s
Iteration   6: 109416.073 ops/s
Iteration   7: 109828.755 ops/s
Iteration   8: 109182.274 ops/s
Iteration   9: 107814.350 ops/s
Iteration  10: 107431.593 ops/s
Iteration  11: 109612.991 ops/s
Iteration  12: 109610.689 ops/s
Iteration  13: 109112.928 ops/s
Iteration  14: 109192.013 ops/s
Iteration  15: 108171.854 ops/s
Iteration  16: 107670.812 ops/s
Iteration  17: 108008.055 ops/s
Iteration  18: 107419.291 ops/s
Iteration  19: 107275.924 ops/s
Iteration  20: 106863.530 ops/s
Iteration  21: 107564.112 ops/s
Iteration  22: 107765.337 ops/s
Iteration  23: 108251.967 ops/s
Iteration  24: 107899.802 ops/s
Iteration  25: 108379.219 ops/s
Iteration  26: 107740.051 ops/s
Iteration  27: 108460.574 ops/s
Iteration  28: 108154.825 ops/s
Iteration  29: 109078.828 ops/s
Iteration  30: 108809.100 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_PROTO3":
  108275.873 ±(99.9%) 540.680 ops/s [Average]
  (min, avg, max) = (106863.530, 108275.873, 109828.755), stdev = 809.264
  CI (99.9%): [107735.193, 108816.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_PROTO3  thrpt   30  108275.873 ± 540.680  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42798.267 ops/s
# Warmup Iteration   2: 64292.180 ops/s
# Warmup Iteration   3: 64261.832 ops/s
# Warmup Iteration   4: 76297.390 ops/s
# Warmup Iteration   5: 95837.291 ops/s
# Warmup Iteration   6: 95197.818 ops/s
# Warmup Iteration   7: 95141.910 ops/s
# Warmup Iteration   8: 93165.508 ops/s
# Warmup Iteration   9: 96867.950 ops/s
# Warmup Iteration  10: 96504.982 ops/s
# Warmup Iteration  11: 95527.631 ops/s
# Warmup Iteration  12: 96731.533 ops/s
# Warmup Iteration  13: 95320.896 ops/s
# Warmup Iteration  14: 96513.981 ops/s
# Warmup Iteration  15: 94690.919 ops/s
# Warmup Iteration  16: 95767.495 ops/s
# Warmup Iteration  17: 83093.147 ops/s
# Warmup Iteration  18: 77923.954 ops/s
# Warmup Iteration  19: 95531.852 ops/s
# Warmup Iteration  20: 95960.078 ops/s
# Warmup Iteration  21: 94957.156 ops/s
# Warmup Iteration  22: 96511.748 ops/s
# Warmup Iteration  23: 95968.039 ops/s
# Warmup Iteration  24: 95917.986 ops/s
# Warmup Iteration  25: 96648.323 ops/s
# Warmup Iteration  26: 96496.387 ops/s
# Warmup Iteration  27: 96649.388 ops/s
# Warmup Iteration  28: 96861.188 ops/s
# Warmup Iteration  29: 95791.891 ops/s
# Warmup Iteration  30: 95889.226 ops/s
Iteration   1: 95643.282 ops/s
Iteration   2: 95303.593 ops/s
Iteration   3: 95432.935 ops/s
Iteration   4: 96463.305 ops/s
Iteration   5: 96514.378 ops/s
Iteration   6: 97181.477 ops/s
Iteration   7: 95314.564 ops/s
Iteration   8: 95916.664 ops/s
Iteration   9: 96090.601 ops/s
Iteration  10: 95769.137 ops/s
Iteration  11: 96822.291 ops/s
Iteration  12: 96451.551 ops/s
Iteration  13: 95756.161 ops/s
Iteration  14: 96593.736 ops/s
Iteration  15: 96735.124 ops/s
Iteration  16: 95943.407 ops/s
Iteration  17: 96152.569 ops/s
Iteration  18: 95860.062 ops/s
Iteration  19: 96146.621 ops/s
Iteration  20: 96349.266 ops/s
Iteration  21: 95689.976 ops/s
Iteration  22: 95715.533 ops/s
Iteration  23: 96513.070 ops/s
Iteration  24: 96255.897 ops/s
Iteration  25: 97277.032 ops/s
Iteration  26: 95640.058 ops/s
Iteration  27: 95640.648 ops/s
Iteration  28: 95830.848 ops/s
Iteration  29: 95852.923 ops/s
Iteration  30: 96791.255 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_PROTO3":
  96121.599 ±(99.9%) 350.848 ops/s [Average]
  (min, avg, max) = (95303.593, 96121.599, 97277.032), stdev = 525.133
  CI (99.9%): [95770.750, 96472.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_PROTO3  thrpt   30  96121.599 ± 350.848  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnUppercase_traceId_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnUppercase_traceId_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36425.955 ops/s
# Warmup Iteration   2: 47541.962 ops/s
# Warmup Iteration   3: 94967.269 ops/s
# Warmup Iteration   4: 95786.261 ops/s
# Warmup Iteration   5: 93960.013 ops/s
# Warmup Iteration   6: 91797.013 ops/s
# Warmup Iteration   7: 94089.351 ops/s
# Warmup Iteration   8: 68834.842 ops/s
# Warmup Iteration   9: 95246.216 ops/s
# Warmup Iteration  10: 95680.733 ops/s
# Warmup Iteration  11: 95326.937 ops/s
# Warmup Iteration  12: 96576.088 ops/s
# Warmup Iteration  13: 96071.045 ops/s
# Warmup Iteration  14: 94886.037 ops/s
# Warmup Iteration  15: 95350.518 ops/s
# Warmup Iteration  16: 95935.712 ops/s
# Warmup Iteration  17: 98053.683 ops/s
# Warmup Iteration  18: 97302.872 ops/s
# Warmup Iteration  19: 97530.526 ops/s
# Warmup Iteration  20: 98202.926 ops/s
# Warmup Iteration  21: 97684.357 ops/s
# Warmup Iteration  22: 97843.661 ops/s
# Warmup Iteration  23: 97324.029 ops/s
# Warmup Iteration  24: 97615.607 ops/s
# Warmup Iteration  25: 98150.906 ops/s
# Warmup Iteration  26: 97888.430 ops/s
# Warmup Iteration  27: 98240.277 ops/s
# Warmup Iteration  28: 97802.876 ops/s
# Warmup Iteration  29: 97722.374 ops/s
# Warmup Iteration  30: 98411.933 ops/s
Iteration   1: 98389.993 ops/s
Iteration   2: 97336.571 ops/s
Iteration   3: 98248.051 ops/s
Iteration   4: 98358.053 ops/s
Iteration   5: 97471.089 ops/s
Iteration   6: 97186.824 ops/s
Iteration   7: 97445.482 ops/s
Iteration   8: 98552.135 ops/s
Iteration   9: 97375.460 ops/s
Iteration  10: 97316.917 ops/s
Iteration  11: 96553.290 ops/s
Iteration  12: 96793.653 ops/s
Iteration  13: 97114.433 ops/s
Iteration  14: 98552.157 ops/s
Iteration  15: 97813.799 ops/s
Iteration  16: 98634.393 ops/s
Iteration  17: 98774.995 ops/s
Iteration  18: 97789.769 ops/s
Iteration  19: 98156.709 ops/s
Iteration  20: 96747.506 ops/s
Iteration  21: 97685.971 ops/s
Iteration  22: 97531.697 ops/s
Iteration  23: 97454.432 ops/s
Iteration  24: 97837.966 ops/s
Iteration  25: 97559.656 ops/s
Iteration  26: 98117.061 ops/s
Iteration  27: 97233.856 ops/s
Iteration  28: 98020.791 ops/s
Iteration  29: 97214.824 ops/s
Iteration  30: 97478.483 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnUppercase_traceId_JSON_V2":
  97691.534 ±(99.9%) 391.845 ops/s [Average]
  (min, avg, max) = (96553.290, 97691.534, 98774.995), stdev = 586.495
  CI (99.9%): [97299.689, 98083.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnUppercase_traceId_JSON_V2  thrpt   30  97691.534 ± 391.845  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61377.739 ops/s
# Warmup Iteration   2: 133792.106 ops/s
# Warmup Iteration   3: 205290.807 ops/s
# Warmup Iteration   4: 208974.924 ops/s
# Warmup Iteration   5: 179173.443 ops/s
# Warmup Iteration   6: 187907.115 ops/s
# Warmup Iteration   7: 212964.269 ops/s
# Warmup Iteration   8: 209848.613 ops/s
# Warmup Iteration   9: 211976.983 ops/s
# Warmup Iteration  10: 212374.921 ops/s
# Warmup Iteration  11: 211050.720 ops/s
# Warmup Iteration  12: 212478.824 ops/s
# Warmup Iteration  13: 212524.449 ops/s
# Warmup Iteration  14: 212058.078 ops/s
# Warmup Iteration  15: 212457.425 ops/s
# Warmup Iteration  16: 212872.237 ops/s
# Warmup Iteration  17: 211926.506 ops/s
# Warmup Iteration  18: 214109.317 ops/s
# Warmup Iteration  19: 213275.533 ops/s
# Warmup Iteration  20: 213711.678 ops/s
# Warmup Iteration  21: 211108.665 ops/s
# Warmup Iteration  22: 212758.173 ops/s
# Warmup Iteration  23: 210232.800 ops/s
# Warmup Iteration  24: 211802.391 ops/s
# Warmup Iteration  25: 212330.609 ops/s
# Warmup Iteration  26: 211409.882 ops/s
# Warmup Iteration  27: 212267.678 ops/s
# Warmup Iteration  28: 211857.398 ops/s
# Warmup Iteration  29: 212195.125 ops/s
# Warmup Iteration  30: 210314.852 ops/s
Iteration   1: 211441.391 ops/s
Iteration   2: 212030.292 ops/s
Iteration   3: 213649.916 ops/s
Iteration   4: 213670.362 ops/s
Iteration   5: 214575.123 ops/s
Iteration   6: 213810.613 ops/s
Iteration   7: 215147.988 ops/s
Iteration   8: 213886.402 ops/s
Iteration   9: 213685.050 ops/s
Iteration  10: 214008.282 ops/s
Iteration  11: 213671.811 ops/s
Iteration  12: 211889.094 ops/s
Iteration  13: 214444.492 ops/s
Iteration  14: 214806.710 ops/s
Iteration  15: 214917.638 ops/s
Iteration  16: 213041.256 ops/s
Iteration  17: 212737.067 ops/s
Iteration  18: 216289.956 ops/s
Iteration  19: 212390.485 ops/s
Iteration  20: 212290.515 ops/s
Iteration  21: 212376.548 ops/s
Iteration  22: 214636.802 ops/s
Iteration  23: 214610.637 ops/s
Iteration  24: 214527.947 ops/s
Iteration  25: 214988.899 ops/s
Iteration  26: 214986.765 ops/s
Iteration  27: 214544.677 ops/s
Iteration  28: 214265.379 ops/s
Iteration  29: 212401.584 ops/s
Iteration  30: 212103.246 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName":
  213727.564 ±(99.9%) 803.237 ops/s [Average]
  (min, avg, max) = (211441.391, 213727.564, 216289.956), stdev = 1202.247
  CI (99.9%): [212924.327, 214530.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName  thrpt   30  213727.564 ± 803.237  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60126.183 ops/s
# Warmup Iteration   2: 129646.075 ops/s
# Warmup Iteration   3: 209541.970 ops/s
# Warmup Iteration   4: 207950.306 ops/s
# Warmup Iteration   5: 181268.466 ops/s
# Warmup Iteration   6: 187840.112 ops/s
# Warmup Iteration   7: 211356.707 ops/s
# Warmup Iteration   8: 211656.203 ops/s
# Warmup Iteration   9: 209650.442 ops/s
# Warmup Iteration  10: 211147.671 ops/s
# Warmup Iteration  11: 210090.455 ops/s
# Warmup Iteration  12: 210468.904 ops/s
# Warmup Iteration  13: 210531.173 ops/s
# Warmup Iteration  14: 210632.455 ops/s
# Warmup Iteration  15: 209785.794 ops/s
# Warmup Iteration  16: 210494.702 ops/s
# Warmup Iteration  17: 210870.615 ops/s
# Warmup Iteration  18: 208309.039 ops/s
# Warmup Iteration  19: 210042.272 ops/s
# Warmup Iteration  20: 208998.029 ops/s
# Warmup Iteration  21: 209857.074 ops/s
# Warmup Iteration  22: 210453.092 ops/s
# Warmup Iteration  23: 209791.382 ops/s
# Warmup Iteration  24: 210104.585 ops/s
# Warmup Iteration  25: 211288.540 ops/s
# Warmup Iteration  26: 208980.751 ops/s
# Warmup Iteration  27: 210557.228 ops/s
# Warmup Iteration  28: 209999.733 ops/s
# Warmup Iteration  29: 210913.704 ops/s
# Warmup Iteration  30: 209321.353 ops/s
Iteration   1: 209974.763 ops/s
Iteration   2: 212195.835 ops/s
Iteration   3: 209571.220 ops/s
Iteration   4: 209785.755 ops/s
Iteration   5: 211964.517 ops/s
Iteration   6: 209536.541 ops/s
Iteration   7: 209496.907 ops/s
Iteration   8: 209160.755 ops/s
Iteration   9: 210224.881 ops/s
Iteration  10: 211186.130 ops/s
Iteration  11: 210107.738 ops/s
Iteration  12: 209779.803 ops/s
Iteration  13: 211660.520 ops/s
Iteration  14: 211983.804 ops/s
Iteration  15: 211356.477 ops/s
Iteration  16: 209772.435 ops/s
Iteration  17: 207272.606 ops/s
Iteration  18: 210700.366 ops/s
Iteration  19: 210863.587 ops/s
Iteration  20: 209782.437 ops/s
Iteration  21: 209981.527 ops/s
Iteration  22: 209605.371 ops/s
Iteration  23: 210982.907 ops/s
Iteration  24: 209195.584 ops/s
Iteration  25: 208547.107 ops/s
Iteration  26: 208922.598 ops/s
Iteration  27: 209739.834 ops/s
Iteration  28: 210126.818 ops/s
Iteration  29: 208472.436 ops/s
Iteration  30: 207743.408 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName":
  209989.822 ±(99.9%) 798.806 ops/s [Average]
  (min, avg, max) = (207272.606, 209989.822, 212195.835), stdev = 1195.616
  CI (99.9%): [209191.016, 210788.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName  thrpt   30  209989.822 ± 798.806  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37623.985 ops/s
# Warmup Iteration   2: 89436.260 ops/s
# Warmup Iteration   3: 128932.416 ops/s
# Warmup Iteration   4: 130463.310 ops/s
# Warmup Iteration   5: 100159.213 ops/s
# Warmup Iteration   6: 132310.582 ops/s
# Warmup Iteration   7: 132446.330 ops/s
# Warmup Iteration   8: 131837.305 ops/s
# Warmup Iteration   9: 132034.400 ops/s
# Warmup Iteration  10: 130806.295 ops/s
# Warmup Iteration  11: 132066.030 ops/s
# Warmup Iteration  12: 132867.378 ops/s
# Warmup Iteration  13: 132203.057 ops/s
# Warmup Iteration  14: 132331.850 ops/s
# Warmup Iteration  15: 132738.607 ops/s
# Warmup Iteration  16: 131796.770 ops/s
# Warmup Iteration  17: 131676.793 ops/s
# Warmup Iteration  18: 131768.831 ops/s
# Warmup Iteration  19: 131791.038 ops/s
# Warmup Iteration  20: 132787.450 ops/s
# Warmup Iteration  21: 132614.759 ops/s
# Warmup Iteration  22: 131064.186 ops/s
# Warmup Iteration  23: 132965.617 ops/s
# Warmup Iteration  24: 133256.903 ops/s
# Warmup Iteration  25: 132190.166 ops/s
# Warmup Iteration  26: 132733.915 ops/s
# Warmup Iteration  27: 131062.424 ops/s
# Warmup Iteration  28: 131600.199 ops/s
# Warmup Iteration  29: 131975.853 ops/s
# Warmup Iteration  30: 130810.128 ops/s
Iteration   1: 131866.908 ops/s
Iteration   2: 132948.121 ops/s
Iteration   3: 131499.146 ops/s
Iteration   4: 131288.017 ops/s
Iteration   5: 132346.702 ops/s
Iteration   6: 133021.667 ops/s
Iteration   7: 132993.969 ops/s
Iteration   8: 132713.842 ops/s
Iteration   9: 131651.819 ops/s
Iteration  10: 131044.942 ops/s
Iteration  11: 130798.853 ops/s
Iteration  12: 132327.977 ops/s
Iteration  13: 132754.613 ops/s
Iteration  14: 132808.925 ops/s
Iteration  15: 130956.939 ops/s
Iteration  16: 130325.612 ops/s
Iteration  17: 131807.938 ops/s
Iteration  18: 132438.826 ops/s
Iteration  19: 132957.435 ops/s
Iteration  20: 130516.631 ops/s
Iteration  21: 131019.812 ops/s
Iteration  22: 132656.540 ops/s
Iteration  23: 133323.156 ops/s
Iteration  24: 133480.600 ops/s
Iteration  25: 133252.090 ops/s
Iteration  26: 133451.999 ops/s
Iteration  27: 132776.761 ops/s
Iteration  28: 133343.619 ops/s
Iteration  29: 132461.285 ops/s
Iteration  30: 131154.634 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField":
  132199.646 ±(99.9%) 639.059 ops/s [Average]
  (min, avg, max) = (130325.612, 132199.646, 133480.600), stdev = 956.514
  CI (99.9%): [131560.587, 132838.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField  thrpt   30  132199.646 ± 639.059  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20177.367 ops/s
# Warmup Iteration   2: 48525.916 ops/s
# Warmup Iteration   3: 66354.888 ops/s
# Warmup Iteration   4: 66911.159 ops/s
# Warmup Iteration   5: 51861.641 ops/s
# Warmup Iteration   6: 68149.821 ops/s
# Warmup Iteration   7: 67227.723 ops/s
# Warmup Iteration   8: 68053.906 ops/s
# Warmup Iteration   9: 68058.222 ops/s
# Warmup Iteration  10: 67345.872 ops/s
# Warmup Iteration  11: 67613.950 ops/s
# Warmup Iteration  12: 68292.030 ops/s
# Warmup Iteration  13: 67927.250 ops/s
# Warmup Iteration  14: 67255.756 ops/s
# Warmup Iteration  15: 68018.913 ops/s
# Warmup Iteration  16: 68310.793 ops/s
# Warmup Iteration  17: 67619.354 ops/s
# Warmup Iteration  18: 67526.572 ops/s
# Warmup Iteration  19: 68086.025 ops/s
# Warmup Iteration  20: 68417.410 ops/s
# Warmup Iteration  21: 68516.595 ops/s
# Warmup Iteration  22: 67636.089 ops/s
# Warmup Iteration  23: 67847.822 ops/s
# Warmup Iteration  24: 67852.773 ops/s
# Warmup Iteration  25: 67573.298 ops/s
# Warmup Iteration  26: 68542.032 ops/s
# Warmup Iteration  27: 68191.893 ops/s
# Warmup Iteration  28: 68159.265 ops/s
# Warmup Iteration  29: 67892.825 ops/s
# Warmup Iteration  30: 67586.703 ops/s
Iteration   1: 67401.788 ops/s
Iteration   2: 67580.906 ops/s
Iteration   3: 68659.928 ops/s
Iteration   4: 68555.295 ops/s
Iteration   5: 68331.336 ops/s
Iteration   6: 68820.539 ops/s
Iteration   7: 67456.024 ops/s
Iteration   8: 68368.697 ops/s
Iteration   9: 68505.203 ops/s
Iteration  10: 67804.043 ops/s
Iteration  11: 67503.998 ops/s
Iteration  12: 67695.329 ops/s
Iteration  13: 67792.875 ops/s
Iteration  14: 68211.294 ops/s
Iteration  15: 68484.228 ops/s
Iteration  16: 68461.394 ops/s
Iteration  17: 67486.994 ops/s
Iteration  18: 67257.412 ops/s
Iteration  19: 67731.285 ops/s
Iteration  20: 68414.355 ops/s
Iteration  21: 67935.650 ops/s
Iteration  22: 67728.241 ops/s
Iteration  23: 67903.490 ops/s
Iteration  24: 68172.850 ops/s
Iteration  25: 67741.590 ops/s
Iteration  26: 67705.872 ops/s
Iteration  27: 67717.744 ops/s
Iteration  28: 66701.954 ops/s
Iteration  29: 68316.614 ops/s
Iteration  30: 67957.520 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint":
  67946.815 ±(99.9%) 322.818 ops/s [Average]
  (min, avg, max) = (66701.954, 67946.815, 68820.539), stdev = 483.180
  CI (99.9%): [67623.996, 68269.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint  thrpt   30  67946.815 ± 322.818  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22792.795 ops/s
# Warmup Iteration   2: 41858.714 ops/s
# Warmup Iteration   3: 65948.876 ops/s
# Warmup Iteration   4: 94809.838 ops/s
# Warmup Iteration   5: 94782.649 ops/s
# Warmup Iteration   6: 95013.820 ops/s
# Warmup Iteration   7: 96350.681 ops/s
# Warmup Iteration   8: 95949.953 ops/s
# Warmup Iteration   9: 68369.646 ops/s
# Warmup Iteration  10: 96129.792 ops/s
# Warmup Iteration  11: 96498.583 ops/s
# Warmup Iteration  12: 96746.514 ops/s
# Warmup Iteration  13: 96053.497 ops/s
# Warmup Iteration  14: 96188.775 ops/s
# Warmup Iteration  15: 94872.793 ops/s
# Warmup Iteration  16: 96065.154 ops/s
# Warmup Iteration  17: 96975.293 ops/s
# Warmup Iteration  18: 97296.665 ops/s
# Warmup Iteration  19: 96969.357 ops/s
# Warmup Iteration  20: 97076.526 ops/s
# Warmup Iteration  21: 97595.615 ops/s
# Warmup Iteration  22: 96169.849 ops/s
# Warmup Iteration  23: 97809.261 ops/s
# Warmup Iteration  24: 97287.717 ops/s
# Warmup Iteration  25: 97342.503 ops/s
# Warmup Iteration  26: 96448.818 ops/s
# Warmup Iteration  27: 95860.720 ops/s
# Warmup Iteration  28: 95942.026 ops/s
# Warmup Iteration  29: 96383.656 ops/s
# Warmup Iteration  30: 96364.087 ops/s
Iteration   1: 96599.563 ops/s
Iteration   2: 96598.089 ops/s
Iteration   3: 97554.428 ops/s
Iteration   4: 96298.717 ops/s
Iteration   5: 96025.337 ops/s
Iteration   6: 96280.533 ops/s
Iteration   7: 96625.590 ops/s
Iteration   8: 97186.368 ops/s
Iteration   9: 96551.526 ops/s
Iteration  10: 97336.735 ops/s
Iteration  11: 97513.756 ops/s
Iteration  12: 96332.851 ops/s
Iteration  13: 96373.595 ops/s
Iteration  14: 96132.096 ops/s
Iteration  15: 96594.969 ops/s
Iteration  16: 97613.054 ops/s
Iteration  17: 97858.105 ops/s
Iteration  18: 96436.942 ops/s
Iteration  19: 96937.325 ops/s
Iteration  20: 97462.004 ops/s
Iteration  21: 96785.732 ops/s
Iteration  22: 96414.830 ops/s
Iteration  23: 97291.221 ops/s
Iteration  24: 96876.043 ops/s
Iteration  25: 95887.267 ops/s
Iteration  26: 96519.063 ops/s
Iteration  27: 96917.477 ops/s
Iteration  28: 96392.408 ops/s
Iteration  29: 96003.718 ops/s
Iteration  30: 95643.483 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V2":
  96701.428 ±(99.9%) 377.039 ops/s [Average]
  (min, avg, max) = (95643.483, 96701.428, 97858.105), stdev = 564.335
  CI (99.9%): [96324.388, 97078.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V2  thrpt   30  96701.428 ± 377.039  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56002.492 ops/s
# Warmup Iteration   2: 122256.876 ops/s
# Warmup Iteration   3: 124257.076 ops/s
# Warmup Iteration   4: 207680.064 ops/s
# Warmup Iteration   5: 240041.893 ops/s
# Warmup Iteration   6: 243461.894 ops/s
# Warmup Iteration   7: 249403.783 ops/s
# Warmup Iteration   8: 246995.728 ops/s
# Warmup Iteration   9: 247784.986 ops/s
# Warmup Iteration  10: 250256.861 ops/s
# Warmup Iteration  11: 247370.970 ops/s
# Warmup Iteration  12: 188246.783 ops/s
# Warmup Iteration  13: 211093.080 ops/s
# Warmup Iteration  14: 252054.918 ops/s
# Warmup Iteration  15: 251933.082 ops/s
# Warmup Iteration  16: 251205.461 ops/s
# Warmup Iteration  17: 251084.300 ops/s
# Warmup Iteration  18: 249420.696 ops/s
# Warmup Iteration  19: 251602.309 ops/s
# Warmup Iteration  20: 250695.417 ops/s
# Warmup Iteration  21: 250751.961 ops/s
# Warmup Iteration  22: 251141.684 ops/s
# Warmup Iteration  23: 249961.803 ops/s
# Warmup Iteration  24: 249317.328 ops/s
# Warmup Iteration  25: 250213.558 ops/s
# Warmup Iteration  26: 251175.972 ops/s
# Warmup Iteration  27: 250985.547 ops/s
# Warmup Iteration  28: 251016.419 ops/s
# Warmup Iteration  29: 250219.115 ops/s
# Warmup Iteration  30: 250812.163 ops/s
Iteration   1: 250291.758 ops/s
Iteration   2: 251113.720 ops/s
Iteration   3: 250446.984 ops/s
Iteration   4: 250257.588 ops/s
Iteration   5: 249301.441 ops/s
Iteration   6: 250116.595 ops/s
Iteration   7: 251266.622 ops/s
Iteration   8: 251282.097 ops/s
Iteration   9: 251337.593 ops/s
Iteration  10: 250018.463 ops/s
Iteration  11: 250643.657 ops/s
Iteration  12: 249818.179 ops/s
Iteration  13: 250835.358 ops/s
Iteration  14: 250563.360 ops/s
Iteration  15: 249939.777 ops/s
Iteration  16: 251436.861 ops/s
Iteration  17: 251738.567 ops/s
Iteration  18: 251140.200 ops/s
Iteration  19: 251255.077 ops/s
Iteration  20: 250402.910 ops/s
Iteration  21: 251527.764 ops/s
Iteration  22: 249019.977 ops/s
Iteration  23: 252240.581 ops/s
Iteration  24: 252002.261 ops/s
Iteration  25: 250941.448 ops/s
Iteration  26: 249485.433 ops/s
Iteration  27: 251415.552 ops/s
Iteration  28: 251567.124 ops/s
Iteration  29: 248854.094 ops/s
Iteration  30: 249639.099 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_PROTO3":
  250663.338 ±(99.9%) 593.691 ops/s [Average]
  (min, avg, max) = (248854.094, 250663.338, 252240.581), stdev = 888.609
  CI (99.9%): [250069.647, 251257.029] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_PROTO3  thrpt   30  250663.338 ± 593.691  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31314.086 ops/s
# Warmup Iteration   2: 50369.531 ops/s
# Warmup Iteration   3: 88691.187 ops/s
# Warmup Iteration   4: 102024.887 ops/s
# Warmup Iteration   5: 102879.401 ops/s
# Warmup Iteration   6: 101729.775 ops/s
# Warmup Iteration   7: 103088.552 ops/s
# Warmup Iteration   8: 98939.217 ops/s
# Warmup Iteration   9: 79874.565 ops/s
# Warmup Iteration  10: 103202.810 ops/s
# Warmup Iteration  11: 103098.402 ops/s
# Warmup Iteration  12: 102237.542 ops/s
# Warmup Iteration  13: 103175.906 ops/s
# Warmup Iteration  14: 103285.786 ops/s
# Warmup Iteration  15: 103274.366 ops/s
# Warmup Iteration  16: 102826.076 ops/s
# Warmup Iteration  17: 103415.061 ops/s
# Warmup Iteration  18: 101872.732 ops/s
# Warmup Iteration  19: 102322.865 ops/s
# Warmup Iteration  20: 103157.569 ops/s
# Warmup Iteration  21: 102484.223 ops/s
# Warmup Iteration  22: 102932.475 ops/s
# Warmup Iteration  23: 103091.880 ops/s
# Warmup Iteration  24: 102659.443 ops/s
# Warmup Iteration  25: 102437.706 ops/s
# Warmup Iteration  26: 101631.110 ops/s
# Warmup Iteration  27: 102471.383 ops/s
# Warmup Iteration  28: 102386.303 ops/s
# Warmup Iteration  29: 102014.957 ops/s
# Warmup Iteration  30: 103165.911 ops/s
Iteration   1: 102635.179 ops/s
Iteration   2: 102252.340 ops/s
Iteration   3: 102912.828 ops/s
Iteration   4: 102825.766 ops/s
Iteration   5: 101489.274 ops/s
Iteration   6: 102532.507 ops/s
Iteration   7: 100881.609 ops/s
Iteration   8: 101653.658 ops/s
Iteration   9: 102216.999 ops/s
Iteration  10: 102672.722 ops/s
Iteration  11: 102979.249 ops/s
Iteration  12: 102279.586 ops/s
Iteration  13: 102984.763 ops/s
Iteration  14: 102404.145 ops/s
Iteration  15: 102949.971 ops/s
Iteration  16: 102913.505 ops/s
Iteration  17: 102661.935 ops/s
Iteration  18: 103396.794 ops/s
Iteration  19: 102482.610 ops/s
Iteration  20: 102707.014 ops/s
Iteration  21: 103394.480 ops/s
Iteration  22: 101619.035 ops/s
Iteration  23: 103061.870 ops/s
Iteration  24: 102593.131 ops/s
Iteration  25: 101812.852 ops/s
Iteration  26: 102483.345 ops/s
Iteration  27: 102103.084 ops/s
Iteration  28: 102298.751 ops/s
Iteration  29: 101803.169 ops/s
Iteration  30: 103067.946 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V2":
  102469.004 ±(99.9%) 391.231 ops/s [Average]
  (min, avg, max) = (100881.609, 102469.004, 103396.794), stdev = 585.576
  CI (99.9%): [102077.773, 102860.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V2  thrpt   30  102469.004 ± 391.231  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86142.992 ops/s
# Warmup Iteration   2: 153640.541 ops/s
# Warmup Iteration   3: 160536.348 ops/s
# Warmup Iteration   4: 259494.898 ops/s
# Warmup Iteration   5: 261664.217 ops/s
# Warmup Iteration   6: 258662.752 ops/s
# Warmup Iteration   7: 263329.105 ops/s
# Warmup Iteration   8: 262099.313 ops/s
# Warmup Iteration   9: 262793.032 ops/s
# Warmup Iteration  10: 261452.129 ops/s
# Warmup Iteration  11: 260654.878 ops/s
# Warmup Iteration  12: 264298.621 ops/s
# Warmup Iteration  13: 181044.312 ops/s
# Warmup Iteration  14: 263882.360 ops/s
# Warmup Iteration  15: 263306.945 ops/s
# Warmup Iteration  16: 263295.883 ops/s
# Warmup Iteration  17: 264963.886 ops/s
# Warmup Iteration  18: 264619.094 ops/s
# Warmup Iteration  19: 265197.122 ops/s
# Warmup Iteration  20: 265827.275 ops/s
# Warmup Iteration  21: 263183.951 ops/s
# Warmup Iteration  22: 265244.280 ops/s
# Warmup Iteration  23: 264231.461 ops/s
# Warmup Iteration  24: 265946.138 ops/s
# Warmup Iteration  25: 265522.429 ops/s
# Warmup Iteration  26: 265665.268 ops/s
# Warmup Iteration  27: 265303.991 ops/s
# Warmup Iteration  28: 265599.996 ops/s
# Warmup Iteration  29: 264938.812 ops/s
# Warmup Iteration  30: 265094.132 ops/s
Iteration   1: 263241.302 ops/s
Iteration   2: 264194.159 ops/s
Iteration   3: 265691.217 ops/s
Iteration   4: 266116.060 ops/s
Iteration   5: 264310.369 ops/s
Iteration   6: 264534.282 ops/s
Iteration   7: 265105.502 ops/s
Iteration   8: 266098.340 ops/s
Iteration   9: 265396.569 ops/s
Iteration  10: 263701.262 ops/s
Iteration  11: 263488.166 ops/s
Iteration  12: 263935.641 ops/s
Iteration  13: 264073.360 ops/s
Iteration  14: 264380.737 ops/s
Iteration  15: 265133.876 ops/s
Iteration  16: 264365.269 ops/s
Iteration  17: 263783.998 ops/s
Iteration  18: 264452.634 ops/s
Iteration  19: 265324.802 ops/s
Iteration  20: 264907.113 ops/s
Iteration  21: 265091.950 ops/s
Iteration  22: 264962.774 ops/s
Iteration  23: 264728.463 ops/s
Iteration  24: 264636.866 ops/s
Iteration  25: 264525.846 ops/s
Iteration  26: 263521.128 ops/s
Iteration  27: 264600.060 ops/s
Iteration  28: 265230.510 ops/s
Iteration  29: 265468.914 ops/s
Iteration  30: 263617.360 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_PROTO3":
  264620.618 ±(99.9%) 509.237 ops/s [Average]
  (min, avg, max) = (263241.302, 264620.618, 266116.060), stdev = 762.203
  CI (99.9%): [264111.380, 265129.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_PROTO3  thrpt   30  264620.618 ± 509.237  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33084.225 ops/s
# Warmup Iteration   2: 64107.264 ops/s
# Warmup Iteration   3: 134284.037 ops/s
# Warmup Iteration   4: 141222.881 ops/s
# Warmup Iteration   5: 140481.197 ops/s
# Warmup Iteration   6: 140654.489 ops/s
# Warmup Iteration   7: 103674.807 ops/s
# Warmup Iteration   8: 143898.336 ops/s
# Warmup Iteration   9: 143549.437 ops/s
# Warmup Iteration  10: 142960.560 ops/s
# Warmup Iteration  11: 144105.306 ops/s
# Warmup Iteration  12: 144242.325 ops/s
# Warmup Iteration  13: 144086.089 ops/s
# Warmup Iteration  14: 144514.471 ops/s
# Warmup Iteration  15: 144364.409 ops/s
# Warmup Iteration  16: 144107.095 ops/s
# Warmup Iteration  17: 144506.895 ops/s
# Warmup Iteration  18: 144005.826 ops/s
# Warmup Iteration  19: 145070.715 ops/s
# Warmup Iteration  20: 144777.346 ops/s
# Warmup Iteration  21: 144085.281 ops/s
# Warmup Iteration  22: 144489.695 ops/s
# Warmup Iteration  23: 144488.817 ops/s
# Warmup Iteration  24: 144359.789 ops/s
# Warmup Iteration  25: 143865.345 ops/s
# Warmup Iteration  26: 143115.110 ops/s
# Warmup Iteration  27: 143677.465 ops/s
# Warmup Iteration  28: 143161.353 ops/s
# Warmup Iteration  29: 144545.487 ops/s
# Warmup Iteration  30: 143844.892 ops/s
Iteration   1: 144860.324 ops/s
Iteration   2: 144610.242 ops/s
Iteration   3: 143952.553 ops/s
Iteration   4: 143254.522 ops/s
Iteration   5: 144981.300 ops/s
Iteration   6: 144295.194 ops/s
Iteration   7: 144413.154 ops/s
Iteration   8: 144161.352 ops/s
Iteration   9: 144288.159 ops/s
Iteration  10: 143724.188 ops/s
Iteration  11: 143595.040 ops/s
Iteration  12: 143879.221 ops/s
Iteration  13: 144925.042 ops/s
Iteration  14: 145480.384 ops/s
Iteration  15: 144847.246 ops/s
Iteration  16: 144217.949 ops/s
Iteration  17: 144403.543 ops/s
Iteration  18: 144501.808 ops/s
Iteration  19: 143503.548 ops/s
Iteration  20: 145011.670 ops/s
Iteration  21: 144336.685 ops/s
Iteration  22: 144128.370 ops/s
Iteration  23: 144142.096 ops/s
Iteration  24: 144544.209 ops/s
Iteration  25: 143977.612 ops/s
Iteration  26: 144066.474 ops/s
Iteration  27: 144125.098 ops/s
Iteration  28: 143565.839 ops/s
Iteration  29: 144728.034 ops/s
Iteration  30: 145112.316 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V2":
  144321.106 ±(99.9%) 352.693 ops/s [Average]
  (min, avg, max) = (143254.522, 144321.106, 145480.384), stdev = 527.894
  CI (99.9%): [143968.413, 144673.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V2  thrpt   30  144321.106 ± 352.693  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122211.939 ops/s
# Warmup Iteration   2: 187750.659 ops/s
# Warmup Iteration   3: 230665.285 ops/s
# Warmup Iteration   4: 331006.693 ops/s
# Warmup Iteration   5: 334238.364 ops/s
# Warmup Iteration   6: 332020.772 ops/s
# Warmup Iteration   7: 331911.573 ops/s
# Warmup Iteration   8: 332430.160 ops/s
# Warmup Iteration   9: 334939.971 ops/s
# Warmup Iteration  10: 330798.538 ops/s
# Warmup Iteration  11: 274828.549 ops/s
# Warmup Iteration  12: 288013.324 ops/s
# Warmup Iteration  13: 334270.106 ops/s
# Warmup Iteration  14: 333579.379 ops/s
# Warmup Iteration  15: 334187.324 ops/s
# Warmup Iteration  16: 334179.686 ops/s
# Warmup Iteration  17: 331973.023 ops/s
# Warmup Iteration  18: 331698.373 ops/s
# Warmup Iteration  19: 332410.783 ops/s
# Warmup Iteration  20: 332288.872 ops/s
# Warmup Iteration  21: 332639.075 ops/s
# Warmup Iteration  22: 331764.000 ops/s
# Warmup Iteration  23: 332032.621 ops/s
# Warmup Iteration  24: 329867.235 ops/s
# Warmup Iteration  25: 332365.338 ops/s
# Warmup Iteration  26: 332085.204 ops/s
# Warmup Iteration  27: 331822.413 ops/s
# Warmup Iteration  28: 332376.569 ops/s
# Warmup Iteration  29: 332358.021 ops/s
# Warmup Iteration  30: 332473.959 ops/s
Iteration   1: 331965.456 ops/s
Iteration   2: 332304.785 ops/s
Iteration   3: 332178.385 ops/s
Iteration   4: 331801.550 ops/s
Iteration   5: 331549.714 ops/s
Iteration   6: 331507.858 ops/s
Iteration   7: 332874.475 ops/s
Iteration   8: 332148.938 ops/s
Iteration   9: 333212.776 ops/s
Iteration  10: 332591.267 ops/s
Iteration  11: 332891.369 ops/s
Iteration  12: 331732.259 ops/s
Iteration  13: 331274.688 ops/s
Iteration  14: 331848.113 ops/s
Iteration  15: 331823.531 ops/s
Iteration  16: 332436.585 ops/s
Iteration  17: 332680.619 ops/s
Iteration  18: 332012.331 ops/s
Iteration  19: 331772.616 ops/s
Iteration  20: 331784.004 ops/s
Iteration  21: 331353.578 ops/s
Iteration  22: 332376.514 ops/s
Iteration  23: 332247.312 ops/s
Iteration  24: 332457.752 ops/s
Iteration  25: 331479.140 ops/s
Iteration  26: 330406.569 ops/s
Iteration  27: 333792.378 ops/s
Iteration  28: 333388.063 ops/s
Iteration  29: 332659.031 ops/s
Iteration  30: 333314.685 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_PROTO3":
  332195.545 ±(99.9%) 483.887 ops/s [Average]
  (min, avg, max) = (330406.569, 332195.545, 333792.378), stdev = 724.259
  CI (99.9%): [331711.658, 332679.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_PROTO3  thrpt   30  332195.545 ± 483.887  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36079.873 ops/s
# Warmup Iteration   2: 67382.371 ops/s
# Warmup Iteration   3: 141100.292 ops/s
# Warmup Iteration   4: 142383.787 ops/s
# Warmup Iteration   5: 142138.846 ops/s
# Warmup Iteration   6: 143086.725 ops/s
# Warmup Iteration   7: 108383.970 ops/s
# Warmup Iteration   8: 143906.058 ops/s
# Warmup Iteration   9: 143494.945 ops/s
# Warmup Iteration  10: 142826.869 ops/s
# Warmup Iteration  11: 144605.246 ops/s
# Warmup Iteration  12: 143157.332 ops/s
# Warmup Iteration  13: 143193.265 ops/s
# Warmup Iteration  14: 143806.445 ops/s
# Warmup Iteration  15: 143560.098 ops/s
# Warmup Iteration  16: 143939.757 ops/s
# Warmup Iteration  17: 143450.735 ops/s
# Warmup Iteration  18: 143848.708 ops/s
# Warmup Iteration  19: 143913.296 ops/s
# Warmup Iteration  20: 143855.704 ops/s
# Warmup Iteration  21: 143978.134 ops/s
# Warmup Iteration  22: 144594.721 ops/s
# Warmup Iteration  23: 142397.813 ops/s
# Warmup Iteration  24: 143618.141 ops/s
# Warmup Iteration  25: 142885.361 ops/s
# Warmup Iteration  26: 143206.906 ops/s
# Warmup Iteration  27: 143794.485 ops/s
# Warmup Iteration  28: 143331.727 ops/s
# Warmup Iteration  29: 143641.864 ops/s
# Warmup Iteration  30: 144747.817 ops/s
Iteration   1: 144502.212 ops/s
Iteration   2: 143973.374 ops/s
Iteration   3: 142937.855 ops/s
Iteration   4: 143494.966 ops/s
Iteration   5: 143649.498 ops/s
Iteration   6: 142513.849 ops/s
Iteration   7: 143619.227 ops/s
Iteration   8: 144918.725 ops/s
Iteration   9: 144828.281 ops/s
Iteration  10: 145157.671 ops/s
Iteration  11: 145028.629 ops/s
Iteration  12: 145004.289 ops/s
Iteration  13: 143842.467 ops/s
Iteration  14: 144046.011 ops/s
Iteration  15: 143884.005 ops/s
Iteration  16: 144059.643 ops/s
Iteration  17: 144589.400 ops/s
Iteration  18: 145000.181 ops/s
Iteration  19: 144026.095 ops/s
Iteration  20: 143247.726 ops/s
Iteration  21: 142138.207 ops/s
Iteration  22: 144238.165 ops/s
Iteration  23: 144542.670 ops/s
Iteration  24: 144948.179 ops/s
Iteration  25: 144792.036 ops/s
Iteration  26: 144235.810 ops/s
Iteration  27: 144132.950 ops/s
Iteration  28: 145138.556 ops/s
Iteration  29: 144713.607 ops/s
Iteration  30: 143610.390 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V2":
  144160.489 ±(99.9%) 520.627 ops/s [Average]
  (min, avg, max) = (142138.207, 144160.489, 145157.671), stdev = 779.250
  CI (99.9%): [143639.862, 144681.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                 Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V2  thrpt   30  144160.489 ± 520.627  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 92938.802 ops/s
# Warmup Iteration   2: 170909.820 ops/s
# Warmup Iteration   3: 214935.859 ops/s
# Warmup Iteration   4: 307400.769 ops/s
# Warmup Iteration   5: 309569.250 ops/s
# Warmup Iteration   6: 303969.962 ops/s
# Warmup Iteration   7: 306973.665 ops/s
# Warmup Iteration   8: 307178.843 ops/s
# Warmup Iteration   9: 305260.176 ops/s
# Warmup Iteration  10: 308492.351 ops/s
# Warmup Iteration  11: 211922.310 ops/s
# Warmup Iteration  12: 308888.661 ops/s
# Warmup Iteration  13: 308445.654 ops/s
# Warmup Iteration  14: 308701.842 ops/s
# Warmup Iteration  15: 308826.636 ops/s
# Warmup Iteration  16: 308536.231 ops/s
# Warmup Iteration  17: 304717.948 ops/s
# Warmup Iteration  18: 304226.219 ops/s
# Warmup Iteration  19: 305215.668 ops/s
# Warmup Iteration  20: 305311.136 ops/s
# Warmup Iteration  21: 305218.574 ops/s
# Warmup Iteration  22: 304687.600 ops/s
# Warmup Iteration  23: 304263.247 ops/s
# Warmup Iteration  24: 306357.422 ops/s
# Warmup Iteration  25: 305964.003 ops/s
# Warmup Iteration  26: 304432.448 ops/s
# Warmup Iteration  27: 303624.828 ops/s
# Warmup Iteration  28: 304515.423 ops/s
# Warmup Iteration  29: 304617.006 ops/s
# Warmup Iteration  30: 304488.245 ops/s
Iteration   1: 304503.048 ops/s
Iteration   2: 305015.558 ops/s
Iteration   3: 304460.252 ops/s
Iteration   4: 303586.333 ops/s
Iteration   5: 305858.115 ops/s
Iteration   6: 305053.944 ops/s
Iteration   7: 305684.358 ops/s
Iteration   8: 304707.762 ops/s
Iteration   9: 305524.285 ops/s
Iteration  10: 305089.724 ops/s
Iteration  11: 304233.562 ops/s
Iteration  12: 304637.032 ops/s
Iteration  13: 304252.721 ops/s
Iteration  14: 305141.023 ops/s
Iteration  15: 305321.512 ops/s
Iteration  16: 305135.951 ops/s
Iteration  17: 305537.581 ops/s
Iteration  18: 303952.321 ops/s
Iteration  19: 303308.292 ops/s
Iteration  20: 304467.353 ops/s
Iteration  21: 303263.142 ops/s
Iteration  22: 304149.309 ops/s
Iteration  23: 304076.535 ops/s
Iteration  24: 303311.262 ops/s
Iteration  25: 305739.841 ops/s
Iteration  26: 305362.851 ops/s
Iteration  27: 303367.426 ops/s
Iteration  28: 305168.622 ops/s
Iteration  29: 305407.922 ops/s
Iteration  30: 305205.087 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_PROTO3":
  304684.091 ±(99.9%) 527.777 ops/s [Average]
  (min, avg, max) = (303263.142, 304684.091, 305858.115), stdev = 789.952
  CI (99.9%): [304156.313, 305211.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_PROTO3  thrpt   30  304684.091 ± 527.777  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28418.988 ops/s
# Warmup Iteration   2: 61998.505 ops/s
# Warmup Iteration   3: 123798.507 ops/s
# Warmup Iteration   4: 133958.500 ops/s
# Warmup Iteration   5: 134884.185 ops/s
# Warmup Iteration   6: 134230.405 ops/s
# Warmup Iteration   7: 104925.627 ops/s
# Warmup Iteration   8: 130505.421 ops/s
# Warmup Iteration   9: 134180.176 ops/s
# Warmup Iteration  10: 135146.358 ops/s
# Warmup Iteration  11: 133459.378 ops/s
# Warmup Iteration  12: 135189.783 ops/s
# Warmup Iteration  13: 134208.232 ops/s
# Warmup Iteration  14: 134491.688 ops/s
# Warmup Iteration  15: 133544.206 ops/s
# Warmup Iteration  16: 134623.818 ops/s
# Warmup Iteration  17: 133576.982 ops/s
# Warmup Iteration  18: 133611.421 ops/s
# Warmup Iteration  19: 133808.407 ops/s
# Warmup Iteration  20: 133300.269 ops/s
# Warmup Iteration  21: 133178.224 ops/s
# Warmup Iteration  22: 133932.528 ops/s
# Warmup Iteration  23: 133849.612 ops/s
# Warmup Iteration  24: 133303.251 ops/s
# Warmup Iteration  25: 133264.964 ops/s
# Warmup Iteration  26: 134180.714 ops/s
# Warmup Iteration  27: 132223.969 ops/s
# Warmup Iteration  28: 134255.208 ops/s
# Warmup Iteration  29: 133211.922 ops/s
# Warmup Iteration  30: 133653.526 ops/s
Iteration   1: 133020.160 ops/s
Iteration   2: 131621.391 ops/s
Iteration   3: 133035.918 ops/s
Iteration   4: 133564.497 ops/s
Iteration   5: 134092.580 ops/s
Iteration   6: 133393.885 ops/s
Iteration   7: 134639.113 ops/s
Iteration   8: 134562.192 ops/s
Iteration   9: 133151.466 ops/s
Iteration  10: 133077.579 ops/s
Iteration  11: 132688.129 ops/s
Iteration  12: 132001.300 ops/s
Iteration  13: 131610.517 ops/s
Iteration  14: 131900.568 ops/s
Iteration  15: 132832.464 ops/s
Iteration  16: 133562.961 ops/s
Iteration  17: 134761.175 ops/s
Iteration  18: 134203.780 ops/s
Iteration  19: 133924.953 ops/s
Iteration  20: 133710.267 ops/s
Iteration  21: 134119.406 ops/s
Iteration  22: 134646.926 ops/s
Iteration  23: 132169.510 ops/s
Iteration  24: 132798.288 ops/s
Iteration  25: 134329.166 ops/s
Iteration  26: 134002.584 ops/s
Iteration  27: 132955.321 ops/s
Iteration  28: 132604.653 ops/s
Iteration  29: 133737.094 ops/s
Iteration  30: 133167.211 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V2":
  133329.502 ±(99.9%) 609.765 ops/s [Average]
  (min, avg, max) = (131610.517, 133329.502, 134761.175), stdev = 912.668
  CI (99.9%): [132719.737, 133939.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V2  thrpt   30  133329.502 ± 609.765  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 114474.308 ops/s
# Warmup Iteration   2: 173399.572 ops/s
# Warmup Iteration   3: 236283.464 ops/s
# Warmup Iteration   4: 309839.364 ops/s
# Warmup Iteration   5: 307254.891 ops/s
# Warmup Iteration   6: 312754.863 ops/s
# Warmup Iteration   7: 310658.156 ops/s
# Warmup Iteration   8: 311655.230 ops/s
# Warmup Iteration   9: 311619.694 ops/s
# Warmup Iteration  10: 296594.597 ops/s
# Warmup Iteration  11: 237886.385 ops/s
# Warmup Iteration  12: 310920.403 ops/s
# Warmup Iteration  13: 314075.820 ops/s
# Warmup Iteration  14: 312949.506 ops/s
# Warmup Iteration  15: 314127.991 ops/s
# Warmup Iteration  16: 314475.856 ops/s
# Warmup Iteration  17: 311949.097 ops/s
# Warmup Iteration  18: 313690.541 ops/s
# Warmup Iteration  19: 312607.432 ops/s
# Warmup Iteration  20: 313036.421 ops/s
# Warmup Iteration  21: 312134.452 ops/s
# Warmup Iteration  22: 311358.432 ops/s
# Warmup Iteration  23: 313413.353 ops/s
# Warmup Iteration  24: 312843.279 ops/s
# Warmup Iteration  25: 312768.410 ops/s
# Warmup Iteration  26: 312032.070 ops/s
# Warmup Iteration  27: 311162.204 ops/s
# Warmup Iteration  28: 314310.469 ops/s
# Warmup Iteration  29: 312162.135 ops/s
# Warmup Iteration  30: 312128.949 ops/s
Iteration   1: 313082.344 ops/s
Iteration   2: 311843.334 ops/s
Iteration   3: 311719.277 ops/s
Iteration   4: 312464.950 ops/s
Iteration   5: 313077.224 ops/s
Iteration   6: 313422.654 ops/s
Iteration   7: 313102.112 ops/s
Iteration   8: 312081.484 ops/s
Iteration   9: 312260.802 ops/s
Iteration  10: 312282.889 ops/s
Iteration  11: 312113.460 ops/s
Iteration  12: 312444.119 ops/s
Iteration  13: 312515.215 ops/s
Iteration  14: 311388.204 ops/s
Iteration  15: 314288.993 ops/s
Iteration  16: 313550.313 ops/s
Iteration  17: 313409.769 ops/s
Iteration  18: 313035.495 ops/s
Iteration  19: 313379.110 ops/s
Iteration  20: 311116.818 ops/s
Iteration  21: 313732.164 ops/s
Iteration  22: 313801.403 ops/s
Iteration  23: 312171.233 ops/s
Iteration  24: 314415.229 ops/s
Iteration  25: 313930.465 ops/s
Iteration  26: 312735.058 ops/s
Iteration  27: 313719.782 ops/s
Iteration  28: 313222.227 ops/s
Iteration  29: 313460.396 ops/s
Iteration  30: 312687.350 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_PROTO3":
  312881.796 ±(99.9%) 560.139 ops/s [Average]
  (min, avg, max) = (311116.818, 312881.796, 314415.229), stdev = 838.390
  CI (99.9%): [312321.656, 313441.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_PROTO3  thrpt   30  312881.796 ± 560.139  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23998.829 ops/s
# Warmup Iteration   2: 38893.786 ops/s
# Warmup Iteration   3: 68138.883 ops/s
# Warmup Iteration   4: 99148.239 ops/s
# Warmup Iteration   5: 100343.650 ops/s
# Warmup Iteration   6: 101222.793 ops/s
# Warmup Iteration   7: 99472.428 ops/s
# Warmup Iteration   8: 101303.443 ops/s
# Warmup Iteration   9: 75558.449 ops/s
# Warmup Iteration  10: 103830.338 ops/s
# Warmup Iteration  11: 103594.502 ops/s
# Warmup Iteration  12: 102932.669 ops/s
# Warmup Iteration  13: 103765.509 ops/s
# Warmup Iteration  14: 102438.714 ops/s
# Warmup Iteration  15: 103544.981 ops/s
# Warmup Iteration  16: 103654.293 ops/s
# Warmup Iteration  17: 102125.493 ops/s
# Warmup Iteration  18: 102689.233 ops/s
# Warmup Iteration  19: 102333.897 ops/s
# Warmup Iteration  20: 102789.076 ops/s
# Warmup Iteration  21: 102980.190 ops/s
# Warmup Iteration  22: 102723.128 ops/s
# Warmup Iteration  23: 101642.357 ops/s
# Warmup Iteration  24: 101805.759 ops/s
# Warmup Iteration  25: 102288.887 ops/s
# Warmup Iteration  26: 103245.131 ops/s
# Warmup Iteration  27: 102805.348 ops/s
# Warmup Iteration  28: 102507.607 ops/s
# Warmup Iteration  29: 102835.028 ops/s
# Warmup Iteration  30: 103209.113 ops/s
Iteration   1: 102122.638 ops/s
Iteration   2: 102538.437 ops/s
Iteration   3: 103142.508 ops/s
Iteration   4: 102745.464 ops/s
Iteration   5: 103222.920 ops/s
Iteration   6: 101975.384 ops/s
Iteration   7: 102771.871 ops/s
Iteration   8: 102460.159 ops/s
Iteration   9: 103079.896 ops/s
Iteration  10: 102641.501 ops/s
Iteration  11: 102636.950 ops/s
Iteration  12: 103461.362 ops/s
Iteration  13: 102896.658 ops/s
Iteration  14: 103187.874 ops/s
Iteration  15: 101481.378 ops/s
Iteration  16: 102425.302 ops/s
Iteration  17: 103217.871 ops/s
Iteration  18: 102370.773 ops/s
Iteration  19: 102181.149 ops/s
Iteration  20: 102830.701 ops/s
Iteration  21: 102830.973 ops/s
Iteration  22: 102801.049 ops/s
Iteration  23: 103473.706 ops/s
Iteration  24: 102849.778 ops/s
Iteration  25: 101956.203 ops/s
Iteration  26: 102181.309 ops/s
Iteration  27: 102586.739 ops/s
Iteration  28: 101968.428 ops/s
Iteration  29: 102382.780 ops/s
Iteration  30: 102625.789 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V2":
  102634.918 ±(99.9%) 319.881 ops/s [Average]
  (min, avg, max) = (101481.378, 102634.918, 103473.706), stdev = 478.783
  CI (99.9%): [102315.037, 102954.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V2  thrpt   30  102634.918 ± 319.881  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57655.190 ops/s
# Warmup Iteration   2: 144055.211 ops/s
# Warmup Iteration   3: 149711.892 ops/s
# Warmup Iteration   4: 261318.164 ops/s
# Warmup Iteration   5: 259236.712 ops/s
# Warmup Iteration   6: 256824.182 ops/s
# Warmup Iteration   7: 257980.845 ops/s
# Warmup Iteration   8: 257940.763 ops/s
# Warmup Iteration   9: 257340.328 ops/s
# Warmup Iteration  10: 257288.118 ops/s
# Warmup Iteration  11: 236775.788 ops/s
# Warmup Iteration  12: 200246.159 ops/s
# Warmup Iteration  13: 260233.724 ops/s
# Warmup Iteration  14: 259401.134 ops/s
# Warmup Iteration  15: 259882.754 ops/s
# Warmup Iteration  16: 260392.393 ops/s
# Warmup Iteration  17: 260241.926 ops/s
# Warmup Iteration  18: 260522.756 ops/s
# Warmup Iteration  19: 259951.617 ops/s
# Warmup Iteration  20: 260538.029 ops/s
# Warmup Iteration  21: 260801.405 ops/s
# Warmup Iteration  22: 260601.385 ops/s
# Warmup Iteration  23: 260902.069 ops/s
# Warmup Iteration  24: 260560.571 ops/s
# Warmup Iteration  25: 261329.721 ops/s
# Warmup Iteration  26: 260564.832 ops/s
# Warmup Iteration  27: 260573.992 ops/s
# Warmup Iteration  28: 260705.769 ops/s
# Warmup Iteration  29: 260324.729 ops/s
# Warmup Iteration  30: 260989.914 ops/s
Iteration   1: 260468.157 ops/s
Iteration   2: 260976.692 ops/s
Iteration   3: 260941.040 ops/s
Iteration   4: 260281.105 ops/s
Iteration   5: 259643.896 ops/s
Iteration   6: 259999.925 ops/s
Iteration   7: 260475.413 ops/s
Iteration   8: 260332.108 ops/s
Iteration   9: 260977.101 ops/s
Iteration  10: 260806.979 ops/s
Iteration  11: 260857.039 ops/s
Iteration  12: 260726.992 ops/s
Iteration  13: 260800.285 ops/s
Iteration  14: 260209.009 ops/s
Iteration  15: 258960.686 ops/s
Iteration  16: 259383.619 ops/s
Iteration  17: 260436.174 ops/s
Iteration  18: 260552.380 ops/s
Iteration  19: 260966.671 ops/s
Iteration  20: 260591.293 ops/s
Iteration  21: 260667.688 ops/s
Iteration  22: 259703.210 ops/s
Iteration  23: 259684.310 ops/s
Iteration  24: 259684.251 ops/s
Iteration  25: 259099.458 ops/s
Iteration  26: 260362.905 ops/s
Iteration  27: 260323.925 ops/s
Iteration  28: 259948.138 ops/s
Iteration  29: 259360.303 ops/s
Iteration  30: 259448.950 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_PROTO3":
  260222.323 ±(99.9%) 400.234 ops/s [Average]
  (min, avg, max) = (258960.686, 260222.323, 260977.101), stdev = 599.052
  CI (99.9%): [259822.089, 260622.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_PROTO3  thrpt   30  260222.323 ± 400.234  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21735.567 ops/s
# Warmup Iteration   2: 39419.041 ops/s
# Warmup Iteration   3: 62000.493 ops/s
# Warmup Iteration   4: 92362.458 ops/s
# Warmup Iteration   5: 94455.365 ops/s
# Warmup Iteration   6: 95129.591 ops/s
# Warmup Iteration   7: 93736.562 ops/s
# Warmup Iteration   8: 94454.600 ops/s
# Warmup Iteration   9: 75618.022 ops/s
# Warmup Iteration  10: 87983.328 ops/s
# Warmup Iteration  11: 93275.967 ops/s
# Warmup Iteration  12: 95827.880 ops/s
# Warmup Iteration  13: 95827.808 ops/s
# Warmup Iteration  14: 94400.153 ops/s
# Warmup Iteration  15: 94645.478 ops/s
# Warmup Iteration  16: 94464.030 ops/s
# Warmup Iteration  17: 93762.897 ops/s
# Warmup Iteration  18: 94100.591 ops/s
# Warmup Iteration  19: 93558.226 ops/s
# Warmup Iteration  20: 94174.768 ops/s
# Warmup Iteration  21: 93922.365 ops/s
# Warmup Iteration  22: 93275.790 ops/s
# Warmup Iteration  23: 94323.175 ops/s
# Warmup Iteration  24: 93716.076 ops/s
# Warmup Iteration  25: 93527.755 ops/s
# Warmup Iteration  26: 94520.295 ops/s
# Warmup Iteration  27: 94225.216 ops/s
# Warmup Iteration  28: 93463.116 ops/s
# Warmup Iteration  29: 93857.273 ops/s
# Warmup Iteration  30: 93980.969 ops/s
Iteration   1: 94069.967 ops/s
Iteration   2: 94392.380 ops/s
Iteration   3: 94607.045 ops/s
Iteration   4: 94297.753 ops/s
Iteration   5: 94374.116 ops/s
Iteration   6: 93428.673 ops/s
Iteration   7: 93679.982 ops/s
Iteration   8: 93972.537 ops/s
Iteration   9: 94738.026 ops/s
Iteration  10: 94217.484 ops/s
Iteration  11: 94316.247 ops/s
Iteration  12: 95018.182 ops/s
Iteration  13: 93351.593 ops/s
Iteration  14: 95208.174 ops/s
Iteration  15: 93359.357 ops/s
Iteration  16: 93646.693 ops/s
Iteration  17: 94152.213 ops/s
Iteration  18: 93520.716 ops/s
Iteration  19: 93714.564 ops/s
Iteration  20: 93223.823 ops/s
Iteration  21: 93134.724 ops/s
Iteration  22: 94770.067 ops/s
Iteration  23: 94925.089 ops/s
Iteration  24: 94570.572 ops/s
Iteration  25: 94397.182 ops/s
Iteration  26: 93887.001 ops/s
Iteration  27: 93549.666 ops/s
Iteration  28: 94083.814 ops/s
Iteration  29: 94606.466 ops/s
Iteration  30: 93132.774 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V2":
  94078.229 ±(99.9%) 394.405 ops/s [Average]
  (min, avg, max) = (93132.774, 94078.229, 95208.174), stdev = 590.327
  CI (99.9%): [93683.824, 94472.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V2  thrpt   30  94078.229 ± 394.405  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62567.312 ops/s
# Warmup Iteration   2: 143731.167 ops/s
# Warmup Iteration   3: 149366.943 ops/s
# Warmup Iteration   4: 246669.335 ops/s
# Warmup Iteration   5: 243475.942 ops/s
# Warmup Iteration   6: 240095.608 ops/s
# Warmup Iteration   7: 242053.440 ops/s
# Warmup Iteration   8: 242694.032 ops/s
# Warmup Iteration   9: 243352.169 ops/s
# Warmup Iteration  10: 242179.014 ops/s
# Warmup Iteration  11: 244865.973 ops/s
# Warmup Iteration  12: 180887.771 ops/s
# Warmup Iteration  13: 237515.640 ops/s
# Warmup Iteration  14: 244460.421 ops/s
# Warmup Iteration  15: 245649.551 ops/s
# Warmup Iteration  16: 244987.878 ops/s
# Warmup Iteration  17: 244663.060 ops/s
# Warmup Iteration  18: 244439.371 ops/s
# Warmup Iteration  19: 244994.392 ops/s
# Warmup Iteration  20: 243688.665 ops/s
# Warmup Iteration  21: 243827.970 ops/s
# Warmup Iteration  22: 245291.746 ops/s
# Warmup Iteration  23: 244565.851 ops/s
# Warmup Iteration  24: 244492.791 ops/s
# Warmup Iteration  25: 244788.908 ops/s
# Warmup Iteration  26: 244723.046 ops/s
# Warmup Iteration  27: 245263.277 ops/s
# Warmup Iteration  28: 245219.906 ops/s
# Warmup Iteration  29: 243619.780 ops/s
# Warmup Iteration  30: 245583.707 ops/s
Iteration   1: 245084.709 ops/s
Iteration   2: 245034.947 ops/s
Iteration   3: 244213.834 ops/s
Iteration   4: 245217.403 ops/s
Iteration   5: 244397.393 ops/s
Iteration   6: 245423.606 ops/s
Iteration   7: 244429.947 ops/s
Iteration   8: 244558.354 ops/s
Iteration   9: 244670.838 ops/s
Iteration  10: 244561.492 ops/s
Iteration  11: 244720.647 ops/s
Iteration  12: 244765.524 ops/s
Iteration  13: 244817.956 ops/s
Iteration  14: 245407.852 ops/s
Iteration  15: 244641.372 ops/s
Iteration  16: 244887.042 ops/s
Iteration  17: 245307.754 ops/s
Iteration  18: 244556.967 ops/s
Iteration  19: 244035.475 ops/s
Iteration  20: 243259.912 ops/s
Iteration  21: 244028.979 ops/s
Iteration  22: 244845.438 ops/s
Iteration  23: 244392.938 ops/s
Iteration  24: 244718.641 ops/s
Iteration  25: 244184.602 ops/s
Iteration  26: 244493.259 ops/s
Iteration  27: 243497.868 ops/s
Iteration  28: 242171.292 ops/s
Iteration  29: 242537.785 ops/s
Iteration  30: 245420.421 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_PROTO3":
  244476.141 ±(99.9%) 516.931 ops/s [Average]
  (min, avg, max) = (242171.292, 244476.141, 245423.606), stdev = 773.718
  CI (99.9%): [243959.210, 244993.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_PROTO3  thrpt   30  244476.141 ± 516.931  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6899.668 ops/s
# Warmup Iteration   2: 10719.663 ops/s
# Warmup Iteration   3: 10890.962 ops/s
# Warmup Iteration   4: 13589.653 ops/s
# Warmup Iteration   5: 16031.702 ops/s
# Warmup Iteration   6: 15964.187 ops/s
# Warmup Iteration   7: 16160.681 ops/s
# Warmup Iteration   8: 15811.677 ops/s
# Warmup Iteration   9: 16132.568 ops/s
# Warmup Iteration  10: 15978.345 ops/s
# Warmup Iteration  11: 16148.122 ops/s
# Warmup Iteration  12: 16076.118 ops/s
# Warmup Iteration  13: 16182.930 ops/s
# Warmup Iteration  14: 16178.671 ops/s
# Warmup Iteration  15: 15928.231 ops/s
# Warmup Iteration  16: 16126.830 ops/s
# Warmup Iteration  17: 12706.376 ops/s
# Warmup Iteration  18: 14855.832 ops/s
# Warmup Iteration  19: 16040.771 ops/s
# Warmup Iteration  20: 16003.608 ops/s
# Warmup Iteration  21: 15917.204 ops/s
# Warmup Iteration  22: 16000.937 ops/s
# Warmup Iteration  23: 16023.260 ops/s
# Warmup Iteration  24: 15950.703 ops/s
# Warmup Iteration  25: 16042.186 ops/s
# Warmup Iteration  26: 15998.783 ops/s
# Warmup Iteration  27: 16066.541 ops/s
# Warmup Iteration  28: 16046.266 ops/s
# Warmup Iteration  29: 15915.666 ops/s
# Warmup Iteration  30: 15911.671 ops/s
Iteration   1: 15954.792 ops/s
Iteration   2: 16012.404 ops/s
Iteration   3: 16054.770 ops/s
Iteration   4: 16047.514 ops/s
Iteration   5: 16041.012 ops/s
Iteration   6: 15973.270 ops/s
Iteration   7: 15954.280 ops/s
Iteration   8: 16048.076 ops/s
Iteration   9: 16029.982 ops/s
Iteration  10: 15964.054 ops/s
Iteration  11: 16078.855 ops/s
Iteration  12: 16083.161 ops/s
Iteration  13: 16077.673 ops/s
Iteration  14: 15979.480 ops/s
Iteration  15: 15975.543 ops/s
Iteration  16: 16105.289 ops/s
Iteration  17: 16031.072 ops/s
Iteration  18: 16051.869 ops/s
Iteration  19: 16017.442 ops/s
Iteration  20: 16009.872 ops/s
Iteration  21: 16007.396 ops/s
Iteration  22: 16025.131 ops/s
Iteration  23: 16076.227 ops/s
Iteration  24: 16013.886 ops/s
Iteration  25: 16031.598 ops/s
Iteration  26: 15995.256 ops/s
Iteration  27: 15940.662 ops/s
Iteration  28: 15880.430 ops/s
Iteration  29: 15985.794 ops/s
Iteration  30: 15995.193 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V2":
  16014.733 ±(99.9%) 33.062 ops/s [Average]
  (min, avg, max) = (15880.430, 16014.733, 16105.289), stdev = 49.485
  CI (99.9%): [15981.671, 16047.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score    Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V2  thrpt   30  16014.733 ± 33.062  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16362.338 ops/s
# Warmup Iteration   2: 24791.416 ops/s
# Warmup Iteration   3: 24449.204 ops/s
# Warmup Iteration   4: 38218.444 ops/s
# Warmup Iteration   5: 38522.322 ops/s
# Warmup Iteration   6: 38840.664 ops/s
# Warmup Iteration   7: 37693.809 ops/s
# Warmup Iteration   8: 38633.549 ops/s
# Warmup Iteration   9: 38198.655 ops/s
# Warmup Iteration  10: 38567.989 ops/s
# Warmup Iteration  11: 38470.365 ops/s
# Warmup Iteration  12: 38400.858 ops/s
# Warmup Iteration  13: 38698.776 ops/s
# Warmup Iteration  14: 35162.793 ops/s
# Warmup Iteration  15: 30872.362 ops/s
# Warmup Iteration  16: 38828.518 ops/s
# Warmup Iteration  17: 38789.097 ops/s
# Warmup Iteration  18: 38779.691 ops/s
# Warmup Iteration  19: 38854.004 ops/s
# Warmup Iteration  20: 38724.877 ops/s
# Warmup Iteration  21: 38723.738 ops/s
# Warmup Iteration  22: 38829.923 ops/s
# Warmup Iteration  23: 38709.391 ops/s
# Warmup Iteration  24: 38522.583 ops/s
# Warmup Iteration  25: 38568.123 ops/s
# Warmup Iteration  26: 38816.553 ops/s
# Warmup Iteration  27: 38667.488 ops/s
# Warmup Iteration  28: 38698.318 ops/s
# Warmup Iteration  29: 38564.098 ops/s
# Warmup Iteration  30: 38639.970 ops/s
Iteration   1: 38610.774 ops/s
Iteration   2: 38917.752 ops/s
Iteration   3: 38990.421 ops/s
Iteration   4: 38922.316 ops/s
Iteration   5: 38881.215 ops/s
Iteration   6: 38749.494 ops/s
Iteration   7: 38671.864 ops/s
Iteration   8: 38736.893 ops/s
Iteration   9: 38852.929 ops/s
Iteration  10: 38719.492 ops/s
Iteration  11: 38727.827 ops/s
Iteration  12: 38710.419 ops/s
Iteration  13: 38818.495 ops/s
Iteration  14: 38786.393 ops/s
Iteration  15: 38658.156 ops/s
Iteration  16: 38722.867 ops/s
Iteration  17: 38522.817 ops/s
Iteration  18: 38641.211 ops/s
Iteration  19: 38641.122 ops/s
Iteration  20: 38758.365 ops/s
Iteration  21: 38706.302 ops/s
Iteration  22: 38623.723 ops/s
Iteration  23: 38897.197 ops/s
Iteration  24: 38924.308 ops/s
Iteration  25: 38773.574 ops/s
Iteration  26: 38684.076 ops/s
Iteration  27: 38750.500 ops/s
Iteration  28: 38544.275 ops/s
Iteration  29: 38740.662 ops/s
Iteration  30: 38921.793 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_PROTO3":
  38753.574 ±(99.9%) 79.344 ops/s [Average]
  (min, avg, max) = (38522.817, 38753.574, 38990.421), stdev = 118.758
  CI (99.9%): [38674.230, 38832.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score    Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_PROTO3  thrpt   30  38753.574 ± 79.344  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47647.750 ops/s
# Warmup Iteration   2: 82766.811 ops/s
# Warmup Iteration   3: 144263.339 ops/s
# Warmup Iteration   4: 140975.098 ops/s
# Warmup Iteration   5: 140185.722 ops/s
# Warmup Iteration   6: 137592.657 ops/s
# Warmup Iteration   7: 108002.416 ops/s
# Warmup Iteration   8: 139379.437 ops/s
# Warmup Iteration   9: 140659.052 ops/s
# Warmup Iteration  10: 141445.725 ops/s
# Warmup Iteration  11: 142030.823 ops/s
# Warmup Iteration  12: 141899.846 ops/s
# Warmup Iteration  13: 140259.554 ops/s
# Warmup Iteration  14: 141702.259 ops/s
# Warmup Iteration  15: 141413.063 ops/s
# Warmup Iteration  16: 140810.823 ops/s
# Warmup Iteration  17: 142892.884 ops/s
# Warmup Iteration  18: 140670.241 ops/s
# Warmup Iteration  19: 140644.667 ops/s
# Warmup Iteration  20: 140114.363 ops/s
# Warmup Iteration  21: 141887.788 ops/s
# Warmup Iteration  22: 141853.582 ops/s
# Warmup Iteration  23: 142431.719 ops/s
# Warmup Iteration  24: 143103.000 ops/s
# Warmup Iteration  25: 142503.807 ops/s
# Warmup Iteration  26: 142796.397 ops/s
# Warmup Iteration  27: 142622.141 ops/s
# Warmup Iteration  28: 143183.683 ops/s
# Warmup Iteration  29: 142150.124 ops/s
# Warmup Iteration  30: 142116.466 ops/s
Iteration   1: 142378.212 ops/s
Iteration   2: 142445.619 ops/s
Iteration   3: 142342.938 ops/s
Iteration   4: 140326.443 ops/s
Iteration   5: 142818.123 ops/s
Iteration   6: 142009.679 ops/s
Iteration   7: 141044.188 ops/s
Iteration   8: 141452.183 ops/s
Iteration   9: 141627.740 ops/s
Iteration  10: 142829.291 ops/s
Iteration  11: 141801.457 ops/s
Iteration  12: 141091.696 ops/s
Iteration  13: 141873.293 ops/s
Iteration  14: 142341.204 ops/s
Iteration  15: 142820.715 ops/s
Iteration  16: 142181.225 ops/s
Iteration  17: 141684.189 ops/s
Iteration  18: 142275.845 ops/s
Iteration  19: 142660.032 ops/s
Iteration  20: 142033.435 ops/s
Iteration  21: 140452.590 ops/s
Iteration  22: 139881.188 ops/s
Iteration  23: 140613.760 ops/s
Iteration  24: 142104.887 ops/s
Iteration  25: 141772.464 ops/s
Iteration  26: 142251.088 ops/s
Iteration  27: 142142.309 ops/s
Iteration  28: 142131.308 ops/s
Iteration  29: 142733.013 ops/s
Iteration  30: 142569.977 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2":
  141889.670 ±(99.9%) 522.714 ops/s [Average]
  (min, avg, max) = (139881.188, 141889.670, 142829.291), stdev = 782.374
  CI (99.9%): [141366.956, 142412.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2  thrpt   30  141889.670 ± 522.714  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122329.655 ops/s
# Warmup Iteration   2: 184946.908 ops/s
# Warmup Iteration   3: 194734.350 ops/s
# Warmup Iteration   4: 358721.028 ops/s
# Warmup Iteration   5: 347936.893 ops/s
# Warmup Iteration   6: 342330.572 ops/s
# Warmup Iteration   7: 348379.343 ops/s
# Warmup Iteration   8: 360669.991 ops/s
# Warmup Iteration   9: 359927.697 ops/s
# Warmup Iteration  10: 359434.769 ops/s
# Warmup Iteration  11: 349312.901 ops/s
# Warmup Iteration  12: 238899.351 ops/s
# Warmup Iteration  13: 361105.549 ops/s
# Warmup Iteration  14: 360803.744 ops/s
# Warmup Iteration  15: 360981.680 ops/s
# Warmup Iteration  16: 359352.936 ops/s
# Warmup Iteration  17: 357642.399 ops/s
# Warmup Iteration  18: 358603.690 ops/s
# Warmup Iteration  19: 357622.253 ops/s
# Warmup Iteration  20: 357440.840 ops/s
# Warmup Iteration  21: 357627.994 ops/s
# Warmup Iteration  22: 358139.085 ops/s
# Warmup Iteration  23: 357491.705 ops/s
# Warmup Iteration  24: 357765.320 ops/s
# Warmup Iteration  25: 358153.195 ops/s
# Warmup Iteration  26: 358035.090 ops/s
# Warmup Iteration  27: 357538.449 ops/s
# Warmup Iteration  28: 357897.570 ops/s
# Warmup Iteration  29: 357805.915 ops/s
# Warmup Iteration  30: 358464.247 ops/s
Iteration   1: 359093.676 ops/s
Iteration   2: 358951.751 ops/s
Iteration   3: 357487.122 ops/s
Iteration   4: 357026.282 ops/s
Iteration   5: 358177.791 ops/s
Iteration   6: 357897.306 ops/s
Iteration   7: 357448.505 ops/s
Iteration   8: 357112.671 ops/s
Iteration   9: 356397.656 ops/s
Iteration  10: 359128.681 ops/s
Iteration  11: 357672.021 ops/s
Iteration  12: 358032.795 ops/s
Iteration  13: 358676.020 ops/s
Iteration  14: 358468.250 ops/s
Iteration  15: 357527.728 ops/s
Iteration  16: 357234.603 ops/s
Iteration  17: 357870.385 ops/s
Iteration  18: 357898.231 ops/s
Iteration  19: 358132.164 ops/s
Iteration  20: 357945.427 ops/s
Iteration  21: 357661.521 ops/s
Iteration  22: 358798.597 ops/s
Iteration  23: 358032.310 ops/s
Iteration  24: 357647.094 ops/s
Iteration  25: 359281.211 ops/s
Iteration  26: 359699.429 ops/s
Iteration  27: 355530.071 ops/s
Iteration  28: 358230.767 ops/s
Iteration  29: 357469.831 ops/s
Iteration  30: 358044.718 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3":
  357952.487 ±(99.9%) 578.020 ops/s [Average]
  (min, avg, max) = (355530.071, 357952.487, 359699.429), stdev = 865.154
  CI (99.9%): [357374.467, 358530.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3  thrpt   30  357952.487 ± 578.020  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13994.972 ops/s
# Warmup Iteration   2: 24944.794 ops/s
# Warmup Iteration   3: 28781.621 ops/s
# Warmup Iteration   4: 46465.094 ops/s
# Warmup Iteration   5: 47931.649 ops/s
# Warmup Iteration   6: 47928.448 ops/s
# Warmup Iteration   7: 47719.892 ops/s
# Warmup Iteration   8: 47406.345 ops/s
# Warmup Iteration   9: 47557.208 ops/s
# Warmup Iteration  10: 47643.023 ops/s
# Warmup Iteration  11: 47307.843 ops/s
# Warmup Iteration  12: 48322.413 ops/s
# Warmup Iteration  13: 34978.612 ops/s
# Warmup Iteration  14: 48324.348 ops/s
# Warmup Iteration  15: 48354.386 ops/s
# Warmup Iteration  16: 48504.493 ops/s
# Warmup Iteration  17: 47974.189 ops/s
# Warmup Iteration  18: 48081.291 ops/s
# Warmup Iteration  19: 48252.759 ops/s
# Warmup Iteration  20: 48024.750 ops/s
# Warmup Iteration  21: 48188.089 ops/s
# Warmup Iteration  22: 47860.149 ops/s
# Warmup Iteration  23: 48087.510 ops/s
# Warmup Iteration  24: 48040.676 ops/s
# Warmup Iteration  25: 47940.260 ops/s
# Warmup Iteration  26: 48224.710 ops/s
# Warmup Iteration  27: 47857.639 ops/s
# Warmup Iteration  28: 47889.599 ops/s
# Warmup Iteration  29: 47949.189 ops/s
# Warmup Iteration  30: 48059.709 ops/s
Iteration   1: 48198.328 ops/s
Iteration   2: 47971.727 ops/s
Iteration   3: 48098.420 ops/s
Iteration   4: 48171.450 ops/s
Iteration   5: 48299.093 ops/s
Iteration   6: 48242.925 ops/s
Iteration   7: 48410.899 ops/s
Iteration   8: 47925.344 ops/s
Iteration   9: 47859.052 ops/s
Iteration  10: 47966.128 ops/s
Iteration  11: 48422.099 ops/s
Iteration  12: 48518.388 ops/s
Iteration  13: 48011.907 ops/s
Iteration  14: 48211.990 ops/s
Iteration  15: 47772.796 ops/s
Iteration  16: 47831.895 ops/s
Iteration  17: 47823.833 ops/s
Iteration  18: 47864.137 ops/s
Iteration  19: 48061.854 ops/s
Iteration  20: 47829.241 ops/s
Iteration  21: 48256.737 ops/s
Iteration  22: 48574.155 ops/s
Iteration  23: 48439.907 ops/s
Iteration  24: 48208.875 ops/s
Iteration  25: 48040.435 ops/s
Iteration  26: 48430.334 ops/s
Iteration  27: 47641.819 ops/s
Iteration  28: 47875.895 ops/s
Iteration  29: 47788.128 ops/s
Iteration  30: 48210.361 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V2":
  48098.605 ±(99.9%) 168.205 ops/s [Average]
  (min, avg, max) = (47641.819, 48098.605, 48574.155), stdev = 251.761
  CI (99.9%): [47930.400, 48266.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V2  thrpt   30  48098.605 ± 168.205  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42238.518 ops/s
# Warmup Iteration   2: 78240.369 ops/s
# Warmup Iteration   3: 78801.985 ops/s
# Warmup Iteration   4: 112400.552 ops/s
# Warmup Iteration   5: 125710.799 ops/s
# Warmup Iteration   6: 128133.042 ops/s
# Warmup Iteration   7: 125865.068 ops/s
# Warmup Iteration   8: 128011.336 ops/s
# Warmup Iteration   9: 126831.525 ops/s
# Warmup Iteration  10: 128439.702 ops/s
# Warmup Iteration  11: 127261.112 ops/s
# Warmup Iteration  12: 128735.041 ops/s
# Warmup Iteration  13: 126671.482 ops/s
# Warmup Iteration  14: 121575.766 ops/s
# Warmup Iteration  15: 92808.667 ops/s
# Warmup Iteration  16: 128866.625 ops/s
# Warmup Iteration  17: 128919.222 ops/s
# Warmup Iteration  18: 128709.213 ops/s
# Warmup Iteration  19: 128020.427 ops/s
# Warmup Iteration  20: 128595.511 ops/s
# Warmup Iteration  21: 128722.062 ops/s
# Warmup Iteration  22: 128811.356 ops/s
# Warmup Iteration  23: 129075.599 ops/s
# Warmup Iteration  24: 128247.138 ops/s
# Warmup Iteration  25: 128533.442 ops/s
# Warmup Iteration  26: 128771.153 ops/s
# Warmup Iteration  27: 128344.249 ops/s
# Warmup Iteration  28: 128445.393 ops/s
# Warmup Iteration  29: 128535.578 ops/s
# Warmup Iteration  30: 128414.231 ops/s
Iteration   1: 129104.799 ops/s
Iteration   2: 128270.434 ops/s
Iteration   3: 128354.568 ops/s
Iteration   4: 128371.322 ops/s
Iteration   5: 128844.326 ops/s
Iteration   6: 128673.290 ops/s
Iteration   7: 128399.839 ops/s
Iteration   8: 128478.526 ops/s
Iteration   9: 128436.369 ops/s
Iteration  10: 128553.160 ops/s
Iteration  11: 128735.882 ops/s
Iteration  12: 129006.762 ops/s
Iteration  13: 129159.373 ops/s
Iteration  14: 129087.808 ops/s
Iteration  15: 129197.150 ops/s
Iteration  16: 129154.454 ops/s
Iteration  17: 129614.163 ops/s
Iteration  18: 129431.991 ops/s
Iteration  19: 129195.218 ops/s
Iteration  20: 128812.200 ops/s
Iteration  21: 128785.677 ops/s
Iteration  22: 128723.173 ops/s
Iteration  23: 128705.782 ops/s
Iteration  24: 129147.028 ops/s
Iteration  25: 129078.958 ops/s
Iteration  26: 128834.026 ops/s
Iteration  27: 129020.497 ops/s
Iteration  28: 128505.794 ops/s
Iteration  29: 129142.688 ops/s
Iteration  30: 128335.997 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3":
  128838.708 ±(99.9%) 236.323 ops/s [Average]
  (min, avg, max) = (128270.434, 128838.708, 129614.163), stdev = 353.717
  CI (99.9%): [128602.386, 129075.031] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3  thrpt   30  128838.708 ± 236.323  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_directBuffer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_directBuffer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36050.007 ops/s
# Warmup Iteration   2: 68066.503 ops/s
# Warmup Iteration   3: 69686.478 ops/s
# Warmup Iteration   4: 71392.187 ops/s
# Warmup Iteration   5: 115075.880 ops/s
# Warmup Iteration   6: 96062.998 ops/s
# Warmup Iteration   7: 115428.067 ops/s
# Warmup Iteration   8: 94619.450 ops/s
# Warmup Iteration   9: 114592.165 ops/s
# Warmup Iteration  10: 94283.978 ops/s
# Warmup Iteration  11: 115265.388 ops/s
# Warmup Iteration  12: 95966.588 ops/s
# Warmup Iteration  13: 115997.309 ops/s
# Warmup Iteration  14: 99779.756 ops/s
# Warmup Iteration  15: 112958.546 ops/s
# Warmup Iteration  16: 111123.017 ops/s
# Warmup Iteration  17: 60132.069 ops/s
# Warmup Iteration  18: 110833.382 ops/s
# Warmup Iteration  19: 115925.072 ops/s
# Warmup Iteration  20: 87102.295 ops/s
# Warmup Iteration  21: 115684.192 ops/s
# Warmup Iteration  22: 115718.727 ops/s
# Warmup Iteration  23: 84896.925 ops/s
# Warmup Iteration  24: 115896.438 ops/s
# Warmup Iteration  25: 95278.828 ops/s
# Warmup Iteration  26: 103455.168 ops/s
# Warmup Iteration  27: 115567.417 ops/s
# Warmup Iteration  28: 86325.660 ops/s
# Warmup Iteration  29: 116181.158 ops/s
# Warmup Iteration  30: 116032.433 ops/s
Iteration   1: 76659.367 ops/s
Iteration   2: 115759.399 ops/s
Iteration   3: 115737.680 ops/s
Iteration   4: 115686.477 ops/s
Iteration   5: 116180.640 ops/s
Iteration   6: 89066.276 ops/s
Iteration   7: 115816.605 ops/s
Iteration   8: 115593.259 ops/s
Iteration   9: 115144.111 ops/s
Iteration  10: 115139.957 ops/s
Iteration  11: 91689.534 ops/s
Iteration  12: 103878.252 ops/s
Iteration  13: 115508.154 ops/s
Iteration  14: 116053.958 ops/s
Iteration  15: 115649.280 ops/s
Iteration  16: 100461.927 ops/s
Iteration  17: 103224.329 ops/s
Iteration  18: 115802.537 ops/s
Iteration  19: 115531.421 ops/s
Iteration  20: 115192.449 ops/s
Iteration  21: 101523.310 ops/s
Iteration  22: 90971.944 ops/s
Iteration  23: 115236.640 ops/s
Iteration  24: 115444.747 ops/s
Iteration  25: 115397.266 ops/s
Iteration  26: 116100.686 ops/s
Iteration  27: 79033.960 ops/s
Iteration  28: 115969.669 ops/s
Iteration  29: 115201.648 ops/s
Iteration  30: 115529.879 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_directBuffer":
  108806.179 ±(99.9%) 7915.883 ops/s [Average]
  (min, avg, max) = (76659.367, 108806.179, 116180.640), stdev = 11848.121
  CI (99.9%): [100890.296, 116722.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_directBuffer  thrpt   30  108806.179 ± 7915.883  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBuffer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBuffer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37879.560 ops/s
# Warmup Iteration   2: 78714.228 ops/s
# Warmup Iteration   3: 78620.001 ops/s
# Warmup Iteration   4: 109470.593 ops/s
# Warmup Iteration   5: 126332.576 ops/s
# Warmup Iteration   6: 123944.138 ops/s
# Warmup Iteration   7: 123590.395 ops/s
# Warmup Iteration   8: 126836.764 ops/s
# Warmup Iteration   9: 125110.021 ops/s
# Warmup Iteration  10: 126444.647 ops/s
# Warmup Iteration  11: 125125.218 ops/s
# Warmup Iteration  12: 126004.093 ops/s
# Warmup Iteration  13: 125676.646 ops/s
# Warmup Iteration  14: 121722.865 ops/s
# Warmup Iteration  15: 90291.611 ops/s
# Warmup Iteration  16: 127217.229 ops/s
# Warmup Iteration  17: 126980.028 ops/s
# Warmup Iteration  18: 127145.865 ops/s
# Warmup Iteration  19: 127053.611 ops/s
# Warmup Iteration  20: 127119.797 ops/s
# Warmup Iteration  21: 127508.511 ops/s
# Warmup Iteration  22: 127645.819 ops/s
# Warmup Iteration  23: 127422.399 ops/s
# Warmup Iteration  24: 127292.939 ops/s
# Warmup Iteration  25: 127613.403 ops/s
# Warmup Iteration  26: 126992.754 ops/s
# Warmup Iteration  27: 127100.760 ops/s
# Warmup Iteration  28: 127198.231 ops/s
# Warmup Iteration  29: 127451.313 ops/s
# Warmup Iteration  30: 126895.375 ops/s
Iteration   1: 127712.027 ops/s
Iteration   2: 127343.477 ops/s
Iteration   3: 126728.591 ops/s
Iteration   4: 127095.634 ops/s
Iteration   5: 127312.292 ops/s
Iteration   6: 127776.263 ops/s
Iteration   7: 127521.050 ops/s
Iteration   8: 126445.234 ops/s
Iteration   9: 126870.149 ops/s
Iteration  10: 127393.308 ops/s
Iteration  11: 126990.220 ops/s
Iteration  12: 126677.411 ops/s
Iteration  13: 127192.955 ops/s
Iteration  14: 127466.363 ops/s
Iteration  15: 127302.856 ops/s
Iteration  16: 127746.766 ops/s
Iteration  17: 127529.609 ops/s
Iteration  18: 127080.807 ops/s
Iteration  19: 127149.668 ops/s
Iteration  20: 127638.672 ops/s
Iteration  21: 126958.846 ops/s
Iteration  22: 126474.314 ops/s
Iteration  23: 126939.872 ops/s
Iteration  24: 126930.732 ops/s
Iteration  25: 126907.302 ops/s
Iteration  26: 126928.849 ops/s
Iteration  27: 126516.938 ops/s
Iteration  28: 126895.309 ops/s
Iteration  29: 127934.437 ops/s
Iteration  30: 127356.567 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBuffer":
  127160.551 ±(99.9%) 267.697 ops/s [Average]
  (min, avg, max) = (126445.234, 127160.551, 127934.437), stdev = 400.676
  CI (99.9%): [126892.854, 127428.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBuffer  thrpt   30  127160.551 ± 267.697  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBufferOffset$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBufferOffset

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42365.785 ops/s
# Warmup Iteration   2: 76527.750 ops/s
# Warmup Iteration   3: 76518.140 ops/s
# Warmup Iteration   4: 120912.903 ops/s
# Warmup Iteration   5: 124637.208 ops/s
# Warmup Iteration   6: 125618.486 ops/s
# Warmup Iteration   7: 122355.363 ops/s
# Warmup Iteration   8: 124718.583 ops/s
# Warmup Iteration   9: 125117.548 ops/s
# Warmup Iteration  10: 124410.241 ops/s
# Warmup Iteration  11: 125214.289 ops/s
# Warmup Iteration  12: 124128.239 ops/s
# Warmup Iteration  13: 125053.504 ops/s
# Warmup Iteration  14: 87921.563 ops/s
# Warmup Iteration  15: 126289.896 ops/s
# Warmup Iteration  16: 126702.214 ops/s
# Warmup Iteration  17: 125315.490 ops/s
# Warmup Iteration  18: 125908.970 ops/s
# Warmup Iteration  19: 124697.755 ops/s
# Warmup Iteration  20: 125458.862 ops/s
# Warmup Iteration  21: 125454.939 ops/s
# Warmup Iteration  22: 125344.108 ops/s
# Warmup Iteration  23: 125862.428 ops/s
# Warmup Iteration  24: 125337.812 ops/s
# Warmup Iteration  25: 125845.054 ops/s
# Warmup Iteration  26: 125649.614 ops/s
# Warmup Iteration  27: 125361.263 ops/s
# Warmup Iteration  28: 124980.066 ops/s
# Warmup Iteration  29: 124628.735 ops/s
# Warmup Iteration  30: 125199.108 ops/s
Iteration   1: 126294.339 ops/s
Iteration   2: 125619.391 ops/s
Iteration   3: 124942.866 ops/s
Iteration   4: 125164.804 ops/s
Iteration   5: 125215.673 ops/s
Iteration   6: 126463.797 ops/s
Iteration   7: 126160.679 ops/s
Iteration   8: 124890.907 ops/s
Iteration   9: 125498.781 ops/s
Iteration  10: 125192.168 ops/s
Iteration  11: 125007.619 ops/s
Iteration  12: 125301.082 ops/s
Iteration  13: 125011.584 ops/s
Iteration  14: 124673.368 ops/s
Iteration  15: 124965.150 ops/s
Iteration  16: 125360.523 ops/s
Iteration  17: 125001.251 ops/s
Iteration  18: 124877.329 ops/s
Iteration  19: 125595.957 ops/s
Iteration  20: 125775.824 ops/s
Iteration  21: 125933.572 ops/s
Iteration  22: 125969.304 ops/s
Iteration  23: 125854.601 ops/s
Iteration  24: 124850.518 ops/s
Iteration  25: 124712.050 ops/s
Iteration  26: 125349.912 ops/s
Iteration  27: 125216.028 ops/s
Iteration  28: 124914.132 ops/s
Iteration  29: 125429.900 ops/s
Iteration  30: 125491.375 ops/s


Result "zipkin2.codec.SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBufferOffset":
  125357.816 ±(99.9%) 319.519 ops/s [Average]
  (min, avg, max) = (124673.368, 125357.816, 126463.797), stdev = 478.241
  CI (99.9%): [125038.297, 125677.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_PROTO3_heapBufferOffset  thrpt   30  125357.816 ± 319.519  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255221.267 ops/s
# Warmup Iteration   2: 336181.393 ops/s
# Warmup Iteration   3: 522164.342 ops/s
# Warmup Iteration   4: 620353.326 ops/s
# Warmup Iteration   5: 617888.192 ops/s
# Warmup Iteration   6: 621911.260 ops/s
# Warmup Iteration   7: 618499.222 ops/s
# Warmup Iteration   8: 618038.035 ops/s
# Warmup Iteration   9: 629711.605 ops/s
# Warmup Iteration  10: 443370.029 ops/s
# Warmup Iteration  11: 630499.238 ops/s
# Warmup Iteration  12: 628934.075 ops/s
# Warmup Iteration  13: 630788.120 ops/s
# Warmup Iteration  14: 632116.777 ops/s
# Warmup Iteration  15: 629542.302 ops/s
# Warmup Iteration  16: 625472.073 ops/s
# Warmup Iteration  17: 628531.408 ops/s
# Warmup Iteration  18: 624003.089 ops/s
# Warmup Iteration  19: 627922.662 ops/s
# Warmup Iteration  20: 627784.818 ops/s
# Warmup Iteration  21: 623883.621 ops/s
# Warmup Iteration  22: 623956.813 ops/s
# Warmup Iteration  23: 630106.110 ops/s
# Warmup Iteration  24: 629261.676 ops/s
# Warmup Iteration  25: 629628.500 ops/s
# Warmup Iteration  26: 630399.692 ops/s
# Warmup Iteration  27: 628888.876 ops/s
# Warmup Iteration  28: 626267.306 ops/s
# Warmup Iteration  29: 629440.053 ops/s
# Warmup Iteration  30: 629150.504 ops/s
Iteration   1: 627059.747 ops/s
Iteration   2: 627899.821 ops/s
Iteration   3: 627122.411 ops/s
Iteration   4: 628184.298 ops/s
Iteration   5: 630630.803 ops/s
Iteration   6: 631090.330 ops/s
Iteration   7: 629670.254 ops/s
Iteration   8: 629315.579 ops/s
Iteration   9: 631098.515 ops/s
Iteration  10: 624588.557 ops/s
Iteration  11: 627976.049 ops/s
Iteration  12: 629127.740 ops/s
Iteration  13: 624153.561 ops/s
Iteration  14: 630110.810 ops/s
Iteration  15: 628840.879 ops/s
Iteration  16: 625089.720 ops/s
Iteration  17: 627607.532 ops/s
Iteration  18: 628434.084 ops/s
Iteration  19: 627130.403 ops/s
Iteration  20: 628303.430 ops/s
Iteration  21: 629937.062 ops/s
Iteration  22: 627894.858 ops/s
Iteration  23: 628111.410 ops/s
Iteration  24: 627073.607 ops/s
Iteration  25: 624461.563 ops/s
Iteration  26: 630708.009 ops/s
Iteration  27: 628971.978 ops/s
Iteration  28: 627437.582 ops/s
Iteration  29: 629433.878 ops/s
Iteration  30: 626002.250 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_JSON_V2":
  628115.557 ±(99.9%) 1278.623 ops/s [Average]
  (min, avg, max) = (624153.561, 628115.557, 631098.515), stdev = 1913.784
  CI (99.9%): [626836.934, 629394.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_JSON_V2  thrpt   30  628115.557 ± 1278.623  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 278662.531 ops/s
# Warmup Iteration   2: 366050.652 ops/s
# Warmup Iteration   3: 498554.890 ops/s
# Warmup Iteration   4: 664637.340 ops/s
# Warmup Iteration   5: 670133.636 ops/s
# Warmup Iteration   6: 657103.689 ops/s
# Warmup Iteration   7: 666622.835 ops/s
# Warmup Iteration   8: 663070.105 ops/s
# Warmup Iteration   9: 666994.484 ops/s
# Warmup Iteration  10: 668751.852 ops/s
# Warmup Iteration  11: 467780.395 ops/s
# Warmup Iteration  12: 669767.674 ops/s
# Warmup Iteration  13: 673500.271 ops/s
# Warmup Iteration  14: 673147.140 ops/s
# Warmup Iteration  15: 673478.191 ops/s
# Warmup Iteration  16: 672905.191 ops/s
# Warmup Iteration  17: 670587.990 ops/s
# Warmup Iteration  18: 669517.522 ops/s
# Warmup Iteration  19: 668094.682 ops/s
# Warmup Iteration  20: 670152.284 ops/s
# Warmup Iteration  21: 669462.884 ops/s
# Warmup Iteration  22: 670434.444 ops/s
# Warmup Iteration  23: 669417.240 ops/s
# Warmup Iteration  24: 668676.789 ops/s
# Warmup Iteration  25: 669456.476 ops/s
# Warmup Iteration  26: 667832.145 ops/s
# Warmup Iteration  27: 669484.983 ops/s
# Warmup Iteration  28: 668319.449 ops/s
# Warmup Iteration  29: 668703.901 ops/s
# Warmup Iteration  30: 670936.809 ops/s
Iteration   1: 669874.552 ops/s
Iteration   2: 670863.493 ops/s
Iteration   3: 671269.382 ops/s
Iteration   4: 671215.688 ops/s
Iteration   5: 672275.501 ops/s
Iteration   6: 669927.097 ops/s
Iteration   7: 671934.744 ops/s
Iteration   8: 670902.625 ops/s
Iteration   9: 666153.196 ops/s
Iteration  10: 670409.157 ops/s
Iteration  11: 671339.510 ops/s
Iteration  12: 668912.995 ops/s
Iteration  13: 666329.506 ops/s
Iteration  14: 671200.542 ops/s
Iteration  15: 670968.496 ops/s
Iteration  16: 670524.091 ops/s
Iteration  17: 671443.433 ops/s
Iteration  18: 667689.453 ops/s
Iteration  19: 670367.006 ops/s
Iteration  20: 669947.763 ops/s
Iteration  21: 671476.665 ops/s
Iteration  22: 671171.887 ops/s
Iteration  23: 666844.143 ops/s
Iteration  24: 670509.373 ops/s
Iteration  25: 669066.423 ops/s
Iteration  26: 669084.344 ops/s
Iteration  27: 666345.973 ops/s
Iteration  28: 671612.626 ops/s
Iteration  29: 670717.725 ops/s
Iteration  30: 664255.203 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_PROTO3":
  669821.086 ±(99.9%) 1354.598 ops/s [Average]
  (min, avg, max) = (664255.203, 669821.086, 672275.501), stdev = 2027.498
  CI (99.9%): [668466.489, 671175.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_errorSpan_PROTO3  thrpt   30  669821.086 ± 1354.598  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172453.405 ops/s
# Warmup Iteration   2: 238456.157 ops/s
# Warmup Iteration   3: 366490.282 ops/s
# Warmup Iteration   4: 442502.681 ops/s
# Warmup Iteration   5: 436524.805 ops/s
# Warmup Iteration   6: 441679.565 ops/s
# Warmup Iteration   7: 441898.220 ops/s
# Warmup Iteration   8: 438834.801 ops/s
# Warmup Iteration   9: 447120.943 ops/s
# Warmup Iteration  10: 313665.107 ops/s
# Warmup Iteration  11: 447837.705 ops/s
# Warmup Iteration  12: 448912.315 ops/s
# Warmup Iteration  13: 448756.454 ops/s
# Warmup Iteration  14: 448425.897 ops/s
# Warmup Iteration  15: 447619.664 ops/s
# Warmup Iteration  16: 447367.333 ops/s
# Warmup Iteration  17: 444595.719 ops/s
# Warmup Iteration  18: 445844.827 ops/s
# Warmup Iteration  19: 444869.482 ops/s
# Warmup Iteration  20: 443486.222 ops/s
# Warmup Iteration  21: 444675.468 ops/s
# Warmup Iteration  22: 445796.181 ops/s
# Warmup Iteration  23: 444026.273 ops/s
# Warmup Iteration  24: 444582.971 ops/s
# Warmup Iteration  25: 444051.600 ops/s
# Warmup Iteration  26: 444720.137 ops/s
# Warmup Iteration  27: 443691.663 ops/s
# Warmup Iteration  28: 445253.778 ops/s
# Warmup Iteration  29: 444929.666 ops/s
# Warmup Iteration  30: 444013.784 ops/s
Iteration   1: 444822.920 ops/s
Iteration   2: 446005.112 ops/s
Iteration   3: 444368.591 ops/s
Iteration   4: 445668.830 ops/s
Iteration   5: 442157.942 ops/s
Iteration   6: 443999.615 ops/s
Iteration   7: 447142.985 ops/s
Iteration   8: 446118.445 ops/s
Iteration   9: 443462.325 ops/s
Iteration  10: 446817.842 ops/s
Iteration  11: 446212.920 ops/s
Iteration  12: 442053.913 ops/s
Iteration  13: 443481.897 ops/s
Iteration  14: 447727.407 ops/s
Iteration  15: 445360.095 ops/s
Iteration  16: 446960.382 ops/s
Iteration  17: 446625.638 ops/s
Iteration  18: 441773.264 ops/s
Iteration  19: 445576.467 ops/s
Iteration  20: 446068.272 ops/s
Iteration  21: 444319.547 ops/s
Iteration  22: 443506.393 ops/s
Iteration  23: 444252.791 ops/s
Iteration  24: 442554.369 ops/s
Iteration  25: 443975.000 ops/s
Iteration  26: 443015.876 ops/s
Iteration  27: 442208.477 ops/s
Iteration  28: 444291.838 ops/s
Iteration  29: 445991.100 ops/s
Iteration  30: 443873.503 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V1":
  444679.792 ±(99.9%) 1127.309 ops/s [Average]
  (min, avg, max) = (441773.264, 444679.792, 447727.407), stdev = 1687.304
  CI (99.9%): [443552.482, 445807.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V1  thrpt   30  444679.792 ± 1127.309  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240747.322 ops/s
# Warmup Iteration   2: 303427.381 ops/s
# Warmup Iteration   3: 465683.780 ops/s
# Warmup Iteration   4: 562615.907 ops/s
# Warmup Iteration   5: 551145.839 ops/s
# Warmup Iteration   6: 565676.812 ops/s
# Warmup Iteration   7: 566487.662 ops/s
# Warmup Iteration   8: 564967.706 ops/s
# Warmup Iteration   9: 565464.771 ops/s
# Warmup Iteration  10: 407502.361 ops/s
# Warmup Iteration  11: 545907.138 ops/s
# Warmup Iteration  12: 559669.346 ops/s
# Warmup Iteration  13: 560881.802 ops/s
# Warmup Iteration  14: 558239.272 ops/s
# Warmup Iteration  15: 558312.029 ops/s
# Warmup Iteration  16: 559708.830 ops/s
# Warmup Iteration  17: 558516.707 ops/s
# Warmup Iteration  18: 559331.117 ops/s
# Warmup Iteration  19: 561247.285 ops/s
# Warmup Iteration  20: 559827.528 ops/s
# Warmup Iteration  21: 554142.666 ops/s
# Warmup Iteration  22: 556465.122 ops/s
# Warmup Iteration  23: 556217.852 ops/s
# Warmup Iteration  24: 558103.225 ops/s
# Warmup Iteration  25: 560554.985 ops/s
# Warmup Iteration  26: 558582.643 ops/s
# Warmup Iteration  27: 558247.491 ops/s
# Warmup Iteration  28: 559133.603 ops/s
# Warmup Iteration  29: 559705.013 ops/s
# Warmup Iteration  30: 560647.320 ops/s
Iteration   1: 557831.288 ops/s
Iteration   2: 558534.688 ops/s
Iteration   3: 558486.012 ops/s
Iteration   4: 558331.266 ops/s
Iteration   5: 558388.222 ops/s
Iteration   6: 561607.639 ops/s
Iteration   7: 559381.929 ops/s
Iteration   8: 558385.462 ops/s
Iteration   9: 559465.874 ops/s
Iteration  10: 558893.632 ops/s
Iteration  11: 558475.920 ops/s
Iteration  12: 553730.753 ops/s
Iteration  13: 555010.318 ops/s
Iteration  14: 558892.770 ops/s
Iteration  15: 557208.331 ops/s
Iteration  16: 560601.275 ops/s
Iteration  17: 558284.573 ops/s
Iteration  18: 558239.455 ops/s
Iteration  19: 556834.955 ops/s
Iteration  20: 554816.729 ops/s
Iteration  21: 552180.435 ops/s
Iteration  22: 558350.477 ops/s
Iteration  23: 554084.671 ops/s
Iteration  24: 556855.944 ops/s
Iteration  25: 558370.801 ops/s
Iteration  26: 556684.264 ops/s
Iteration  27: 561276.563 ops/s
Iteration  28: 557125.478 ops/s
Iteration  29: 554713.971 ops/s
Iteration  30: 556335.150 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V2":
  557579.295 ±(99.9%) 1459.024 ops/s [Average]
  (min, avg, max) = (552180.435, 557579.295, 561607.639), stdev = 2183.798
  CI (99.9%): [556120.271, 559038.319] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_localSpan_JSON_V2  thrpt   30  557579.295 ± 1459.024  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 304627.729 ops/s
# Warmup Iteration   2: 397082.245 ops/s
# Warmup Iteration   3: 548483.810 ops/s
# Warmup Iteration   4: 693381.157 ops/s
# Warmup Iteration   5: 686131.013 ops/s
# Warmup Iteration   6: 703513.839 ops/s
# Warmup Iteration   7: 693506.543 ops/s
# Warmup Iteration   8: 694491.847 ops/s
# Warmup Iteration   9: 694037.107 ops/s
# Warmup Iteration  10: 699309.427 ops/s
# Warmup Iteration  11: 492973.278 ops/s
# Warmup Iteration  12: 700611.643 ops/s
# Warmup Iteration  13: 699196.759 ops/s
# Warmup Iteration  14: 701815.098 ops/s
# Warmup Iteration  15: 702117.117 ops/s
# Warmup Iteration  16: 702048.167 ops/s
# Warmup Iteration  17: 700377.274 ops/s
# Warmup Iteration  18: 700932.535 ops/s
# Warmup Iteration  19: 700364.237 ops/s
# Warmup Iteration  20: 700242.281 ops/s
# Warmup Iteration  21: 699042.051 ops/s
# Warmup Iteration  22: 700685.357 ops/s
# Warmup Iteration  23: 701077.937 ops/s
# Warmup Iteration  24: 702495.371 ops/s
# Warmup Iteration  25: 702232.803 ops/s
# Warmup Iteration  26: 701103.270 ops/s
# Warmup Iteration  27: 701083.947 ops/s
# Warmup Iteration  28: 701266.796 ops/s
# Warmup Iteration  29: 699404.743 ops/s
# Warmup Iteration  30: 702463.474 ops/s
Iteration   1: 701357.084 ops/s
Iteration   2: 703128.818 ops/s
Iteration   3: 696534.965 ops/s
Iteration   4: 698829.765 ops/s
Iteration   5: 698965.125 ops/s
Iteration   6: 699692.333 ops/s
Iteration   7: 701454.212 ops/s
Iteration   8: 700271.522 ops/s
Iteration   9: 700319.227 ops/s
Iteration  10: 701699.430 ops/s
Iteration  11: 701381.676 ops/s
Iteration  12: 703700.437 ops/s
Iteration  13: 704364.857 ops/s
Iteration  14: 700456.308 ops/s
Iteration  15: 700386.688 ops/s
Iteration  16: 700886.912 ops/s
Iteration  17: 701690.401 ops/s
Iteration  18: 701736.837 ops/s
Iteration  19: 701221.033 ops/s
Iteration  20: 699889.663 ops/s
Iteration  21: 695849.176 ops/s
Iteration  22: 701925.918 ops/s
Iteration  23: 701826.842 ops/s
Iteration  24: 700287.151 ops/s
Iteration  25: 702517.318 ops/s
Iteration  26: 701999.254 ops/s
Iteration  27: 702010.802 ops/s
Iteration  28: 698345.314 ops/s
Iteration  29: 697409.071 ops/s
Iteration  30: 697438.223 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_PROTO3":
  700585.879 ±(99.9%) 1353.272 ops/s [Average]
  (min, avg, max) = (695849.176, 700585.879, 704364.857), stdev = 2025.513
  CI (99.9%): [699232.607, 701939.150] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_localSpan_PROTO3  thrpt   30  700585.879 ± 1353.272  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 213890.086 ops/s
# Warmup Iteration   2: 298579.903 ops/s
# Warmup Iteration   3: 451828.718 ops/s
# Warmup Iteration   4: 555389.478 ops/s
# Warmup Iteration   5: 549548.848 ops/s
# Warmup Iteration   6: 551365.988 ops/s
# Warmup Iteration   7: 557136.839 ops/s
# Warmup Iteration   8: 553372.728 ops/s
# Warmup Iteration   9: 559362.247 ops/s
# Warmup Iteration  10: 387997.382 ops/s
# Warmup Iteration  11: 557607.539 ops/s
# Warmup Iteration  12: 554841.149 ops/s
# Warmup Iteration  13: 556994.981 ops/s
# Warmup Iteration  14: 556206.817 ops/s
# Warmup Iteration  15: 557184.723 ops/s
# Warmup Iteration  16: 557094.767 ops/s
# Warmup Iteration  17: 558805.453 ops/s
# Warmup Iteration  18: 555778.516 ops/s
# Warmup Iteration  19: 555465.281 ops/s
# Warmup Iteration  20: 555334.758 ops/s
# Warmup Iteration  21: 555637.329 ops/s
# Warmup Iteration  22: 555524.171 ops/s
# Warmup Iteration  23: 556571.046 ops/s
# Warmup Iteration  24: 555501.078 ops/s
# Warmup Iteration  25: 552867.202 ops/s
# Warmup Iteration  26: 554295.929 ops/s
# Warmup Iteration  27: 555693.034 ops/s
# Warmup Iteration  28: 557617.475 ops/s
# Warmup Iteration  29: 551428.970 ops/s
# Warmup Iteration  30: 554159.136 ops/s
Iteration   1: 557830.091 ops/s
Iteration   2: 556451.821 ops/s
Iteration   3: 556312.062 ops/s
Iteration   4: 552988.066 ops/s
Iteration   5: 555248.242 ops/s
Iteration   6: 557711.390 ops/s
Iteration   7: 557505.056 ops/s
Iteration   8: 555345.794 ops/s
Iteration   9: 556763.714 ops/s
Iteration  10: 556467.792 ops/s
Iteration  11: 556364.187 ops/s
Iteration  12: 557942.287 ops/s
Iteration  13: 555451.569 ops/s
Iteration  14: 558646.532 ops/s
Iteration  15: 557001.130 ops/s
Iteration  16: 555633.131 ops/s
Iteration  17: 556626.865 ops/s
Iteration  18: 558465.032 ops/s
Iteration  19: 554176.470 ops/s
Iteration  20: 558855.389 ops/s
Iteration  21: 556947.019 ops/s
Iteration  22: 556897.326 ops/s
Iteration  23: 554541.833 ops/s
Iteration  24: 555356.772 ops/s
Iteration  25: 555462.266 ops/s
Iteration  26: 557709.988 ops/s
Iteration  27: 555808.009 ops/s
Iteration  28: 554495.543 ops/s
Iteration  29: 555934.834 ops/s
Iteration  30: 557110.349 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_localSpan_THRIFT":
  556401.685 ±(99.9%) 929.734 ops/s [Average]
  (min, avg, max) = (552988.066, 556401.685, 558855.389), stdev = 1391.583
  CI (99.9%): [555471.951, 557331.420] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_localSpan_THRIFT  thrpt   30  556401.685 ± 929.734  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 113820.743 ops/s
# Warmup Iteration   2: 152404.243 ops/s
# Warmup Iteration   3: 231402.171 ops/s
# Warmup Iteration   4: 274603.784 ops/s
# Warmup Iteration   5: 274260.391 ops/s
# Warmup Iteration   6: 276120.298 ops/s
# Warmup Iteration   7: 276441.766 ops/s
# Warmup Iteration   8: 278768.851 ops/s
# Warmup Iteration   9: 274337.367 ops/s
# Warmup Iteration  10: 201145.076 ops/s
# Warmup Iteration  11: 279259.481 ops/s
# Warmup Iteration  12: 278519.798 ops/s
# Warmup Iteration  13: 278831.381 ops/s
# Warmup Iteration  14: 279930.405 ops/s
# Warmup Iteration  15: 277002.624 ops/s
# Warmup Iteration  16: 278706.160 ops/s
# Warmup Iteration  17: 277284.352 ops/s
# Warmup Iteration  18: 277150.436 ops/s
# Warmup Iteration  19: 277493.198 ops/s
# Warmup Iteration  20: 276836.089 ops/s
# Warmup Iteration  21: 277772.909 ops/s
# Warmup Iteration  22: 276506.242 ops/s
# Warmup Iteration  23: 277035.634 ops/s
# Warmup Iteration  24: 276740.325 ops/s
# Warmup Iteration  25: 278051.458 ops/s
# Warmup Iteration  26: 276470.848 ops/s
# Warmup Iteration  27: 277394.256 ops/s
# Warmup Iteration  28: 275976.782 ops/s
# Warmup Iteration  29: 276612.645 ops/s
# Warmup Iteration  30: 277284.258 ops/s
Iteration   1: 277699.280 ops/s
Iteration   2: 277261.387 ops/s
Iteration   3: 276025.092 ops/s
Iteration   4: 278111.167 ops/s
Iteration   5: 277871.638 ops/s
Iteration   6: 278263.566 ops/s
Iteration   7: 275698.139 ops/s
Iteration   8: 276732.500 ops/s
Iteration   9: 276488.261 ops/s
Iteration  10: 275089.309 ops/s
Iteration  11: 277040.880 ops/s
Iteration  12: 276757.008 ops/s
Iteration  13: 277380.469 ops/s
Iteration  14: 278911.185 ops/s
Iteration  15: 276737.927 ops/s
Iteration  16: 277483.151 ops/s
Iteration  17: 275458.413 ops/s
Iteration  18: 276306.405 ops/s
Iteration  19: 277887.945 ops/s
Iteration  20: 277675.726 ops/s
Iteration  21: 274914.814 ops/s
Iteration  22: 277361.961 ops/s
Iteration  23: 279112.314 ops/s
Iteration  24: 279059.982 ops/s
Iteration  25: 278032.768 ops/s
Iteration  26: 278192.736 ops/s
Iteration  27: 277537.220 ops/s
Iteration  28: 276291.177 ops/s
Iteration  29: 278803.947 ops/s
Iteration  30: 276388.508 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1":
  277219.163 ±(99.9%) 761.690 ops/s [Average]
  (min, avg, max) = (274914.814, 277219.163, 279112.314), stdev = 1140.062
  CI (99.9%): [276457.472, 277980.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1  thrpt   30  277219.163 ± 761.690  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_incomplete$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_incomplete

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 104156.306 ops/s
# Warmup Iteration   2: 150950.586 ops/s
# Warmup Iteration   3: 241841.242 ops/s
# Warmup Iteration   4: 282659.235 ops/s
# Warmup Iteration   5: 282141.161 ops/s
# Warmup Iteration   6: 283336.685 ops/s
# Warmup Iteration   7: 285506.015 ops/s
# Warmup Iteration   8: 285762.665 ops/s
# Warmup Iteration   9: 251731.414 ops/s
# Warmup Iteration  10: 246187.320 ops/s
# Warmup Iteration  11: 287727.820 ops/s
# Warmup Iteration  12: 287131.975 ops/s
# Warmup Iteration  13: 286831.908 ops/s
# Warmup Iteration  14: 286260.869 ops/s
# Warmup Iteration  15: 287543.732 ops/s
# Warmup Iteration  16: 286779.824 ops/s
# Warmup Iteration  17: 285737.573 ops/s
# Warmup Iteration  18: 286185.991 ops/s
# Warmup Iteration  19: 285244.144 ops/s
# Warmup Iteration  20: 287725.699 ops/s
# Warmup Iteration  21: 286569.612 ops/s
# Warmup Iteration  22: 287003.950 ops/s
# Warmup Iteration  23: 286651.469 ops/s
# Warmup Iteration  24: 288223.924 ops/s
# Warmup Iteration  25: 285745.215 ops/s
# Warmup Iteration  26: 286506.826 ops/s
# Warmup Iteration  27: 286789.536 ops/s
# Warmup Iteration  28: 286819.305 ops/s
# Warmup Iteration  29: 287414.758 ops/s
# Warmup Iteration  30: 288603.694 ops/s
Iteration   1: 286702.931 ops/s
Iteration   2: 287583.176 ops/s
Iteration   3: 287379.367 ops/s
Iteration   4: 286092.180 ops/s
Iteration   5: 286396.170 ops/s
Iteration   6: 286748.519 ops/s
Iteration   7: 287486.146 ops/s
Iteration   8: 288172.738 ops/s
Iteration   9: 285679.613 ops/s
Iteration  10: 286676.695 ops/s
Iteration  11: 285738.131 ops/s
Iteration  12: 283851.118 ops/s
Iteration  13: 286209.709 ops/s
Iteration  14: 288759.100 ops/s
Iteration  15: 286047.690 ops/s
Iteration  16: 287937.809 ops/s
Iteration  17: 287783.030 ops/s
Iteration  18: 286997.646 ops/s
Iteration  19: 286963.416 ops/s
Iteration  20: 286911.386 ops/s
Iteration  21: 285891.266 ops/s
Iteration  22: 286585.199 ops/s
Iteration  23: 285811.681 ops/s
Iteration  24: 285905.159 ops/s
Iteration  25: 285067.954 ops/s
Iteration  26: 283147.810 ops/s
Iteration  27: 285616.908 ops/s
Iteration  28: 286520.449 ops/s
Iteration  29: 286413.435 ops/s
Iteration  30: 287162.683 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_incomplete":
  286474.637 ±(99.9%) 782.074 ops/s [Average]
  (min, avg, max) = (283147.810, 286474.637, 288759.100), stdev = 1170.571
  CI (99.9%): [285692.563, 287256.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_incomplete  thrpt   30  286474.637 ± 782.074  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 84261.820 ops/s
# Warmup Iteration   2: 140798.666 ops/s
# Warmup Iteration   3: 213634.880 ops/s
# Warmup Iteration   4: 265928.201 ops/s
# Warmup Iteration   5: 264543.475 ops/s
# Warmup Iteration   6: 267244.325 ops/s
# Warmup Iteration   7: 267359.667 ops/s
# Warmup Iteration   8: 265431.115 ops/s
# Warmup Iteration   9: 262988.716 ops/s
# Warmup Iteration  10: 199089.962 ops/s
# Warmup Iteration  11: 270199.161 ops/s
# Warmup Iteration  12: 270417.907 ops/s
# Warmup Iteration  13: 269249.236 ops/s
# Warmup Iteration  14: 269533.317 ops/s
# Warmup Iteration  15: 268893.447 ops/s
# Warmup Iteration  16: 269288.627 ops/s
# Warmup Iteration  17: 267644.810 ops/s
# Warmup Iteration  18: 267145.872 ops/s
# Warmup Iteration  19: 266180.620 ops/s
# Warmup Iteration  20: 266061.167 ops/s
# Warmup Iteration  21: 268891.693 ops/s
# Warmup Iteration  22: 267799.714 ops/s
# Warmup Iteration  23: 268297.738 ops/s
# Warmup Iteration  24: 268264.755 ops/s
# Warmup Iteration  25: 267000.054 ops/s
# Warmup Iteration  26: 266829.242 ops/s
# Warmup Iteration  27: 267444.922 ops/s
# Warmup Iteration  28: 267138.865 ops/s
# Warmup Iteration  29: 267250.071 ops/s
# Warmup Iteration  30: 267803.032 ops/s
Iteration   1: 266568.814 ops/s
Iteration   2: 267742.363 ops/s
Iteration   3: 265856.416 ops/s
Iteration   4: 266726.338 ops/s
Iteration   5: 266517.038 ops/s
Iteration   6: 265729.776 ops/s
Iteration   7: 266992.587 ops/s
Iteration   8: 267729.791 ops/s
Iteration   9: 268317.251 ops/s
Iteration  10: 266919.644 ops/s
Iteration  11: 266588.622 ops/s
Iteration  12: 267754.486 ops/s
Iteration  13: 268492.216 ops/s
Iteration  14: 267781.138 ops/s
Iteration  15: 267723.523 ops/s
Iteration  16: 269227.441 ops/s
Iteration  17: 264604.814 ops/s
Iteration  18: 266181.714 ops/s
Iteration  19: 267071.212 ops/s
Iteration  20: 268879.787 ops/s
Iteration  21: 266815.934 ops/s
Iteration  22: 269092.545 ops/s
Iteration  23: 266179.947 ops/s
Iteration  24: 268865.235 ops/s
Iteration  25: 265243.432 ops/s
Iteration  26: 267521.518 ops/s
Iteration  27: 268087.365 ops/s
Iteration  28: 265061.933 ops/s
Iteration  29: 266387.440 ops/s
Iteration  30: 266319.397 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_shared":
  267099.324 ±(99.9%) 810.223 ops/s [Average]
  (min, avg, max) = (264604.814, 267099.324, 269227.441), stdev = 1212.704
  CI (99.9%): [266289.101, 267909.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V1_shared  thrpt   30  267099.324 ± 810.223  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176912.673 ops/s
# Warmup Iteration   2: 257756.576 ops/s
# Warmup Iteration   3: 322497.246 ops/s
# Warmup Iteration   4: 445342.122 ops/s
# Warmup Iteration   5: 452940.682 ops/s
# Warmup Iteration   6: 442494.061 ops/s
# Warmup Iteration   7: 446423.452 ops/s
# Warmup Iteration   8: 448235.083 ops/s
# Warmup Iteration   9: 451911.696 ops/s
# Warmup Iteration  10: 449548.426 ops/s
# Warmup Iteration  11: 379804.925 ops/s
# Warmup Iteration  12: 384947.058 ops/s
# Warmup Iteration  13: 448927.301 ops/s
# Warmup Iteration  14: 450552.596 ops/s
# Warmup Iteration  15: 450107.488 ops/s
# Warmup Iteration  16: 449222.626 ops/s
# Warmup Iteration  17: 452173.622 ops/s
# Warmup Iteration  18: 452974.605 ops/s
# Warmup Iteration  19: 451258.557 ops/s
# Warmup Iteration  20: 451063.007 ops/s
# Warmup Iteration  21: 452596.378 ops/s
# Warmup Iteration  22: 451846.180 ops/s
# Warmup Iteration  23: 453649.373 ops/s
# Warmup Iteration  24: 451961.474 ops/s
# Warmup Iteration  25: 452012.518 ops/s
# Warmup Iteration  26: 450867.697 ops/s
# Warmup Iteration  27: 452996.830 ops/s
# Warmup Iteration  28: 452866.850 ops/s
# Warmup Iteration  29: 450204.214 ops/s
# Warmup Iteration  30: 451427.867 ops/s
Iteration   1: 448421.456 ops/s
Iteration   2: 449458.985 ops/s
Iteration   3: 454016.509 ops/s
Iteration   4: 452487.189 ops/s
Iteration   5: 450287.386 ops/s
Iteration   6: 451434.596 ops/s
Iteration   7: 450387.053 ops/s
Iteration   8: 450241.497 ops/s
Iteration   9: 448866.347 ops/s
Iteration  10: 450897.096 ops/s
Iteration  11: 449012.551 ops/s
Iteration  12: 450593.696 ops/s
Iteration  13: 453120.188 ops/s
Iteration  14: 452005.793 ops/s
Iteration  15: 452315.818 ops/s
Iteration  16: 451774.174 ops/s
Iteration  17: 449814.037 ops/s
Iteration  18: 452868.809 ops/s
Iteration  19: 451001.306 ops/s
Iteration  20: 451328.465 ops/s
Iteration  21: 449350.615 ops/s
Iteration  22: 450016.512 ops/s
Iteration  23: 452732.083 ops/s
Iteration  24: 453057.330 ops/s
Iteration  25: 452086.834 ops/s
Iteration  26: 447855.617 ops/s
Iteration  27: 450745.789 ops/s
Iteration  28: 451743.374 ops/s
Iteration  29: 451015.203 ops/s
Iteration  30: 452237.372 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2":
  451039.123 ±(99.9%) 1020.029 ops/s [Average]
  (min, avg, max) = (447855.617, 451039.123, 454016.509), stdev = 1526.731
  CI (99.9%): [450019.094, 452059.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2  thrpt   30  451039.123 ± 1020.029  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_incomplete$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_incomplete

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160116.774 ops/s
# Warmup Iteration   2: 229125.302 ops/s
# Warmup Iteration   3: 330503.543 ops/s
# Warmup Iteration   4: 411919.026 ops/s
# Warmup Iteration   5: 410725.748 ops/s
# Warmup Iteration   6: 412739.925 ops/s
# Warmup Iteration   7: 418582.255 ops/s
# Warmup Iteration   8: 415862.223 ops/s
# Warmup Iteration   9: 413875.199 ops/s
# Warmup Iteration  10: 320314.898 ops/s
# Warmup Iteration  11: 397092.221 ops/s
# Warmup Iteration  12: 418754.650 ops/s
# Warmup Iteration  13: 419467.172 ops/s
# Warmup Iteration  14: 417875.916 ops/s
# Warmup Iteration  15: 418661.769 ops/s
# Warmup Iteration  16: 419840.374 ops/s
# Warmup Iteration  17: 421643.723 ops/s
# Warmup Iteration  18: 419168.905 ops/s
# Warmup Iteration  19: 418024.375 ops/s
# Warmup Iteration  20: 415883.606 ops/s
# Warmup Iteration  21: 420096.739 ops/s
# Warmup Iteration  22: 419870.246 ops/s
# Warmup Iteration  23: 416420.862 ops/s
# Warmup Iteration  24: 419305.054 ops/s
# Warmup Iteration  25: 418853.090 ops/s
# Warmup Iteration  26: 417724.671 ops/s
# Warmup Iteration  27: 418779.168 ops/s
# Warmup Iteration  28: 416002.732 ops/s
# Warmup Iteration  29: 416959.874 ops/s
# Warmup Iteration  30: 415170.340 ops/s
Iteration   1: 417743.596 ops/s
Iteration   2: 418516.372 ops/s
Iteration   3: 417496.041 ops/s
Iteration   4: 418928.630 ops/s
Iteration   5: 415716.573 ops/s
Iteration   6: 417996.240 ops/s
Iteration   7: 419494.043 ops/s
Iteration   8: 419460.751 ops/s
Iteration   9: 417879.581 ops/s
Iteration  10: 420138.015 ops/s
Iteration  11: 419637.857 ops/s
Iteration  12: 419227.411 ops/s
Iteration  13: 418893.841 ops/s
Iteration  14: 420617.559 ops/s
Iteration  15: 416071.099 ops/s
Iteration  16: 416071.295 ops/s
Iteration  17: 419183.221 ops/s
Iteration  18: 418177.305 ops/s
Iteration  19: 418338.761 ops/s
Iteration  20: 417616.866 ops/s
Iteration  21: 417062.724 ops/s
Iteration  22: 415575.419 ops/s
Iteration  23: 417722.228 ops/s
Iteration  24: 418766.959 ops/s
Iteration  25: 419270.890 ops/s
Iteration  26: 417736.056 ops/s
Iteration  27: 417303.036 ops/s
Iteration  28: 414576.975 ops/s
Iteration  29: 412691.141 ops/s
Iteration  30: 417457.397 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_incomplete":
  417845.596 ±(99.9%) 1148.265 ops/s [Average]
  (min, avg, max) = (412691.141, 417845.596, 420617.559), stdev = 1718.669
  CI (99.9%): [416697.331, 418993.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_incomplete  thrpt   30  417845.596 ± 1148.265  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110743.403 ops/s
# Warmup Iteration   2: 219421.701 ops/s
# Warmup Iteration   3: 275795.753 ops/s
# Warmup Iteration   4: 393881.203 ops/s
# Warmup Iteration   5: 399867.132 ops/s
# Warmup Iteration   6: 401026.888 ops/s
# Warmup Iteration   7: 395556.801 ops/s
# Warmup Iteration   8: 395740.545 ops/s
# Warmup Iteration   9: 392334.953 ops/s
# Warmup Iteration  10: 362633.334 ops/s
# Warmup Iteration  11: 318227.053 ops/s
# Warmup Iteration  12: 397146.286 ops/s
# Warmup Iteration  13: 396511.481 ops/s
# Warmup Iteration  14: 398701.467 ops/s
# Warmup Iteration  15: 398803.487 ops/s
# Warmup Iteration  16: 398222.798 ops/s
# Warmup Iteration  17: 398954.885 ops/s
# Warmup Iteration  18: 395825.965 ops/s
# Warmup Iteration  19: 399900.525 ops/s
# Warmup Iteration  20: 398051.757 ops/s
# Warmup Iteration  21: 399223.343 ops/s
# Warmup Iteration  22: 396605.196 ops/s
# Warmup Iteration  23: 397884.926 ops/s
# Warmup Iteration  24: 399884.533 ops/s
# Warmup Iteration  25: 399683.081 ops/s
# Warmup Iteration  26: 399118.511 ops/s
# Warmup Iteration  27: 398919.462 ops/s
# Warmup Iteration  28: 399305.659 ops/s
# Warmup Iteration  29: 398235.376 ops/s
# Warmup Iteration  30: 398806.698 ops/s
Iteration   1: 399312.797 ops/s
Iteration   2: 397567.826 ops/s
Iteration   3: 400329.937 ops/s
Iteration   4: 398399.698 ops/s
Iteration   5: 396866.749 ops/s
Iteration   6: 397300.482 ops/s
Iteration   7: 397206.187 ops/s
Iteration   8: 397725.026 ops/s
Iteration   9: 399476.008 ops/s
Iteration  10: 399471.489 ops/s
Iteration  11: 396924.034 ops/s
Iteration  12: 397921.075 ops/s
Iteration  13: 399525.590 ops/s
Iteration  14: 399350.823 ops/s
Iteration  15: 400202.084 ops/s
Iteration  16: 399691.372 ops/s
Iteration  17: 397060.246 ops/s
Iteration  18: 397805.177 ops/s
Iteration  19: 399573.684 ops/s
Iteration  20: 400563.715 ops/s
Iteration  21: 397915.946 ops/s
Iteration  22: 399131.316 ops/s
Iteration  23: 398858.524 ops/s
Iteration  24: 398542.218 ops/s
Iteration  25: 399869.562 ops/s
Iteration  26: 398822.178 ops/s
Iteration  27: 393495.684 ops/s
Iteration  28: 395855.321 ops/s
Iteration  29: 397763.206 ops/s
Iteration  30: 394519.573 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_shared":
  398234.918 ±(99.9%) 1104.180 ops/s [Average]
  (min, avg, max) = (393495.684, 398234.918, 400563.715), stdev = 1652.684
  CI (99.9%): [397130.738, 399339.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_JSON_V2_shared  thrpt   30  398234.918 ± 1104.180  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 227830.437 ops/s
# Warmup Iteration   2: 319745.956 ops/s
# Warmup Iteration   3: 341739.358 ops/s
# Warmup Iteration   4: 522206.259 ops/s
# Warmup Iteration   5: 515291.250 ops/s
# Warmup Iteration   6: 516726.406 ops/s
# Warmup Iteration   7: 524105.375 ops/s
# Warmup Iteration   8: 515555.166 ops/s
# Warmup Iteration   9: 523545.465 ops/s
# Warmup Iteration  10: 515686.893 ops/s
# Warmup Iteration  11: 513838.516 ops/s
# Warmup Iteration  12: 518620.422 ops/s
# Warmup Iteration  13: 366712.616 ops/s
# Warmup Iteration  14: 520365.847 ops/s
# Warmup Iteration  15: 518586.831 ops/s
# Warmup Iteration  16: 518428.227 ops/s
# Warmup Iteration  17: 518011.493 ops/s
# Warmup Iteration  18: 516677.163 ops/s
# Warmup Iteration  19: 515954.039 ops/s
# Warmup Iteration  20: 519442.011 ops/s
# Warmup Iteration  21: 516454.629 ops/s
# Warmup Iteration  22: 517371.310 ops/s
# Warmup Iteration  23: 519784.712 ops/s
# Warmup Iteration  24: 519886.730 ops/s
# Warmup Iteration  25: 517950.055 ops/s
# Warmup Iteration  26: 518296.332 ops/s
# Warmup Iteration  27: 520111.850 ops/s
# Warmup Iteration  28: 519111.100 ops/s
# Warmup Iteration  29: 517560.028 ops/s
# Warmup Iteration  30: 517995.900 ops/s
Iteration   1: 515572.523 ops/s
Iteration   2: 516817.335 ops/s
Iteration   3: 517002.297 ops/s
Iteration   4: 516705.755 ops/s
Iteration   5: 519702.726 ops/s
Iteration   6: 519121.646 ops/s
Iteration   7: 519413.042 ops/s
Iteration   8: 517169.067 ops/s
Iteration   9: 517065.893 ops/s
Iteration  10: 519864.899 ops/s
Iteration  11: 520085.726 ops/s
Iteration  12: 518707.673 ops/s
Iteration  13: 519343.636 ops/s
Iteration  14: 519393.224 ops/s
Iteration  15: 519835.630 ops/s
Iteration  16: 519510.079 ops/s
Iteration  17: 518726.160 ops/s
Iteration  18: 519076.438 ops/s
Iteration  19: 520512.196 ops/s
Iteration  20: 518846.439 ops/s
Iteration  21: 519221.520 ops/s
Iteration  22: 520173.923 ops/s
Iteration  23: 519655.074 ops/s
Iteration  24: 518743.990 ops/s
Iteration  25: 520783.140 ops/s
Iteration  26: 519498.623 ops/s
Iteration  27: 516450.774 ops/s
Iteration  28: 517868.548 ops/s
Iteration  29: 519878.284 ops/s
Iteration  30: 517833.134 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3":
  518752.647 ±(99.9%) 899.788 ops/s [Average]
  (min, avg, max) = (515572.523, 518752.647, 520783.140), stdev = 1346.761
  CI (99.9%): [517852.858, 519652.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3  thrpt   30  518752.647 ± 899.788  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_incomplete$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_incomplete

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 172682.857 ops/s
# Warmup Iteration   2: 273263.733 ops/s
# Warmup Iteration   3: 342576.462 ops/s
# Warmup Iteration   4: 472048.311 ops/s
# Warmup Iteration   5: 479289.289 ops/s
# Warmup Iteration   6: 469286.331 ops/s
# Warmup Iteration   7: 471184.814 ops/s
# Warmup Iteration   8: 468220.294 ops/s
# Warmup Iteration   9: 476822.712 ops/s
# Warmup Iteration  10: 471116.186 ops/s
# Warmup Iteration  11: 359060.834 ops/s
# Warmup Iteration  12: 455216.542 ops/s
# Warmup Iteration  13: 475074.706 ops/s
# Warmup Iteration  14: 476355.457 ops/s
# Warmup Iteration  15: 475204.739 ops/s
# Warmup Iteration  16: 476690.014 ops/s
# Warmup Iteration  17: 473298.816 ops/s
# Warmup Iteration  18: 473976.060 ops/s
# Warmup Iteration  19: 474423.066 ops/s
# Warmup Iteration  20: 474694.378 ops/s
# Warmup Iteration  21: 475046.880 ops/s
# Warmup Iteration  22: 472531.727 ops/s
# Warmup Iteration  23: 475839.048 ops/s
# Warmup Iteration  24: 476588.036 ops/s
# Warmup Iteration  25: 476548.210 ops/s
# Warmup Iteration  26: 476844.993 ops/s
# Warmup Iteration  27: 473050.854 ops/s
# Warmup Iteration  28: 474851.153 ops/s
# Warmup Iteration  29: 474028.529 ops/s
# Warmup Iteration  30: 473740.398 ops/s
Iteration   1: 473405.380 ops/s
Iteration   2: 476445.348 ops/s
Iteration   3: 471767.297 ops/s
Iteration   4: 476719.796 ops/s
Iteration   5: 475711.916 ops/s
Iteration   6: 475907.693 ops/s
Iteration   7: 473959.305 ops/s
Iteration   8: 473523.175 ops/s
Iteration   9: 474602.168 ops/s
Iteration  10: 473702.611 ops/s
Iteration  11: 472932.904 ops/s
Iteration  12: 476095.818 ops/s
Iteration  13: 474337.785 ops/s
Iteration  14: 473817.991 ops/s
Iteration  15: 474295.375 ops/s
Iteration  16: 473773.877 ops/s
Iteration  17: 475601.584 ops/s
Iteration  18: 474648.414 ops/s
Iteration  19: 472576.052 ops/s
Iteration  20: 472057.937 ops/s
Iteration  21: 474446.077 ops/s
Iteration  22: 474098.537 ops/s
Iteration  23: 474788.420 ops/s
Iteration  24: 472216.391 ops/s
Iteration  25: 474266.099 ops/s
Iteration  26: 473713.417 ops/s
Iteration  27: 472767.775 ops/s
Iteration  28: 476269.234 ops/s
Iteration  29: 475910.572 ops/s
Iteration  30: 473836.628 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_incomplete":
  474273.186 ±(99.9%) 901.824 ops/s [Average]
  (min, avg, max) = (471767.297, 474273.186, 476719.796), stdev = 1349.808
  CI (99.9%): [473371.362, 475175.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_incomplete  thrpt   30  474273.186 ± 901.824  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 173252.466 ops/s
# Warmup Iteration   2: 274414.533 ops/s
# Warmup Iteration   3: 343649.504 ops/s
# Warmup Iteration   4: 472437.192 ops/s
# Warmup Iteration   5: 476438.442 ops/s
# Warmup Iteration   6: 471462.103 ops/s
# Warmup Iteration   7: 474292.754 ops/s
# Warmup Iteration   8: 475660.768 ops/s
# Warmup Iteration   9: 480210.024 ops/s
# Warmup Iteration  10: 476492.279 ops/s
# Warmup Iteration  11: 373867.236 ops/s
# Warmup Iteration  12: 445202.208 ops/s
# Warmup Iteration  13: 477104.341 ops/s
# Warmup Iteration  14: 480055.199 ops/s
# Warmup Iteration  15: 479726.249 ops/s
# Warmup Iteration  16: 479512.996 ops/s
# Warmup Iteration  17: 476972.931 ops/s
# Warmup Iteration  18: 477993.171 ops/s
# Warmup Iteration  19: 480901.992 ops/s
# Warmup Iteration  20: 477778.860 ops/s
# Warmup Iteration  21: 480533.530 ops/s
# Warmup Iteration  22: 479429.809 ops/s
# Warmup Iteration  23: 481098.223 ops/s
# Warmup Iteration  24: 479234.745 ops/s
# Warmup Iteration  25: 479402.017 ops/s
# Warmup Iteration  26: 480667.770 ops/s
# Warmup Iteration  27: 479926.260 ops/s
# Warmup Iteration  28: 476983.853 ops/s
# Warmup Iteration  29: 479942.553 ops/s
# Warmup Iteration  30: 477113.425 ops/s
Iteration   1: 477094.347 ops/s
Iteration   2: 480735.826 ops/s
Iteration   3: 480571.578 ops/s
Iteration   4: 479971.072 ops/s
Iteration   5: 480771.870 ops/s
Iteration   6: 478870.353 ops/s
Iteration   7: 479576.253 ops/s
Iteration   8: 482212.957 ops/s
Iteration   9: 480931.886 ops/s
Iteration  10: 479118.215 ops/s
Iteration  11: 480434.570 ops/s
Iteration  12: 480590.191 ops/s
Iteration  13: 480214.172 ops/s
Iteration  14: 480637.980 ops/s
Iteration  15: 481335.484 ops/s
Iteration  16: 481623.046 ops/s
Iteration  17: 477928.048 ops/s
Iteration  18: 477986.008 ops/s
Iteration  19: 478494.988 ops/s
Iteration  20: 479414.946 ops/s
Iteration  21: 480490.436 ops/s
Iteration  22: 479831.354 ops/s
Iteration  23: 479568.779 ops/s
Iteration  24: 477715.427 ops/s
Iteration  25: 480061.035 ops/s
Iteration  26: 481422.816 ops/s
Iteration  27: 480746.745 ops/s
Iteration  28: 479469.858 ops/s
Iteration  29: 477339.815 ops/s
Iteration  30: 479030.283 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_shared":
  479806.345 ±(99.9%) 874.671 ops/s [Average]
  (min, avg, max) = (477094.347, 479806.345, 482212.957), stdev = 1309.167
  CI (99.9%): [478931.673, 480681.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_PROTO3_shared  thrpt   30  479806.345 ± 874.671  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158699.585 ops/s
# Warmup Iteration   2: 220219.431 ops/s
# Warmup Iteration   3: 317741.039 ops/s
# Warmup Iteration   4: 401573.333 ops/s
# Warmup Iteration   5: 394275.427 ops/s
# Warmup Iteration   6: 401853.497 ops/s
# Warmup Iteration   7: 398692.730 ops/s
# Warmup Iteration   8: 396961.691 ops/s
# Warmup Iteration   9: 394333.908 ops/s
# Warmup Iteration  10: 345303.473 ops/s
# Warmup Iteration  11: 334790.811 ops/s
# Warmup Iteration  12: 397942.987 ops/s
# Warmup Iteration  13: 399595.801 ops/s
# Warmup Iteration  14: 399557.062 ops/s
# Warmup Iteration  15: 399211.155 ops/s
# Warmup Iteration  16: 399444.321 ops/s
# Warmup Iteration  17: 397546.051 ops/s
# Warmup Iteration  18: 398228.931 ops/s
# Warmup Iteration  19: 397495.541 ops/s
# Warmup Iteration  20: 397558.047 ops/s
# Warmup Iteration  21: 398052.894 ops/s
# Warmup Iteration  22: 395939.655 ops/s
# Warmup Iteration  23: 397411.911 ops/s
# Warmup Iteration  24: 397375.469 ops/s
# Warmup Iteration  25: 398167.104 ops/s
# Warmup Iteration  26: 398062.611 ops/s
# Warmup Iteration  27: 398180.624 ops/s
# Warmup Iteration  28: 396394.787 ops/s
# Warmup Iteration  29: 396975.346 ops/s
# Warmup Iteration  30: 397305.004 ops/s
Iteration   1: 397504.207 ops/s
Iteration   2: 397163.450 ops/s
Iteration   3: 397556.027 ops/s
Iteration   4: 399017.109 ops/s
Iteration   5: 397705.468 ops/s
Iteration   6: 398144.722 ops/s
Iteration   7: 397840.945 ops/s
Iteration   8: 398131.753 ops/s
Iteration   9: 397467.280 ops/s
Iteration  10: 398254.382 ops/s
Iteration  11: 398044.983 ops/s
Iteration  12: 397260.654 ops/s
Iteration  13: 398895.161 ops/s
Iteration  14: 398000.323 ops/s
Iteration  15: 397615.499 ops/s
Iteration  16: 396532.428 ops/s
Iteration  17: 395367.405 ops/s
Iteration  18: 396945.617 ops/s
Iteration  19: 396134.360 ops/s
Iteration  20: 398779.488 ops/s
Iteration  21: 397243.754 ops/s
Iteration  22: 397479.384 ops/s
Iteration  23: 397201.088 ops/s
Iteration  24: 399183.726 ops/s
Iteration  25: 395213.736 ops/s
Iteration  26: 398450.128 ops/s
Iteration  27: 397174.801 ops/s
Iteration  28: 397036.867 ops/s
Iteration  29: 397155.390 ops/s
Iteration  30: 397662.807 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT":
  397538.765 ±(99.9%) 624.777 ops/s [Average]
  (min, avg, max) = (395213.736, 397538.765, 399183.726), stdev = 935.137
  CI (99.9%): [396913.987, 398163.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT  thrpt   30  397538.765 ± 624.777  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_incomplete$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_incomplete

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146794.224 ops/s
# Warmup Iteration   2: 197841.500 ops/s
# Warmup Iteration   3: 311015.248 ops/s
# Warmup Iteration   4: 364824.789 ops/s
# Warmup Iteration   5: 363244.421 ops/s
# Warmup Iteration   6: 366284.781 ops/s
# Warmup Iteration   7: 365645.714 ops/s
# Warmup Iteration   8: 367010.253 ops/s
# Warmup Iteration   9: 369407.902 ops/s
# Warmup Iteration  10: 261703.790 ops/s
# Warmup Iteration  11: 372455.726 ops/s
# Warmup Iteration  12: 370943.302 ops/s
# Warmup Iteration  13: 370707.346 ops/s
# Warmup Iteration  14: 372464.376 ops/s
# Warmup Iteration  15: 370455.293 ops/s
# Warmup Iteration  16: 371178.900 ops/s
# Warmup Iteration  17: 367500.337 ops/s
# Warmup Iteration  18: 370642.729 ops/s
# Warmup Iteration  19: 365878.655 ops/s
# Warmup Iteration  20: 368874.164 ops/s
# Warmup Iteration  21: 369461.577 ops/s
# Warmup Iteration  22: 370353.686 ops/s
# Warmup Iteration  23: 369383.412 ops/s
# Warmup Iteration  24: 369335.765 ops/s
# Warmup Iteration  25: 370447.932 ops/s
# Warmup Iteration  26: 371476.623 ops/s
# Warmup Iteration  27: 371979.512 ops/s
# Warmup Iteration  28: 372252.203 ops/s
# Warmup Iteration  29: 370931.649 ops/s
# Warmup Iteration  30: 371215.709 ops/s
Iteration   1: 371010.241 ops/s
Iteration   2: 369598.091 ops/s
Iteration   3: 366298.133 ops/s
Iteration   4: 369559.762 ops/s
Iteration   5: 370563.001 ops/s
Iteration   6: 368305.437 ops/s
Iteration   7: 366992.887 ops/s
Iteration   8: 367622.516 ops/s
Iteration   9: 368874.693 ops/s
Iteration  10: 369331.777 ops/s
Iteration  11: 368805.637 ops/s
Iteration  12: 365694.013 ops/s
Iteration  13: 370193.117 ops/s
Iteration  14: 371646.943 ops/s
Iteration  15: 371184.940 ops/s
Iteration  16: 370975.029 ops/s
Iteration  17: 367280.165 ops/s
Iteration  18: 367455.981 ops/s
Iteration  19: 370072.399 ops/s
Iteration  20: 370498.099 ops/s
Iteration  21: 370923.105 ops/s
Iteration  22: 367990.590 ops/s
Iteration  23: 371384.009 ops/s
Iteration  24: 366595.495 ops/s
Iteration  25: 369115.810 ops/s
Iteration  26: 370328.851 ops/s
Iteration  27: 370913.381 ops/s
Iteration  28: 369403.564 ops/s
Iteration  29: 368567.732 ops/s
Iteration  30: 369179.412 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_incomplete":
  369212.160 ±(99.9%) 1098.884 ops/s [Average]
  (min, avg, max) = (365694.013, 369212.160, 371646.943), stdev = 1644.757
  CI (99.9%): [368113.277, 370311.044] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_incomplete  thrpt   30  369212.160 ± 1098.884  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137464.617 ops/s
# Warmup Iteration   2: 194683.532 ops/s
# Warmup Iteration   3: 296850.565 ops/s
# Warmup Iteration   4: 357127.483 ops/s
# Warmup Iteration   5: 354892.618 ops/s
# Warmup Iteration   6: 355469.934 ops/s
# Warmup Iteration   7: 356542.326 ops/s
# Warmup Iteration   8: 356190.649 ops/s
# Warmup Iteration   9: 361868.532 ops/s
# Warmup Iteration  10: 257452.836 ops/s
# Warmup Iteration  11: 361291.588 ops/s
# Warmup Iteration  12: 361398.864 ops/s
# Warmup Iteration  13: 362018.985 ops/s
# Warmup Iteration  14: 359297.114 ops/s
# Warmup Iteration  15: 359770.669 ops/s
# Warmup Iteration  16: 361019.439 ops/s
# Warmup Iteration  17: 357599.208 ops/s
# Warmup Iteration  18: 356386.481 ops/s
# Warmup Iteration  19: 356818.184 ops/s
# Warmup Iteration  20: 356593.603 ops/s
# Warmup Iteration  21: 357274.199 ops/s
# Warmup Iteration  22: 357426.697 ops/s
# Warmup Iteration  23: 357514.904 ops/s
# Warmup Iteration  24: 356892.098 ops/s
# Warmup Iteration  25: 356750.454 ops/s
# Warmup Iteration  26: 356407.790 ops/s
# Warmup Iteration  27: 356219.740 ops/s
# Warmup Iteration  28: 356156.667 ops/s
# Warmup Iteration  29: 356217.357 ops/s
# Warmup Iteration  30: 355976.366 ops/s
Iteration   1: 353605.276 ops/s
Iteration   2: 358803.404 ops/s
Iteration   3: 358676.547 ops/s
Iteration   4: 358370.525 ops/s
Iteration   5: 356606.576 ops/s
Iteration   6: 353751.460 ops/s
Iteration   7: 355896.473 ops/s
Iteration   8: 355437.001 ops/s
Iteration   9: 356060.085 ops/s
Iteration  10: 356147.217 ops/s
Iteration  11: 356727.800 ops/s
Iteration  12: 358720.518 ops/s
Iteration  13: 355363.134 ops/s
Iteration  14: 357876.507 ops/s
Iteration  15: 356834.440 ops/s
Iteration  16: 356792.619 ops/s
Iteration  17: 356072.532 ops/s
Iteration  18: 358845.134 ops/s
Iteration  19: 355868.764 ops/s
Iteration  20: 356317.616 ops/s
Iteration  21: 355523.694 ops/s
Iteration  22: 356042.011 ops/s
Iteration  23: 358282.859 ops/s
Iteration  24: 357553.826 ops/s
Iteration  25: 355880.132 ops/s
Iteration  26: 354548.379 ops/s
Iteration  27: 355548.522 ops/s
Iteration  28: 355475.810 ops/s
Iteration  29: 357408.943 ops/s
Iteration  30: 357796.388 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_shared":
  356561.140 ±(99.9%) 959.202 ops/s [Average]
  (min, avg, max) = (353605.276, 356561.140, 358845.134), stdev = 1435.688
  CI (99.9%): [355601.938, 357520.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_noAnnotations_rootServerSpan_THRIFT_shared  thrpt   30  356561.140 ± 959.202  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 69374.887 ops/s
# Warmup Iteration   2: 112597.094 ops/s
# Warmup Iteration   3: 152896.654 ops/s
# Warmup Iteration   4: 191935.840 ops/s
# Warmup Iteration   5: 190552.320 ops/s
# Warmup Iteration   6: 194976.234 ops/s
# Warmup Iteration   7: 192568.893 ops/s
# Warmup Iteration   8: 193228.538 ops/s
# Warmup Iteration   9: 193874.313 ops/s
# Warmup Iteration  10: 185577.276 ops/s
# Warmup Iteration  11: 152677.084 ops/s
# Warmup Iteration  12: 195682.028 ops/s
# Warmup Iteration  13: 194993.316 ops/s
# Warmup Iteration  14: 194394.961 ops/s
# Warmup Iteration  15: 194695.381 ops/s
# Warmup Iteration  16: 194107.747 ops/s
# Warmup Iteration  17: 193168.011 ops/s
# Warmup Iteration  18: 190926.140 ops/s
# Warmup Iteration  19: 192484.990 ops/s
# Warmup Iteration  20: 193481.707 ops/s
# Warmup Iteration  21: 194019.040 ops/s
# Warmup Iteration  22: 192606.950 ops/s
# Warmup Iteration  23: 191824.293 ops/s
# Warmup Iteration  24: 192373.031 ops/s
# Warmup Iteration  25: 193090.822 ops/s
# Warmup Iteration  26: 193485.698 ops/s
# Warmup Iteration  27: 191973.052 ops/s
# Warmup Iteration  28: 193094.997 ops/s
# Warmup Iteration  29: 193419.051 ops/s
# Warmup Iteration  30: 193597.127 ops/s
Iteration   1: 193785.480 ops/s
Iteration   2: 192061.075 ops/s
Iteration   3: 194175.959 ops/s
Iteration   4: 193113.703 ops/s
Iteration   5: 192371.543 ops/s
Iteration   6: 191302.191 ops/s
Iteration   7: 193450.052 ops/s
Iteration   8: 192813.066 ops/s
Iteration   9: 192675.008 ops/s
Iteration  10: 193228.217 ops/s
Iteration  11: 193574.491 ops/s
Iteration  12: 192939.359 ops/s
Iteration  13: 191972.531 ops/s
Iteration  14: 191504.365 ops/s
Iteration  15: 190913.039 ops/s
Iteration  16: 193613.150 ops/s
Iteration  17: 193928.840 ops/s
Iteration  18: 192588.214 ops/s
Iteration  19: 193423.303 ops/s
Iteration  20: 193007.489 ops/s
Iteration  21: 192746.329 ops/s
Iteration  22: 194421.161 ops/s
Iteration  23: 193954.091 ops/s
Iteration  24: 193606.945 ops/s
Iteration  25: 191113.118 ops/s
Iteration  26: 193094.189 ops/s
Iteration  27: 193157.826 ops/s
Iteration  28: 193486.902 ops/s
Iteration  29: 193481.131 ops/s
Iteration  30: 193717.824 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V1":
  192974.020 ±(99.9%) 608.512 ops/s [Average]
  (min, avg, max) = (190913.039, 192974.020, 194421.161), stdev = 910.792
  CI (99.9%): [192365.508, 193582.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V1  thrpt   30  192974.020 ± 608.512  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64017.259 ops/s
# Warmup Iteration   2: 79779.874 ops/s
# Warmup Iteration   3: 129722.750 ops/s
# Warmup Iteration   4: 213997.566 ops/s
# Warmup Iteration   5: 301015.456 ops/s
# Warmup Iteration   6: 303037.432 ops/s
# Warmup Iteration   7: 294981.727 ops/s
# Warmup Iteration   8: 297874.594 ops/s
# Warmup Iteration   9: 296527.347 ops/s
# Warmup Iteration  10: 298040.092 ops/s
# Warmup Iteration  11: 294264.422 ops/s
# Warmup Iteration  12: 265844.741 ops/s
# Warmup Iteration  13: 244929.231 ops/s
# Warmup Iteration  14: 300011.233 ops/s
# Warmup Iteration  15: 301319.534 ops/s
# Warmup Iteration  16: 300193.792 ops/s
# Warmup Iteration  17: 301441.370 ops/s
# Warmup Iteration  18: 301231.953 ops/s
# Warmup Iteration  19: 300337.487 ops/s
# Warmup Iteration  20: 301680.216 ops/s
# Warmup Iteration  21: 301002.357 ops/s
# Warmup Iteration  22: 300025.786 ops/s
# Warmup Iteration  23: 299657.743 ops/s
# Warmup Iteration  24: 298928.159 ops/s
# Warmup Iteration  25: 299787.311 ops/s
# Warmup Iteration  26: 301279.159 ops/s
# Warmup Iteration  27: 300386.240 ops/s
# Warmup Iteration  28: 300981.860 ops/s
# Warmup Iteration  29: 301508.901 ops/s
# Warmup Iteration  30: 300635.634 ops/s
Iteration   1: 300426.359 ops/s
Iteration   2: 300562.697 ops/s
Iteration   3: 300382.074 ops/s
Iteration   4: 299660.113 ops/s
Iteration   5: 299051.417 ops/s
Iteration   6: 300632.910 ops/s
Iteration   7: 300455.257 ops/s
Iteration   8: 300039.431 ops/s
Iteration   9: 301218.101 ops/s
Iteration  10: 300407.317 ops/s
Iteration  11: 300760.124 ops/s
Iteration  12: 299912.935 ops/s
Iteration  13: 300311.298 ops/s
Iteration  14: 299115.759 ops/s
Iteration  15: 301402.249 ops/s
Iteration  16: 299446.662 ops/s
Iteration  17: 301478.222 ops/s
Iteration  18: 300668.372 ops/s
Iteration  19: 302002.726 ops/s
Iteration  20: 302187.734 ops/s
Iteration  21: 302269.740 ops/s
Iteration  22: 300690.387 ops/s
Iteration  23: 300326.582 ops/s
Iteration  24: 301160.998 ops/s
Iteration  25: 301059.662 ops/s
Iteration  26: 302503.463 ops/s
Iteration  27: 302002.461 ops/s
Iteration  28: 300900.369 ops/s
Iteration  29: 300966.997 ops/s
Iteration  30: 302018.176 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V2":
  300800.686 ±(99.9%) 609.731 ops/s [Average]
  (min, avg, max) = (299051.417, 300800.686, 302503.463), stdev = 912.616
  CI (99.9%): [300190.956, 301410.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_JSON_V2  thrpt   30  300800.686 ± 609.731  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158572.172 ops/s
# Warmup Iteration   2: 234889.714 ops/s
# Warmup Iteration   3: 258991.506 ops/s
# Warmup Iteration   4: 408345.892 ops/s
# Warmup Iteration   5: 404671.057 ops/s
# Warmup Iteration   6: 400444.462 ops/s
# Warmup Iteration   7: 409588.412 ops/s
# Warmup Iteration   8: 405613.254 ops/s
# Warmup Iteration   9: 404600.162 ops/s
# Warmup Iteration  10: 408542.636 ops/s
# Warmup Iteration  11: 406159.619 ops/s
# Warmup Iteration  12: 339454.790 ops/s
# Warmup Iteration  13: 350562.320 ops/s
# Warmup Iteration  14: 408786.595 ops/s
# Warmup Iteration  15: 408033.689 ops/s
# Warmup Iteration  16: 408748.510 ops/s
# Warmup Iteration  17: 413547.876 ops/s
# Warmup Iteration  18: 413248.753 ops/s
# Warmup Iteration  19: 413411.474 ops/s
# Warmup Iteration  20: 414199.730 ops/s
# Warmup Iteration  21: 414231.656 ops/s
# Warmup Iteration  22: 413295.450 ops/s
# Warmup Iteration  23: 409466.825 ops/s
# Warmup Iteration  24: 413711.915 ops/s
# Warmup Iteration  25: 412705.528 ops/s
# Warmup Iteration  26: 411357.820 ops/s
# Warmup Iteration  27: 411641.211 ops/s
# Warmup Iteration  28: 413078.569 ops/s
# Warmup Iteration  29: 412638.712 ops/s
# Warmup Iteration  30: 412201.511 ops/s
Iteration   1: 412156.882 ops/s
Iteration   2: 410813.953 ops/s
Iteration   3: 409401.622 ops/s
Iteration   4: 411615.913 ops/s
Iteration   5: 413763.772 ops/s
Iteration   6: 413445.322 ops/s
Iteration   7: 412535.519 ops/s
Iteration   8: 412817.955 ops/s
Iteration   9: 413519.306 ops/s
Iteration  10: 410995.313 ops/s
Iteration  11: 410116.120 ops/s
Iteration  12: 410258.121 ops/s
Iteration  13: 411610.723 ops/s
Iteration  14: 410570.498 ops/s
Iteration  15: 413342.174 ops/s
Iteration  16: 413296.732 ops/s
Iteration  17: 412407.686 ops/s
Iteration  18: 410766.721 ops/s
Iteration  19: 412837.580 ops/s
Iteration  20: 413003.480 ops/s
Iteration  21: 411678.690 ops/s
Iteration  22: 412858.026 ops/s
Iteration  23: 413973.929 ops/s
Iteration  24: 412494.988 ops/s
Iteration  25: 411001.560 ops/s
Iteration  26: 411911.693 ops/s
Iteration  27: 414171.329 ops/s
Iteration  28: 413193.716 ops/s
Iteration  29: 411631.907 ops/s
Iteration  30: 410472.368 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_PROTO3":
  412088.787 ±(99.9%) 857.923 ops/s [Average]
  (min, avg, max) = (409401.622, 412088.787, 414171.329), stdev = 1284.099
  CI (99.9%): [411230.863, 412946.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_PROTO3  thrpt   30  412088.787 ± 857.923  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 103958.900 ops/s
# Warmup Iteration   2: 168477.842 ops/s
# Warmup Iteration   3: 220519.192 ops/s
# Warmup Iteration   4: 303726.650 ops/s
# Warmup Iteration   5: 302307.150 ops/s
# Warmup Iteration   6: 302898.481 ops/s
# Warmup Iteration   7: 302635.380 ops/s
# Warmup Iteration   8: 302674.718 ops/s
# Warmup Iteration   9: 303046.644 ops/s
# Warmup Iteration  10: 299689.297 ops/s
# Warmup Iteration  11: 224368.178 ops/s
# Warmup Iteration  12: 304084.953 ops/s
# Warmup Iteration  13: 306406.151 ops/s
# Warmup Iteration  14: 305581.006 ops/s
# Warmup Iteration  15: 307196.319 ops/s
# Warmup Iteration  16: 305999.317 ops/s
# Warmup Iteration  17: 306258.633 ops/s
# Warmup Iteration  18: 304669.572 ops/s
# Warmup Iteration  19: 305369.858 ops/s
# Warmup Iteration  20: 306153.451 ops/s
# Warmup Iteration  21: 305885.869 ops/s
# Warmup Iteration  22: 306864.006 ops/s
# Warmup Iteration  23: 306022.138 ops/s
# Warmup Iteration  24: 305748.505 ops/s
# Warmup Iteration  25: 306105.475 ops/s
# Warmup Iteration  26: 305371.801 ops/s
# Warmup Iteration  27: 305095.072 ops/s
# Warmup Iteration  28: 305569.440 ops/s
# Warmup Iteration  29: 305542.500 ops/s
# Warmup Iteration  30: 304630.340 ops/s
Iteration   1: 305049.041 ops/s
Iteration   2: 303547.893 ops/s
Iteration   3: 304123.240 ops/s
Iteration   4: 305600.349 ops/s
Iteration   5: 304322.991 ops/s
Iteration   6: 305881.367 ops/s
Iteration   7: 304326.579 ops/s
Iteration   8: 305255.730 ops/s
Iteration   9: 304620.769 ops/s
Iteration  10: 305508.146 ops/s
Iteration  11: 305607.463 ops/s
Iteration  12: 305452.556 ops/s
Iteration  13: 306209.749 ops/s
Iteration  14: 307262.006 ops/s
Iteration  15: 305141.466 ops/s
Iteration  16: 305415.417 ops/s
Iteration  17: 307588.201 ops/s
Iteration  18: 305741.703 ops/s
Iteration  19: 304425.653 ops/s
Iteration  20: 305758.231 ops/s
Iteration  21: 306446.223 ops/s
Iteration  22: 305041.217 ops/s
Iteration  23: 306935.478 ops/s
Iteration  24: 307184.323 ops/s
Iteration  25: 306603.546 ops/s
Iteration  26: 304491.090 ops/s
Iteration  27: 305448.242 ops/s
Iteration  28: 306087.650 ops/s
Iteration  29: 303121.937 ops/s
Iteration  30: 305174.678 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_THRIFT":
  305445.764 ±(99.9%) 716.125 ops/s [Average]
  (min, avg, max) = (303121.937, 305445.764, 307588.201), stdev = 1071.863
  CI (99.9%): [304729.639, 306161.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_64bitTraceId_THRIFT  thrpt   30  305445.764 ± 716.125  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 83548.983 ops/s
# Warmup Iteration   2: 116840.495 ops/s
# Warmup Iteration   3: 156781.276 ops/s
# Warmup Iteration   4: 198400.986 ops/s
# Warmup Iteration   5: 200369.568 ops/s
# Warmup Iteration   6: 197710.746 ops/s
# Warmup Iteration   7: 198888.708 ops/s
# Warmup Iteration   8: 198688.802 ops/s
# Warmup Iteration   9: 201202.552 ops/s
# Warmup Iteration  10: 199768.339 ops/s
# Warmup Iteration  11: 151757.720 ops/s
# Warmup Iteration  12: 195782.634 ops/s
# Warmup Iteration  13: 200301.329 ops/s
# Warmup Iteration  14: 201759.653 ops/s
# Warmup Iteration  15: 201236.679 ops/s
# Warmup Iteration  16: 200718.026 ops/s
# Warmup Iteration  17: 200299.806 ops/s
# Warmup Iteration  18: 200465.366 ops/s
# Warmup Iteration  19: 201853.972 ops/s
# Warmup Iteration  20: 199937.174 ops/s
# Warmup Iteration  21: 200841.043 ops/s
# Warmup Iteration  22: 201195.239 ops/s
# Warmup Iteration  23: 201675.954 ops/s
# Warmup Iteration  24: 202330.019 ops/s
# Warmup Iteration  25: 200164.371 ops/s
# Warmup Iteration  26: 201187.122 ops/s
# Warmup Iteration  27: 200988.621 ops/s
# Warmup Iteration  28: 201548.885 ops/s
# Warmup Iteration  29: 201061.279 ops/s
# Warmup Iteration  30: 200756.302 ops/s
Iteration   1: 201512.266 ops/s
Iteration   2: 200818.596 ops/s
Iteration   3: 201432.207 ops/s
Iteration   4: 201901.287 ops/s
Iteration   5: 202814.767 ops/s
Iteration   6: 201385.729 ops/s
Iteration   7: 200956.947 ops/s
Iteration   8: 202447.900 ops/s
Iteration   9: 201309.857 ops/s
Iteration  10: 200804.605 ops/s
Iteration  11: 201397.534 ops/s
Iteration  12: 202996.475 ops/s
Iteration  13: 202121.610 ops/s
Iteration  14: 201353.670 ops/s
Iteration  15: 202255.916 ops/s
Iteration  16: 202875.936 ops/s
Iteration  17: 201134.961 ops/s
Iteration  18: 201411.582 ops/s
Iteration  19: 200723.242 ops/s
Iteration  20: 200593.687 ops/s
Iteration  21: 201097.403 ops/s
Iteration  22: 201508.713 ops/s
Iteration  23: 201717.639 ops/s
Iteration  24: 200533.438 ops/s
Iteration  25: 200655.454 ops/s
Iteration  26: 201351.093 ops/s
Iteration  27: 201251.929 ops/s
Iteration  28: 201734.348 ops/s
Iteration  29: 201389.379 ops/s
Iteration  30: 200192.230 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V1":
  201456.013 ±(99.9%) 471.338 ops/s [Average]
  (min, avg, max) = (200192.230, 201456.013, 202996.475), stdev = 705.476
  CI (99.9%): [200984.676, 201927.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V1  thrpt   30  201456.013 ± 471.338  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132736.845 ops/s
# Warmup Iteration   2: 177966.646 ops/s
# Warmup Iteration   3: 207695.353 ops/s
# Warmup Iteration   4: 334883.340 ops/s
# Warmup Iteration   5: 330641.258 ops/s
# Warmup Iteration   6: 330210.773 ops/s
# Warmup Iteration   7: 332310.659 ops/s
# Warmup Iteration   8: 336201.969 ops/s
# Warmup Iteration   9: 334279.907 ops/s
# Warmup Iteration  10: 333636.388 ops/s
# Warmup Iteration  11: 338642.426 ops/s
# Warmup Iteration  12: 237209.838 ops/s
# Warmup Iteration  13: 335479.640 ops/s
# Warmup Iteration  14: 336193.190 ops/s
# Warmup Iteration  15: 335170.078 ops/s
# Warmup Iteration  16: 333646.185 ops/s
# Warmup Iteration  17: 335510.758 ops/s
# Warmup Iteration  18: 333219.006 ops/s
# Warmup Iteration  19: 336342.176 ops/s
# Warmup Iteration  20: 336836.425 ops/s
# Warmup Iteration  21: 336884.325 ops/s
# Warmup Iteration  22: 335434.875 ops/s
# Warmup Iteration  23: 336825.499 ops/s
# Warmup Iteration  24: 336403.550 ops/s
# Warmup Iteration  25: 337502.147 ops/s
# Warmup Iteration  26: 337018.641 ops/s
# Warmup Iteration  27: 334929.955 ops/s
# Warmup Iteration  28: 335902.177 ops/s
# Warmup Iteration  29: 335963.601 ops/s
# Warmup Iteration  30: 335394.446 ops/s
Iteration   1: 334164.002 ops/s
Iteration   2: 333367.848 ops/s
Iteration   3: 332840.853 ops/s
Iteration   4: 334837.466 ops/s
Iteration   5: 333592.690 ops/s
Iteration   6: 335153.915 ops/s
Iteration   7: 337402.327 ops/s
Iteration   8: 334563.260 ops/s
Iteration   9: 335583.408 ops/s
Iteration  10: 335231.138 ops/s
Iteration  11: 333044.648 ops/s
Iteration  12: 335444.623 ops/s
Iteration  13: 337017.687 ops/s
Iteration  14: 335010.141 ops/s
Iteration  15: 335916.483 ops/s
Iteration  16: 337058.254 ops/s
Iteration  17: 337051.704 ops/s
Iteration  18: 336528.843 ops/s
Iteration  19: 336302.964 ops/s
Iteration  20: 337534.324 ops/s
Iteration  21: 335662.438 ops/s
Iteration  22: 338183.416 ops/s
Iteration  23: 332552.989 ops/s
Iteration  24: 333171.687 ops/s
Iteration  25: 335001.859 ops/s
Iteration  26: 335991.676 ops/s
Iteration  27: 335551.275 ops/s
Iteration  28: 333206.573 ops/s
Iteration  29: 333930.947 ops/s
Iteration  30: 336082.727 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V2":
  335232.739 ±(99.9%) 1033.134 ops/s [Average]
  (min, avg, max) = (332552.989, 335232.739, 338183.416), stdev = 1546.347
  CI (99.9%): [334199.605, 336265.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_JSON_V2  thrpt   30  335232.739 ± 1033.134  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 208369.903 ops/s
# Warmup Iteration   2: 289149.158 ops/s
# Warmup Iteration   3: 297167.070 ops/s
# Warmup Iteration   4: 459602.075 ops/s
# Warmup Iteration   5: 452399.244 ops/s
# Warmup Iteration   6: 459411.867 ops/s
# Warmup Iteration   7: 450927.103 ops/s
# Warmup Iteration   8: 456973.782 ops/s
# Warmup Iteration   9: 449850.098 ops/s
# Warmup Iteration  10: 451407.256 ops/s
# Warmup Iteration  11: 459590.582 ops/s
# Warmup Iteration  12: 452284.539 ops/s
# Warmup Iteration  13: 459304.788 ops/s
# Warmup Iteration  14: 340055.054 ops/s
# Warmup Iteration  15: 438896.718 ops/s
# Warmup Iteration  16: 454440.108 ops/s
# Warmup Iteration  17: 456976.329 ops/s
# Warmup Iteration  18: 458512.022 ops/s
# Warmup Iteration  19: 456790.700 ops/s
# Warmup Iteration  20: 458585.744 ops/s
# Warmup Iteration  21: 457380.652 ops/s
# Warmup Iteration  22: 458110.553 ops/s
# Warmup Iteration  23: 455881.745 ops/s
# Warmup Iteration  24: 456085.593 ops/s
# Warmup Iteration  25: 453179.888 ops/s
# Warmup Iteration  26: 451613.704 ops/s
# Warmup Iteration  27: 457544.016 ops/s
# Warmup Iteration  28: 458712.301 ops/s
# Warmup Iteration  29: 456212.479 ops/s
# Warmup Iteration  30: 458105.268 ops/s
Iteration   1: 456251.631 ops/s
Iteration   2: 459343.768 ops/s
Iteration   3: 459349.858 ops/s
Iteration   4: 454062.028 ops/s
Iteration   5: 457929.755 ops/s
Iteration   6: 455947.618 ops/s
Iteration   7: 453832.921 ops/s
Iteration   8: 457297.106 ops/s
Iteration   9: 455544.311 ops/s
Iteration  10: 456972.082 ops/s
Iteration  11: 457566.526 ops/s
Iteration  12: 458422.728 ops/s
Iteration  13: 458925.008 ops/s
Iteration  14: 457619.392 ops/s
Iteration  15: 457122.081 ops/s
Iteration  16: 457043.356 ops/s
Iteration  17: 461294.245 ops/s
Iteration  18: 456843.965 ops/s
Iteration  19: 456658.862 ops/s
Iteration  20: 457124.428 ops/s
Iteration  21: 460694.062 ops/s
Iteration  22: 459049.803 ops/s
Iteration  23: 455530.981 ops/s
Iteration  24: 453428.783 ops/s
Iteration  25: 456460.462 ops/s
Iteration  26: 457990.835 ops/s
Iteration  27: 458155.945 ops/s
Iteration  28: 455659.975 ops/s
Iteration  29: 451833.418 ops/s
Iteration  30: 454928.140 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_PROTO3":
  456962.802 ±(99.9%) 1401.302 ops/s [Average]
  (min, avg, max) = (451833.418, 456962.802, 461294.245), stdev = 2097.404
  CI (99.9%): [455561.500, 458364.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_PROTO3  thrpt   30  456962.802 ± 1401.302  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 130459.714 ops/s
# Warmup Iteration   2: 179289.287 ops/s
# Warmup Iteration   3: 230188.697 ops/s
# Warmup Iteration   4: 324401.337 ops/s
# Warmup Iteration   5: 328658.158 ops/s
# Warmup Iteration   6: 323732.464 ops/s
# Warmup Iteration   7: 326043.786 ops/s
# Warmup Iteration   8: 326985.259 ops/s
# Warmup Iteration   9: 328669.809 ops/s
# Warmup Iteration  10: 327393.889 ops/s
# Warmup Iteration  11: 270041.282 ops/s
# Warmup Iteration  12: 287471.644 ops/s
# Warmup Iteration  13: 330981.589 ops/s
# Warmup Iteration  14: 331539.516 ops/s
# Warmup Iteration  15: 328476.770 ops/s
# Warmup Iteration  16: 330004.181 ops/s
# Warmup Iteration  17: 325302.048 ops/s
# Warmup Iteration  18: 328360.099 ops/s
# Warmup Iteration  19: 328535.524 ops/s
# Warmup Iteration  20: 328256.156 ops/s
# Warmup Iteration  21: 328850.719 ops/s
# Warmup Iteration  22: 329936.181 ops/s
# Warmup Iteration  23: 329115.375 ops/s
# Warmup Iteration  24: 329099.195 ops/s
# Warmup Iteration  25: 327938.325 ops/s
# Warmup Iteration  26: 327820.449 ops/s
# Warmup Iteration  27: 326903.246 ops/s
# Warmup Iteration  28: 328730.533 ops/s
# Warmup Iteration  29: 329296.233 ops/s
# Warmup Iteration  30: 328274.011 ops/s
Iteration   1: 329344.650 ops/s
Iteration   2: 330063.111 ops/s
Iteration   3: 328851.567 ops/s
Iteration   4: 327649.047 ops/s
Iteration   5: 330150.480 ops/s
Iteration   6: 327809.636 ops/s
Iteration   7: 327370.781 ops/s
Iteration   8: 328680.639 ops/s
Iteration   9: 329253.906 ops/s
Iteration  10: 328073.067 ops/s
Iteration  11: 326741.424 ops/s
Iteration  12: 329388.575 ops/s
Iteration  13: 327456.036 ops/s
Iteration  14: 326401.400 ops/s
Iteration  15: 328894.928 ops/s
Iteration  16: 328795.935 ops/s
Iteration  17: 329173.681 ops/s
Iteration  18: 328852.267 ops/s
Iteration  19: 330079.552 ops/s
Iteration  20: 331078.202 ops/s
Iteration  21: 330042.859 ops/s
Iteration  22: 327366.940 ops/s
Iteration  23: 328940.472 ops/s
Iteration  24: 328898.341 ops/s
Iteration  25: 326553.462 ops/s
Iteration  26: 328470.312 ops/s
Iteration  27: 327601.944 ops/s
Iteration  28: 326729.738 ops/s
Iteration  29: 329346.988 ops/s
Iteration  30: 328833.634 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_THRIFT":
  328563.119 ±(99.9%) 794.984 ops/s [Average]
  (min, avg, max) = (326401.400, 328563.119, 331078.202), stdev = 1189.895
  CI (99.9%): [327768.135, 329358.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_THRIFT  thrpt   30  328563.119 ± 794.984  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 224920.055 ops/s
# Warmup Iteration   2: 309677.618 ops/s
# Warmup Iteration   3: 493894.014 ops/s
# Warmup Iteration   4: 570528.435 ops/s
# Warmup Iteration   5: 572221.068 ops/s
# Warmup Iteration   6: 578228.670 ops/s
# Warmup Iteration   7: 574022.255 ops/s
# Warmup Iteration   8: 570718.247 ops/s
# Warmup Iteration   9: 541846.941 ops/s
# Warmup Iteration  10: 446021.982 ops/s
# Warmup Iteration  11: 580075.098 ops/s
# Warmup Iteration  12: 579415.876 ops/s
# Warmup Iteration  13: 582321.876 ops/s
# Warmup Iteration  14: 585799.492 ops/s
# Warmup Iteration  15: 585742.785 ops/s
# Warmup Iteration  16: 584816.670 ops/s
# Warmup Iteration  17: 581114.577 ops/s
# Warmup Iteration  18: 579736.373 ops/s
# Warmup Iteration  19: 582673.069 ops/s
# Warmup Iteration  20: 581354.835 ops/s
# Warmup Iteration  21: 583797.286 ops/s
# Warmup Iteration  22: 583004.112 ops/s
# Warmup Iteration  23: 579949.253 ops/s
# Warmup Iteration  24: 583004.003 ops/s
# Warmup Iteration  25: 582987.991 ops/s
# Warmup Iteration  26: 577813.144 ops/s
# Warmup Iteration  27: 578535.747 ops/s
# Warmup Iteration  28: 580959.079 ops/s
# Warmup Iteration  29: 583521.721 ops/s
# Warmup Iteration  30: 581264.997 ops/s
Iteration   1: 584859.677 ops/s
Iteration   2: 582217.920 ops/s
Iteration   3: 580420.179 ops/s
Iteration   4: 582104.458 ops/s
Iteration   5: 584215.653 ops/s
Iteration   6: 583347.271 ops/s
Iteration   7: 577352.420 ops/s
Iteration   8: 577661.515 ops/s
Iteration   9: 580117.402 ops/s
Iteration  10: 578352.830 ops/s
Iteration  11: 578800.755 ops/s
Iteration  12: 582077.806 ops/s
Iteration  13: 577751.799 ops/s
Iteration  14: 579352.037 ops/s
Iteration  15: 584318.017 ops/s
Iteration  16: 582600.504 ops/s
Iteration  17: 585544.982 ops/s
Iteration  18: 585053.326 ops/s
Iteration  19: 582889.170 ops/s
Iteration  20: 582400.480 ops/s
Iteration  21: 581438.216 ops/s
Iteration  22: 580811.527 ops/s
Iteration  23: 583877.547 ops/s
Iteration  24: 581714.301 ops/s
Iteration  25: 580338.340 ops/s
Iteration  26: 580664.017 ops/s
Iteration  27: 577015.360 ops/s
Iteration  28: 577841.264 ops/s
Iteration  29: 579113.396 ops/s
Iteration  30: 581980.828 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V1":
  581207.767 ±(99.9%) 1665.094 ops/s [Average]
  (min, avg, max) = (577015.360, 581207.767, 585544.982), stdev = 2492.235
  CI (99.9%): [579542.673, 582872.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V1  thrpt   30  581207.767 ± 1665.094  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 271236.940 ops/s
# Warmup Iteration   2: 356314.976 ops/s
# Warmup Iteration   3: 601926.154 ops/s
# Warmup Iteration   4: 690960.088 ops/s
# Warmup Iteration   5: 685058.622 ops/s
# Warmup Iteration   6: 692140.086 ops/s
# Warmup Iteration   7: 695096.286 ops/s
# Warmup Iteration   8: 690617.453 ops/s
# Warmup Iteration   9: 515892.740 ops/s
# Warmup Iteration  10: 676785.019 ops/s
# Warmup Iteration  11: 699394.973 ops/s
# Warmup Iteration  12: 699396.283 ops/s
# Warmup Iteration  13: 701275.987 ops/s
# Warmup Iteration  14: 698372.411 ops/s
# Warmup Iteration  15: 696564.392 ops/s
# Warmup Iteration  16: 697693.710 ops/s
# Warmup Iteration  17: 695893.519 ops/s
# Warmup Iteration  18: 697005.133 ops/s
# Warmup Iteration  19: 695819.690 ops/s
# Warmup Iteration  20: 698212.078 ops/s
# Warmup Iteration  21: 696530.831 ops/s
# Warmup Iteration  22: 698015.503 ops/s
# Warmup Iteration  23: 697167.256 ops/s
# Warmup Iteration  24: 696449.956 ops/s
# Warmup Iteration  25: 700467.274 ops/s
# Warmup Iteration  26: 698835.234 ops/s
# Warmup Iteration  27: 698043.423 ops/s
# Warmup Iteration  28: 696819.041 ops/s
# Warmup Iteration  29: 695649.782 ops/s
# Warmup Iteration  30: 696171.063 ops/s
Iteration   1: 694259.267 ops/s
Iteration   2: 693319.583 ops/s
Iteration   3: 697422.278 ops/s
Iteration   4: 694017.726 ops/s
Iteration   5: 695387.919 ops/s
Iteration   6: 696555.849 ops/s
Iteration   7: 696108.011 ops/s
Iteration   8: 697121.625 ops/s
Iteration   9: 690135.918 ops/s
Iteration  10: 691632.570 ops/s
Iteration  11: 692304.622 ops/s
Iteration  12: 699217.091 ops/s
Iteration  13: 694272.716 ops/s
Iteration  14: 696362.841 ops/s
Iteration  15: 698062.687 ops/s
Iteration  16: 695354.217 ops/s
Iteration  17: 699339.396 ops/s
Iteration  18: 695827.804 ops/s
Iteration  19: 698512.698 ops/s
Iteration  20: 697006.005 ops/s
Iteration  21: 696791.424 ops/s
Iteration  22: 701038.359 ops/s
Iteration  23: 695829.417 ops/s
Iteration  24: 698611.480 ops/s
Iteration  25: 698596.912 ops/s
Iteration  26: 700003.503 ops/s
Iteration  27: 695661.139 ops/s
Iteration  28: 695936.442 ops/s
Iteration  29: 687404.949 ops/s
Iteration  30: 689784.681 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V2":
  695729.304 ±(99.9%) 2105.240 ops/s [Average]
  (min, avg, max) = (687404.949, 695729.304, 701038.359), stdev = 3151.024
  CI (99.9%): [693624.065, 697834.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_JSON_V2  thrpt   30  695729.304 ± 2105.240  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307499.525 ops/s
# Warmup Iteration   2: 403544.152 ops/s
# Warmup Iteration   3: 600558.770 ops/s
# Warmup Iteration   4: 728511.339 ops/s
# Warmup Iteration   5: 722868.501 ops/s
# Warmup Iteration   6: 724644.944 ops/s
# Warmup Iteration   7: 735195.657 ops/s
# Warmup Iteration   8: 726368.841 ops/s
# Warmup Iteration   9: 725494.138 ops/s
# Warmup Iteration  10: 549124.277 ops/s
# Warmup Iteration  11: 705471.163 ops/s
# Warmup Iteration  12: 733473.767 ops/s
# Warmup Iteration  13: 732904.878 ops/s
# Warmup Iteration  14: 729297.983 ops/s
# Warmup Iteration  15: 733611.214 ops/s
# Warmup Iteration  16: 731666.471 ops/s
# Warmup Iteration  17: 731579.132 ops/s
# Warmup Iteration  18: 733562.071 ops/s
# Warmup Iteration  19: 731847.994 ops/s
# Warmup Iteration  20: 732006.504 ops/s
# Warmup Iteration  21: 730097.826 ops/s
# Warmup Iteration  22: 733339.956 ops/s
# Warmup Iteration  23: 733541.342 ops/s
# Warmup Iteration  24: 732058.740 ops/s
# Warmup Iteration  25: 729660.725 ops/s
# Warmup Iteration  26: 731167.242 ops/s
# Warmup Iteration  27: 732410.511 ops/s
# Warmup Iteration  28: 728607.776 ops/s
# Warmup Iteration  29: 732812.127 ops/s
# Warmup Iteration  30: 734087.622 ops/s
Iteration   1: 731294.516 ops/s
Iteration   2: 731860.099 ops/s
Iteration   3: 733532.120 ops/s
Iteration   4: 733641.746 ops/s
Iteration   5: 730142.114 ops/s
Iteration   6: 734363.255 ops/s
Iteration   7: 733752.266 ops/s
Iteration   8: 730359.078 ops/s
Iteration   9: 730120.659 ops/s
Iteration  10: 733181.432 ops/s
Iteration  11: 733736.061 ops/s
Iteration  12: 734039.029 ops/s
Iteration  13: 734255.550 ops/s
Iteration  14: 733040.214 ops/s
Iteration  15: 734655.971 ops/s
Iteration  16: 728784.504 ops/s
Iteration  17: 731690.781 ops/s
Iteration  18: 733408.723 ops/s
Iteration  19: 732686.529 ops/s
Iteration  20: 734095.570 ops/s
Iteration  21: 734140.326 ops/s
Iteration  22: 729358.444 ops/s
Iteration  23: 733663.016 ops/s
Iteration  24: 733586.930 ops/s
Iteration  25: 733659.323 ops/s
Iteration  26: 732181.844 ops/s
Iteration  27: 734575.590 ops/s
Iteration  28: 730184.534 ops/s
Iteration  29: 735470.320 ops/s
Iteration  30: 732844.820 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_PROTO3":
  732743.512 ±(99.9%) 1168.433 ops/s [Average]
  (min, avg, max) = (728784.504, 732743.512, 735470.320), stdev = 1748.855
  CI (99.9%): [731575.079, 733911.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_PROTO3  thrpt   30  732743.512 ± 1168.433  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255094.500 ops/s
# Warmup Iteration   2: 350331.081 ops/s
# Warmup Iteration   3: 548171.241 ops/s
# Warmup Iteration   4: 646171.890 ops/s
# Warmup Iteration   5: 641476.674 ops/s
# Warmup Iteration   6: 648524.537 ops/s
# Warmup Iteration   7: 646748.223 ops/s
# Warmup Iteration   8: 644459.513 ops/s
# Warmup Iteration   9: 633639.792 ops/s
# Warmup Iteration  10: 476168.492 ops/s
# Warmup Iteration  11: 650393.923 ops/s
# Warmup Iteration  12: 649434.358 ops/s
# Warmup Iteration  13: 650496.549 ops/s
# Warmup Iteration  14: 647620.049 ops/s
# Warmup Iteration  15: 650273.061 ops/s
# Warmup Iteration  16: 649655.946 ops/s
# Warmup Iteration  17: 647900.201 ops/s
# Warmup Iteration  18: 649105.086 ops/s
# Warmup Iteration  19: 645879.954 ops/s
# Warmup Iteration  20: 644309.209 ops/s
# Warmup Iteration  21: 648703.380 ops/s
# Warmup Iteration  22: 646542.450 ops/s
# Warmup Iteration  23: 648784.669 ops/s
# Warmup Iteration  24: 651302.880 ops/s
# Warmup Iteration  25: 648002.589 ops/s
# Warmup Iteration  26: 650242.393 ops/s
# Warmup Iteration  27: 649149.551 ops/s
# Warmup Iteration  28: 650548.608 ops/s
# Warmup Iteration  29: 646833.616 ops/s
# Warmup Iteration  30: 647948.519 ops/s
Iteration   1: 647549.750 ops/s
Iteration   2: 648190.136 ops/s
Iteration   3: 647617.996 ops/s
Iteration   4: 647955.142 ops/s
Iteration   5: 650031.890 ops/s
Iteration   6: 648024.119 ops/s
Iteration   7: 650503.991 ops/s
Iteration   8: 652274.013 ops/s
Iteration   9: 649416.477 ops/s
Iteration  10: 650196.543 ops/s
Iteration  11: 651996.662 ops/s
Iteration  12: 646431.835 ops/s
Iteration  13: 649203.565 ops/s
Iteration  14: 648868.451 ops/s
Iteration  15: 649607.988 ops/s
Iteration  16: 651264.655 ops/s
Iteration  17: 650897.496 ops/s
Iteration  18: 646998.685 ops/s
Iteration  19: 651248.164 ops/s
Iteration  20: 651425.660 ops/s
Iteration  21: 647522.143 ops/s
Iteration  22: 650500.867 ops/s
Iteration  23: 646268.789 ops/s
Iteration  24: 650606.997 ops/s
Iteration  25: 649325.785 ops/s
Iteration  26: 651372.156 ops/s
Iteration  27: 650501.421 ops/s
Iteration  28: 648591.171 ops/s
Iteration  29: 648230.646 ops/s
Iteration  30: 649549.849 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_THRIFT":
  649405.768 ±(99.9%) 1114.027 ops/s [Average]
  (min, avg, max) = (646268.789, 649405.768, 652274.013), stdev = 1667.423
  CI (99.9%): [648291.741, 650519.795] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_minimum_THRIFT  thrpt   30  649405.768 ± 1114.027  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70645.221 ops/s
# Warmup Iteration   2: 109031.934 ops/s
# Warmup Iteration   3: 146625.643 ops/s
# Warmup Iteration   4: 194648.326 ops/s
# Warmup Iteration   5: 198557.535 ops/s
# Warmup Iteration   6: 197493.819 ops/s
# Warmup Iteration   7: 197401.908 ops/s
# Warmup Iteration   8: 196556.358 ops/s
# Warmup Iteration   9: 196240.784 ops/s
# Warmup Iteration  10: 198945.905 ops/s
# Warmup Iteration  11: 140124.317 ops/s
# Warmup Iteration  12: 198955.245 ops/s
# Warmup Iteration  13: 199109.681 ops/s
# Warmup Iteration  14: 198753.030 ops/s
# Warmup Iteration  15: 197264.199 ops/s
# Warmup Iteration  16: 197318.078 ops/s
# Warmup Iteration  17: 196410.165 ops/s
# Warmup Iteration  18: 197052.560 ops/s
# Warmup Iteration  19: 197558.158 ops/s
# Warmup Iteration  20: 197199.545 ops/s
# Warmup Iteration  21: 196414.940 ops/s
# Warmup Iteration  22: 196988.931 ops/s
# Warmup Iteration  23: 196590.615 ops/s
# Warmup Iteration  24: 197354.153 ops/s
# Warmup Iteration  25: 196829.341 ops/s
# Warmup Iteration  26: 197252.830 ops/s
# Warmup Iteration  27: 197122.214 ops/s
# Warmup Iteration  28: 196711.630 ops/s
# Warmup Iteration  29: 196450.944 ops/s
# Warmup Iteration  30: 197956.140 ops/s
Iteration   1: 197475.359 ops/s
Iteration   2: 197298.801 ops/s
Iteration   3: 198178.758 ops/s
Iteration   4: 196333.572 ops/s
Iteration   5: 197123.228 ops/s
Iteration   6: 196897.913 ops/s
Iteration   7: 198366.917 ops/s
Iteration   8: 197382.180 ops/s
Iteration   9: 196917.698 ops/s
Iteration  10: 197159.943 ops/s
Iteration  11: 196863.904 ops/s
Iteration  12: 195564.141 ops/s
Iteration  13: 196638.512 ops/s
Iteration  14: 198199.589 ops/s
Iteration  15: 197487.320 ops/s
Iteration  16: 197796.761 ops/s
Iteration  17: 196920.958 ops/s
Iteration  18: 196813.379 ops/s
Iteration  19: 195123.859 ops/s
Iteration  20: 196120.135 ops/s
Iteration  21: 195244.267 ops/s
Iteration  22: 197296.442 ops/s
Iteration  23: 197582.435 ops/s
Iteration  24: 197174.340 ops/s
Iteration  25: 198011.118 ops/s
Iteration  26: 196677.315 ops/s
Iteration  27: 197295.085 ops/s
Iteration  28: 198709.443 ops/s
Iteration  29: 197869.130 ops/s
Iteration  30: 197020.186 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V1":
  197118.090 ±(99.9%) 569.783 ops/s [Average]
  (min, avg, max) = (195123.859, 197118.090, 198709.443), stdev = 852.825
  CI (99.9%): [196548.306, 197687.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V1  thrpt   30  197118.090 ± 569.783  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 114665.656 ops/s
# Warmup Iteration   2: 168104.206 ops/s
# Warmup Iteration   3: 212898.800 ops/s
# Warmup Iteration   4: 310545.852 ops/s
# Warmup Iteration   5: 315337.127 ops/s
# Warmup Iteration   6: 310417.172 ops/s
# Warmup Iteration   7: 313701.750 ops/s
# Warmup Iteration   8: 312509.532 ops/s
# Warmup Iteration   9: 314210.441 ops/s
# Warmup Iteration  10: 312845.029 ops/s
# Warmup Iteration  11: 232316.562 ops/s
# Warmup Iteration  12: 306524.353 ops/s
# Warmup Iteration  13: 314986.332 ops/s
# Warmup Iteration  14: 314224.085 ops/s
# Warmup Iteration  15: 315154.408 ops/s
# Warmup Iteration  16: 316543.231 ops/s
# Warmup Iteration  17: 316104.610 ops/s
# Warmup Iteration  18: 316012.717 ops/s
# Warmup Iteration  19: 314567.440 ops/s
# Warmup Iteration  20: 314561.954 ops/s
# Warmup Iteration  21: 316206.021 ops/s
# Warmup Iteration  22: 316543.789 ops/s
# Warmup Iteration  23: 317397.244 ops/s
# Warmup Iteration  24: 314881.963 ops/s
# Warmup Iteration  25: 315524.838 ops/s
# Warmup Iteration  26: 314116.485 ops/s
# Warmup Iteration  27: 314774.368 ops/s
# Warmup Iteration  28: 315607.916 ops/s
# Warmup Iteration  29: 315195.588 ops/s
# Warmup Iteration  30: 314139.079 ops/s
Iteration   1: 313962.148 ops/s
Iteration   2: 314396.985 ops/s
Iteration   3: 313181.312 ops/s
Iteration   4: 316170.937 ops/s
Iteration   5: 316645.756 ops/s
Iteration   6: 312957.252 ops/s
Iteration   7: 315787.932 ops/s
Iteration   8: 317435.798 ops/s
Iteration   9: 314952.550 ops/s
Iteration  10: 312800.463 ops/s
Iteration  11: 314606.272 ops/s
Iteration  12: 316620.881 ops/s
Iteration  13: 315401.467 ops/s
Iteration  14: 313622.057 ops/s
Iteration  15: 316794.341 ops/s
Iteration  16: 315005.324 ops/s
Iteration  17: 316629.190 ops/s
Iteration  18: 316286.412 ops/s
Iteration  19: 312941.654 ops/s
Iteration  20: 313511.732 ops/s
Iteration  21: 315672.364 ops/s
Iteration  22: 314738.840 ops/s
Iteration  23: 315709.402 ops/s
Iteration  24: 317856.480 ops/s
Iteration  25: 316865.373 ops/s
Iteration  26: 315597.152 ops/s
Iteration  27: 314938.218 ops/s
Iteration  28: 316513.709 ops/s
Iteration  29: 317362.601 ops/s
Iteration  30: 315072.683 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V2":
  315334.576 ±(99.9%) 967.082 ops/s [Average]
  (min, avg, max) = (312800.463, 315334.576, 317856.480), stdev = 1447.483
  CI (99.9%): [314367.494, 316301.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_JSON_V2  thrpt   30  315334.576 ± 967.082  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164813.719 ops/s
# Warmup Iteration   2: 253727.531 ops/s
# Warmup Iteration   3: 299534.653 ops/s
# Warmup Iteration   4: 430128.982 ops/s
# Warmup Iteration   5: 422040.243 ops/s
# Warmup Iteration   6: 421025.849 ops/s
# Warmup Iteration   7: 426742.543 ops/s
# Warmup Iteration   8: 428153.377 ops/s
# Warmup Iteration   9: 422187.511 ops/s
# Warmup Iteration  10: 422839.245 ops/s
# Warmup Iteration  11: 428065.617 ops/s
# Warmup Iteration  12: 303689.679 ops/s
# Warmup Iteration  13: 429468.473 ops/s
# Warmup Iteration  14: 427730.311 ops/s
# Warmup Iteration  15: 431087.158 ops/s
# Warmup Iteration  16: 428959.388 ops/s
# Warmup Iteration  17: 430086.088 ops/s
# Warmup Iteration  18: 429023.924 ops/s
# Warmup Iteration  19: 429961.943 ops/s
# Warmup Iteration  20: 428326.500 ops/s
# Warmup Iteration  21: 429031.941 ops/s
# Warmup Iteration  22: 428598.508 ops/s
# Warmup Iteration  23: 429356.614 ops/s
# Warmup Iteration  24: 426833.221 ops/s
# Warmup Iteration  25: 428832.305 ops/s
# Warmup Iteration  26: 428141.100 ops/s
# Warmup Iteration  27: 430306.822 ops/s
# Warmup Iteration  28: 430591.098 ops/s
# Warmup Iteration  29: 428275.885 ops/s
# Warmup Iteration  30: 429135.387 ops/s
Iteration   1: 426634.615 ops/s
Iteration   2: 428744.470 ops/s
Iteration   3: 427395.902 ops/s
Iteration   4: 427506.313 ops/s
Iteration   5: 428542.253 ops/s
Iteration   6: 425290.625 ops/s
Iteration   7: 426693.653 ops/s
Iteration   8: 425761.249 ops/s
Iteration   9: 429824.847 ops/s
Iteration  10: 430490.148 ops/s
Iteration  11: 428947.330 ops/s
Iteration  12: 430232.305 ops/s
Iteration  13: 428280.411 ops/s
Iteration  14: 427905.582 ops/s
Iteration  15: 429489.962 ops/s
Iteration  16: 428980.622 ops/s
Iteration  17: 425123.438 ops/s
Iteration  18: 425314.632 ops/s
Iteration  19: 429615.330 ops/s
Iteration  20: 428210.909 ops/s
Iteration  21: 427096.506 ops/s
Iteration  22: 430005.029 ops/s
Iteration  23: 430117.177 ops/s
Iteration  24: 427478.562 ops/s
Iteration  25: 424771.596 ops/s
Iteration  26: 429286.689 ops/s
Iteration  27: 429764.860 ops/s
Iteration  28: 429809.068 ops/s
Iteration  29: 426727.245 ops/s
Iteration  30: 427052.575 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_PROTO3":
  428036.464 ±(99.9%) 1142.041 ops/s [Average]
  (min, avg, max) = (424771.596, 428036.464, 430490.148), stdev = 1709.353
  CI (99.9%): [426894.423, 429178.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_PROTO3  thrpt   30  428036.464 ± 1142.041  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 105861.069 ops/s
# Warmup Iteration   2: 155965.932 ops/s
# Warmup Iteration   3: 197083.837 ops/s
# Warmup Iteration   4: 285044.205 ops/s
# Warmup Iteration   5: 286340.996 ops/s
# Warmup Iteration   6: 282898.328 ops/s
# Warmup Iteration   7: 282923.909 ops/s
# Warmup Iteration   8: 283243.232 ops/s
# Warmup Iteration   9: 285132.260 ops/s
# Warmup Iteration  10: 282282.130 ops/s
# Warmup Iteration  11: 223540.921 ops/s
# Warmup Iteration  12: 254992.415 ops/s
# Warmup Iteration  13: 281964.704 ops/s
# Warmup Iteration  14: 283292.320 ops/s
# Warmup Iteration  15: 283429.372 ops/s
# Warmup Iteration  16: 283945.611 ops/s
# Warmup Iteration  17: 282995.852 ops/s
# Warmup Iteration  18: 283131.078 ops/s
# Warmup Iteration  19: 282432.319 ops/s
# Warmup Iteration  20: 282920.241 ops/s
# Warmup Iteration  21: 283634.022 ops/s
# Warmup Iteration  22: 283223.513 ops/s
# Warmup Iteration  23: 283521.602 ops/s
# Warmup Iteration  24: 283682.042 ops/s
# Warmup Iteration  25: 283583.406 ops/s
# Warmup Iteration  26: 283390.071 ops/s
# Warmup Iteration  27: 282539.324 ops/s
# Warmup Iteration  28: 281933.778 ops/s
# Warmup Iteration  29: 281202.890 ops/s
# Warmup Iteration  30: 281859.757 ops/s
Iteration   1: 281825.223 ops/s
Iteration   2: 282128.913 ops/s
Iteration   3: 281586.226 ops/s
Iteration   4: 282119.182 ops/s
Iteration   5: 282003.021 ops/s
Iteration   6: 280562.577 ops/s
Iteration   7: 280103.186 ops/s
Iteration   8: 282763.245 ops/s
Iteration   9: 282447.030 ops/s
Iteration  10: 282494.551 ops/s
Iteration  11: 281037.966 ops/s
Iteration  12: 283682.331 ops/s
Iteration  13: 284124.251 ops/s
Iteration  14: 282394.628 ops/s
Iteration  15: 281452.246 ops/s
Iteration  16: 282040.525 ops/s
Iteration  17: 282695.084 ops/s
Iteration  18: 282050.704 ops/s
Iteration  19: 283413.772 ops/s
Iteration  20: 281546.095 ops/s
Iteration  21: 280325.064 ops/s
Iteration  22: 283147.435 ops/s
Iteration  23: 282330.830 ops/s
Iteration  24: 281224.302 ops/s
Iteration  25: 278578.758 ops/s
Iteration  26: 283437.392 ops/s
Iteration  27: 282908.304 ops/s
Iteration  28: 282758.531 ops/s
Iteration  29: 281300.532 ops/s
Iteration  30: 282889.848 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_THRIFT":
  282045.725 ±(99.9%) 780.357 ops/s [Average]
  (min, avg, max) = (278578.758, 282045.725, 284124.251), stdev = 1168.002
  CI (99.9%): [281265.368, 282826.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noLocalServiceName_THRIFT  thrpt   30  282045.725 ± 780.357  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 67336.920 ops/s
# Warmup Iteration   2: 109671.201 ops/s
# Warmup Iteration   3: 144089.268 ops/s
# Warmup Iteration   4: 190919.928 ops/s
# Warmup Iteration   5: 194782.609 ops/s
# Warmup Iteration   6: 193299.339 ops/s
# Warmup Iteration   7: 191791.106 ops/s
# Warmup Iteration   8: 190241.757 ops/s
# Warmup Iteration   9: 191540.474 ops/s
# Warmup Iteration  10: 195089.982 ops/s
# Warmup Iteration  11: 141854.916 ops/s
# Warmup Iteration  12: 195260.805 ops/s
# Warmup Iteration  13: 193321.341 ops/s
# Warmup Iteration  14: 192864.706 ops/s
# Warmup Iteration  15: 193210.699 ops/s
# Warmup Iteration  16: 193514.726 ops/s
# Warmup Iteration  17: 190977.311 ops/s
# Warmup Iteration  18: 190970.463 ops/s
# Warmup Iteration  19: 192670.624 ops/s
# Warmup Iteration  20: 192186.824 ops/s
# Warmup Iteration  21: 192791.135 ops/s
# Warmup Iteration  22: 192930.732 ops/s
# Warmup Iteration  23: 191582.810 ops/s
# Warmup Iteration  24: 191738.470 ops/s
# Warmup Iteration  25: 192707.878 ops/s
# Warmup Iteration  26: 191887.907 ops/s
# Warmup Iteration  27: 190149.017 ops/s
# Warmup Iteration  28: 191534.633 ops/s
# Warmup Iteration  29: 191563.948 ops/s
# Warmup Iteration  30: 192153.412 ops/s
Iteration   1: 192623.370 ops/s
Iteration   2: 193733.558 ops/s
Iteration   3: 190653.947 ops/s
Iteration   4: 189774.055 ops/s
Iteration   5: 192137.773 ops/s
Iteration   6: 192124.205 ops/s
Iteration   7: 191441.943 ops/s
Iteration   8: 192149.693 ops/s
Iteration   9: 192545.332 ops/s
Iteration  10: 192493.734 ops/s
Iteration  11: 191530.731 ops/s
Iteration  12: 192342.731 ops/s
Iteration  13: 190441.031 ops/s
Iteration  14: 190974.476 ops/s
Iteration  15: 193007.923 ops/s
Iteration  16: 191445.568 ops/s
Iteration  17: 193031.114 ops/s
Iteration  18: 192178.281 ops/s
Iteration  19: 192410.880 ops/s
Iteration  20: 192421.658 ops/s
Iteration  21: 192557.030 ops/s
Iteration  22: 191985.768 ops/s
Iteration  23: 191762.828 ops/s
Iteration  24: 192421.956 ops/s
Iteration  25: 191988.872 ops/s
Iteration  26: 191981.181 ops/s
Iteration  27: 192133.049 ops/s
Iteration  28: 190304.231 ops/s
Iteration  29: 191211.772 ops/s
Iteration  30: 191605.408 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V1":
  191913.803 ±(99.9%) 577.235 ops/s [Average]
  (min, avg, max) = (189774.055, 191913.803, 193733.558), stdev = 863.978
  CI (99.9%): [191336.569, 192491.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V1  thrpt   30  191913.803 ± 577.235  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 73145.564 ops/s
# Warmup Iteration   2: 95916.379 ops/s
# Warmup Iteration   3: 122759.268 ops/s
# Warmup Iteration   4: 236217.004 ops/s
# Warmup Iteration   5: 307801.166 ops/s
# Warmup Iteration   6: 312744.798 ops/s
# Warmup Iteration   7: 307058.829 ops/s
# Warmup Iteration   8: 308467.949 ops/s
# Warmup Iteration   9: 307513.697 ops/s
# Warmup Iteration  10: 309480.189 ops/s
# Warmup Iteration  11: 307728.113 ops/s
# Warmup Iteration  12: 239306.615 ops/s
# Warmup Iteration  13: 294060.345 ops/s
# Warmup Iteration  14: 309488.327 ops/s
# Warmup Iteration  15: 309393.389 ops/s
# Warmup Iteration  16: 309710.864 ops/s
# Warmup Iteration  17: 307579.907 ops/s
# Warmup Iteration  18: 310588.776 ops/s
# Warmup Iteration  19: 309449.728 ops/s
# Warmup Iteration  20: 307622.734 ops/s
# Warmup Iteration  21: 308057.163 ops/s
# Warmup Iteration  22: 306494.038 ops/s
# Warmup Iteration  23: 309830.042 ops/s
# Warmup Iteration  24: 308116.505 ops/s
# Warmup Iteration  25: 308935.227 ops/s
# Warmup Iteration  26: 308535.070 ops/s
# Warmup Iteration  27: 307661.912 ops/s
# Warmup Iteration  28: 307580.781 ops/s
# Warmup Iteration  29: 307882.187 ops/s
# Warmup Iteration  30: 309565.563 ops/s
Iteration   1: 308852.640 ops/s
Iteration   2: 308701.978 ops/s
Iteration   3: 308996.931 ops/s
Iteration   4: 310071.133 ops/s
Iteration   5: 309823.908 ops/s
Iteration   6: 308411.675 ops/s
Iteration   7: 309134.924 ops/s
Iteration   8: 310069.780 ops/s
Iteration   9: 309018.007 ops/s
Iteration  10: 309492.422 ops/s
Iteration  11: 308556.898 ops/s
Iteration  12: 310105.115 ops/s
Iteration  13: 308201.933 ops/s
Iteration  14: 309473.589 ops/s
Iteration  15: 309587.473 ops/s
Iteration  16: 309713.453 ops/s
Iteration  17: 309611.163 ops/s
Iteration  18: 307900.756 ops/s
Iteration  19: 307941.900 ops/s
Iteration  20: 307460.376 ops/s
Iteration  21: 309008.866 ops/s
Iteration  22: 309083.935 ops/s
Iteration  23: 305586.685 ops/s
Iteration  24: 307001.645 ops/s
Iteration  25: 306981.899 ops/s
Iteration  26: 307174.798 ops/s
Iteration  27: 308257.255 ops/s
Iteration  28: 309783.559 ops/s
Iteration  29: 308876.654 ops/s
Iteration  30: 308166.326 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V2":
  308701.589 ±(99.9%) 725.044 ops/s [Average]
  (min, avg, max) = (305586.685, 308701.589, 310105.115), stdev = 1085.212
  CI (99.9%): [307976.545, 309426.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_JSON_V2  thrpt   30  308701.589 ± 725.044  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170863.889 ops/s
# Warmup Iteration   2: 252231.751 ops/s
# Warmup Iteration   3: 301732.037 ops/s
# Warmup Iteration   4: 438103.998 ops/s
# Warmup Iteration   5: 431788.497 ops/s
# Warmup Iteration   6: 430693.234 ops/s
# Warmup Iteration   7: 435094.393 ops/s
# Warmup Iteration   8: 441070.866 ops/s
# Warmup Iteration   9: 436365.120 ops/s
# Warmup Iteration  10: 434338.257 ops/s
# Warmup Iteration  11: 436673.123 ops/s
# Warmup Iteration  12: 304463.134 ops/s
# Warmup Iteration  13: 439663.962 ops/s
# Warmup Iteration  14: 438272.545 ops/s
# Warmup Iteration  15: 439518.567 ops/s
# Warmup Iteration  16: 436984.119 ops/s
# Warmup Iteration  17: 438156.760 ops/s
# Warmup Iteration  18: 438822.372 ops/s
# Warmup Iteration  19: 438268.399 ops/s
# Warmup Iteration  20: 438200.532 ops/s
# Warmup Iteration  21: 439176.121 ops/s
# Warmup Iteration  22: 437843.134 ops/s
# Warmup Iteration  23: 438092.489 ops/s
# Warmup Iteration  24: 439151.049 ops/s
# Warmup Iteration  25: 437636.253 ops/s
# Warmup Iteration  26: 438439.078 ops/s
# Warmup Iteration  27: 437825.498 ops/s
# Warmup Iteration  28: 438358.623 ops/s
# Warmup Iteration  29: 437333.351 ops/s
# Warmup Iteration  30: 436159.452 ops/s
Iteration   1: 438161.924 ops/s
Iteration   2: 436081.155 ops/s
Iteration   3: 436853.200 ops/s
Iteration   4: 437778.328 ops/s
Iteration   5: 438966.274 ops/s
Iteration   6: 436999.622 ops/s
Iteration   7: 441018.632 ops/s
Iteration   8: 438029.044 ops/s
Iteration   9: 439141.495 ops/s
Iteration  10: 439798.141 ops/s
Iteration  11: 438566.050 ops/s
Iteration  12: 438348.570 ops/s
Iteration  13: 436755.878 ops/s
Iteration  14: 435959.852 ops/s
Iteration  15: 434609.913 ops/s
Iteration  16: 439119.136 ops/s
Iteration  17: 438815.394 ops/s
Iteration  18: 437783.552 ops/s
Iteration  19: 432386.227 ops/s
Iteration  20: 438340.456 ops/s
Iteration  21: 439330.299 ops/s
Iteration  22: 436177.943 ops/s
Iteration  23: 435490.169 ops/s
Iteration  24: 436639.628 ops/s
Iteration  25: 437025.459 ops/s
Iteration  26: 436313.115 ops/s
Iteration  27: 437693.316 ops/s
Iteration  28: 440282.285 ops/s
Iteration  29: 436894.233 ops/s
Iteration  30: 432962.372 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_PROTO3":
  437410.722 ±(99.9%) 1303.668 ops/s [Average]
  (min, avg, max) = (432386.227, 437410.722, 441018.632), stdev = 1951.268
  CI (99.9%): [436107.054, 438714.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_PROTO3  thrpt   30  437410.722 ± 1303.668  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 106519.385 ops/s
# Warmup Iteration   2: 160049.334 ops/s
# Warmup Iteration   3: 210041.641 ops/s
# Warmup Iteration   4: 280596.388 ops/s
# Warmup Iteration   5: 285788.738 ops/s
# Warmup Iteration   6: 278496.408 ops/s
# Warmup Iteration   7: 282648.553 ops/s
# Warmup Iteration   8: 283415.726 ops/s
# Warmup Iteration   9: 283395.003 ops/s
# Warmup Iteration  10: 280724.593 ops/s
# Warmup Iteration  11: 213667.861 ops/s
# Warmup Iteration  12: 274849.868 ops/s
# Warmup Iteration  13: 283666.937 ops/s
# Warmup Iteration  14: 284005.759 ops/s
# Warmup Iteration  15: 284200.590 ops/s
# Warmup Iteration  16: 285200.063 ops/s
# Warmup Iteration  17: 283896.910 ops/s
# Warmup Iteration  18: 283799.306 ops/s
# Warmup Iteration  19: 284856.516 ops/s
# Warmup Iteration  20: 285023.021 ops/s
# Warmup Iteration  21: 283800.009 ops/s
# Warmup Iteration  22: 283791.323 ops/s
# Warmup Iteration  23: 285960.899 ops/s
# Warmup Iteration  24: 285271.749 ops/s
# Warmup Iteration  25: 285339.965 ops/s
# Warmup Iteration  26: 284354.858 ops/s
# Warmup Iteration  27: 283173.301 ops/s
# Warmup Iteration  28: 283595.392 ops/s
# Warmup Iteration  29: 283869.734 ops/s
# Warmup Iteration  30: 284780.193 ops/s
Iteration   1: 284559.188 ops/s
Iteration   2: 281576.502 ops/s
Iteration   3: 282936.456 ops/s
Iteration   4: 285757.034 ops/s
Iteration   5: 284900.075 ops/s
Iteration   6: 284487.126 ops/s
Iteration   7: 285002.601 ops/s
Iteration   8: 283191.623 ops/s
Iteration   9: 286304.320 ops/s
Iteration  10: 285055.195 ops/s
Iteration  11: 283558.033 ops/s
Iteration  12: 283226.269 ops/s
Iteration  13: 281644.462 ops/s
Iteration  14: 285264.479 ops/s
Iteration  15: 286180.769 ops/s
Iteration  16: 286339.377 ops/s
Iteration  17: 285143.940 ops/s
Iteration  18: 284994.533 ops/s
Iteration  19: 283987.895 ops/s
Iteration  20: 283571.419 ops/s
Iteration  21: 281157.487 ops/s
Iteration  22: 283239.440 ops/s
Iteration  23: 282615.741 ops/s
Iteration  24: 283198.541 ops/s
Iteration  25: 284163.593 ops/s
Iteration  26: 285319.261 ops/s
Iteration  27: 284381.834 ops/s
Iteration  28: 285385.210 ops/s
Iteration  29: 285715.521 ops/s
Iteration  30: 285107.079 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_THRIFT":
  284265.500 ±(99.9%) 939.035 ops/s [Average]
  (min, avg, max) = (281157.487, 284265.500, 286339.377), stdev = 1405.504
  CI (99.9%): [283326.465, 285204.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_noRemoteServiceName_THRIFT  thrpt   30  284265.500 ± 939.035  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 68926.991 ops/s
# Warmup Iteration   2: 109813.763 ops/s
# Warmup Iteration   3: 144376.620 ops/s
# Warmup Iteration   4: 187908.922 ops/s
# Warmup Iteration   5: 191060.116 ops/s
# Warmup Iteration   6: 187117.363 ops/s
# Warmup Iteration   7: 188361.374 ops/s
# Warmup Iteration   8: 187346.508 ops/s
# Warmup Iteration   9: 187896.255 ops/s
# Warmup Iteration  10: 190755.466 ops/s
# Warmup Iteration  11: 139181.807 ops/s
# Warmup Iteration  12: 189986.576 ops/s
# Warmup Iteration  13: 189774.332 ops/s
# Warmup Iteration  14: 190187.574 ops/s
# Warmup Iteration  15: 190277.430 ops/s
# Warmup Iteration  16: 190538.355 ops/s
# Warmup Iteration  17: 188653.573 ops/s
# Warmup Iteration  18: 188786.461 ops/s
# Warmup Iteration  19: 188700.439 ops/s
# Warmup Iteration  20: 189274.780 ops/s
# Warmup Iteration  21: 189487.257 ops/s
# Warmup Iteration  22: 189394.907 ops/s
# Warmup Iteration  23: 189566.382 ops/s
# Warmup Iteration  24: 188522.033 ops/s
# Warmup Iteration  25: 188894.734 ops/s
# Warmup Iteration  26: 186819.362 ops/s
# Warmup Iteration  27: 188622.895 ops/s
# Warmup Iteration  28: 187460.046 ops/s
# Warmup Iteration  29: 189395.588 ops/s
# Warmup Iteration  30: 188608.490 ops/s
Iteration   1: 189688.057 ops/s
Iteration   2: 187561.003 ops/s
Iteration   3: 189118.713 ops/s
Iteration   4: 190614.168 ops/s
Iteration   5: 188951.274 ops/s
Iteration   6: 188964.575 ops/s
Iteration   7: 188370.327 ops/s
Iteration   8: 189417.209 ops/s
Iteration   9: 188750.119 ops/s
Iteration  10: 187958.531 ops/s
Iteration  11: 189750.929 ops/s
Iteration  12: 189382.773 ops/s
Iteration  13: 188616.681 ops/s
Iteration  14: 188171.174 ops/s
Iteration  15: 186661.336 ops/s
Iteration  16: 187250.636 ops/s
Iteration  17: 189267.910 ops/s
Iteration  18: 188486.945 ops/s
Iteration  19: 188555.520 ops/s
Iteration  20: 189920.803 ops/s
Iteration  21: 188800.453 ops/s
Iteration  22: 189889.298 ops/s
Iteration  23: 187161.745 ops/s
Iteration  24: 188329.864 ops/s
Iteration  25: 187803.387 ops/s
Iteration  26: 187944.211 ops/s
Iteration  27: 189561.814 ops/s
Iteration  28: 187891.876 ops/s
Iteration  29: 188613.038 ops/s
Iteration  30: 188947.752 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V1":
  188680.071 ±(99.9%) 609.947 ops/s [Average]
  (min, avg, max) = (186661.336, 188680.071, 190614.168), stdev = 912.940
  CI (99.9%): [188070.124, 189290.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V1  thrpt   30  188680.071 ± 609.947  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66074.887 ops/s
# Warmup Iteration   2: 145395.717 ops/s
# Warmup Iteration   3: 176137.802 ops/s
# Warmup Iteration   4: 300683.154 ops/s
# Warmup Iteration   5: 298596.869 ops/s
# Warmup Iteration   6: 294547.200 ops/s
# Warmup Iteration   7: 300486.976 ops/s
# Warmup Iteration   8: 299816.198 ops/s
# Warmup Iteration   9: 299964.093 ops/s
# Warmup Iteration  10: 299089.635 ops/s
# Warmup Iteration  11: 300837.226 ops/s
# Warmup Iteration  12: 215903.952 ops/s
# Warmup Iteration  13: 299080.217 ops/s
# Warmup Iteration  14: 300623.652 ops/s
# Warmup Iteration  15: 300802.403 ops/s
# Warmup Iteration  16: 299408.504 ops/s
# Warmup Iteration  17: 298860.908 ops/s
# Warmup Iteration  18: 296283.868 ops/s
# Warmup Iteration  19: 299060.988 ops/s
# Warmup Iteration  20: 297764.830 ops/s
# Warmup Iteration  21: 296870.813 ops/s
# Warmup Iteration  22: 299921.545 ops/s
# Warmup Iteration  23: 299160.259 ops/s
# Warmup Iteration  24: 299010.641 ops/s
# Warmup Iteration  25: 299879.905 ops/s
# Warmup Iteration  26: 298761.120 ops/s
# Warmup Iteration  27: 298914.998 ops/s
# Warmup Iteration  28: 299119.706 ops/s
# Warmup Iteration  29: 299501.581 ops/s
# Warmup Iteration  30: 299856.057 ops/s
Iteration   1: 298868.679 ops/s
Iteration   2: 300270.596 ops/s
Iteration   3: 298586.874 ops/s
Iteration   4: 300372.807 ops/s
Iteration   5: 300051.311 ops/s
Iteration   6: 298685.832 ops/s
Iteration   7: 298202.976 ops/s
Iteration   8: 297692.442 ops/s
Iteration   9: 299710.789 ops/s
Iteration  10: 300354.196 ops/s
Iteration  11: 301756.486 ops/s
Iteration  12: 300587.192 ops/s
Iteration  13: 300140.620 ops/s
Iteration  14: 297663.267 ops/s
Iteration  15: 300626.948 ops/s
Iteration  16: 301213.127 ops/s
Iteration  17: 300540.064 ops/s
Iteration  18: 299955.047 ops/s
Iteration  19: 299876.392 ops/s
Iteration  20: 298085.912 ops/s
Iteration  21: 298883.934 ops/s
Iteration  22: 299770.913 ops/s
Iteration  23: 299129.782 ops/s
Iteration  24: 297640.409 ops/s
Iteration  25: 300631.556 ops/s
Iteration  26: 300841.129 ops/s
Iteration  27: 299620.875 ops/s
Iteration  28: 298632.488 ops/s
Iteration  29: 301003.527 ops/s
Iteration  30: 300690.511 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V2":
  299669.556 ±(99.9%) 761.572 ops/s [Average]
  (min, avg, max) = (297640.409, 299669.556, 301756.486), stdev = 1139.885
  CI (99.9%): [298907.984, 300431.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_shared_JSON_V2  thrpt   30  299669.556 ± 761.572  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166200.032 ops/s
# Warmup Iteration   2: 244145.588 ops/s
# Warmup Iteration   3: 265920.993 ops/s
# Warmup Iteration   4: 408950.501 ops/s
# Warmup Iteration   5: 404986.572 ops/s
# Warmup Iteration   6: 400810.908 ops/s
# Warmup Iteration   7: 409139.938 ops/s
# Warmup Iteration   8: 404599.409 ops/s
# Warmup Iteration   9: 404949.396 ops/s
# Warmup Iteration  10: 406841.152 ops/s
# Warmup Iteration  11: 402435.420 ops/s
# Warmup Iteration  12: 397686.118 ops/s
# Warmup Iteration  13: 293828.694 ops/s
# Warmup Iteration  14: 409156.990 ops/s
# Warmup Iteration  15: 409488.489 ops/s
# Warmup Iteration  16: 409860.944 ops/s
# Warmup Iteration  17: 408738.219 ops/s
# Warmup Iteration  18: 407222.116 ops/s
# Warmup Iteration  19: 408286.585 ops/s
# Warmup Iteration  20: 406449.716 ops/s
# Warmup Iteration  21: 407648.958 ops/s
# Warmup Iteration  22: 407539.090 ops/s
# Warmup Iteration  23: 407017.313 ops/s
# Warmup Iteration  24: 406287.586 ops/s
# Warmup Iteration  25: 406580.263 ops/s
# Warmup Iteration  26: 406495.139 ops/s
# Warmup Iteration  27: 405557.824 ops/s
# Warmup Iteration  28: 408093.979 ops/s
# Warmup Iteration  29: 408326.414 ops/s
# Warmup Iteration  30: 408595.051 ops/s
Iteration   1: 408726.489 ops/s
Iteration   2: 409057.361 ops/s
Iteration   3: 408319.800 ops/s
Iteration   4: 408497.884 ops/s
Iteration   5: 408825.814 ops/s
Iteration   6: 409268.685 ops/s
Iteration   7: 408392.876 ops/s
Iteration   8: 407524.226 ops/s
Iteration   9: 407515.488 ops/s
Iteration  10: 405265.514 ops/s
Iteration  11: 409394.107 ops/s
Iteration  12: 407190.207 ops/s
Iteration  13: 405266.406 ops/s
Iteration  14: 407255.575 ops/s
Iteration  15: 406861.188 ops/s
Iteration  16: 406276.263 ops/s
Iteration  17: 403535.752 ops/s
Iteration  18: 407272.059 ops/s
Iteration  19: 404105.453 ops/s
Iteration  20: 406164.277 ops/s
Iteration  21: 408242.016 ops/s
Iteration  22: 408058.695 ops/s
Iteration  23: 408545.995 ops/s
Iteration  24: 406959.683 ops/s
Iteration  25: 406301.472 ops/s
Iteration  26: 407343.221 ops/s
Iteration  27: 407716.792 ops/s
Iteration  28: 408111.439 ops/s
Iteration  29: 407089.672 ops/s
Iteration  30: 407091.648 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_PROTO3":
  407339.202 ±(99.9%) 958.416 ops/s [Average]
  (min, avg, max) = (403535.752, 407339.202, 409394.107), stdev = 1434.511
  CI (99.9%): [406380.786, 408297.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_shared_PROTO3  thrpt   30  407339.202 ± 958.416  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 117747.261 ops/s
# Warmup Iteration   2: 165736.021 ops/s
# Warmup Iteration   3: 227190.115 ops/s
# Warmup Iteration   4: 298082.854 ops/s
# Warmup Iteration   5: 297806.729 ops/s
# Warmup Iteration   6: 300137.823 ops/s
# Warmup Iteration   7: 298422.371 ops/s
# Warmup Iteration   8: 298088.735 ops/s
# Warmup Iteration   9: 297939.340 ops/s
# Warmup Iteration  10: 301800.300 ops/s
# Warmup Iteration  11: 211490.923 ops/s
# Warmup Iteration  12: 301276.224 ops/s
# Warmup Iteration  13: 301511.730 ops/s
# Warmup Iteration  14: 300453.981 ops/s
# Warmup Iteration  15: 301087.463 ops/s
# Warmup Iteration  16: 301282.250 ops/s
# Warmup Iteration  17: 299042.360 ops/s
# Warmup Iteration  18: 299809.360 ops/s
# Warmup Iteration  19: 299357.669 ops/s
# Warmup Iteration  20: 299479.791 ops/s
# Warmup Iteration  21: 298030.771 ops/s
# Warmup Iteration  22: 297741.154 ops/s
# Warmup Iteration  23: 297329.238 ops/s
# Warmup Iteration  24: 298725.817 ops/s
# Warmup Iteration  25: 298859.983 ops/s
# Warmup Iteration  26: 298816.746 ops/s
# Warmup Iteration  27: 299470.845 ops/s
# Warmup Iteration  28: 299740.925 ops/s
# Warmup Iteration  29: 299899.413 ops/s
# Warmup Iteration  30: 299371.201 ops/s
Iteration   1: 300571.156 ops/s
Iteration   2: 299874.285 ops/s
Iteration   3: 297329.473 ops/s
Iteration   4: 298038.433 ops/s
Iteration   5: 298201.902 ops/s
Iteration   6: 299367.925 ops/s
Iteration   7: 299858.901 ops/s
Iteration   8: 299478.547 ops/s
Iteration   9: 297115.520 ops/s
Iteration  10: 299327.203 ops/s
Iteration  11: 297572.058 ops/s
Iteration  12: 299729.120 ops/s
Iteration  13: 300259.933 ops/s
Iteration  14: 297848.003 ops/s
Iteration  15: 300162.235 ops/s
Iteration  16: 298990.464 ops/s
Iteration  17: 301045.574 ops/s
Iteration  18: 299886.748 ops/s
Iteration  19: 297345.166 ops/s
Iteration  20: 299634.198 ops/s
Iteration  21: 299633.266 ops/s
Iteration  22: 297446.519 ops/s
Iteration  23: 298807.619 ops/s
Iteration  24: 300896.300 ops/s
Iteration  25: 298873.299 ops/s
Iteration  26: 298794.626 ops/s
Iteration  27: 299197.277 ops/s
Iteration  28: 298896.996 ops/s
Iteration  29: 295429.891 ops/s
Iteration  30: 299390.528 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_span_shared_THRIFT":
  298966.772 ±(99.9%) 847.950 ops/s [Average]
  (min, avg, max) = (295429.891, 298966.772, 301045.574), stdev = 1269.172
  CI (99.9%): [298118.822, 299814.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_span_shared_THRIFT  thrpt   30  298966.772 ± 847.950  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 121546.602 ops/s
# Warmup Iteration   2: 164588.630 ops/s
# Warmup Iteration   3: 238694.478 ops/s
# Warmup Iteration   4: 308948.590 ops/s
# Warmup Iteration   5: 312659.739 ops/s
# Warmup Iteration   6: 309096.973 ops/s
# Warmup Iteration   7: 314399.757 ops/s
# Warmup Iteration   8: 308978.071 ops/s
# Warmup Iteration   9: 308576.199 ops/s
# Warmup Iteration  10: 241035.911 ops/s
# Warmup Iteration  11: 288717.192 ops/s
# Warmup Iteration  12: 312286.563 ops/s
# Warmup Iteration  13: 314513.632 ops/s
# Warmup Iteration  14: 314925.977 ops/s
# Warmup Iteration  15: 313666.120 ops/s
# Warmup Iteration  16: 313939.414 ops/s
# Warmup Iteration  17: 310971.106 ops/s
# Warmup Iteration  18: 310397.605 ops/s
# Warmup Iteration  19: 313053.877 ops/s
# Warmup Iteration  20: 312563.360 ops/s
# Warmup Iteration  21: 311770.147 ops/s
# Warmup Iteration  22: 309185.130 ops/s
# Warmup Iteration  23: 311339.319 ops/s
# Warmup Iteration  24: 312239.004 ops/s
# Warmup Iteration  25: 312759.573 ops/s
# Warmup Iteration  26: 311838.769 ops/s
# Warmup Iteration  27: 312036.411 ops/s
# Warmup Iteration  28: 311354.824 ops/s
# Warmup Iteration  29: 312105.858 ops/s
# Warmup Iteration  30: 314188.330 ops/s
Iteration   1: 312782.442 ops/s
Iteration   2: 312004.667 ops/s
Iteration   3: 313718.086 ops/s
Iteration   4: 309038.952 ops/s
Iteration   5: 311509.646 ops/s
Iteration   6: 313700.771 ops/s
Iteration   7: 312341.583 ops/s
Iteration   8: 312912.396 ops/s
Iteration   9: 313596.781 ops/s
Iteration  10: 313683.904 ops/s
Iteration  11: 314820.492 ops/s
Iteration  12: 313950.566 ops/s
Iteration  13: 312625.394 ops/s
Iteration  14: 312941.552 ops/s
Iteration  15: 312735.585 ops/s
Iteration  16: 312097.389 ops/s
Iteration  17: 314692.440 ops/s
Iteration  18: 312762.131 ops/s
Iteration  19: 312497.822 ops/s
Iteration  20: 311728.794 ops/s
Iteration  21: 314475.542 ops/s
Iteration  22: 310973.957 ops/s
Iteration  23: 314226.558 ops/s
Iteration  24: 314674.748 ops/s
Iteration  25: 313908.664 ops/s
Iteration  26: 314593.781 ops/s
Iteration  27: 314876.356 ops/s
Iteration  28: 312520.941 ops/s
Iteration  29: 315138.027 ops/s
Iteration  30: 311371.682 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1":
  313096.722 ±(99.9%) 927.636 ops/s [Average]
  (min, avg, max) = (309038.952, 313096.722, 315138.027), stdev = 1388.441
  CI (99.9%): [312169.086, 314024.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1  thrpt   30  313096.722 ± 927.636  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161263.029 ops/s
# Warmup Iteration   2: 209704.536 ops/s
# Warmup Iteration   3: 296900.224 ops/s
# Warmup Iteration   4: 371833.893 ops/s
# Warmup Iteration   5: 367560.850 ops/s
# Warmup Iteration   6: 374354.424 ops/s
# Warmup Iteration   7: 373753.779 ops/s
# Warmup Iteration   8: 372113.290 ops/s
# Warmup Iteration   9: 371664.977 ops/s
# Warmup Iteration  10: 373200.220 ops/s
# Warmup Iteration  11: 267492.390 ops/s
# Warmup Iteration  12: 373663.730 ops/s
# Warmup Iteration  13: 373553.086 ops/s
# Warmup Iteration  14: 373536.545 ops/s
# Warmup Iteration  15: 370973.682 ops/s
# Warmup Iteration  16: 371745.316 ops/s
# Warmup Iteration  17: 372279.023 ops/s
# Warmup Iteration  18: 371639.591 ops/s
# Warmup Iteration  19: 371028.199 ops/s
# Warmup Iteration  20: 370591.888 ops/s
# Warmup Iteration  21: 372537.333 ops/s
# Warmup Iteration  22: 371980.020 ops/s
# Warmup Iteration  23: 371221.375 ops/s
# Warmup Iteration  24: 372195.193 ops/s
# Warmup Iteration  25: 371120.889 ops/s
# Warmup Iteration  26: 371008.682 ops/s
# Warmup Iteration  27: 371812.091 ops/s
# Warmup Iteration  28: 369672.590 ops/s
# Warmup Iteration  29: 370717.744 ops/s
# Warmup Iteration  30: 371920.946 ops/s
Iteration   1: 371205.165 ops/s
Iteration   2: 371420.965 ops/s
Iteration   3: 371085.462 ops/s
Iteration   4: 373907.271 ops/s
Iteration   5: 373657.075 ops/s
Iteration   6: 371548.847 ops/s
Iteration   7: 373355.279 ops/s
Iteration   8: 372662.366 ops/s
Iteration   9: 371816.943 ops/s
Iteration  10: 370563.125 ops/s
Iteration  11: 370808.777 ops/s
Iteration  12: 371321.376 ops/s
Iteration  13: 372399.790 ops/s
Iteration  14: 368024.075 ops/s
Iteration  15: 371360.337 ops/s
Iteration  16: 372556.053 ops/s
Iteration  17: 372242.337 ops/s
Iteration  18: 371630.205 ops/s
Iteration  19: 370928.645 ops/s
Iteration  20: 371769.496 ops/s
Iteration  21: 369714.953 ops/s
Iteration  22: 371451.124 ops/s
Iteration  23: 372153.815 ops/s
Iteration  24: 371701.887 ops/s
Iteration  25: 371712.880 ops/s
Iteration  26: 372558.537 ops/s
Iteration  27: 371241.795 ops/s
Iteration  28: 369751.653 ops/s
Iteration  29: 370318.538 ops/s
Iteration  30: 372378.934 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2":
  371574.923 ±(99.9%) 803.424 ops/s [Average]
  (min, avg, max) = (368024.075, 371574.923, 373907.271), stdev = 1202.527
  CI (99.9%): [370771.499, 372378.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V2  thrpt   30  371574.923 ± 803.424  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240915.092 ops/s
# Warmup Iteration   2: 313582.394 ops/s
# Warmup Iteration   3: 359239.950 ops/s
# Warmup Iteration   4: 519591.631 ops/s
# Warmup Iteration   5: 512379.574 ops/s
# Warmup Iteration   6: 510651.645 ops/s
# Warmup Iteration   7: 517919.580 ops/s
# Warmup Iteration   8: 516989.534 ops/s
# Warmup Iteration   9: 516275.838 ops/s
# Warmup Iteration  10: 518342.370 ops/s
# Warmup Iteration  11: 512121.983 ops/s
# Warmup Iteration  12: 520011.721 ops/s
# Warmup Iteration  13: 365322.718 ops/s
# Warmup Iteration  14: 519853.976 ops/s
# Warmup Iteration  15: 519638.014 ops/s
# Warmup Iteration  16: 519159.668 ops/s
# Warmup Iteration  17: 518656.166 ops/s
# Warmup Iteration  18: 519816.636 ops/s
# Warmup Iteration  19: 519992.254 ops/s
# Warmup Iteration  20: 517338.106 ops/s
# Warmup Iteration  21: 518833.705 ops/s
# Warmup Iteration  22: 520267.754 ops/s
# Warmup Iteration  23: 520305.380 ops/s
# Warmup Iteration  24: 519297.588 ops/s
# Warmup Iteration  25: 522063.510 ops/s
# Warmup Iteration  26: 521594.590 ops/s
# Warmup Iteration  27: 521959.874 ops/s
# Warmup Iteration  28: 520649.030 ops/s
# Warmup Iteration  29: 518574.422 ops/s
# Warmup Iteration  30: 518872.535 ops/s
Iteration   1: 519798.906 ops/s
Iteration   2: 518679.771 ops/s
Iteration   3: 519376.295 ops/s
Iteration   4: 520458.864 ops/s
Iteration   5: 519565.476 ops/s
Iteration   6: 520155.536 ops/s
Iteration   7: 520461.851 ops/s
Iteration   8: 519569.246 ops/s
Iteration   9: 518388.469 ops/s
Iteration  10: 518701.068 ops/s
Iteration  11: 517599.349 ops/s
Iteration  12: 521063.112 ops/s
Iteration  13: 517549.564 ops/s
Iteration  14: 518093.177 ops/s
Iteration  15: 519960.848 ops/s
Iteration  16: 520532.553 ops/s
Iteration  17: 521022.117 ops/s
Iteration  18: 520775.512 ops/s
Iteration  19: 517063.842 ops/s
Iteration  20: 517906.339 ops/s
Iteration  21: 518519.907 ops/s
Iteration  22: 519882.563 ops/s
Iteration  23: 518762.183 ops/s
Iteration  24: 519094.039 ops/s
Iteration  25: 518199.764 ops/s
Iteration  26: 521296.014 ops/s
Iteration  27: 520829.380 ops/s
Iteration  28: 520694.007 ops/s
Iteration  29: 517929.030 ops/s
Iteration  30: 521024.878 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3":
  519431.789 ±(99.9%) 832.715 ops/s [Average]
  (min, avg, max) = (517063.842, 519431.789, 521296.014), stdev = 1246.369
  CI (99.9%): [518599.074, 520264.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_PROTO3  thrpt   30  519431.789 ± 832.715  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 183298.913 ops/s
# Warmup Iteration   2: 259339.109 ops/s
# Warmup Iteration   3: 362928.773 ops/s
# Warmup Iteration   4: 465195.881 ops/s
# Warmup Iteration   5: 468041.348 ops/s
# Warmup Iteration   6: 470872.062 ops/s
# Warmup Iteration   7: 467216.216 ops/s
# Warmup Iteration   8: 468663.887 ops/s
# Warmup Iteration   9: 461587.832 ops/s
# Warmup Iteration  10: 421135.811 ops/s
# Warmup Iteration  11: 383137.040 ops/s
# Warmup Iteration  12: 470278.479 ops/s
# Warmup Iteration  13: 469571.435 ops/s
# Warmup Iteration  14: 468810.285 ops/s
# Warmup Iteration  15: 468143.273 ops/s
# Warmup Iteration  16: 466151.092 ops/s
# Warmup Iteration  17: 463852.657 ops/s
# Warmup Iteration  18: 465232.112 ops/s
# Warmup Iteration  19: 466458.678 ops/s
# Warmup Iteration  20: 464016.826 ops/s
# Warmup Iteration  21: 466080.954 ops/s
# Warmup Iteration  22: 463705.786 ops/s
# Warmup Iteration  23: 464931.075 ops/s
# Warmup Iteration  24: 462710.608 ops/s
# Warmup Iteration  25: 467021.425 ops/s
# Warmup Iteration  26: 466978.727 ops/s
# Warmup Iteration  27: 466503.692 ops/s
# Warmup Iteration  28: 465530.782 ops/s
# Warmup Iteration  29: 466100.031 ops/s
# Warmup Iteration  30: 465979.537 ops/s
Iteration   1: 468437.880 ops/s
Iteration   2: 464213.588 ops/s
Iteration   3: 462580.626 ops/s
Iteration   4: 467233.953 ops/s
Iteration   5: 467371.041 ops/s
Iteration   6: 467131.370 ops/s
Iteration   7: 467215.361 ops/s
Iteration   8: 466412.286 ops/s
Iteration   9: 464135.931 ops/s
Iteration  10: 467674.875 ops/s
Iteration  11: 465573.422 ops/s
Iteration  12: 466062.344 ops/s
Iteration  13: 468375.759 ops/s
Iteration  14: 466965.340 ops/s
Iteration  15: 463564.254 ops/s
Iteration  16: 465488.616 ops/s
Iteration  17: 464529.662 ops/s
Iteration  18: 465507.200 ops/s
Iteration  19: 466510.583 ops/s
Iteration  20: 468616.038 ops/s
Iteration  21: 467393.375 ops/s
Iteration  22: 463270.041 ops/s
Iteration  23: 463921.457 ops/s
Iteration  24: 466811.004 ops/s
Iteration  25: 464135.080 ops/s
Iteration  26: 465813.945 ops/s
Iteration  27: 467414.975 ops/s
Iteration  28: 467501.650 ops/s
Iteration  29: 465528.563 ops/s
Iteration  30: 469368.072 ops/s


Result "zipkin2.codec.SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT":
  466158.610 ±(99.9%) 1169.476 ops/s [Average]
  (min, avg, max) = (462580.626, 466158.610, 469368.072), stdev = 1750.417
  CI (99.9%): [464989.133, 467328.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
SpanBytesEncoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT  thrpt   30  466158.610 ± 1169.476  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 299344.139 ops/s
# Warmup Iteration   2: 375855.194 ops/s
# Warmup Iteration   3: 815244.139 ops/s
# Warmup Iteration   4: 815753.993 ops/s
# Warmup Iteration   5: 832863.050 ops/s
# Warmup Iteration   6: 827284.230 ops/s
# Warmup Iteration   7: 830705.854 ops/s
# Warmup Iteration   8: 584838.628 ops/s
# Warmup Iteration   9: 840914.787 ops/s
# Warmup Iteration  10: 840806.345 ops/s
# Warmup Iteration  11: 842291.027 ops/s
# Warmup Iteration  12: 841323.566 ops/s
# Warmup Iteration  13: 843472.726 ops/s
# Warmup Iteration  14: 843017.679 ops/s
# Warmup Iteration  15: 843267.447 ops/s
# Warmup Iteration  16: 841908.999 ops/s
# Warmup Iteration  17: 841810.642 ops/s
# Warmup Iteration  18: 840820.648 ops/s
# Warmup Iteration  19: 843181.629 ops/s
# Warmup Iteration  20: 838620.921 ops/s
# Warmup Iteration  21: 841985.104 ops/s
# Warmup Iteration  22: 840415.118 ops/s
# Warmup Iteration  23: 842215.618 ops/s
# Warmup Iteration  24: 839965.737 ops/s
# Warmup Iteration  25: 840909.599 ops/s
# Warmup Iteration  26: 842809.928 ops/s
# Warmup Iteration  27: 842748.408 ops/s
# Warmup Iteration  28: 841606.860 ops/s
# Warmup Iteration  29: 841098.469 ops/s
# Warmup Iteration  30: 839464.563 ops/s
Iteration   1: 844410.946 ops/s
Iteration   2: 841508.306 ops/s
Iteration   3: 840026.518 ops/s
Iteration   4: 841895.839 ops/s
Iteration   5: 834291.941 ops/s
Iteration   6: 843291.724 ops/s
Iteration   7: 844427.365 ops/s
Iteration   8: 834782.767 ops/s
Iteration   9: 834373.105 ops/s
Iteration  10: 838704.731 ops/s
Iteration  11: 840139.654 ops/s
Iteration  12: 839173.189 ops/s
Iteration  13: 843681.585 ops/s
Iteration  14: 837315.271 ops/s
Iteration  15: 837390.575 ops/s
Iteration  16: 841262.848 ops/s
Iteration  17: 843418.199 ops/s
Iteration  18: 839939.828 ops/s
Iteration  19: 834101.102 ops/s
Iteration  20: 833018.594 ops/s
Iteration  21: 833153.080 ops/s
Iteration  22: 840535.577 ops/s
Iteration  23: 841862.264 ops/s
Iteration  24: 840738.886 ops/s
Iteration  25: 836959.868 ops/s
Iteration  26: 842053.593 ops/s
Iteration  27: 841107.358 ops/s
Iteration  28: 840354.274 ops/s
Iteration  29: 840695.933 ops/s
Iteration  30: 838601.163 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_THRIFT":
  839440.536 ±(99.9%) 2264.124 ops/s [Average]
  (min, avg, max) = (833018.594, 839440.536, 844427.365), stdev = 3388.834
  CI (99.9%): [837176.413, 841704.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_emptyListOk_THRIFT  thrpt   30  839440.536 ± 2264.124  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343198.335 ops/s
# Warmup Iteration   2: 429641.475 ops/s
# Warmup Iteration   3: 781206.128 ops/s
# Warmup Iteration   4: 861671.231 ops/s
# Warmup Iteration   5: 870404.225 ops/s
# Warmup Iteration   6: 874894.181 ops/s
# Warmup Iteration   7: 875790.253 ops/s
# Warmup Iteration   8: 866669.037 ops/s
# Warmup Iteration   9: 609704.386 ops/s
# Warmup Iteration  10: 871434.132 ops/s
# Warmup Iteration  11: 872509.513 ops/s
# Warmup Iteration  12: 872833.445 ops/s
# Warmup Iteration  13: 871497.190 ops/s
# Warmup Iteration  14: 873699.201 ops/s
# Warmup Iteration  15: 873569.156 ops/s
# Warmup Iteration  16: 871662.737 ops/s
# Warmup Iteration  17: 878869.497 ops/s
# Warmup Iteration  18: 876320.025 ops/s
# Warmup Iteration  19: 878523.736 ops/s
# Warmup Iteration  20: 880620.333 ops/s
# Warmup Iteration  21: 880155.546 ops/s
# Warmup Iteration  22: 872733.622 ops/s
# Warmup Iteration  23: 876404.047 ops/s
# Warmup Iteration  24: 879047.827 ops/s
# Warmup Iteration  25: 878453.574 ops/s
# Warmup Iteration  26: 878876.259 ops/s
# Warmup Iteration  27: 877106.288 ops/s
# Warmup Iteration  28: 874772.565 ops/s
# Warmup Iteration  29: 877420.261 ops/s
# Warmup Iteration  30: 873107.772 ops/s
Iteration   1: 872358.371 ops/s
Iteration   2: 871368.053 ops/s
Iteration   3: 874205.421 ops/s
Iteration   4: 877930.883 ops/s
Iteration   5: 878607.767 ops/s
Iteration   6: 880525.160 ops/s
Iteration   7: 878828.797 ops/s
Iteration   8: 874214.978 ops/s
Iteration   9: 881322.320 ops/s
Iteration  10: 878530.564 ops/s
Iteration  11: 878880.944 ops/s
Iteration  12: 881024.177 ops/s
Iteration  13: 875644.351 ops/s
Iteration  14: 879093.821 ops/s
Iteration  15: 874842.867 ops/s
Iteration  16: 878722.604 ops/s
Iteration  17: 884017.682 ops/s
Iteration  18: 874891.236 ops/s
Iteration  19: 882725.095 ops/s
Iteration  20: 874298.577 ops/s
Iteration  21: 875481.526 ops/s
Iteration  22: 881601.548 ops/s
Iteration  23: 879512.476 ops/s
Iteration  24: 873679.158 ops/s
Iteration  25: 879867.755 ops/s
Iteration  26: 876439.958 ops/s
Iteration  27: 878780.830 ops/s
Iteration  28: 880667.251 ops/s
Iteration  29: 876212.425 ops/s
Iteration  30: 879011.442 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V1":
  877776.268 ±(99.9%) 2109.067 ops/s [Average]
  (min, avg, max) = (871368.053, 877776.268, 884017.682), stdev = 3156.753
  CI (99.9%): [875667.200, 879885.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_JSON_V1  thrpt   30  877776.268 ± 2109.067  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 352896.869 ops/s
# Warmup Iteration   2: 441312.129 ops/s
# Warmup Iteration   3: 822522.855 ops/s
# Warmup Iteration   4: 864667.919 ops/s
# Warmup Iteration   5: 870578.965 ops/s
# Warmup Iteration   6: 880075.403 ops/s
# Warmup Iteration   7: 867320.619 ops/s
# Warmup Iteration   8: 837652.563 ops/s
# Warmup Iteration   9: 672196.067 ops/s
# Warmup Iteration  10: 882629.369 ops/s
# Warmup Iteration  11: 881167.206 ops/s
# Warmup Iteration  12: 885091.208 ops/s
# Warmup Iteration  13: 883797.041 ops/s
# Warmup Iteration  14: 882683.610 ops/s
# Warmup Iteration  15: 884936.533 ops/s
# Warmup Iteration  16: 884488.565 ops/s
# Warmup Iteration  17: 882383.157 ops/s
# Warmup Iteration  18: 882615.815 ops/s
# Warmup Iteration  19: 881332.772 ops/s
# Warmup Iteration  20: 879966.824 ops/s
# Warmup Iteration  21: 882223.977 ops/s
# Warmup Iteration  22: 882530.684 ops/s
# Warmup Iteration  23: 879799.377 ops/s
# Warmup Iteration  24: 881715.788 ops/s
# Warmup Iteration  25: 882585.479 ops/s
# Warmup Iteration  26: 885788.005 ops/s
# Warmup Iteration  27: 880705.202 ops/s
# Warmup Iteration  28: 880505.964 ops/s
# Warmup Iteration  29: 882285.809 ops/s
# Warmup Iteration  30: 880325.363 ops/s
Iteration   1: 879595.612 ops/s
Iteration   2: 884289.838 ops/s
Iteration   3: 878228.782 ops/s
Iteration   4: 880574.384 ops/s
Iteration   5: 879073.980 ops/s
Iteration   6: 877319.558 ops/s
Iteration   7: 880688.195 ops/s
Iteration   8: 879152.360 ops/s
Iteration   9: 879854.661 ops/s
Iteration  10: 879175.473 ops/s
Iteration  11: 879917.444 ops/s
Iteration  12: 873443.521 ops/s
Iteration  13: 869572.867 ops/s
Iteration  14: 875326.214 ops/s
Iteration  15: 881992.324 ops/s
Iteration  16: 879208.972 ops/s
Iteration  17: 883867.633 ops/s
Iteration  18: 874371.241 ops/s
Iteration  19: 873325.540 ops/s
Iteration  20: 882287.800 ops/s
Iteration  21: 877976.593 ops/s
Iteration  22: 882121.675 ops/s
Iteration  23: 881059.140 ops/s
Iteration  24: 883046.838 ops/s
Iteration  25: 880500.625 ops/s
Iteration  26: 880777.338 ops/s
Iteration  27: 880654.227 ops/s
Iteration  28: 872584.171 ops/s
Iteration  29: 880870.233 ops/s
Iteration  30: 883837.402 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_THRIFT":
  879156.488 ±(99.9%) 2405.613 ops/s [Average]
  (min, avg, max) = (869572.867, 879156.488, 884289.838), stdev = 3600.608
  CI (99.9%): [876750.875, 881562.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_falseOnEmpty_inputSpans_THRIFT  thrpt   30  879156.488 ± 2405.613  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNonAddressBooleanBinaryAnnotations$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNonAddressBooleanBinaryAnnotations

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53210.573 ops/s
# Warmup Iteration   2: 116741.070 ops/s
# Warmup Iteration   3: 185863.415 ops/s
# Warmup Iteration   4: 187344.435 ops/s
# Warmup Iteration   5: 177193.577 ops/s
# Warmup Iteration   6: 154139.045 ops/s
# Warmup Iteration   7: 188651.721 ops/s
# Warmup Iteration   8: 190489.557 ops/s
# Warmup Iteration   9: 190636.260 ops/s
# Warmup Iteration  10: 188090.216 ops/s
# Warmup Iteration  11: 190086.466 ops/s
# Warmup Iteration  12: 189183.432 ops/s
# Warmup Iteration  13: 190302.272 ops/s
# Warmup Iteration  14: 189376.053 ops/s
# Warmup Iteration  15: 189973.109 ops/s
# Warmup Iteration  16: 189213.870 ops/s
# Warmup Iteration  17: 189799.214 ops/s
# Warmup Iteration  18: 189374.749 ops/s
# Warmup Iteration  19: 189472.772 ops/s
# Warmup Iteration  20: 189101.202 ops/s
# Warmup Iteration  21: 188403.145 ops/s
# Warmup Iteration  22: 188254.656 ops/s
# Warmup Iteration  23: 188797.463 ops/s
# Warmup Iteration  24: 189895.018 ops/s
# Warmup Iteration  25: 190631.019 ops/s
# Warmup Iteration  26: 190498.718 ops/s
# Warmup Iteration  27: 190788.301 ops/s
# Warmup Iteration  28: 191844.363 ops/s
# Warmup Iteration  29: 191423.943 ops/s
# Warmup Iteration  30: 191595.658 ops/s
Iteration   1: 190847.684 ops/s
Iteration   2: 191505.855 ops/s
Iteration   3: 189924.797 ops/s
Iteration   4: 191374.068 ops/s
Iteration   5: 190592.217 ops/s
Iteration   6: 189427.689 ops/s
Iteration   7: 192030.703 ops/s
Iteration   8: 189706.015 ops/s
Iteration   9: 188338.239 ops/s
Iteration  10: 189489.253 ops/s
Iteration  11: 188934.277 ops/s
Iteration  12: 192448.864 ops/s
Iteration  13: 191976.434 ops/s
Iteration  14: 191526.897 ops/s
Iteration  15: 190161.864 ops/s
Iteration  16: 189133.898 ops/s
Iteration  17: 191762.051 ops/s
Iteration  18: 191180.989 ops/s
Iteration  19: 190513.734 ops/s
Iteration  20: 190058.797 ops/s
Iteration  21: 189792.078 ops/s
Iteration  22: 189696.154 ops/s
Iteration  23: 190691.774 ops/s
Iteration  24: 191571.800 ops/s
Iteration  25: 189445.422 ops/s
Iteration  26: 188819.901 ops/s
Iteration  27: 188742.917 ops/s
Iteration  28: 189259.529 ops/s
Iteration  29: 189063.356 ops/s
Iteration  30: 191034.824 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNonAddressBooleanBinaryAnnotations":
  190301.736 ±(99.9%) 763.124 ops/s [Average]
  (min, avg, max) = (188338.239, 190301.736, 192448.864), stdev = 1142.208
  CI (99.9%): [189538.612, 191064.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNonAddressBooleanBinaryAnnotations  thrpt   30  190301.736 ± 763.124  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47216.302 ops/s
# Warmup Iteration   2: 95779.653 ops/s
# Warmup Iteration   3: 162672.362 ops/s
# Warmup Iteration   4: 165302.768 ops/s
# Warmup Iteration   5: 162422.812 ops/s
# Warmup Iteration   6: 123895.094 ops/s
# Warmup Iteration   7: 165870.125 ops/s
# Warmup Iteration   8: 166956.252 ops/s
# Warmup Iteration   9: 166451.023 ops/s
# Warmup Iteration  10: 166526.018 ops/s
# Warmup Iteration  11: 165105.977 ops/s
# Warmup Iteration  12: 166366.000 ops/s
# Warmup Iteration  13: 165565.246 ops/s
# Warmup Iteration  14: 165571.018 ops/s
# Warmup Iteration  15: 165850.294 ops/s
# Warmup Iteration  16: 165655.826 ops/s
# Warmup Iteration  17: 165572.060 ops/s
# Warmup Iteration  18: 164662.299 ops/s
# Warmup Iteration  19: 166332.612 ops/s
# Warmup Iteration  20: 165070.035 ops/s
# Warmup Iteration  21: 166155.412 ops/s
# Warmup Iteration  22: 166666.852 ops/s
# Warmup Iteration  23: 166469.022 ops/s
# Warmup Iteration  24: 166630.097 ops/s
# Warmup Iteration  25: 164641.446 ops/s
# Warmup Iteration  26: 165723.252 ops/s
# Warmup Iteration  27: 165787.304 ops/s
# Warmup Iteration  28: 165652.001 ops/s
# Warmup Iteration  29: 165774.125 ops/s
# Warmup Iteration  30: 166085.419 ops/s
Iteration   1: 164415.970 ops/s
Iteration   2: 166522.259 ops/s
Iteration   3: 166938.533 ops/s
Iteration   4: 164477.856 ops/s
Iteration   5: 165868.592 ops/s
Iteration   6: 165210.232 ops/s
Iteration   7: 164380.047 ops/s
Iteration   8: 164213.154 ops/s
Iteration   9: 165205.977 ops/s
Iteration  10: 164544.530 ops/s
Iteration  11: 163364.764 ops/s
Iteration  12: 163012.903 ops/s
Iteration  13: 165520.442 ops/s
Iteration  14: 166108.369 ops/s
Iteration  15: 165492.745 ops/s
Iteration  16: 164519.356 ops/s
Iteration  17: 166189.224 ops/s
Iteration  18: 166412.857 ops/s
Iteration  19: 165934.173 ops/s
Iteration  20: 165360.554 ops/s
Iteration  21: 164657.036 ops/s
Iteration  22: 163526.036 ops/s
Iteration  23: 166386.663 ops/s
Iteration  24: 166107.305 ops/s
Iteration  25: 164916.551 ops/s
Iteration  26: 166569.392 ops/s
Iteration  27: 164999.222 ops/s
Iteration  28: 165006.814 ops/s
Iteration  29: 165744.537 ops/s
Iteration  30: 167324.788 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields":
  165297.696 ±(99.9%) 712.261 ops/s [Average]
  (min, avg, max) = (163012.903, 165297.696, 167324.788), stdev = 1066.078
  CI (99.9%): [164585.435, 166009.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_endpoint_topLevelFields  thrpt   30  165297.696 ± 712.261  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63089.944 ops/s
# Warmup Iteration   2: 126836.827 ops/s
# Warmup Iteration   3: 186785.202 ops/s
# Warmup Iteration   4: 186675.726 ops/s
# Warmup Iteration   5: 177538.468 ops/s
# Warmup Iteration   6: 153136.770 ops/s
# Warmup Iteration   7: 190311.830 ops/s
# Warmup Iteration   8: 188947.081 ops/s
# Warmup Iteration   9: 190615.233 ops/s
# Warmup Iteration  10: 190532.640 ops/s
# Warmup Iteration  11: 189716.420 ops/s
# Warmup Iteration  12: 190456.537 ops/s
# Warmup Iteration  13: 188808.823 ops/s
# Warmup Iteration  14: 188252.646 ops/s
# Warmup Iteration  15: 189541.544 ops/s
# Warmup Iteration  16: 190244.981 ops/s
# Warmup Iteration  17: 188003.585 ops/s
# Warmup Iteration  18: 189313.117 ops/s
# Warmup Iteration  19: 188557.839 ops/s
# Warmup Iteration  20: 186886.200 ops/s
# Warmup Iteration  21: 188109.312 ops/s
# Warmup Iteration  22: 188067.801 ops/s
# Warmup Iteration  23: 188045.316 ops/s
# Warmup Iteration  24: 188334.875 ops/s
# Warmup Iteration  25: 188650.633 ops/s
# Warmup Iteration  26: 188810.051 ops/s
# Warmup Iteration  27: 189245.654 ops/s
# Warmup Iteration  28: 187720.638 ops/s
# Warmup Iteration  29: 188870.008 ops/s
# Warmup Iteration  30: 189120.507 ops/s
Iteration   1: 189333.082 ops/s
Iteration   2: 189616.764 ops/s
Iteration   3: 188774.664 ops/s
Iteration   4: 190195.277 ops/s
Iteration   5: 189394.618 ops/s
Iteration   6: 185974.959 ops/s
Iteration   7: 189159.729 ops/s
Iteration   8: 189218.783 ops/s
Iteration   9: 189732.928 ops/s
Iteration  10: 187752.347 ops/s
Iteration  11: 190039.477 ops/s
Iteration  12: 188145.990 ops/s
Iteration  13: 188774.891 ops/s
Iteration  14: 189647.260 ops/s
Iteration  15: 185680.557 ops/s
Iteration  16: 188786.167 ops/s
Iteration  17: 188635.018 ops/s
Iteration  18: 188915.412 ops/s
Iteration  19: 188660.380 ops/s
Iteration  20: 189740.624 ops/s
Iteration  21: 188607.156 ops/s
Iteration  22: 188263.044 ops/s
Iteration  23: 188491.442 ops/s
Iteration  24: 188643.980 ops/s
Iteration  25: 187717.583 ops/s
Iteration  26: 187791.901 ops/s
Iteration  27: 188234.521 ops/s
Iteration  28: 190456.016 ops/s
Iteration  29: 191094.889 ops/s
Iteration  30: 189190.148 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields":
  188822.320 ±(99.9%) 764.420 ops/s [Average]
  (min, avg, max) = (185680.557, 188822.320, 191094.889), stdev = 1144.148
  CI (99.9%): [188057.900, 189586.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_ignoresNull_topLevelFields  thrpt   30  188822.320 ± 764.420  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35287.800 ops/s
# Warmup Iteration   2: 69576.443 ops/s
# Warmup Iteration   3: 145842.886 ops/s
# Warmup Iteration   4: 146801.846 ops/s
# Warmup Iteration   5: 147072.656 ops/s
# Warmup Iteration   6: 146906.004 ops/s
# Warmup Iteration   7: 111425.272 ops/s
# Warmup Iteration   8: 149977.816 ops/s
# Warmup Iteration   9: 150666.999 ops/s
# Warmup Iteration  10: 150188.412 ops/s
# Warmup Iteration  11: 150187.387 ops/s
# Warmup Iteration  12: 150820.267 ops/s
# Warmup Iteration  13: 150048.617 ops/s
# Warmup Iteration  14: 149788.643 ops/s
# Warmup Iteration  15: 150445.059 ops/s
# Warmup Iteration  16: 150354.321 ops/s
# Warmup Iteration  17: 150623.487 ops/s
# Warmup Iteration  18: 149713.177 ops/s
# Warmup Iteration  19: 149209.440 ops/s
# Warmup Iteration  20: 150101.876 ops/s
# Warmup Iteration  21: 150826.677 ops/s
# Warmup Iteration  22: 151164.770 ops/s
# Warmup Iteration  23: 150340.031 ops/s
# Warmup Iteration  24: 151589.177 ops/s
# Warmup Iteration  25: 150732.793 ops/s
# Warmup Iteration  26: 150636.626 ops/s
# Warmup Iteration  27: 149317.297 ops/s
# Warmup Iteration  28: 149331.676 ops/s
# Warmup Iteration  29: 149492.618 ops/s
# Warmup Iteration  30: 149900.670 ops/s
Iteration   1: 150410.552 ops/s
Iteration   2: 149070.501 ops/s
Iteration   3: 151673.949 ops/s
Iteration   4: 150753.490 ops/s
Iteration   5: 151135.461 ops/s
Iteration   6: 150829.919 ops/s
Iteration   7: 149138.955 ops/s
Iteration   8: 149155.080 ops/s
Iteration   9: 149243.278 ops/s
Iteration  10: 150317.785 ops/s
Iteration  11: 149924.046 ops/s
Iteration  12: 150032.526 ops/s
Iteration  13: 149732.048 ops/s
Iteration  14: 150744.285 ops/s
Iteration  15: 150976.462 ops/s
Iteration  16: 151320.491 ops/s
Iteration  17: 150845.489 ops/s
Iteration  18: 151299.060 ops/s
Iteration  19: 151368.364 ops/s
Iteration  20: 150910.556 ops/s
Iteration  21: 151069.726 ops/s
Iteration  22: 150895.210 ops/s
Iteration  23: 150784.829 ops/s
Iteration  24: 150861.938 ops/s
Iteration  25: 151787.351 ops/s
Iteration  26: 151795.749 ops/s
Iteration  27: 151539.491 ops/s
Iteration  28: 150963.749 ops/s
Iteration  29: 150125.130 ops/s
Iteration  30: 152260.858 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V1":
  150698.878 ±(99.9%) 560.908 ops/s [Average]
  (min, avg, max) = (149070.501, 150698.878, 152260.858), stdev = 839.541
  CI (99.9%): [150137.969, 151259.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_JSON_V1  thrpt   30  150698.878 ± 560.908  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125537.460 ops/s
# Warmup Iteration   2: 201074.339 ops/s
# Warmup Iteration   3: 327349.854 ops/s
# Warmup Iteration   4: 391128.747 ops/s
# Warmup Iteration   5: 389086.784 ops/s
# Warmup Iteration   6: 394550.667 ops/s
# Warmup Iteration   7: 395985.600 ops/s
# Warmup Iteration   8: 394439.747 ops/s
# Warmup Iteration   9: 278397.672 ops/s
# Warmup Iteration  10: 399291.920 ops/s
# Warmup Iteration  11: 397904.970 ops/s
# Warmup Iteration  12: 396073.769 ops/s
# Warmup Iteration  13: 397005.505 ops/s
# Warmup Iteration  14: 398365.536 ops/s
# Warmup Iteration  15: 397362.641 ops/s
# Warmup Iteration  16: 398405.297 ops/s
# Warmup Iteration  17: 391187.665 ops/s
# Warmup Iteration  18: 391643.343 ops/s
# Warmup Iteration  19: 391266.728 ops/s
# Warmup Iteration  20: 391523.384 ops/s
# Warmup Iteration  21: 392262.737 ops/s
# Warmup Iteration  22: 390656.312 ops/s
# Warmup Iteration  23: 390705.797 ops/s
# Warmup Iteration  24: 391674.511 ops/s
# Warmup Iteration  25: 392046.312 ops/s
# Warmup Iteration  26: 391759.665 ops/s
# Warmup Iteration  27: 391043.875 ops/s
# Warmup Iteration  28: 390750.664 ops/s
# Warmup Iteration  29: 391622.686 ops/s
# Warmup Iteration  30: 392409.539 ops/s
Iteration   1: 390860.410 ops/s
Iteration   2: 385352.668 ops/s
Iteration   3: 390300.168 ops/s
Iteration   4: 392025.002 ops/s
Iteration   5: 391959.836 ops/s
Iteration   6: 388625.596 ops/s
Iteration   7: 391460.404 ops/s
Iteration   8: 392254.592 ops/s
Iteration   9: 392174.032 ops/s
Iteration  10: 393254.820 ops/s
Iteration  11: 392550.590 ops/s
Iteration  12: 388568.293 ops/s
Iteration  13: 391038.243 ops/s
Iteration  14: 392550.536 ops/s
Iteration  15: 391480.056 ops/s
Iteration  16: 391262.461 ops/s
Iteration  17: 389290.743 ops/s
Iteration  18: 392260.500 ops/s
Iteration  19: 392089.582 ops/s
Iteration  20: 391583.487 ops/s
Iteration  21: 390430.966 ops/s
Iteration  22: 387733.422 ops/s
Iteration  23: 387858.188 ops/s
Iteration  24: 393161.606 ops/s
Iteration  25: 391754.625 ops/s
Iteration  26: 390897.456 ops/s
Iteration  27: 391033.885 ops/s
Iteration  28: 388523.146 ops/s
Iteration  29: 389484.302 ops/s
Iteration  30: 391205.124 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_THRIFT":
  390767.491 ±(99.9%) 1230.012 ops/s [Average]
  (min, avg, max) = (385352.668, 390767.491, 393254.820), stdev = 1841.025
  CI (99.9%): [389537.479, 391997.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_localSpanRoundTrip_THRIFT  thrpt   30  390767.491 ± 1230.012  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32161.515 ops/s
# Warmup Iteration   2: 42002.237 ops/s
# Warmup Iteration   3: 76017.735 ops/s
# Warmup Iteration   4: 78484.048 ops/s
# Warmup Iteration   5: 81071.338 ops/s
# Warmup Iteration   6: 78787.475 ops/s
# Warmup Iteration   7: 80152.807 ops/s
# Warmup Iteration   8: 81979.983 ops/s
# Warmup Iteration   9: 58534.883 ops/s
# Warmup Iteration  10: 82597.680 ops/s
# Warmup Iteration  11: 82844.502 ops/s
# Warmup Iteration  12: 82443.241 ops/s
# Warmup Iteration  13: 82161.209 ops/s
# Warmup Iteration  14: 81635.616 ops/s
# Warmup Iteration  15: 82843.186 ops/s
# Warmup Iteration  16: 82448.292 ops/s
# Warmup Iteration  17: 83311.405 ops/s
# Warmup Iteration  18: 83822.891 ops/s
# Warmup Iteration  19: 83135.584 ops/s
# Warmup Iteration  20: 83094.019 ops/s
# Warmup Iteration  21: 83508.800 ops/s
# Warmup Iteration  22: 84156.635 ops/s
# Warmup Iteration  23: 83733.371 ops/s
# Warmup Iteration  24: 83541.120 ops/s
# Warmup Iteration  25: 83460.948 ops/s
# Warmup Iteration  26: 83503.632 ops/s
# Warmup Iteration  27: 83797.549 ops/s
# Warmup Iteration  28: 83193.758 ops/s
# Warmup Iteration  29: 83166.903 ops/s
# Warmup Iteration  30: 83048.449 ops/s
Iteration   1: 82080.657 ops/s
Iteration   2: 82661.622 ops/s
Iteration   3: 82743.008 ops/s
Iteration   4: 82778.783 ops/s
Iteration   5: 82733.601 ops/s
Iteration   6: 83176.912 ops/s
Iteration   7: 83137.248 ops/s
Iteration   8: 82615.116 ops/s
Iteration   9: 83651.285 ops/s
Iteration  10: 83117.315 ops/s
Iteration  11: 83642.853 ops/s
Iteration  12: 83565.947 ops/s
Iteration  13: 82577.779 ops/s
Iteration  14: 83524.802 ops/s
Iteration  15: 83871.202 ops/s
Iteration  16: 83533.195 ops/s
Iteration  17: 82219.377 ops/s
Iteration  18: 82424.133 ops/s
Iteration  19: 83192.926 ops/s
Iteration  20: 83318.584 ops/s
Iteration  21: 83335.252 ops/s
Iteration  22: 83845.035 ops/s
Iteration  23: 83542.153 ops/s
Iteration  24: 82721.559 ops/s
Iteration  25: 83268.708 ops/s
Iteration  26: 82471.868 ops/s
Iteration  27: 83112.760 ops/s
Iteration  28: 82645.430 ops/s
Iteration  29: 83689.168 ops/s
Iteration  30: 84225.195 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation":
  83114.116 ±(99.9%) 358.825 ops/s [Average]
  (min, avg, max) = (82080.657, 83114.116, 84225.195), stdev = 537.073
  CI (99.9%): [82755.290, 83472.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnIncomplete_annotation  thrpt   30  83114.116 ± 358.825  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36460.203 ops/s
# Warmup Iteration   2: 46764.070 ops/s
# Warmup Iteration   3: 95422.614 ops/s
# Warmup Iteration   4: 94580.402 ops/s
# Warmup Iteration   5: 96482.234 ops/s
# Warmup Iteration   6: 95465.506 ops/s
# Warmup Iteration   7: 95440.738 ops/s
# Warmup Iteration   8: 69363.284 ops/s
# Warmup Iteration   9: 92597.551 ops/s
# Warmup Iteration  10: 92708.201 ops/s
# Warmup Iteration  11: 91923.241 ops/s
# Warmup Iteration  12: 92516.145 ops/s
# Warmup Iteration  13: 92503.520 ops/s
# Warmup Iteration  14: 92938.977 ops/s
# Warmup Iteration  15: 93332.960 ops/s
# Warmup Iteration  16: 93520.089 ops/s
# Warmup Iteration  17: 95289.022 ops/s
# Warmup Iteration  18: 93777.679 ops/s
# Warmup Iteration  19: 94247.734 ops/s
# Warmup Iteration  20: 94993.201 ops/s
# Warmup Iteration  21: 94438.364 ops/s
# Warmup Iteration  22: 93679.930 ops/s
# Warmup Iteration  23: 94953.658 ops/s
# Warmup Iteration  24: 95021.242 ops/s
# Warmup Iteration  25: 93979.025 ops/s
# Warmup Iteration  26: 93689.214 ops/s
# Warmup Iteration  27: 94337.479 ops/s
# Warmup Iteration  28: 94647.170 ops/s
# Warmup Iteration  29: 94810.782 ops/s
# Warmup Iteration  30: 95215.665 ops/s
Iteration   1: 95211.653 ops/s
Iteration   2: 94578.517 ops/s
Iteration   3: 93895.137 ops/s
Iteration   4: 94292.338 ops/s
Iteration   5: 94491.694 ops/s
Iteration   6: 95320.675 ops/s
Iteration   7: 94700.922 ops/s
Iteration   8: 95162.969 ops/s
Iteration   9: 95253.910 ops/s
Iteration  10: 93957.948 ops/s
Iteration  11: 93915.308 ops/s
Iteration  12: 94239.833 ops/s
Iteration  13: 95677.307 ops/s
Iteration  14: 95650.690 ops/s
Iteration  15: 93732.242 ops/s
Iteration  16: 94342.281 ops/s
Iteration  17: 94162.481 ops/s
Iteration  18: 94636.698 ops/s
Iteration  19: 95695.398 ops/s
Iteration  20: 95697.189 ops/s
Iteration  21: 95277.737 ops/s
Iteration  22: 94404.861 ops/s
Iteration  23: 95074.407 ops/s
Iteration  24: 94706.166 ops/s
Iteration  25: 95727.586 ops/s
Iteration  26: 95429.816 ops/s
Iteration  27: 94494.638 ops/s
Iteration  28: 93747.577 ops/s
Iteration  29: 95267.553 ops/s
Iteration  30: 95003.507 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V1":
  94791.635 ±(99.9%) 427.645 ops/s [Average]
  (min, avg, max) = (93732.242, 94791.635, 95727.586), stdev = 640.079
  CI (99.9%): [94363.989, 95219.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_JSON_V1  thrpt   30  94791.635 ± 427.645  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61145.390 ops/s
# Warmup Iteration   2: 77785.752 ops/s
# Warmup Iteration   3: 77925.939 ops/s
# Warmup Iteration   4: 138384.103 ops/s
# Warmup Iteration   5: 136554.975 ops/s
# Warmup Iteration   6: 137891.226 ops/s
# Warmup Iteration   7: 137202.158 ops/s
# Warmup Iteration   8: 137368.422 ops/s
# Warmup Iteration   9: 137001.674 ops/s
# Warmup Iteration  10: 135751.879 ops/s
# Warmup Iteration  11: 136024.699 ops/s
# Warmup Iteration  12: 138456.229 ops/s
# Warmup Iteration  13: 100521.860 ops/s
# Warmup Iteration  14: 124897.765 ops/s
# Warmup Iteration  15: 137751.847 ops/s
# Warmup Iteration  16: 138334.737 ops/s
# Warmup Iteration  17: 141500.999 ops/s
# Warmup Iteration  18: 141616.783 ops/s
# Warmup Iteration  19: 141898.640 ops/s
# Warmup Iteration  20: 141946.979 ops/s
# Warmup Iteration  21: 141715.995 ops/s
# Warmup Iteration  22: 141789.118 ops/s
# Warmup Iteration  23: 140980.811 ops/s
# Warmup Iteration  24: 141437.078 ops/s
# Warmup Iteration  25: 141632.417 ops/s
# Warmup Iteration  26: 141220.883 ops/s
# Warmup Iteration  27: 140884.947 ops/s
# Warmup Iteration  28: 140986.739 ops/s
# Warmup Iteration  29: 140488.594 ops/s
# Warmup Iteration  30: 140309.974 ops/s
Iteration   1: 140531.756 ops/s
Iteration   2: 141444.328 ops/s
Iteration   3: 140668.166 ops/s
Iteration   4: 140498.681 ops/s
Iteration   5: 140469.021 ops/s
Iteration   6: 140192.714 ops/s
Iteration   7: 141178.810 ops/s
Iteration   8: 141629.396 ops/s
Iteration   9: 141380.740 ops/s
Iteration  10: 141609.839 ops/s
Iteration  11: 140957.045 ops/s
Iteration  12: 141264.772 ops/s
Iteration  13: 141619.713 ops/s
Iteration  14: 142057.559 ops/s
Iteration  15: 142061.232 ops/s
Iteration  16: 142489.959 ops/s
Iteration  17: 141920.508 ops/s
Iteration  18: 142499.065 ops/s
Iteration  19: 141156.203 ops/s
Iteration  20: 141852.522 ops/s
Iteration  21: 141262.507 ops/s
Iteration  22: 141446.032 ops/s
Iteration  23: 141174.013 ops/s
Iteration  24: 142172.825 ops/s
Iteration  25: 141515.053 ops/s
Iteration  26: 142063.263 ops/s
Iteration  27: 141747.304 ops/s
Iteration  28: 141629.848 ops/s
Iteration  29: 141320.735 ops/s
Iteration  30: 141196.835 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_THRIFT":
  141433.681 ±(99.9%) 391.287 ops/s [Average]
  (min, avg, max) = (140192.714, 141433.681, 142499.065), stdev = 585.660
  CI (99.9%): [141042.394, 141824.969] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnMalformed_inputSpans_THRIFT  thrpt   30  141433.681 ± 391.287  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30470.740 ops/s
# Warmup Iteration   2: 39968.718 ops/s
# Warmup Iteration   3: 72794.812 ops/s
# Warmup Iteration   4: 77225.236 ops/s
# Warmup Iteration   5: 74896.393 ops/s
# Warmup Iteration   6: 77112.998 ops/s
# Warmup Iteration   7: 76394.624 ops/s
# Warmup Iteration   8: 77525.294 ops/s
# Warmup Iteration   9: 58301.842 ops/s
# Warmup Iteration  10: 79154.336 ops/s
# Warmup Iteration  11: 78319.846 ops/s
# Warmup Iteration  12: 78522.248 ops/s
# Warmup Iteration  13: 78339.890 ops/s
# Warmup Iteration  14: 78816.907 ops/s
# Warmup Iteration  15: 79097.396 ops/s
# Warmup Iteration  16: 79235.071 ops/s
# Warmup Iteration  17: 79308.193 ops/s
# Warmup Iteration  18: 79376.446 ops/s
# Warmup Iteration  19: 79530.603 ops/s
# Warmup Iteration  20: 79710.222 ops/s
# Warmup Iteration  21: 80442.253 ops/s
# Warmup Iteration  22: 80678.310 ops/s
# Warmup Iteration  23: 78630.785 ops/s
# Warmup Iteration  24: 79902.028 ops/s
# Warmup Iteration  25: 80190.764 ops/s
# Warmup Iteration  26: 80538.313 ops/s
# Warmup Iteration  27: 80660.881 ops/s
# Warmup Iteration  28: 80353.769 ops/s
# Warmup Iteration  29: 80775.280 ops/s
# Warmup Iteration  30: 80305.023 ops/s
Iteration   1: 80668.636 ops/s
Iteration   2: 80500.106 ops/s
Iteration   3: 79605.998 ops/s
Iteration   4: 79318.765 ops/s
Iteration   5: 80035.291 ops/s
Iteration   6: 78560.611 ops/s
Iteration   7: 78629.953 ops/s
Iteration   8: 80123.241 ops/s
Iteration   9: 80494.259 ops/s
Iteration  10: 79710.598 ops/s
Iteration  11: 79193.607 ops/s
Iteration  12: 78622.438 ops/s
Iteration  13: 80304.611 ops/s
Iteration  14: 80883.790 ops/s
Iteration  15: 80503.506 ops/s
Iteration  16: 79973.487 ops/s
Iteration  17: 80500.315 ops/s
Iteration  18: 80230.892 ops/s
Iteration  19: 80607.544 ops/s
Iteration  20: 79575.602 ops/s
Iteration  21: 80179.257 ops/s
Iteration  22: 79293.174 ops/s
Iteration  23: 80046.940 ops/s
Iteration  24: 79830.766 ops/s
Iteration  25: 79922.333 ops/s
Iteration  26: 80858.517 ops/s
Iteration  27: 79293.422 ops/s
Iteration  28: 79342.015 ops/s
Iteration  29: 80383.835 ops/s
Iteration  30: 80089.667 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp":
  79909.439 ±(99.9%) 434.865 ops/s [Average]
  (min, avg, max) = (78560.611, 79909.439, 80883.790), stdev = 650.886
  CI (99.9%): [79474.574, 80344.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationTimestamp  thrpt   30  79909.439 ± 434.865  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30746.713 ops/s
# Warmup Iteration   2: 40037.211 ops/s
# Warmup Iteration   3: 72203.129 ops/s
# Warmup Iteration   4: 74845.765 ops/s
# Warmup Iteration   5: 75496.871 ops/s
# Warmup Iteration   6: 74169.553 ops/s
# Warmup Iteration   7: 74719.073 ops/s
# Warmup Iteration   8: 75398.505 ops/s
# Warmup Iteration   9: 56120.750 ops/s
# Warmup Iteration  10: 77210.751 ops/s
# Warmup Iteration  11: 76722.195 ops/s
# Warmup Iteration  12: 77006.267 ops/s
# Warmup Iteration  13: 76683.628 ops/s
# Warmup Iteration  14: 77647.964 ops/s
# Warmup Iteration  15: 76449.380 ops/s
# Warmup Iteration  16: 77131.666 ops/s
# Warmup Iteration  17: 77965.455 ops/s
# Warmup Iteration  18: 78074.399 ops/s
# Warmup Iteration  19: 77944.582 ops/s
# Warmup Iteration  20: 77921.086 ops/s
# Warmup Iteration  21: 78373.770 ops/s
# Warmup Iteration  22: 77649.937 ops/s
# Warmup Iteration  23: 77587.543 ops/s
# Warmup Iteration  24: 77924.388 ops/s
# Warmup Iteration  25: 76774.647 ops/s
# Warmup Iteration  26: 76824.289 ops/s
# Warmup Iteration  27: 77706.893 ops/s
# Warmup Iteration  28: 77543.411 ops/s
# Warmup Iteration  29: 77738.039 ops/s
# Warmup Iteration  30: 77166.881 ops/s
Iteration   1: 77132.777 ops/s
Iteration   2: 78254.610 ops/s
Iteration   3: 77648.309 ops/s
Iteration   4: 77078.153 ops/s
Iteration   5: 77631.659 ops/s
Iteration   6: 78284.240 ops/s
Iteration   7: 78387.905 ops/s
Iteration   8: 78170.517 ops/s
Iteration   9: 77519.816 ops/s
Iteration  10: 76505.614 ops/s
Iteration  11: 76662.302 ops/s
Iteration  12: 76938.209 ops/s
Iteration  13: 78007.930 ops/s
Iteration  14: 78248.805 ops/s
Iteration  15: 77424.229 ops/s
Iteration  16: 77967.497 ops/s
Iteration  17: 77542.164 ops/s
Iteration  18: 77615.141 ops/s
Iteration  19: 78354.666 ops/s
Iteration  20: 77190.476 ops/s
Iteration  21: 77775.905 ops/s
Iteration  22: 77968.352 ops/s
Iteration  23: 77635.310 ops/s
Iteration  24: 77963.485 ops/s
Iteration  25: 77029.315 ops/s
Iteration  26: 78675.980 ops/s
Iteration  27: 78082.077 ops/s
Iteration  28: 77146.933 ops/s
Iteration  29: 78344.397 ops/s
Iteration  30: 77720.822 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue":
  77696.920 ±(99.9%) 369.299 ops/s [Average]
  (min, avg, max) = (76505.614, 77696.920, 78675.980), stdev = 552.749
  CI (99.9%): [77327.621, 78066.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_annotationValue  thrpt   30  77696.920 ± 369.299  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33113.050 ops/s
# Warmup Iteration   2: 43806.226 ops/s
# Warmup Iteration   3: 80775.130 ops/s
# Warmup Iteration   4: 84844.136 ops/s
# Warmup Iteration   5: 84300.166 ops/s
# Warmup Iteration   6: 83876.451 ops/s
# Warmup Iteration   7: 82670.743 ops/s
# Warmup Iteration   8: 77469.634 ops/s
# Warmup Iteration   9: 67372.100 ops/s
# Warmup Iteration  10: 83398.685 ops/s
# Warmup Iteration  11: 84012.985 ops/s
# Warmup Iteration  12: 83946.005 ops/s
# Warmup Iteration  13: 83626.771 ops/s
# Warmup Iteration  14: 83712.997 ops/s
# Warmup Iteration  15: 83403.217 ops/s
# Warmup Iteration  16: 83160.638 ops/s
# Warmup Iteration  17: 85236.663 ops/s
# Warmup Iteration  18: 84900.458 ops/s
# Warmup Iteration  19: 84783.653 ops/s
# Warmup Iteration  20: 85627.212 ops/s
# Warmup Iteration  21: 85312.854 ops/s
# Warmup Iteration  22: 85360.503 ops/s
# Warmup Iteration  23: 85592.522 ops/s
# Warmup Iteration  24: 86133.133 ops/s
# Warmup Iteration  25: 85317.279 ops/s
# Warmup Iteration  26: 85351.689 ops/s
# Warmup Iteration  27: 85794.044 ops/s
# Warmup Iteration  28: 85837.931 ops/s
# Warmup Iteration  29: 85796.649 ops/s
# Warmup Iteration  30: 85439.849 ops/s
Iteration   1: 84343.313 ops/s
Iteration   2: 84558.423 ops/s
Iteration   3: 84509.611 ops/s
Iteration   4: 84681.067 ops/s
Iteration   5: 84522.601 ops/s
Iteration   6: 85695.406 ops/s
Iteration   7: 85669.158 ops/s
Iteration   8: 85048.646 ops/s
Iteration   9: 85484.984 ops/s
Iteration  10: 85844.419 ops/s
Iteration  11: 86132.038 ops/s
Iteration  12: 85915.153 ops/s
Iteration  13: 85864.462 ops/s
Iteration  14: 86376.821 ops/s
Iteration  15: 85872.033 ops/s
Iteration  16: 85976.226 ops/s
Iteration  17: 85510.715 ops/s
Iteration  18: 85775.516 ops/s
Iteration  19: 86315.041 ops/s
Iteration  20: 85865.493 ops/s
Iteration  21: 85212.963 ops/s
Iteration  22: 84814.493 ops/s
Iteration  23: 85933.153 ops/s
Iteration  24: 86109.073 ops/s
Iteration  25: 85707.527 ops/s
Iteration  26: 85420.362 ops/s
Iteration  27: 84848.196 ops/s
Iteration  28: 84134.917 ops/s
Iteration  29: 84965.558 ops/s
Iteration  30: 84864.875 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id":
  85399.075 ±(99.9%) 425.552 ops/s [Average]
  (min, avg, max) = (84134.917, 85399.075, 86376.821), stdev = 636.946
  CI (99.9%): [84973.523, 85824.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_id  thrpt   30  85399.075 ± 425.552  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33586.327 ops/s
# Warmup Iteration   2: 44821.465 ops/s
# Warmup Iteration   3: 88808.367 ops/s
# Warmup Iteration   4: 90281.583 ops/s
# Warmup Iteration   5: 90497.666 ops/s
# Warmup Iteration   6: 89609.652 ops/s
# Warmup Iteration   7: 89366.335 ops/s
# Warmup Iteration   8: 67219.448 ops/s
# Warmup Iteration   9: 92191.821 ops/s
# Warmup Iteration  10: 91495.094 ops/s
# Warmup Iteration  11: 91783.719 ops/s
# Warmup Iteration  12: 91480.281 ops/s
# Warmup Iteration  13: 91793.994 ops/s
# Warmup Iteration  14: 90403.512 ops/s
# Warmup Iteration  15: 91761.823 ops/s
# Warmup Iteration  16: 91146.785 ops/s
# Warmup Iteration  17: 91888.546 ops/s
# Warmup Iteration  18: 91154.781 ops/s
# Warmup Iteration  19: 91188.607 ops/s
# Warmup Iteration  20: 91546.034 ops/s
# Warmup Iteration  21: 91890.468 ops/s
# Warmup Iteration  22: 91826.687 ops/s
# Warmup Iteration  23: 91531.956 ops/s
# Warmup Iteration  24: 91816.049 ops/s
# Warmup Iteration  25: 91884.801 ops/s
# Warmup Iteration  26: 90699.972 ops/s
# Warmup Iteration  27: 91127.365 ops/s
# Warmup Iteration  28: 91591.032 ops/s
# Warmup Iteration  29: 91387.618 ops/s
# Warmup Iteration  30: 91160.292 ops/s
Iteration   1: 91356.639 ops/s
Iteration   2: 90764.259 ops/s
Iteration   3: 91023.546 ops/s
Iteration   4: 91412.317 ops/s
Iteration   5: 91320.818 ops/s
Iteration   6: 91564.968 ops/s
Iteration   7: 91133.384 ops/s
Iteration   8: 91092.900 ops/s
Iteration   9: 90658.225 ops/s
Iteration  10: 90780.522 ops/s
Iteration  11: 92073.306 ops/s
Iteration  12: 90760.119 ops/s
Iteration  13: 92080.269 ops/s
Iteration  14: 91349.239 ops/s
Iteration  15: 91210.568 ops/s
Iteration  16: 90631.929 ops/s
Iteration  17: 90924.453 ops/s
Iteration  18: 91889.729 ops/s
Iteration  19: 91778.552 ops/s
Iteration  20: 92170.246 ops/s
Iteration  21: 91415.747 ops/s
Iteration  22: 91929.562 ops/s
Iteration  23: 91635.515 ops/s
Iteration  24: 91493.935 ops/s
Iteration  25: 91783.723 ops/s
Iteration  26: 91493.471 ops/s
Iteration  27: 91350.311 ops/s
Iteration  28: 91318.540 ops/s
Iteration  29: 91238.836 ops/s
Iteration  30: 91205.486 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId":
  91361.370 ±(99.9%) 287.403 ops/s [Average]
  (min, avg, max) = (90631.929, 91361.370, 92170.246), stdev = 430.172
  CI (99.9%): [91073.967, 91648.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnNull_traceId  thrpt   30  91361.370 ± 287.403  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40520.057 ops/s
# Warmup Iteration   2: 55002.159 ops/s
# Warmup Iteration   3: 56148.335 ops/s
# Warmup Iteration   4: 74016.202 ops/s
# Warmup Iteration   5: 90734.551 ops/s
# Warmup Iteration   6: 89998.355 ops/s
# Warmup Iteration   7: 89618.040 ops/s
# Warmup Iteration   8: 87431.206 ops/s
# Warmup Iteration   9: 89216.119 ops/s
# Warmup Iteration  10: 89237.605 ops/s
# Warmup Iteration  11: 89914.832 ops/s
# Warmup Iteration  12: 90204.512 ops/s
# Warmup Iteration  13: 90482.495 ops/s
# Warmup Iteration  14: 87899.948 ops/s
# Warmup Iteration  15: 90531.985 ops/s
# Warmup Iteration  16: 61262.936 ops/s
# Warmup Iteration  17: 89380.773 ops/s
# Warmup Iteration  18: 89015.619 ops/s
# Warmup Iteration  19: 90257.780 ops/s
# Warmup Iteration  20: 91834.396 ops/s
# Warmup Iteration  21: 91852.419 ops/s
# Warmup Iteration  22: 92036.330 ops/s
# Warmup Iteration  23: 91669.619 ops/s
# Warmup Iteration  24: 91658.579 ops/s
# Warmup Iteration  25: 90076.089 ops/s
# Warmup Iteration  26: 91418.153 ops/s
# Warmup Iteration  27: 90486.081 ops/s
# Warmup Iteration  28: 91176.488 ops/s
# Warmup Iteration  29: 91580.242 ops/s
# Warmup Iteration  30: 90850.602 ops/s
Iteration   1: 91025.721 ops/s
Iteration   2: 91720.545 ops/s
Iteration   3: 91552.590 ops/s
Iteration   4: 91444.981 ops/s
Iteration   5: 89889.328 ops/s
Iteration   6: 90666.408 ops/s
Iteration   7: 90518.915 ops/s
Iteration   8: 90838.870 ops/s
Iteration   9: 91553.185 ops/s
Iteration  10: 89967.320 ops/s
Iteration  11: 91334.390 ops/s
Iteration  12: 91472.307 ops/s
Iteration  13: 91204.059 ops/s
Iteration  14: 91008.419 ops/s
Iteration  15: 90882.110 ops/s
Iteration  16: 90337.093 ops/s
Iteration  17: 89600.782 ops/s
Iteration  18: 90398.666 ops/s
Iteration  19: 91335.562 ops/s
Iteration  20: 89659.460 ops/s
Iteration  21: 91015.660 ops/s
Iteration  22: 89876.379 ops/s
Iteration  23: 89819.819 ops/s
Iteration  24: 88977.686 ops/s
Iteration  25: 89651.590 ops/s
Iteration  26: 90638.252 ops/s
Iteration  27: 89422.071 ops/s
Iteration  28: 90906.007 ops/s
Iteration  29: 91839.586 ops/s
Iteration  30: 92165.499 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_THRIFT":
  90690.775 ±(99.9%) 547.082 ops/s [Average]
  (min, avg, max) = (88977.686, 90690.775, 92165.499), stdev = 818.846
  CI (99.9%): [90143.694, 91237.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpan_THRIFT  thrpt   30  90690.775 ± 547.082  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31222.446 ops/s
# Warmup Iteration   2: 42757.293 ops/s
# Warmup Iteration   3: 43639.144 ops/s
# Warmup Iteration   4: 62778.086 ops/s
# Warmup Iteration   5: 72280.809 ops/s
# Warmup Iteration   6: 70642.728 ops/s
# Warmup Iteration   7: 69969.562 ops/s
# Warmup Iteration   8: 69344.343 ops/s
# Warmup Iteration   9: 69995.864 ops/s
# Warmup Iteration  10: 71528.915 ops/s
# Warmup Iteration  11: 69965.147 ops/s
# Warmup Iteration  12: 69800.572 ops/s
# Warmup Iteration  13: 70919.033 ops/s
# Warmup Iteration  14: 72293.031 ops/s
# Warmup Iteration  15: 52573.190 ops/s
# Warmup Iteration  16: 64201.729 ops/s
# Warmup Iteration  17: 70815.375 ops/s
# Warmup Iteration  18: 71528.778 ops/s
# Warmup Iteration  19: 71590.756 ops/s
# Warmup Iteration  20: 71330.149 ops/s
# Warmup Iteration  21: 71644.029 ops/s
# Warmup Iteration  22: 70759.164 ops/s
# Warmup Iteration  23: 71027.190 ops/s
# Warmup Iteration  24: 71505.677 ops/s
# Warmup Iteration  25: 71140.865 ops/s
# Warmup Iteration  26: 71298.930 ops/s
# Warmup Iteration  27: 71425.982 ops/s
# Warmup Iteration  28: 71466.341 ops/s
# Warmup Iteration  29: 72189.263 ops/s
# Warmup Iteration  30: 71311.663 ops/s
Iteration   1: 71742.383 ops/s
Iteration   2: 71251.796 ops/s
Iteration   3: 71200.672 ops/s
Iteration   4: 71387.162 ops/s
Iteration   5: 72238.057 ops/s
Iteration   6: 71781.385 ops/s
Iteration   7: 71985.618 ops/s
Iteration   8: 71833.932 ops/s
Iteration   9: 71753.589 ops/s
Iteration  10: 71986.800 ops/s
Iteration  11: 72233.449 ops/s
Iteration  12: 72337.461 ops/s
Iteration  13: 72455.604 ops/s
Iteration  14: 71709.500 ops/s
Iteration  15: 71155.232 ops/s
Iteration  16: 72130.771 ops/s
Iteration  17: 70259.930 ops/s
Iteration  18: 70014.422 ops/s
Iteration  19: 71756.460 ops/s
Iteration  20: 70387.054 ops/s
Iteration  21: 70620.545 ops/s
Iteration  22: 70696.952 ops/s
Iteration  23: 70514.942 ops/s
Iteration  24: 70482.796 ops/s
Iteration  25: 70207.527 ops/s
Iteration  26: 70096.062 ops/s
Iteration  27: 70749.670 ops/s
Iteration  28: 70345.260 ops/s
Iteration  29: 72423.016 ops/s
Iteration  30: 71960.704 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_THRIFT":
  71323.292 ±(99.9%) 531.403 ops/s [Average]
  (min, avg, max) = (70014.422, 71323.292, 72455.604), stdev = 795.379
  CI (99.9%): [70791.889, 71854.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_niceErrorOnTruncatedSpans_THRIFT  thrpt   30  71323.292 ± 531.403  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62792.013 ops/s
# Warmup Iteration   2: 137784.452 ops/s
# Warmup Iteration   3: 206463.971 ops/s
# Warmup Iteration   4: 209172.216 ops/s
# Warmup Iteration   5: 169087.848 ops/s
# Warmup Iteration   6: 200819.613 ops/s
# Warmup Iteration   7: 210851.356 ops/s
# Warmup Iteration   8: 209779.325 ops/s
# Warmup Iteration   9: 211631.481 ops/s
# Warmup Iteration  10: 211702.506 ops/s
# Warmup Iteration  11: 211576.616 ops/s
# Warmup Iteration  12: 211534.326 ops/s
# Warmup Iteration  13: 210544.839 ops/s
# Warmup Iteration  14: 208989.825 ops/s
# Warmup Iteration  15: 208283.669 ops/s
# Warmup Iteration  16: 210450.799 ops/s
# Warmup Iteration  17: 209903.548 ops/s
# Warmup Iteration  18: 211122.499 ops/s
# Warmup Iteration  19: 210650.931 ops/s
# Warmup Iteration  20: 209722.379 ops/s
# Warmup Iteration  21: 209709.257 ops/s
# Warmup Iteration  22: 209024.952 ops/s
# Warmup Iteration  23: 209570.731 ops/s
# Warmup Iteration  24: 211746.719 ops/s
# Warmup Iteration  25: 212285.687 ops/s
# Warmup Iteration  26: 210085.315 ops/s
# Warmup Iteration  27: 209883.529 ops/s
# Warmup Iteration  28: 210513.784 ops/s
# Warmup Iteration  29: 209037.810 ops/s
# Warmup Iteration  30: 210566.009 ops/s
Iteration   1: 208827.849 ops/s
Iteration   2: 211150.199 ops/s
Iteration   3: 210659.126 ops/s
Iteration   4: 211601.471 ops/s
Iteration   5: 211611.422 ops/s
Iteration   6: 211045.857 ops/s
Iteration   7: 207755.324 ops/s
Iteration   8: 211256.886 ops/s
Iteration   9: 211680.876 ops/s
Iteration  10: 210954.872 ops/s
Iteration  11: 209372.172 ops/s
Iteration  12: 209590.690 ops/s
Iteration  13: 206905.054 ops/s
Iteration  14: 212013.201 ops/s
Iteration  15: 211179.117 ops/s
Iteration  16: 209524.045 ops/s
Iteration  17: 212618.383 ops/s
Iteration  18: 209280.742 ops/s
Iteration  19: 209820.611 ops/s
Iteration  20: 211582.690 ops/s
Iteration  21: 209177.327 ops/s
Iteration  22: 209067.433 ops/s
Iteration  23: 210762.898 ops/s
Iteration  24: 211862.145 ops/s
Iteration  25: 211221.050 ops/s
Iteration  26: 210442.555 ops/s
Iteration  27: 208276.946 ops/s
Iteration  28: 208337.016 ops/s
Iteration  29: 207128.924 ops/s
Iteration  30: 210361.909 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName":
  210168.960 ±(99.9%) 1007.894 ops/s [Average]
  (min, avg, max) = (206905.054, 210168.960, 212618.383), stdev = 1508.568
  CI (99.9%): [209161.066, 211176.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_localEndpoint_noServiceName  thrpt   30  210168.960 ± 1007.894  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60702.866 ops/s
# Warmup Iteration   2: 136636.843 ops/s
# Warmup Iteration   3: 204109.669 ops/s
# Warmup Iteration   4: 207659.760 ops/s
# Warmup Iteration   5: 172586.143 ops/s
# Warmup Iteration   6: 195935.360 ops/s
# Warmup Iteration   7: 209183.552 ops/s
# Warmup Iteration   8: 210746.982 ops/s
# Warmup Iteration   9: 210225.467 ops/s
# Warmup Iteration  10: 210732.186 ops/s
# Warmup Iteration  11: 211432.002 ops/s
# Warmup Iteration  12: 211764.546 ops/s
# Warmup Iteration  13: 209733.854 ops/s
# Warmup Iteration  14: 211015.813 ops/s
# Warmup Iteration  15: 210891.146 ops/s
# Warmup Iteration  16: 210685.283 ops/s
# Warmup Iteration  17: 209764.497 ops/s
# Warmup Iteration  18: 209549.837 ops/s
# Warmup Iteration  19: 208969.531 ops/s
# Warmup Iteration  20: 210820.506 ops/s
# Warmup Iteration  21: 210192.132 ops/s
# Warmup Iteration  22: 210106.140 ops/s
# Warmup Iteration  23: 210893.270 ops/s
# Warmup Iteration  24: 209362.660 ops/s
# Warmup Iteration  25: 209706.299 ops/s
# Warmup Iteration  26: 209654.889 ops/s
# Warmup Iteration  27: 209018.144 ops/s
# Warmup Iteration  28: 210908.561 ops/s
# Warmup Iteration  29: 208325.540 ops/s
# Warmup Iteration  30: 209852.713 ops/s
Iteration   1: 210130.484 ops/s
Iteration   2: 209806.513 ops/s
Iteration   3: 208334.065 ops/s
Iteration   4: 209822.343 ops/s
Iteration   5: 210665.109 ops/s
Iteration   6: 207154.861 ops/s
Iteration   7: 209053.383 ops/s
Iteration   8: 210773.347 ops/s
Iteration   9: 210138.793 ops/s
Iteration  10: 209746.276 ops/s
Iteration  11: 209812.982 ops/s
Iteration  12: 210040.388 ops/s
Iteration  13: 210917.270 ops/s
Iteration  14: 209805.204 ops/s
Iteration  15: 209365.909 ops/s
Iteration  16: 211901.765 ops/s
Iteration  17: 210699.090 ops/s
Iteration  18: 211521.884 ops/s
Iteration  19: 210722.870 ops/s
Iteration  20: 209342.577 ops/s
Iteration  21: 211035.115 ops/s
Iteration  22: 211457.621 ops/s
Iteration  23: 209983.637 ops/s
Iteration  24: 209435.927 ops/s
Iteration  25: 209565.244 ops/s
Iteration  26: 210964.840 ops/s
Iteration  27: 209991.507 ops/s
Iteration  28: 209590.105 ops/s
Iteration  29: 210003.295 ops/s
Iteration  30: 210212.980 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName":
  210066.513 ±(99.9%) 637.290 ops/s [Average]
  (min, avg, max) = (207154.861, 210066.513, 211901.765), stdev = 953.865
  CI (99.9%): [209429.223, 210703.802] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_readSpan_remoteEndpoint_noServiceName  thrpt   30  210066.513 ± 637.290  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36266.506 ops/s
# Warmup Iteration   2: 85949.339 ops/s
# Warmup Iteration   3: 122444.424 ops/s
# Warmup Iteration   4: 123967.808 ops/s
# Warmup Iteration   5: 96579.407 ops/s
# Warmup Iteration   6: 124882.591 ops/s
# Warmup Iteration   7: 124737.623 ops/s
# Warmup Iteration   8: 125485.148 ops/s
# Warmup Iteration   9: 124962.873 ops/s
# Warmup Iteration  10: 125546.662 ops/s
# Warmup Iteration  11: 126878.805 ops/s
# Warmup Iteration  12: 126676.528 ops/s
# Warmup Iteration  13: 124620.324 ops/s
# Warmup Iteration  14: 125699.421 ops/s
# Warmup Iteration  15: 126317.435 ops/s
# Warmup Iteration  16: 125786.104 ops/s
# Warmup Iteration  17: 125629.880 ops/s
# Warmup Iteration  18: 124928.778 ops/s
# Warmup Iteration  19: 126139.281 ops/s
# Warmup Iteration  20: 126251.834 ops/s
# Warmup Iteration  21: 124795.869 ops/s
# Warmup Iteration  22: 125478.380 ops/s
# Warmup Iteration  23: 126062.196 ops/s
# Warmup Iteration  24: 125802.911 ops/s
# Warmup Iteration  25: 125023.929 ops/s
# Warmup Iteration  26: 125587.369 ops/s
# Warmup Iteration  27: 125195.317 ops/s
# Warmup Iteration  28: 126037.466 ops/s
# Warmup Iteration  29: 125393.269 ops/s
# Warmup Iteration  30: 126137.119 ops/s
Iteration   1: 124005.131 ops/s
Iteration   2: 124236.882 ops/s
Iteration   3: 125112.313 ops/s
Iteration   4: 126180.836 ops/s
Iteration   5: 124468.799 ops/s
Iteration   6: 125819.665 ops/s
Iteration   7: 124767.604 ops/s
Iteration   8: 126091.496 ops/s
Iteration   9: 125710.673 ops/s
Iteration  10: 125876.496 ops/s
Iteration  11: 125227.516 ops/s
Iteration  12: 126927.656 ops/s
Iteration  13: 126003.070 ops/s
Iteration  14: 124940.379 ops/s
Iteration  15: 125318.528 ops/s
Iteration  16: 125152.240 ops/s
Iteration  17: 125548.318 ops/s
Iteration  18: 126737.023 ops/s
Iteration  19: 126289.783 ops/s
Iteration  20: 126074.425 ops/s
Iteration  21: 126180.204 ops/s
Iteration  22: 126564.491 ops/s
Iteration  23: 126214.443 ops/s
Iteration  24: 125411.386 ops/s
Iteration  25: 124609.281 ops/s
Iteration  26: 124155.404 ops/s
Iteration  27: 124825.329 ops/s
Iteration  28: 125970.810 ops/s
Iteration  29: 125621.228 ops/s
Iteration  30: 126090.454 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField":
  125537.729 ±(99.9%) 522.162 ops/s [Average]
  (min, avg, max) = (124005.131, 125537.729, 126927.656), stdev = 781.547
  CI (99.9%): [125015.567, 126059.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_readsTraceIdHighFromTraceIdField  thrpt   30  125537.729 ± 522.162  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30734.482 ops/s
# Warmup Iteration   2: 67875.799 ops/s
# Warmup Iteration   3: 100115.687 ops/s
# Warmup Iteration   4: 102124.870 ops/s
# Warmup Iteration   5: 91215.660 ops/s
# Warmup Iteration   6: 91043.262 ops/s
# Warmup Iteration   7: 103558.542 ops/s
# Warmup Iteration   8: 103176.214 ops/s
# Warmup Iteration   9: 103928.692 ops/s
# Warmup Iteration  10: 104770.547 ops/s
# Warmup Iteration  11: 104879.858 ops/s
# Warmup Iteration  12: 104948.803 ops/s
# Warmup Iteration  13: 103978.883 ops/s
# Warmup Iteration  14: 103839.678 ops/s
# Warmup Iteration  15: 104723.457 ops/s
# Warmup Iteration  16: 103570.803 ops/s
# Warmup Iteration  17: 103952.659 ops/s
# Warmup Iteration  18: 103947.290 ops/s
# Warmup Iteration  19: 104522.807 ops/s
# Warmup Iteration  20: 104020.169 ops/s
# Warmup Iteration  21: 104587.526 ops/s
# Warmup Iteration  22: 104140.543 ops/s
# Warmup Iteration  23: 103859.507 ops/s
# Warmup Iteration  24: 103630.916 ops/s
# Warmup Iteration  25: 103761.292 ops/s
# Warmup Iteration  26: 103533.697 ops/s
# Warmup Iteration  27: 103421.259 ops/s
# Warmup Iteration  28: 102199.147 ops/s
# Warmup Iteration  29: 103157.452 ops/s
# Warmup Iteration  30: 103364.596 ops/s
Iteration   1: 103771.073 ops/s
Iteration   2: 102183.960 ops/s
Iteration   3: 103529.080 ops/s
Iteration   4: 103015.027 ops/s
Iteration   5: 103938.320 ops/s
Iteration   6: 104264.699 ops/s
Iteration   7: 104165.285 ops/s
Iteration   8: 102709.576 ops/s
Iteration   9: 103946.186 ops/s
Iteration  10: 104036.189 ops/s
Iteration  11: 104722.328 ops/s
Iteration  12: 104519.347 ops/s
Iteration  13: 103993.407 ops/s
Iteration  14: 104385.158 ops/s
Iteration  15: 105050.690 ops/s
Iteration  16: 103898.852 ops/s
Iteration  17: 104233.456 ops/s
Iteration  18: 104432.789 ops/s
Iteration  19: 104179.045 ops/s
Iteration  20: 103873.565 ops/s
Iteration  21: 104584.077 ops/s
Iteration  22: 104954.208 ops/s
Iteration  23: 104633.841 ops/s
Iteration  24: 104350.032 ops/s
Iteration  25: 103682.547 ops/s
Iteration  26: 102918.218 ops/s
Iteration  27: 102651.629 ops/s
Iteration  28: 103310.514 ops/s
Iteration  29: 103682.149 ops/s
Iteration  30: 103315.017 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint":
  103897.676 ±(99.9%) 468.393 ops/s [Average]
  (min, avg, max) = (102183.960, 103897.676, 105050.690), stdev = 701.069
  CI (99.9%): [103429.283, 104366.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_skipsIncompleteEndpoint  thrpt   30  103897.676 ± 468.393  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19711.588 ops/s
# Warmup Iteration   2: 34268.085 ops/s
# Warmup Iteration   3: 49073.909 ops/s
# Warmup Iteration   4: 60735.041 ops/s
# Warmup Iteration   5: 60553.605 ops/s
# Warmup Iteration   6: 61174.923 ops/s
# Warmup Iteration   7: 60927.474 ops/s
# Warmup Iteration   8: 61329.784 ops/s
# Warmup Iteration   9: 60643.036 ops/s
# Warmup Iteration  10: 45297.132 ops/s
# Warmup Iteration  11: 61583.743 ops/s
# Warmup Iteration  12: 61665.334 ops/s
# Warmup Iteration  13: 61988.669 ops/s
# Warmup Iteration  14: 62119.704 ops/s
# Warmup Iteration  15: 61818.466 ops/s
# Warmup Iteration  16: 62072.951 ops/s
# Warmup Iteration  17: 60636.862 ops/s
# Warmup Iteration  18: 61569.439 ops/s
# Warmup Iteration  19: 61830.696 ops/s
# Warmup Iteration  20: 61200.107 ops/s
# Warmup Iteration  21: 61404.858 ops/s
# Warmup Iteration  22: 61272.455 ops/s
# Warmup Iteration  23: 61807.657 ops/s
# Warmup Iteration  24: 60793.276 ops/s
# Warmup Iteration  25: 61378.354 ops/s
# Warmup Iteration  26: 61658.507 ops/s
# Warmup Iteration  27: 61659.399 ops/s
# Warmup Iteration  28: 61421.429 ops/s
# Warmup Iteration  29: 62013.900 ops/s
# Warmup Iteration  30: 61485.697 ops/s
Iteration   1: 61526.346 ops/s
Iteration   2: 61916.248 ops/s
Iteration   3: 61776.911 ops/s
Iteration   4: 61875.711 ops/s
Iteration   5: 62114.177 ops/s
Iteration   6: 61862.196 ops/s
Iteration   7: 61989.440 ops/s
Iteration   8: 60978.676 ops/s
Iteration   9: 60840.136 ops/s
Iteration  10: 62113.966 ops/s
Iteration  11: 61301.272 ops/s
Iteration  12: 61772.142 ops/s
Iteration  13: 61601.708 ops/s
Iteration  14: 61289.961 ops/s
Iteration  15: 60483.299 ops/s
Iteration  16: 62005.921 ops/s
Iteration  17: 62081.693 ops/s
Iteration  18: 60754.086 ops/s
Iteration  19: 60450.503 ops/s
Iteration  20: 60535.206 ops/s
Iteration  21: 60544.290 ops/s
Iteration  22: 61144.195 ops/s
Iteration  23: 61848.873 ops/s
Iteration  24: 61891.459 ops/s
Iteration  25: 61883.970 ops/s
Iteration  26: 62055.620 ops/s
Iteration  27: 61868.695 ops/s
Iteration  28: 61997.058 ops/s
Iteration  29: 61851.292 ops/s
Iteration  30: 61885.491 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V1":
  61541.351 ±(99.9%) 371.852 ops/s [Average]
  (min, avg, max) = (60450.503, 61541.351, 62114.177), stdev = 556.571
  CI (99.9%): [61169.499, 61913.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_JSON_V1  thrpt   30  61541.351 ± 371.852  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41921.767 ops/s
# Warmup Iteration   2: 75686.239 ops/s
# Warmup Iteration   3: 103160.920 ops/s
# Warmup Iteration   4: 149416.484 ops/s
# Warmup Iteration   5: 147793.536 ops/s
# Warmup Iteration   6: 150315.218 ops/s
# Warmup Iteration   7: 149201.819 ops/s
# Warmup Iteration   8: 148793.651 ops/s
# Warmup Iteration   9: 148262.508 ops/s
# Warmup Iteration  10: 108058.799 ops/s
# Warmup Iteration  11: 143920.797 ops/s
# Warmup Iteration  12: 151211.991 ops/s
# Warmup Iteration  13: 152215.503 ops/s
# Warmup Iteration  14: 151282.932 ops/s
# Warmup Iteration  15: 151883.376 ops/s
# Warmup Iteration  16: 151958.361 ops/s
# Warmup Iteration  17: 151986.384 ops/s
# Warmup Iteration  18: 150011.766 ops/s
# Warmup Iteration  19: 150104.074 ops/s
# Warmup Iteration  20: 149566.317 ops/s
# Warmup Iteration  21: 150520.449 ops/s
# Warmup Iteration  22: 149238.164 ops/s
# Warmup Iteration  23: 150564.073 ops/s
# Warmup Iteration  24: 151531.843 ops/s
# Warmup Iteration  25: 149514.577 ops/s
# Warmup Iteration  26: 150704.301 ops/s
# Warmup Iteration  27: 151138.399 ops/s
# Warmup Iteration  28: 151001.400 ops/s
# Warmup Iteration  29: 149920.249 ops/s
# Warmup Iteration  30: 149796.033 ops/s
Iteration   1: 150390.947 ops/s
Iteration   2: 150823.668 ops/s
Iteration   3: 150718.138 ops/s
Iteration   4: 151325.842 ops/s
Iteration   5: 149219.422 ops/s
Iteration   6: 151260.712 ops/s
Iteration   7: 152464.935 ops/s
Iteration   8: 151645.093 ops/s
Iteration   9: 151850.385 ops/s
Iteration  10: 149233.989 ops/s
Iteration  11: 152393.142 ops/s
Iteration  12: 152386.631 ops/s
Iteration  13: 150866.892 ops/s
Iteration  14: 149224.296 ops/s
Iteration  15: 151317.261 ops/s
Iteration  16: 150367.430 ops/s
Iteration  17: 150441.999 ops/s
Iteration  18: 147986.462 ops/s
Iteration  19: 148240.289 ops/s
Iteration  20: 150706.898 ops/s
Iteration  21: 151215.162 ops/s
Iteration  22: 150310.435 ops/s
Iteration  23: 150578.087 ops/s
Iteration  24: 149700.229 ops/s
Iteration  25: 149763.011 ops/s
Iteration  26: 149519.451 ops/s
Iteration  27: 150878.863 ops/s
Iteration  28: 151698.016 ops/s
Iteration  29: 151688.299 ops/s
Iteration  30: 151838.809 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_THRIFT":
  150668.493 ±(99.9%) 778.295 ops/s [Average]
  (min, avg, max) = (147986.462, 150668.493, 152464.935), stdev = 1164.916
  CI (99.9%): [149890.198, 151446.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_64bitTraceId_THRIFT  thrpt   30  150668.493 ± 778.295  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21837.029 ops/s
# Warmup Iteration   2: 34105.116 ops/s
# Warmup Iteration   3: 46651.363 ops/s
# Warmup Iteration   4: 57470.374 ops/s
# Warmup Iteration   5: 58185.377 ops/s
# Warmup Iteration   6: 57525.341 ops/s
# Warmup Iteration   7: 57377.387 ops/s
# Warmup Iteration   8: 57974.602 ops/s
# Warmup Iteration   9: 57878.480 ops/s
# Warmup Iteration  10: 57447.643 ops/s
# Warmup Iteration  11: 41954.268 ops/s
# Warmup Iteration  12: 57863.230 ops/s
# Warmup Iteration  13: 58519.078 ops/s
# Warmup Iteration  14: 58845.101 ops/s
# Warmup Iteration  15: 58769.026 ops/s
# Warmup Iteration  16: 59360.973 ops/s
# Warmup Iteration  17: 57698.143 ops/s
# Warmup Iteration  18: 57669.102 ops/s
# Warmup Iteration  19: 57361.189 ops/s
# Warmup Iteration  20: 57566.380 ops/s
# Warmup Iteration  21: 57729.106 ops/s
# Warmup Iteration  22: 58963.691 ops/s
# Warmup Iteration  23: 59039.106 ops/s
# Warmup Iteration  24: 59119.096 ops/s
# Warmup Iteration  25: 59089.452 ops/s
# Warmup Iteration  26: 59169.271 ops/s
# Warmup Iteration  27: 58991.296 ops/s
# Warmup Iteration  28: 59066.254 ops/s
# Warmup Iteration  29: 58963.836 ops/s
# Warmup Iteration  30: 59516.045 ops/s
Iteration   1: 59694.486 ops/s
Iteration   2: 58933.642 ops/s
Iteration   3: 57459.500 ops/s
Iteration   4: 57789.869 ops/s
Iteration   5: 57721.221 ops/s
Iteration   6: 57736.044 ops/s
Iteration   7: 57800.112 ops/s
Iteration   8: 57831.218 ops/s
Iteration   9: 57704.121 ops/s
Iteration  10: 58995.148 ops/s
Iteration  11: 58729.470 ops/s
Iteration  12: 58940.930 ops/s
Iteration  13: 58872.605 ops/s
Iteration  14: 59306.434 ops/s
Iteration  15: 59035.584 ops/s
Iteration  16: 58250.191 ops/s
Iteration  17: 58014.441 ops/s
Iteration  18: 58671.858 ops/s
Iteration  19: 58939.888 ops/s
Iteration  20: 58680.657 ops/s
Iteration  21: 58903.429 ops/s
Iteration  22: 58325.379 ops/s
Iteration  23: 58901.615 ops/s
Iteration  24: 59214.061 ops/s
Iteration  25: 58352.150 ops/s
Iteration  26: 59132.866 ops/s
Iteration  27: 58753.746 ops/s
Iteration  28: 58613.840 ops/s
Iteration  29: 58959.359 ops/s
Iteration  30: 58865.274 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V1":
  58570.971 ±(99.9%) 385.243 ops/s [Average]
  (min, avg, max) = (57459.500, 58570.971, 59694.486), stdev = 576.614
  CI (99.9%): [58185.728, 58956.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_JSON_V1  thrpt   30  58570.971 ± 385.243  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49333.983 ops/s
# Warmup Iteration   2: 79368.996 ops/s
# Warmup Iteration   3: 102209.570 ops/s
# Warmup Iteration   4: 156681.301 ops/s
# Warmup Iteration   5: 158658.558 ops/s
# Warmup Iteration   6: 155043.047 ops/s
# Warmup Iteration   7: 157712.916 ops/s
# Warmup Iteration   8: 157505.675 ops/s
# Warmup Iteration   9: 157378.328 ops/s
# Warmup Iteration  10: 146978.100 ops/s
# Warmup Iteration  11: 116177.223 ops/s
# Warmup Iteration  12: 159211.218 ops/s
# Warmup Iteration  13: 158677.796 ops/s
# Warmup Iteration  14: 158354.321 ops/s
# Warmup Iteration  15: 158480.309 ops/s
# Warmup Iteration  16: 158573.564 ops/s
# Warmup Iteration  17: 158292.699 ops/s
# Warmup Iteration  18: 158632.191 ops/s
# Warmup Iteration  19: 157496.029 ops/s
# Warmup Iteration  20: 158550.737 ops/s
# Warmup Iteration  21: 157764.300 ops/s
# Warmup Iteration  22: 157752.182 ops/s
# Warmup Iteration  23: 156836.366 ops/s
# Warmup Iteration  24: 156946.892 ops/s
# Warmup Iteration  25: 158202.285 ops/s
# Warmup Iteration  26: 158345.842 ops/s
# Warmup Iteration  27: 158860.390 ops/s
# Warmup Iteration  28: 158903.220 ops/s
# Warmup Iteration  29: 159005.110 ops/s
# Warmup Iteration  30: 158466.838 ops/s
Iteration   1: 158417.584 ops/s
Iteration   2: 158756.824 ops/s
Iteration   3: 159177.167 ops/s
Iteration   4: 158709.505 ops/s
Iteration   5: 158949.389 ops/s
Iteration   6: 158297.610 ops/s
Iteration   7: 157344.234 ops/s
Iteration   8: 157840.079 ops/s
Iteration   9: 158225.928 ops/s
Iteration  10: 159230.427 ops/s
Iteration  11: 158021.291 ops/s
Iteration  12: 158529.164 ops/s
Iteration  13: 159365.253 ops/s
Iteration  14: 158581.233 ops/s
Iteration  15: 159213.054 ops/s
Iteration  16: 158932.174 ops/s
Iteration  17: 159378.159 ops/s
Iteration  18: 157827.664 ops/s
Iteration  19: 158407.391 ops/s
Iteration  20: 158060.472 ops/s
Iteration  21: 158798.204 ops/s
Iteration  22: 157964.248 ops/s
Iteration  23: 157362.098 ops/s
Iteration  24: 157468.781 ops/s
Iteration  25: 157558.959 ops/s
Iteration  26: 157834.335 ops/s
Iteration  27: 158422.301 ops/s
Iteration  28: 158307.676 ops/s
Iteration  29: 159016.548 ops/s
Iteration  30: 158055.025 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_THRIFT":
  158401.759 ±(99.9%) 403.636 ops/s [Average]
  (min, avg, max) = (157344.234, 158401.759, 159378.159), stdev = 604.143
  CI (99.9%): [157998.124, 158805.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_THRIFT  thrpt   30  158401.759 ± 403.636  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25874.799 ops/s
# Warmup Iteration   2: 42683.524 ops/s
# Warmup Iteration   3: 70005.386 ops/s
# Warmup Iteration   4: 77661.660 ops/s
# Warmup Iteration   5: 78220.841 ops/s
# Warmup Iteration   6: 77645.928 ops/s
# Warmup Iteration   7: 78801.666 ops/s
# Warmup Iteration   8: 77957.321 ops/s
# Warmup Iteration   9: 58910.321 ops/s
# Warmup Iteration  10: 78528.783 ops/s
# Warmup Iteration  11: 78706.166 ops/s
# Warmup Iteration  12: 78107.299 ops/s
# Warmup Iteration  13: 78475.048 ops/s
# Warmup Iteration  14: 78141.037 ops/s
# Warmup Iteration  15: 79107.433 ops/s
# Warmup Iteration  16: 77423.514 ops/s
# Warmup Iteration  17: 79214.842 ops/s
# Warmup Iteration  18: 78990.270 ops/s
# Warmup Iteration  19: 78827.216 ops/s
# Warmup Iteration  20: 78924.354 ops/s
# Warmup Iteration  21: 78161.974 ops/s
# Warmup Iteration  22: 78297.243 ops/s
# Warmup Iteration  23: 78581.864 ops/s
# Warmup Iteration  24: 78062.299 ops/s
# Warmup Iteration  25: 78717.400 ops/s
# Warmup Iteration  26: 78418.812 ops/s
# Warmup Iteration  27: 79398.201 ops/s
# Warmup Iteration  28: 78577.006 ops/s
# Warmup Iteration  29: 78439.689 ops/s
# Warmup Iteration  30: 78543.868 ops/s
Iteration   1: 78557.647 ops/s
Iteration   2: 79542.037 ops/s
Iteration   3: 77858.169 ops/s
Iteration   4: 79314.514 ops/s
Iteration   5: 78201.880 ops/s
Iteration   6: 78807.123 ops/s
Iteration   7: 77411.895 ops/s
Iteration   8: 78328.380 ops/s
Iteration   9: 78732.782 ops/s
Iteration  10: 79549.441 ops/s
Iteration  11: 79046.888 ops/s
Iteration  12: 77748.748 ops/s
Iteration  13: 78370.501 ops/s
Iteration  14: 78526.125 ops/s
Iteration  15: 79076.689 ops/s
Iteration  16: 78635.996 ops/s
Iteration  17: 79715.077 ops/s
Iteration  18: 77471.007 ops/s
Iteration  19: 79347.966 ops/s
Iteration  20: 79011.077 ops/s
Iteration  21: 79185.792 ops/s
Iteration  22: 79919.217 ops/s
Iteration  23: 78491.978 ops/s
Iteration  24: 79324.856 ops/s
Iteration  25: 78511.543 ops/s
Iteration  26: 78015.259 ops/s
Iteration  27: 78822.630 ops/s
Iteration  28: 78555.517 ops/s
Iteration  29: 79100.657 ops/s
Iteration  30: 79210.297 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V1":
  78746.390 ±(99.9%) 430.052 ops/s [Average]
  (min, avg, max) = (77411.895, 78746.390, 79919.217), stdev = 643.681
  CI (99.9%): [78316.338, 79176.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_JSON_V1  thrpt   30  78746.390 ± 430.052  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 67340.732 ops/s
# Warmup Iteration   2: 103898.178 ops/s
# Warmup Iteration   3: 157103.730 ops/s
# Warmup Iteration   4: 198535.825 ops/s
# Warmup Iteration   5: 196474.618 ops/s
# Warmup Iteration   6: 199099.090 ops/s
# Warmup Iteration   7: 198130.817 ops/s
# Warmup Iteration   8: 197576.339 ops/s
# Warmup Iteration   9: 200807.826 ops/s
# Warmup Iteration  10: 138317.375 ops/s
# Warmup Iteration  11: 200330.017 ops/s
# Warmup Iteration  12: 197362.038 ops/s
# Warmup Iteration  13: 198205.984 ops/s
# Warmup Iteration  14: 199656.595 ops/s
# Warmup Iteration  15: 198608.080 ops/s
# Warmup Iteration  16: 197661.292 ops/s
# Warmup Iteration  17: 196022.159 ops/s
# Warmup Iteration  18: 196700.053 ops/s
# Warmup Iteration  19: 194857.599 ops/s
# Warmup Iteration  20: 196026.081 ops/s
# Warmup Iteration  21: 196327.448 ops/s
# Warmup Iteration  22: 194574.388 ops/s
# Warmup Iteration  23: 196152.006 ops/s
# Warmup Iteration  24: 195666.344 ops/s
# Warmup Iteration  25: 196578.965 ops/s
# Warmup Iteration  26: 196764.730 ops/s
# Warmup Iteration  27: 195247.345 ops/s
# Warmup Iteration  28: 197900.045 ops/s
# Warmup Iteration  29: 198098.063 ops/s
# Warmup Iteration  30: 196376.779 ops/s
Iteration   1: 196069.796 ops/s
Iteration   2: 196011.270 ops/s
Iteration   3: 197308.752 ops/s
Iteration   4: 197446.958 ops/s
Iteration   5: 195846.996 ops/s
Iteration   6: 196647.946 ops/s
Iteration   7: 195232.826 ops/s
Iteration   8: 196511.060 ops/s
Iteration   9: 196589.026 ops/s
Iteration  10: 196910.220 ops/s
Iteration  11: 196817.361 ops/s
Iteration  12: 197575.677 ops/s
Iteration  13: 196373.914 ops/s
Iteration  14: 197983.124 ops/s
Iteration  15: 198043.430 ops/s
Iteration  16: 197888.837 ops/s
Iteration  17: 197749.117 ops/s
Iteration  18: 197660.642 ops/s
Iteration  19: 196280.994 ops/s
Iteration  20: 197935.254 ops/s
Iteration  21: 197537.425 ops/s
Iteration  22: 197383.258 ops/s
Iteration  23: 197411.531 ops/s
Iteration  24: 196080.261 ops/s
Iteration  25: 197169.130 ops/s
Iteration  26: 197534.035 ops/s
Iteration  27: 197460.787 ops/s
Iteration  28: 197394.621 ops/s
Iteration  29: 196732.066 ops/s
Iteration  30: 196396.717 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_THRIFT":
  196999.434 ±(99.9%) 491.433 ops/s [Average]
  (min, avg, max) = (195232.826, 196999.434, 198043.430), stdev = 735.554
  CI (99.9%): [196508.001, 197490.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_THRIFT  thrpt   30  196999.434 ± 491.433  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25909.182 ops/s
# Warmup Iteration   2: 43433.786 ops/s
# Warmup Iteration   3: 81699.971 ops/s
# Warmup Iteration   4: 92707.340 ops/s
# Warmup Iteration   5: 94136.306 ops/s
# Warmup Iteration   6: 94635.649 ops/s
# Warmup Iteration   7: 93843.046 ops/s
# Warmup Iteration   8: 68409.816 ops/s
# Warmup Iteration   9: 93882.476 ops/s
# Warmup Iteration  10: 93770.309 ops/s
# Warmup Iteration  11: 94411.111 ops/s
# Warmup Iteration  12: 94699.975 ops/s
# Warmup Iteration  13: 94279.614 ops/s
# Warmup Iteration  14: 94457.728 ops/s
# Warmup Iteration  15: 94771.277 ops/s
# Warmup Iteration  16: 94336.226 ops/s
# Warmup Iteration  17: 93943.467 ops/s
# Warmup Iteration  18: 93663.957 ops/s
# Warmup Iteration  19: 93855.525 ops/s
# Warmup Iteration  20: 94420.065 ops/s
# Warmup Iteration  21: 93819.875 ops/s
# Warmup Iteration  22: 93536.634 ops/s
# Warmup Iteration  23: 94382.971 ops/s
# Warmup Iteration  24: 93649.464 ops/s
# Warmup Iteration  25: 93389.316 ops/s
# Warmup Iteration  26: 93840.629 ops/s
# Warmup Iteration  27: 93685.598 ops/s
# Warmup Iteration  28: 94235.864 ops/s
# Warmup Iteration  29: 93497.171 ops/s
# Warmup Iteration  30: 94059.903 ops/s
Iteration   1: 94127.294 ops/s
Iteration   2: 93362.722 ops/s
Iteration   3: 94086.212 ops/s
Iteration   4: 94093.065 ops/s
Iteration   5: 94387.276 ops/s
Iteration   6: 94597.461 ops/s
Iteration   7: 93945.368 ops/s
Iteration   8: 94499.829 ops/s
Iteration   9: 94117.633 ops/s
Iteration  10: 94316.727 ops/s
Iteration  11: 93888.875 ops/s
Iteration  12: 94579.004 ops/s
Iteration  13: 93993.179 ops/s
Iteration  14: 93198.557 ops/s
Iteration  15: 94128.661 ops/s
Iteration  16: 92669.691 ops/s
Iteration  17: 93857.598 ops/s
Iteration  18: 92784.947 ops/s
Iteration  19: 92861.568 ops/s
Iteration  20: 93130.759 ops/s
Iteration  21: 93155.277 ops/s
Iteration  22: 93807.195 ops/s
Iteration  23: 93546.603 ops/s
Iteration  24: 93867.806 ops/s
Iteration  25: 93908.253 ops/s
Iteration  26: 94100.802 ops/s
Iteration  27: 94026.852 ops/s
Iteration  28: 94020.612 ops/s
Iteration  29: 94310.704 ops/s
Iteration  30: 94027.514 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V1":
  93846.601 ±(99.9%) 351.385 ops/s [Average]
  (min, avg, max) = (92669.691, 93846.601, 94597.461), stdev = 525.936
  CI (99.9%): [93495.217, 94197.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                   Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_JSON_V1  thrpt   30  93846.601 ± 351.385  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58422.490 ops/s
# Warmup Iteration   2: 97524.626 ops/s
# Warmup Iteration   3: 144354.005 ops/s
# Warmup Iteration   4: 198434.227 ops/s
# Warmup Iteration   5: 197059.698 ops/s
# Warmup Iteration   6: 200040.517 ops/s
# Warmup Iteration   7: 200437.961 ops/s
# Warmup Iteration   8: 197537.410 ops/s
# Warmup Iteration   9: 199888.319 ops/s
# Warmup Iteration  10: 139469.561 ops/s
# Warmup Iteration  11: 202687.876 ops/s
# Warmup Iteration  12: 200962.311 ops/s
# Warmup Iteration  13: 203081.728 ops/s
# Warmup Iteration  14: 202442.070 ops/s
# Warmup Iteration  15: 201523.210 ops/s
# Warmup Iteration  16: 200783.093 ops/s
# Warmup Iteration  17: 199879.862 ops/s
# Warmup Iteration  18: 200592.336 ops/s
# Warmup Iteration  19: 198385.006 ops/s
# Warmup Iteration  20: 200435.314 ops/s
# Warmup Iteration  21: 201278.532 ops/s
# Warmup Iteration  22: 201702.477 ops/s
# Warmup Iteration  23: 200717.770 ops/s
# Warmup Iteration  24: 200104.050 ops/s
# Warmup Iteration  25: 201139.444 ops/s
# Warmup Iteration  26: 199989.310 ops/s
# Warmup Iteration  27: 201252.482 ops/s
# Warmup Iteration  28: 201316.605 ops/s
# Warmup Iteration  29: 202909.834 ops/s
# Warmup Iteration  30: 199888.750 ops/s
Iteration   1: 199941.548 ops/s
Iteration   2: 200577.251 ops/s
Iteration   3: 198707.272 ops/s
Iteration   4: 198512.106 ops/s
Iteration   5: 198522.059 ops/s
Iteration   6: 201371.027 ops/s
Iteration   7: 200666.897 ops/s
Iteration   8: 199727.814 ops/s
Iteration   9: 200819.239 ops/s
Iteration  10: 198328.160 ops/s
Iteration  11: 200680.746 ops/s
Iteration  12: 201954.450 ops/s
Iteration  13: 201608.271 ops/s
Iteration  14: 201664.019 ops/s
Iteration  15: 200561.690 ops/s
Iteration  16: 200973.557 ops/s
Iteration  17: 201984.405 ops/s
Iteration  18: 200403.439 ops/s
Iteration  19: 200445.002 ops/s
Iteration  20: 200031.652 ops/s
Iteration  21: 201063.246 ops/s
Iteration  22: 198755.343 ops/s
Iteration  23: 199390.769 ops/s
Iteration  24: 199456.712 ops/s
Iteration  25: 201389.369 ops/s
Iteration  26: 199128.393 ops/s
Iteration  27: 197186.669 ops/s
Iteration  28: 199536.546 ops/s
Iteration  29: 199995.181 ops/s
Iteration  30: 199049.730 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_THRIFT":
  200081.085 ±(99.9%) 807.321 ops/s [Average]
  (min, avg, max) = (197186.669, 200081.085, 201984.405), stdev = 1208.360
  CI (99.9%): [199273.765, 200888.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                  Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_incomplete_THRIFT  thrpt   30  200081.085 ± 807.321  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26081.089 ops/s
# Warmup Iteration   2: 41864.259 ops/s
# Warmup Iteration   3: 75549.555 ops/s
# Warmup Iteration   4: 83564.713 ops/s
# Warmup Iteration   5: 83918.815 ops/s
# Warmup Iteration   6: 84070.195 ops/s
# Warmup Iteration   7: 85283.531 ops/s
# Warmup Iteration   8: 77098.342 ops/s
# Warmup Iteration   9: 70851.676 ops/s
# Warmup Iteration  10: 86600.503 ops/s
# Warmup Iteration  11: 86004.167 ops/s
# Warmup Iteration  12: 86820.879 ops/s
# Warmup Iteration  13: 86617.529 ops/s
# Warmup Iteration  14: 86443.328 ops/s
# Warmup Iteration  15: 86211.863 ops/s
# Warmup Iteration  16: 85957.079 ops/s
# Warmup Iteration  17: 86141.882 ops/s
# Warmup Iteration  18: 86066.158 ops/s
# Warmup Iteration  19: 86356.667 ops/s
# Warmup Iteration  20: 85970.557 ops/s
# Warmup Iteration  21: 85682.955 ops/s
# Warmup Iteration  22: 86006.076 ops/s
# Warmup Iteration  23: 86110.309 ops/s
# Warmup Iteration  24: 85507.419 ops/s
# Warmup Iteration  25: 85726.208 ops/s
# Warmup Iteration  26: 86379.083 ops/s
# Warmup Iteration  27: 86067.062 ops/s
# Warmup Iteration  28: 86296.085 ops/s
# Warmup Iteration  29: 86397.946 ops/s
# Warmup Iteration  30: 86112.350 ops/s
Iteration   1: 86122.773 ops/s
Iteration   2: 85633.398 ops/s
Iteration   3: 85597.854 ops/s
Iteration   4: 85932.802 ops/s
Iteration   5: 86255.282 ops/s
Iteration   6: 85812.998 ops/s
Iteration   7: 85375.766 ops/s
Iteration   8: 86046.731 ops/s
Iteration   9: 85620.216 ops/s
Iteration  10: 86420.003 ops/s
Iteration  11: 85953.505 ops/s
Iteration  12: 85635.933 ops/s
Iteration  13: 86095.576 ops/s
Iteration  14: 86457.976 ops/s
Iteration  15: 85279.344 ops/s
Iteration  16: 86406.409 ops/s
Iteration  17: 86243.332 ops/s
Iteration  18: 86384.277 ops/s
Iteration  19: 86541.364 ops/s
Iteration  20: 85929.171 ops/s
Iteration  21: 86174.256 ops/s
Iteration  22: 86663.535 ops/s
Iteration  23: 85835.272 ops/s
Iteration  24: 86208.033 ops/s
Iteration  25: 86125.405 ops/s
Iteration  26: 86935.973 ops/s
Iteration  27: 87049.265 ops/s
Iteration  28: 86488.643 ops/s
Iteration  29: 86069.442 ops/s
Iteration  30: 86360.402 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V1":
  86121.831 ±(99.9%) 281.095 ops/s [Average]
  (min, avg, max) = (85279.344, 86121.831, 87049.265), stdev = 420.730
  CI (99.9%): [85840.736, 86402.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_JSON_V1  thrpt   30  86121.831 ± 281.095  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60960.949 ops/s
# Warmup Iteration   2: 98303.522 ops/s
# Warmup Iteration   3: 155581.831 ops/s
# Warmup Iteration   4: 195872.286 ops/s
# Warmup Iteration   5: 195291.173 ops/s
# Warmup Iteration   6: 196517.067 ops/s
# Warmup Iteration   7: 196663.539 ops/s
# Warmup Iteration   8: 195217.127 ops/s
# Warmup Iteration   9: 160993.625 ops/s
# Warmup Iteration  10: 174517.880 ops/s
# Warmup Iteration  11: 198278.414 ops/s
# Warmup Iteration  12: 198585.855 ops/s
# Warmup Iteration  13: 199292.562 ops/s
# Warmup Iteration  14: 198805.363 ops/s
# Warmup Iteration  15: 198939.805 ops/s
# Warmup Iteration  16: 198413.596 ops/s
# Warmup Iteration  17: 197091.871 ops/s
# Warmup Iteration  18: 197926.922 ops/s
# Warmup Iteration  19: 197673.117 ops/s
# Warmup Iteration  20: 195644.302 ops/s
# Warmup Iteration  21: 197348.880 ops/s
# Warmup Iteration  22: 197124.156 ops/s
# Warmup Iteration  23: 196727.917 ops/s
# Warmup Iteration  24: 198519.396 ops/s
# Warmup Iteration  25: 196929.081 ops/s
# Warmup Iteration  26: 197674.348 ops/s
# Warmup Iteration  27: 198388.062 ops/s
# Warmup Iteration  28: 198501.166 ops/s
# Warmup Iteration  29: 198086.859 ops/s
# Warmup Iteration  30: 197273.836 ops/s
Iteration   1: 196676.061 ops/s
Iteration   2: 197776.482 ops/s
Iteration   3: 197665.327 ops/s
Iteration   4: 197752.581 ops/s
Iteration   5: 198257.301 ops/s
Iteration   6: 197725.554 ops/s
Iteration   7: 198144.430 ops/s
Iteration   8: 195929.095 ops/s
Iteration   9: 197072.539 ops/s
Iteration  10: 197428.593 ops/s
Iteration  11: 197540.939 ops/s
Iteration  12: 198418.199 ops/s
Iteration  13: 196189.837 ops/s
Iteration  14: 197095.872 ops/s
Iteration  15: 198272.498 ops/s
Iteration  16: 197336.320 ops/s
Iteration  17: 197947.466 ops/s
Iteration  18: 196488.114 ops/s
Iteration  19: 197193.043 ops/s
Iteration  20: 198039.915 ops/s
Iteration  21: 196819.107 ops/s
Iteration  22: 197492.704 ops/s
Iteration  23: 197445.791 ops/s
Iteration  24: 197166.164 ops/s
Iteration  25: 198060.679 ops/s
Iteration  26: 197558.712 ops/s
Iteration  27: 197224.438 ops/s
Iteration  28: 198152.352 ops/s
Iteration  29: 196704.034 ops/s
Iteration  30: 196925.637 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_THRIFT":
  197416.659 ±(99.9%) 423.501 ops/s [Average]
  (min, avg, max) = (195929.095, 197416.659, 198418.199), stdev = 633.876
  CI (99.9%): [196993.159, 197840.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noAnnotations_rootServerSpan_shared_THRIFT  thrpt   30  197416.659 ± 423.501  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19916.505 ops/s
# Warmup Iteration   2: 33540.015 ops/s
# Warmup Iteration   3: 46924.143 ops/s
# Warmup Iteration   4: 60588.053 ops/s
# Warmup Iteration   5: 60230.143 ops/s
# Warmup Iteration   6: 59985.212 ops/s
# Warmup Iteration   7: 60845.180 ops/s
# Warmup Iteration   8: 60052.664 ops/s
# Warmup Iteration   9: 60933.794 ops/s
# Warmup Iteration  10: 48764.120 ops/s
# Warmup Iteration  11: 57404.515 ops/s
# Warmup Iteration  12: 61166.961 ops/s
# Warmup Iteration  13: 61207.210 ops/s
# Warmup Iteration  14: 60633.463 ops/s
# Warmup Iteration  15: 61106.851 ops/s
# Warmup Iteration  16: 61095.939 ops/s
# Warmup Iteration  17: 60391.053 ops/s
# Warmup Iteration  18: 61384.534 ops/s
# Warmup Iteration  19: 61451.767 ops/s
# Warmup Iteration  20: 61299.553 ops/s
# Warmup Iteration  21: 61058.008 ops/s
# Warmup Iteration  22: 60398.906 ops/s
# Warmup Iteration  23: 61339.486 ops/s
# Warmup Iteration  24: 61584.429 ops/s
# Warmup Iteration  25: 61593.158 ops/s
# Warmup Iteration  26: 61429.326 ops/s
# Warmup Iteration  27: 61264.354 ops/s
# Warmup Iteration  28: 61732.245 ops/s
# Warmup Iteration  29: 61451.702 ops/s
# Warmup Iteration  30: 60608.601 ops/s
Iteration   1: 59803.807 ops/s
Iteration   2: 61246.866 ops/s
Iteration   3: 61546.635 ops/s
Iteration   4: 61629.778 ops/s
Iteration   5: 61048.947 ops/s
Iteration   6: 60742.006 ops/s
Iteration   7: 60976.434 ops/s
Iteration   8: 61316.826 ops/s
Iteration   9: 61485.998 ops/s
Iteration  10: 60502.087 ops/s
Iteration  11: 60428.086 ops/s
Iteration  12: 60067.837 ops/s
Iteration  13: 60817.130 ops/s
Iteration  14: 61117.872 ops/s
Iteration  15: 60854.636 ops/s
Iteration  16: 59793.036 ops/s
Iteration  17: 60552.323 ops/s
Iteration  18: 61510.696 ops/s
Iteration  19: 60865.529 ops/s
Iteration  20: 61726.234 ops/s
Iteration  21: 61431.929 ops/s
Iteration  22: 61139.757 ops/s
Iteration  23: 61762.838 ops/s
Iteration  24: 61336.867 ops/s
Iteration  25: 61168.057 ops/s
Iteration  26: 60813.101 ops/s
Iteration  27: 61181.525 ops/s
Iteration  28: 61035.332 ops/s
Iteration  29: 61223.293 ops/s
Iteration  30: 61540.705 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V1":
  61022.205 ±(99.9%) 348.611 ops/s [Average]
  (min, avg, max) = (59793.036, 61022.205, 61762.838), stdev = 521.785
  CI (99.9%): [60673.594, 61370.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_JSON_V1  thrpt   30  61022.205 ± 348.611  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44785.546 ops/s
# Warmup Iteration   2: 78853.894 ops/s
# Warmup Iteration   3: 109428.032 ops/s
# Warmup Iteration   4: 152439.249 ops/s
# Warmup Iteration   5: 154420.781 ops/s
# Warmup Iteration   6: 154375.001 ops/s
# Warmup Iteration   7: 154380.804 ops/s
# Warmup Iteration   8: 153429.330 ops/s
# Warmup Iteration   9: 153381.416 ops/s
# Warmup Iteration  10: 111392.817 ops/s
# Warmup Iteration  11: 151801.007 ops/s
# Warmup Iteration  12: 154986.676 ops/s
# Warmup Iteration  13: 155474.588 ops/s
# Warmup Iteration  14: 155477.748 ops/s
# Warmup Iteration  15: 155431.175 ops/s
# Warmup Iteration  16: 154897.552 ops/s
# Warmup Iteration  17: 155012.029 ops/s
# Warmup Iteration  18: 154963.831 ops/s
# Warmup Iteration  19: 154570.628 ops/s
# Warmup Iteration  20: 154781.840 ops/s
# Warmup Iteration  21: 154709.978 ops/s
# Warmup Iteration  22: 154542.495 ops/s
# Warmup Iteration  23: 154915.044 ops/s
# Warmup Iteration  24: 155426.612 ops/s
# Warmup Iteration  25: 155878.545 ops/s
# Warmup Iteration  26: 155492.722 ops/s
# Warmup Iteration  27: 154704.616 ops/s
# Warmup Iteration  28: 153636.514 ops/s
# Warmup Iteration  29: 154878.756 ops/s
# Warmup Iteration  30: 153997.608 ops/s
Iteration   1: 154570.698 ops/s
Iteration   2: 155224.253 ops/s
Iteration   3: 154831.579 ops/s
Iteration   4: 154932.841 ops/s
Iteration   5: 155214.404 ops/s
Iteration   6: 155275.459 ops/s
Iteration   7: 155086.946 ops/s
Iteration   8: 154758.308 ops/s
Iteration   9: 154876.761 ops/s
Iteration  10: 155751.959 ops/s
Iteration  11: 154084.138 ops/s
Iteration  12: 155506.327 ops/s
Iteration  13: 154372.860 ops/s
Iteration  14: 153076.545 ops/s
Iteration  15: 154715.910 ops/s
Iteration  16: 155229.744 ops/s
Iteration  17: 154607.339 ops/s
Iteration  18: 154070.099 ops/s
Iteration  19: 154479.637 ops/s
Iteration  20: 153731.421 ops/s
Iteration  21: 154213.834 ops/s
Iteration  22: 154714.178 ops/s
Iteration  23: 155159.635 ops/s
Iteration  24: 155490.767 ops/s
Iteration  25: 154316.994 ops/s
Iteration  26: 154561.658 ops/s
Iteration  27: 155428.586 ops/s
Iteration  28: 154495.328 ops/s
Iteration  29: 154094.076 ops/s
Iteration  30: 154160.923 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_THRIFT":
  154701.107 ±(99.9%) 395.539 ops/s [Average]
  (min, avg, max) = (153076.545, 154701.107, 155751.959), stdev = 592.024
  CI (99.9%): [154305.568, 155096.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_noRemoteServiceName_THRIFT  thrpt   30  154701.107 ± 395.539  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19642.767 ops/s
# Warmup Iteration   2: 33520.184 ops/s
# Warmup Iteration   3: 48517.721 ops/s
# Warmup Iteration   4: 60830.451 ops/s
# Warmup Iteration   5: 61747.919 ops/s
# Warmup Iteration   6: 63150.160 ops/s
# Warmup Iteration   7: 63020.777 ops/s
# Warmup Iteration   8: 62915.290 ops/s
# Warmup Iteration   9: 63460.433 ops/s
# Warmup Iteration  10: 46417.439 ops/s
# Warmup Iteration  11: 63254.586 ops/s
# Warmup Iteration  12: 63332.452 ops/s
# Warmup Iteration  13: 63412.256 ops/s
# Warmup Iteration  14: 63186.388 ops/s
# Warmup Iteration  15: 62938.992 ops/s
# Warmup Iteration  16: 62874.038 ops/s
# Warmup Iteration  17: 63119.975 ops/s
# Warmup Iteration  18: 63728.125 ops/s
# Warmup Iteration  19: 63156.952 ops/s
# Warmup Iteration  20: 62995.045 ops/s
# Warmup Iteration  21: 63055.594 ops/s
# Warmup Iteration  22: 63182.721 ops/s
# Warmup Iteration  23: 63553.809 ops/s
# Warmup Iteration  24: 64032.619 ops/s
# Warmup Iteration  25: 63909.548 ops/s
# Warmup Iteration  26: 63244.652 ops/s
# Warmup Iteration  27: 62969.518 ops/s
# Warmup Iteration  28: 63219.867 ops/s
# Warmup Iteration  29: 63884.452 ops/s
# Warmup Iteration  30: 63184.931 ops/s
Iteration   1: 63357.756 ops/s
Iteration   2: 62805.755 ops/s
Iteration   3: 63511.694 ops/s
Iteration   4: 63499.084 ops/s
Iteration   5: 63040.485 ops/s
Iteration   6: 63138.094 ops/s
Iteration   7: 62979.348 ops/s
Iteration   8: 63006.095 ops/s
Iteration   9: 63868.198 ops/s
Iteration  10: 63861.033 ops/s
Iteration  11: 63458.134 ops/s
Iteration  12: 63358.925 ops/s
Iteration  13: 63162.877 ops/s
Iteration  14: 61730.219 ops/s
Iteration  15: 62007.538 ops/s
Iteration  16: 63006.913 ops/s
Iteration  17: 62692.270 ops/s
Iteration  18: 63128.167 ops/s
Iteration  19: 62943.930 ops/s
Iteration  20: 63384.496 ops/s
Iteration  21: 63823.365 ops/s
Iteration  22: 63937.295 ops/s
Iteration  23: 63123.555 ops/s
Iteration  24: 63040.867 ops/s
Iteration  25: 63252.975 ops/s
Iteration  26: 63155.911 ops/s
Iteration  27: 63531.204 ops/s
Iteration  28: 63323.773 ops/s
Iteration  29: 62807.497 ops/s
Iteration  30: 63324.943 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V1":
  63175.413 ±(99.9%) 320.798 ops/s [Average]
  (min, avg, max) = (61730.219, 63175.413, 63937.295), stdev = 480.155
  CI (99.9%): [62854.615, 63496.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_JSON_V1  thrpt   30  63175.413 ± 320.798  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44528.009 ops/s
# Warmup Iteration   2: 77661.250 ops/s
# Warmup Iteration   3: 104171.460 ops/s
# Warmup Iteration   4: 149905.873 ops/s
# Warmup Iteration   5: 149031.491 ops/s
# Warmup Iteration   6: 151733.759 ops/s
# Warmup Iteration   7: 151248.707 ops/s
# Warmup Iteration   8: 151615.288 ops/s
# Warmup Iteration   9: 151007.878 ops/s
# Warmup Iteration  10: 128985.054 ops/s
# Warmup Iteration  11: 129742.175 ops/s
# Warmup Iteration  12: 152772.353 ops/s
# Warmup Iteration  13: 152200.088 ops/s
# Warmup Iteration  14: 152251.964 ops/s
# Warmup Iteration  15: 151692.504 ops/s
# Warmup Iteration  16: 152350.297 ops/s
# Warmup Iteration  17: 148738.674 ops/s
# Warmup Iteration  18: 149152.085 ops/s
# Warmup Iteration  19: 149946.369 ops/s
# Warmup Iteration  20: 149377.367 ops/s
# Warmup Iteration  21: 149101.610 ops/s
# Warmup Iteration  22: 149660.349 ops/s
# Warmup Iteration  23: 149971.437 ops/s
# Warmup Iteration  24: 149802.680 ops/s
# Warmup Iteration  25: 149968.750 ops/s
# Warmup Iteration  26: 149660.188 ops/s
# Warmup Iteration  27: 148509.602 ops/s
# Warmup Iteration  28: 149687.763 ops/s
# Warmup Iteration  29: 149729.816 ops/s
# Warmup Iteration  30: 149519.641 ops/s
Iteration   1: 149486.000 ops/s
Iteration   2: 148428.562 ops/s
Iteration   3: 149759.119 ops/s
Iteration   4: 149906.920 ops/s
Iteration   5: 150514.597 ops/s
Iteration   6: 150154.143 ops/s
Iteration   7: 149801.966 ops/s
Iteration   8: 149774.389 ops/s
Iteration   9: 150306.425 ops/s
Iteration  10: 150111.574 ops/s
Iteration  11: 149059.252 ops/s
Iteration  12: 149742.486 ops/s
Iteration  13: 149642.496 ops/s
Iteration  14: 148595.630 ops/s
Iteration  15: 148712.086 ops/s
Iteration  16: 149571.420 ops/s
Iteration  17: 147314.603 ops/s
Iteration  18: 149615.837 ops/s
Iteration  19: 149932.194 ops/s
Iteration  20: 150540.823 ops/s
Iteration  21: 149960.435 ops/s
Iteration  22: 149353.841 ops/s
Iteration  23: 149001.164 ops/s
Iteration  24: 149422.587 ops/s
Iteration  25: 149287.186 ops/s
Iteration  26: 149364.842 ops/s
Iteration  27: 150349.417 ops/s
Iteration  28: 149524.551 ops/s
Iteration  29: 149301.088 ops/s
Iteration  30: 148877.768 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_THRIFT":
  149513.780 ±(99.9%) 455.855 ops/s [Average]
  (min, avg, max) = (147314.603, 149513.780, 150540.823), stdev = 682.303
  CI (99.9%): [149057.925, 149969.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spanRoundTrip_shared_THRIFT  thrpt   30  149513.780 ± 455.855  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4230.494 ops/s
# Warmup Iteration   2: 5710.874 ops/s
# Warmup Iteration   3: 5708.365 ops/s
# Warmup Iteration   4: 8157.760 ops/s
# Warmup Iteration   5: 8694.712 ops/s
# Warmup Iteration   6: 8582.956 ops/s
# Warmup Iteration   7: 8512.282 ops/s
# Warmup Iteration   8: 8680.134 ops/s
# Warmup Iteration   9: 8643.378 ops/s
# Warmup Iteration  10: 8803.811 ops/s
# Warmup Iteration  11: 8702.870 ops/s
# Warmup Iteration  12: 8696.225 ops/s
# Warmup Iteration  13: 8703.721 ops/s
# Warmup Iteration  14: 8733.476 ops/s
# Warmup Iteration  15: 8099.004 ops/s
# Warmup Iteration  16: 6674.307 ops/s
# Warmup Iteration  17: 8706.308 ops/s
# Warmup Iteration  18: 8808.014 ops/s
# Warmup Iteration  19: 8746.566 ops/s
# Warmup Iteration  20: 8744.689 ops/s
# Warmup Iteration  21: 8706.498 ops/s
# Warmup Iteration  22: 8767.253 ops/s
# Warmup Iteration  23: 8751.324 ops/s
# Warmup Iteration  24: 8750.770 ops/s
# Warmup Iteration  25: 8789.990 ops/s
# Warmup Iteration  26: 8766.416 ops/s
# Warmup Iteration  27: 8783.234 ops/s
# Warmup Iteration  28: 8739.917 ops/s
# Warmup Iteration  29: 8730.064 ops/s
# Warmup Iteration  30: 8669.025 ops/s
Iteration   1: 8697.126 ops/s
Iteration   2: 8799.099 ops/s
Iteration   3: 8808.550 ops/s
Iteration   4: 8757.244 ops/s
Iteration   5: 8794.583 ops/s
Iteration   6: 8691.061 ops/s
Iteration   7: 8683.931 ops/s
Iteration   8: 8776.305 ops/s
Iteration   9: 8758.800 ops/s
Iteration  10: 8750.976 ops/s
Iteration  11: 8759.654 ops/s
Iteration  12: 8786.473 ops/s
Iteration  13: 8791.911 ops/s
Iteration  14: 8784.461 ops/s
Iteration  15: 8798.685 ops/s
Iteration  16: 8767.603 ops/s
Iteration  17: 8775.850 ops/s
Iteration  18: 8730.673 ops/s
Iteration  19: 8773.380 ops/s
Iteration  20: 8759.107 ops/s
Iteration  21: 8789.984 ops/s
Iteration  22: 8763.326 ops/s
Iteration  23: 8760.138 ops/s
Iteration  24: 8795.813 ops/s
Iteration  25: 8770.748 ops/s
Iteration  26: 8820.385 ops/s
Iteration  27: 8742.389 ops/s
Iteration  28: 8756.408 ops/s
Iteration  29: 8828.876 ops/s
Iteration  30: 8778.557 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V1":
  8768.403 ±(99.9%) 22.991 ops/s [Average]
  (min, avg, max) = (8683.931, 8768.403, 8828.876), stdev = 34.412
  CI (99.9%): [8745.412, 8791.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt     Score    Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_JSON_V1  thrpt   30  8768.403 ± 22.991  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8097.288 ops/s
# Warmup Iteration   2: 11343.503 ops/s
# Warmup Iteration   3: 14485.001 ops/s
# Warmup Iteration   4: 19065.035 ops/s
# Warmup Iteration   5: 19495.098 ops/s
# Warmup Iteration   6: 19150.957 ops/s
# Warmup Iteration   7: 19305.711 ops/s
# Warmup Iteration   8: 19296.896 ops/s
# Warmup Iteration   9: 19298.549 ops/s
# Warmup Iteration  10: 19031.510 ops/s
# Warmup Iteration  11: 17702.430 ops/s
# Warmup Iteration  12: 15258.757 ops/s
# Warmup Iteration  13: 19436.508 ops/s
# Warmup Iteration  14: 19343.247 ops/s
# Warmup Iteration  15: 19406.584 ops/s
# Warmup Iteration  16: 19391.784 ops/s
# Warmup Iteration  17: 19593.511 ops/s
# Warmup Iteration  18: 19482.109 ops/s
# Warmup Iteration  19: 19415.784 ops/s
# Warmup Iteration  20: 19493.268 ops/s
# Warmup Iteration  21: 19462.792 ops/s
# Warmup Iteration  22: 19515.728 ops/s
# Warmup Iteration  23: 19560.729 ops/s
# Warmup Iteration  24: 19548.228 ops/s
# Warmup Iteration  25: 19656.224 ops/s
# Warmup Iteration  26: 19500.770 ops/s
# Warmup Iteration  27: 19645.101 ops/s
# Warmup Iteration  28: 19515.601 ops/s
# Warmup Iteration  29: 19580.971 ops/s
# Warmup Iteration  30: 19524.928 ops/s
Iteration   1: 19594.393 ops/s
Iteration   2: 19633.972 ops/s
Iteration   3: 19543.749 ops/s
Iteration   4: 19564.903 ops/s
Iteration   5: 19626.531 ops/s
Iteration   6: 19461.138 ops/s
Iteration   7: 19331.730 ops/s
Iteration   8: 19435.879 ops/s
Iteration   9: 19426.004 ops/s
Iteration  10: 19539.338 ops/s
Iteration  11: 19383.715 ops/s
Iteration  12: 19413.590 ops/s
Iteration  13: 19400.301 ops/s
Iteration  14: 19444.421 ops/s
Iteration  15: 19585.250 ops/s
Iteration  16: 19560.904 ops/s
Iteration  17: 19576.887 ops/s
Iteration  18: 19571.633 ops/s
Iteration  19: 19366.797 ops/s
Iteration  20: 19380.254 ops/s
Iteration  21: 19371.462 ops/s
Iteration  22: 19618.994 ops/s
Iteration  23: 19293.896 ops/s
Iteration  24: 19571.822 ops/s
Iteration  25: 19519.871 ops/s
Iteration  26: 19500.491 ops/s
Iteration  27: 19604.026 ops/s
Iteration  28: 19512.275 ops/s
Iteration  29: 19626.877 ops/s
Iteration  30: 19452.330 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_THRIFT":
  19497.114 ±(99.9%) 66.335 ops/s [Average]
  (min, avg, max) = (19293.896, 19497.114, 19633.972), stdev = 99.287
  CI (99.9%): [19430.779, 19563.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score    Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_spansRoundTrip_THRIFT  thrpt   30  19497.114 ± 66.335  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38760.467 ops/s
# Warmup Iteration   2: 66045.352 ops/s
# Warmup Iteration   3: 124570.175 ops/s
# Warmup Iteration   4: 123204.150 ops/s
# Warmup Iteration   5: 125553.539 ops/s
# Warmup Iteration   6: 124875.921 ops/s
# Warmup Iteration   7: 94459.120 ops/s
# Warmup Iteration   8: 126797.001 ops/s
# Warmup Iteration   9: 126290.586 ops/s
# Warmup Iteration  10: 125389.038 ops/s
# Warmup Iteration  11: 125460.169 ops/s
# Warmup Iteration  12: 126247.361 ops/s
# Warmup Iteration  13: 126124.512 ops/s
# Warmup Iteration  14: 126029.687 ops/s
# Warmup Iteration  15: 125598.667 ops/s
# Warmup Iteration  16: 126767.461 ops/s
# Warmup Iteration  17: 126316.139 ops/s
# Warmup Iteration  18: 126320.525 ops/s
# Warmup Iteration  19: 126495.032 ops/s
# Warmup Iteration  20: 126456.782 ops/s
# Warmup Iteration  21: 125755.665 ops/s
# Warmup Iteration  22: 125832.071 ops/s
# Warmup Iteration  23: 125084.824 ops/s
# Warmup Iteration  24: 125411.945 ops/s
# Warmup Iteration  25: 125731.489 ops/s
# Warmup Iteration  26: 124415.026 ops/s
# Warmup Iteration  27: 125900.974 ops/s
# Warmup Iteration  28: 125763.189 ops/s
# Warmup Iteration  29: 125902.872 ops/s
# Warmup Iteration  30: 126293.943 ops/s
Iteration   1: 125628.832 ops/s
Iteration   2: 125647.119 ops/s
Iteration   3: 126270.275 ops/s
Iteration   4: 125976.229 ops/s
Iteration   5: 126355.208 ops/s
Iteration   6: 125389.403 ops/s
Iteration   7: 125682.765 ops/s
Iteration   8: 125233.237 ops/s
Iteration   9: 126215.576 ops/s
Iteration  10: 126540.397 ops/s
Iteration  11: 126546.495 ops/s
Iteration  12: 125979.727 ops/s
Iteration  13: 126198.373 ops/s
Iteration  14: 127001.534 ops/s
Iteration  15: 127108.242 ops/s
Iteration  16: 126586.988 ops/s
Iteration  17: 126241.283 ops/s
Iteration  18: 125450.948 ops/s
Iteration  19: 124574.097 ops/s
Iteration  20: 124338.348 ops/s
Iteration  21: 126435.898 ops/s
Iteration  22: 125985.019 ops/s
Iteration  23: 126040.417 ops/s
Iteration  24: 126798.773 ops/s
Iteration  25: 126285.251 ops/s
Iteration  26: 125684.329 ops/s
Iteration  27: 125371.342 ops/s
Iteration  28: 126662.648 ops/s
Iteration  29: 126032.730 ops/s
Iteration  30: 125498.962 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1":
  125992.015 ±(99.9%) 430.234 ops/s [Average]
  (min, avg, max) = (124338.348, 125992.015, 127108.242), stdev = 643.954
  CI (99.9%): [125561.781, 126422.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_JSON_V1  thrpt   30  125992.015 ± 430.234  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 96546.653 ops/s
# Warmup Iteration   2: 155361.501 ops/s
# Warmup Iteration   3: 231518.071 ops/s
# Warmup Iteration   4: 289795.847 ops/s
# Warmup Iteration   5: 288096.067 ops/s
# Warmup Iteration   6: 290835.771 ops/s
# Warmup Iteration   7: 291210.683 ops/s
# Warmup Iteration   8: 289992.453 ops/s
# Warmup Iteration   9: 292305.665 ops/s
# Warmup Iteration  10: 206265.368 ops/s
# Warmup Iteration  11: 293902.496 ops/s
# Warmup Iteration  12: 293356.081 ops/s
# Warmup Iteration  13: 293382.352 ops/s
# Warmup Iteration  14: 293749.647 ops/s
# Warmup Iteration  15: 292697.206 ops/s
# Warmup Iteration  16: 293962.656 ops/s
# Warmup Iteration  17: 293799.843 ops/s
# Warmup Iteration  18: 293148.711 ops/s
# Warmup Iteration  19: 292370.924 ops/s
# Warmup Iteration  20: 293168.106 ops/s
# Warmup Iteration  21: 293541.972 ops/s
# Warmup Iteration  22: 293741.297 ops/s
# Warmup Iteration  23: 293041.986 ops/s
# Warmup Iteration  24: 293710.870 ops/s
# Warmup Iteration  25: 293665.653 ops/s
# Warmup Iteration  26: 293804.778 ops/s
# Warmup Iteration  27: 293589.945 ops/s
# Warmup Iteration  28: 293749.802 ops/s
# Warmup Iteration  29: 293951.316 ops/s
# Warmup Iteration  30: 294053.635 ops/s
Iteration   1: 293164.112 ops/s
Iteration   2: 293852.311 ops/s
Iteration   3: 293317.334 ops/s
Iteration   4: 293616.718 ops/s
Iteration   5: 293945.683 ops/s
Iteration   6: 293791.220 ops/s
Iteration   7: 293853.691 ops/s
Iteration   8: 293221.815 ops/s
Iteration   9: 293955.923 ops/s
Iteration  10: 292833.128 ops/s
Iteration  11: 291464.992 ops/s
Iteration  12: 290770.848 ops/s
Iteration  13: 292649.138 ops/s
Iteration  14: 293660.716 ops/s
Iteration  15: 294062.773 ops/s
Iteration  16: 294242.403 ops/s
Iteration  17: 293760.865 ops/s
Iteration  18: 288877.147 ops/s
Iteration  19: 293461.710 ops/s
Iteration  20: 293022.513 ops/s
Iteration  21: 292121.675 ops/s
Iteration  22: 293949.653 ops/s
Iteration  23: 294015.723 ops/s
Iteration  24: 292192.823 ops/s
Iteration  25: 294456.672 ops/s
Iteration  26: 294303.068 ops/s
Iteration  27: 294628.674 ops/s
Iteration  28: 294227.638 ops/s
Iteration  29: 293665.501 ops/s
Iteration  30: 291674.713 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT":
  293225.373 ±(99.9%) 830.725 ops/s [Average]
  (min, avg, max) = (288877.147, 293225.373, 294628.674), stdev = 1243.390
  CI (99.9%): [292394.648, 294056.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_specialCharsInJson_THRIFT  thrpt   30  293225.373 ± 830.725  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V1$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10193.391 ops/s
# Warmup Iteration   2: 16810.981 ops/s
# Warmup Iteration   3: 16606.466 ops/s
# Warmup Iteration   4: 25610.666 ops/s
# Warmup Iteration   5: 25809.415 ops/s
# Warmup Iteration   6: 26496.796 ops/s
# Warmup Iteration   7: 25662.218 ops/s
# Warmup Iteration   8: 26608.953 ops/s
# Warmup Iteration   9: 26372.641 ops/s
# Warmup Iteration  10: 26274.663 ops/s
# Warmup Iteration  11: 26427.003 ops/s
# Warmup Iteration  12: 26092.403 ops/s
# Warmup Iteration  13: 26253.772 ops/s
# Warmup Iteration  14: 20919.066 ops/s
# Warmup Iteration  15: 24209.048 ops/s
# Warmup Iteration  16: 26531.170 ops/s
# Warmup Iteration  17: 26351.659 ops/s
# Warmup Iteration  18: 26453.266 ops/s
# Warmup Iteration  19: 26195.933 ops/s
# Warmup Iteration  20: 26341.396 ops/s
# Warmup Iteration  21: 26557.227 ops/s
# Warmup Iteration  22: 26414.434 ops/s
# Warmup Iteration  23: 26339.053 ops/s
# Warmup Iteration  24: 26135.376 ops/s
# Warmup Iteration  25: 26406.184 ops/s
# Warmup Iteration  26: 26360.064 ops/s
# Warmup Iteration  27: 26382.454 ops/s
# Warmup Iteration  28: 26324.084 ops/s
# Warmup Iteration  29: 26374.643 ops/s
# Warmup Iteration  30: 26494.308 ops/s
Iteration   1: 26199.012 ops/s
Iteration   2: 26554.947 ops/s
Iteration   3: 26505.984 ops/s
Iteration   4: 26145.103 ops/s
Iteration   5: 26199.568 ops/s
Iteration   6: 26291.008 ops/s
Iteration   7: 26580.383 ops/s
Iteration   8: 26575.744 ops/s
Iteration   9: 26533.525 ops/s
Iteration  10: 26709.682 ops/s
Iteration  11: 26748.226 ops/s
Iteration  12: 26529.522 ops/s
Iteration  13: 26388.523 ops/s
Iteration  14: 26439.297 ops/s
Iteration  15: 26410.367 ops/s
Iteration  16: 26712.558 ops/s
Iteration  17: 26214.851 ops/s
Iteration  18: 26221.611 ops/s
Iteration  19: 26585.880 ops/s
Iteration  20: 26618.788 ops/s
Iteration  21: 26502.185 ops/s
Iteration  22: 26516.554 ops/s
Iteration  23: 26495.210 ops/s
Iteration  24: 26463.835 ops/s
Iteration  25: 26544.435 ops/s
Iteration  26: 26611.124 ops/s
Iteration  27: 26413.692 ops/s
Iteration  28: 26480.137 ops/s
Iteration  29: 26526.465 ops/s
Iteration  30: 26619.441 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V1":
  26477.922 ±(99.9%) 107.233 ops/s [Average]
  (min, avg, max) = (26145.103, 26477.922, 26748.226), stdev = 160.501
  CI (99.9%): [26370.689, 26585.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_JSON_V1  thrpt   30  26477.922 ± 107.233  ops/s
----------------------------------------
=== Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_THRIFT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_THRIFT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24116.870 ops/s
# Warmup Iteration   2: 38509.300 ops/s
# Warmup Iteration   3: 48692.226 ops/s
# Warmup Iteration   4: 69348.453 ops/s
# Warmup Iteration   5: 71095.047 ops/s
# Warmup Iteration   6: 69945.665 ops/s
# Warmup Iteration   7: 70337.141 ops/s
# Warmup Iteration   8: 70366.125 ops/s
# Warmup Iteration   9: 69560.785 ops/s
# Warmup Iteration  10: 71374.302 ops/s
# Warmup Iteration  11: 49508.081 ops/s
# Warmup Iteration  12: 71620.144 ops/s
# Warmup Iteration  13: 70943.900 ops/s
# Warmup Iteration  14: 71202.043 ops/s
# Warmup Iteration  15: 70579.728 ops/s
# Warmup Iteration  16: 70946.074 ops/s
# Warmup Iteration  17: 70671.056 ops/s
# Warmup Iteration  18: 70333.917 ops/s
# Warmup Iteration  19: 70942.462 ops/s
# Warmup Iteration  20: 70454.274 ops/s
# Warmup Iteration  21: 70710.559 ops/s
# Warmup Iteration  22: 70574.519 ops/s
# Warmup Iteration  23: 70641.371 ops/s
# Warmup Iteration  24: 70737.788 ops/s
# Warmup Iteration  25: 70236.851 ops/s
# Warmup Iteration  26: 70801.860 ops/s
# Warmup Iteration  27: 70868.377 ops/s
# Warmup Iteration  28: 70280.070 ops/s
# Warmup Iteration  29: 70704.630 ops/s
# Warmup Iteration  30: 70670.658 ops/s
Iteration   1: 70566.026 ops/s
Iteration   2: 70305.275 ops/s
Iteration   3: 70190.401 ops/s
Iteration   4: 70811.666 ops/s
Iteration   5: 70214.222 ops/s
Iteration   6: 69764.351 ops/s
Iteration   7: 70107.686 ops/s
Iteration   8: 69942.476 ops/s
Iteration   9: 70430.869 ops/s
Iteration  10: 70885.202 ops/s
Iteration  11: 70425.028 ops/s
Iteration  12: 70921.209 ops/s
Iteration  13: 70832.055 ops/s
Iteration  14: 70587.193 ops/s
Iteration  15: 70726.345 ops/s
Iteration  16: 71189.207 ops/s
Iteration  17: 70321.370 ops/s
Iteration  18: 70605.584 ops/s
Iteration  19: 70429.095 ops/s
Iteration  20: 70703.290 ops/s
Iteration  21: 70455.644 ops/s
Iteration  22: 70261.622 ops/s
Iteration  23: 70703.427 ops/s
Iteration  24: 70648.973 ops/s
Iteration  25: 70640.198 ops/s
Iteration  26: 70821.999 ops/s
Iteration  27: 70905.206 ops/s
Iteration  28: 70380.665 ops/s
Iteration  29: 70515.758 ops/s
Iteration  30: 70869.800 ops/s


Result "zipkin2.codec.V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_THRIFT":
  70538.728 ±(99.9%) 211.593 ops/s [Average]
  (min, avg, max) = (69764.351, 70538.728, 71189.207), stdev = 316.702
  CI (99.9%): [70327.135, 70750.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
V1SpanBytesDecoderTest._Benchmark.benchmark_traceRoundTrip_THRIFT  thrpt   30  70538.728 ± 211.593  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2314.191 ops/s
# Warmup Iteration   2: 4008.410 ops/s
# Warmup Iteration   3: 4777.087 ops/s
# Warmup Iteration   4: 5119.627 ops/s
# Warmup Iteration   5: 5094.887 ops/s
# Warmup Iteration   6: 5216.748 ops/s
# Warmup Iteration   7: 6425.248 ops/s
# Warmup Iteration   8: 6254.632 ops/s
# Warmup Iteration   9: 6179.560 ops/s
# Warmup Iteration  10: 6266.314 ops/s
# Warmup Iteration  11: 6382.627 ops/s
# Warmup Iteration  12: 6382.347 ops/s
# Warmup Iteration  13: 6417.992 ops/s
# Warmup Iteration  14: 6308.944 ops/s
# Warmup Iteration  15: 6324.675 ops/s
# Warmup Iteration  16: 6332.694 ops/s
# Warmup Iteration  17: 6487.480 ops/s
# Warmup Iteration  18: 6453.758 ops/s
# Warmup Iteration  19: 6359.263 ops/s
# Warmup Iteration  20: 6380.112 ops/s
# Warmup Iteration  21: 6394.356 ops/s
# Warmup Iteration  22: 6354.640 ops/s
# Warmup Iteration  23: 6452.495 ops/s
# Warmup Iteration  24: 6441.644 ops/s
# Warmup Iteration  25: 6412.543 ops/s
# Warmup Iteration  26: 6432.319 ops/s
# Warmup Iteration  27: 6446.930 ops/s
# Warmup Iteration  28: 6440.985 ops/s
# Warmup Iteration  29: 6435.315 ops/s
# Warmup Iteration  30: 6357.266 ops/s
Iteration   1: 5032.821 ops/s
Iteration   2: 5034.906 ops/s
Iteration   3: 5030.796 ops/s
Iteration   4: 6005.673 ops/s
Iteration   5: 6380.777 ops/s
Iteration   6: 6433.835 ops/s
Iteration   7: 6362.144 ops/s
Iteration   8: 6438.878 ops/s
Iteration   9: 6424.283 ops/s
Iteration  10: 6411.290 ops/s
Iteration  11: 6458.334 ops/s
Iteration  12: 6447.977 ops/s
Iteration  13: 6377.872 ops/s
Iteration  14: 6414.548 ops/s
Iteration  15: 6264.933 ops/s
Iteration  16: 6417.961 ops/s
Iteration  17: 6452.455 ops/s
Iteration  18: 6389.702 ops/s
Iteration  19: 6323.969 ops/s
Iteration  20: 6267.647 ops/s
Iteration  21: 6285.817 ops/s
Iteration  22: 6288.071 ops/s
Iteration  23: 6324.063 ops/s
Iteration  24: 6378.593 ops/s
Iteration  25: 6437.119 ops/s
Iteration  26: 6411.512 ops/s
Iteration  27: 6408.916 ops/s
Iteration  28: 6390.164 ops/s
Iteration  29: 6309.624 ops/s
Iteration  30: 6364.527 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue":
  6232.307 ±(99.9%) 277.930 ops/s [Average]
  (min, avg, max) = (5030.796, 6232.307, 6458.334), stdev = 415.993
  CI (99.9%): [5954.377, 6510.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt     Score     Error  Units
AggregateCallTest._Benchmark.benchmark_enqueue  thrpt   30  6232.307 ± 277.930  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_blocksOnCompletion$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_blocksOnCompletion

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 270.416 ops/s
# Warmup Iteration   2: 447.797 ops/s
# Warmup Iteration   3: 517.636 ops/s
# Warmup Iteration   4: 552.539 ops/s
# Warmup Iteration   5: 560.317 ops/s
# Warmup Iteration   6: 561.937 ops/s
# Warmup Iteration   7: 569.829 ops/s
# Warmup Iteration   8: 579.829 ops/s
# Warmup Iteration   9: 578.110 ops/s
# Warmup Iteration  10: 580.707 ops/s
# Warmup Iteration  11: 585.850 ops/s
# Warmup Iteration  12: 585.410 ops/s
# Warmup Iteration  13: 594.613 ops/s
# Warmup Iteration  14: 596.038 ops/s
# Warmup Iteration  15: 572.648 ops/s
# Warmup Iteration  16: 565.084 ops/s
# Warmup Iteration  17: 572.936 ops/s
# Warmup Iteration  18: 575.529 ops/s
# Warmup Iteration  19: 568.774 ops/s
# Warmup Iteration  20: 574.213 ops/s
# Warmup Iteration  21: 575.338 ops/s
# Warmup Iteration  22: 568.301 ops/s
# Warmup Iteration  23: 581.562 ops/s
# Warmup Iteration  24: 584.272 ops/s
# Warmup Iteration  25: 590.352 ops/s
# Warmup Iteration  26: 584.235 ops/s
# Warmup Iteration  27: 590.642 ops/s
# Warmup Iteration  28: 592.257 ops/s
# Warmup Iteration  29: 590.998 ops/s
# Warmup Iteration  30: 595.857 ops/s
Iteration   1: 582.384 ops/s
Iteration   2: 584.372 ops/s
Iteration   3: 552.848 ops/s
Iteration   4: 580.118 ops/s
Iteration   5: 590.065 ops/s
Iteration   6: 592.922 ops/s
Iteration   7: 590.318 ops/s
Iteration   8: 590.088 ops/s
Iteration   9: 588.296 ops/s
Iteration  10: 592.415 ops/s
Iteration  11: 580.818 ops/s
Iteration  12: 580.465 ops/s
Iteration  13: 587.739 ops/s
Iteration  14: 594.514 ops/s
Iteration  15: 584.931 ops/s
Iteration  16: 592.642 ops/s
Iteration  17: 589.807 ops/s
Iteration  18: 597.274 ops/s
Iteration  19: 585.864 ops/s
Iteration  20: 591.179 ops/s
Iteration  21: 576.196 ops/s
Iteration  22: 578.619 ops/s
Iteration  23: 586.293 ops/s
Iteration  24: 593.671 ops/s
Iteration  25: 594.546 ops/s
Iteration  26: 588.510 ops/s
Iteration  27: 588.612 ops/s
Iteration  28: 596.448 ops/s
Iteration  29: 586.862 ops/s
Iteration  30: 582.466 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_blocksOnCompletion":
  586.709 ±(99.9%) 5.611 ops/s [Average]
  (min, avg, max) = (552.848, 586.709, 597.274), stdev = 8.398
  CI (99.9%): [581.099, 592.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt    Score   Error  Units
AggregateCallTest._Benchmark.benchmark_enqueue_blocksOnCompletion  thrpt   30  586.709 ± 5.611  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_cancel$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_cancel

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5325.219 ops/s
# Warmup Iteration   2: 10165.422 ops/s
# Warmup Iteration   3: 13004.974 ops/s
# Warmup Iteration   4: 13585.620 ops/s
# Warmup Iteration   5: 13479.211 ops/s
# Warmup Iteration   6: 17627.713 ops/s
# Warmup Iteration   7: 18894.096 ops/s
# Warmup Iteration   8: 18760.647 ops/s
# Warmup Iteration   9: 19192.079 ops/s
# Warmup Iteration  10: 18618.860 ops/s
# Warmup Iteration  11: 19252.770 ops/s
# Warmup Iteration  12: 19150.566 ops/s
# Warmup Iteration  13: 19292.285 ops/s
# Warmup Iteration  14: 19371.444 ops/s
# Warmup Iteration  15: 19224.499 ops/s
# Warmup Iteration  16: 19426.232 ops/s
# Warmup Iteration  17: 19770.137 ops/s
# Warmup Iteration  18: 19619.870 ops/s
# Warmup Iteration  19: 19762.928 ops/s
# Warmup Iteration  20: 19786.922 ops/s
# Warmup Iteration  21: 19800.146 ops/s
# Warmup Iteration  22: 19751.657 ops/s
# Warmup Iteration  23: 19696.887 ops/s
# Warmup Iteration  24: 17588.430 ops/s
# Warmup Iteration  25: 14260.304 ops/s
# Warmup Iteration  26: 18643.839 ops/s
# Warmup Iteration  27: 19209.455 ops/s
# Warmup Iteration  28: 18691.858 ops/s
# Warmup Iteration  29: 18915.703 ops/s
# Warmup Iteration  30: 18510.038 ops/s
Iteration   1: 18416.069 ops/s
Iteration   2: 18603.638 ops/s
Iteration   3: 18754.721 ops/s
Iteration   4: 18892.865 ops/s
Iteration   5: 18570.293 ops/s
Iteration   6: 18792.802 ops/s
Iteration   7: 18736.212 ops/s
Iteration   8: 19063.412 ops/s
Iteration   9: 19194.814 ops/s
Iteration  10: 19080.859 ops/s
Iteration  11: 19093.266 ops/s
Iteration  12: 19097.807 ops/s
Iteration  13: 19035.232 ops/s
Iteration  14: 18772.656 ops/s
Iteration  15: 18845.739 ops/s
Iteration  16: 19149.947 ops/s
Iteration  17: 18954.948 ops/s
Iteration  18: 19013.912 ops/s
Iteration  19: 19140.973 ops/s
Iteration  20: 18773.999 ops/s
Iteration  21: 19052.020 ops/s
Iteration  22: 18933.884 ops/s
Iteration  23: 18940.677 ops/s
Iteration  24: 19006.715 ops/s
Iteration  25: 18504.416 ops/s
Iteration  26: 18783.211 ops/s
Iteration  27: 19083.175 ops/s
Iteration  28: 18957.832 ops/s
Iteration  29: 19174.480 ops/s
Iteration  30: 18831.748 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_cancel":
  18908.411 ±(99.9%) 137.319 ops/s [Average]
  (min, avg, max) = (18416.069, 18908.411, 19194.814), stdev = 205.533
  CI (99.9%): [18771.091, 19045.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_enqueue_cancel  thrpt   30  18908.411 ± 137.319  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_errorDoesntStopOtherCalls$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_errorDoesntStopOtherCalls

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1124.364 ops/s
# Warmup Iteration   2: 2220.565 ops/s
# Warmup Iteration   3: 2584.868 ops/s
# Warmup Iteration   4: 2678.336 ops/s
# Warmup Iteration   5: 3028.437 ops/s
# Warmup Iteration   6: 3650.650 ops/s
# Warmup Iteration   7: 3562.915 ops/s
# Warmup Iteration   8: 3609.466 ops/s
# Warmup Iteration   9: 3666.854 ops/s
# Warmup Iteration  10: 3655.750 ops/s
# Warmup Iteration  11: 3584.012 ops/s
# Warmup Iteration  12: 3644.248 ops/s
# Warmup Iteration  13: 3623.689 ops/s
# Warmup Iteration  14: 3663.155 ops/s
# Warmup Iteration  15: 3613.047 ops/s
# Warmup Iteration  16: 3597.902 ops/s
# Warmup Iteration  17: 3676.374 ops/s
# Warmup Iteration  18: 3637.229 ops/s
# Warmup Iteration  19: 3678.233 ops/s
# Warmup Iteration  20: 3647.079 ops/s
# Warmup Iteration  21: 3623.445 ops/s
# Warmup Iteration  22: 3341.055 ops/s
# Warmup Iteration  23: 2754.842 ops/s
# Warmup Iteration  24: 3729.918 ops/s
# Warmup Iteration  25: 3687.835 ops/s
# Warmup Iteration  26: 3718.412 ops/s
# Warmup Iteration  27: 3711.292 ops/s
# Warmup Iteration  28: 3672.769 ops/s
# Warmup Iteration  29: 3681.673 ops/s
# Warmup Iteration  30: 3715.530 ops/s
Iteration   1: 3657.869 ops/s
Iteration   2: 3736.846 ops/s
Iteration   3: 3708.297 ops/s
Iteration   4: 3660.534 ops/s
Iteration   5: 3695.715 ops/s
Iteration   6: 3717.994 ops/s
Iteration   7: 3615.048 ops/s
Iteration   8: 3616.668 ops/s
Iteration   9: 3676.769 ops/s
Iteration  10: 3663.128 ops/s
Iteration  11: 3692.111 ops/s
Iteration  12: 3661.803 ops/s
Iteration  13: 3648.691 ops/s
Iteration  14: 3725.800 ops/s
Iteration  15: 3645.732 ops/s
Iteration  16: 3624.811 ops/s
Iteration  17: 3624.094 ops/s
Iteration  18: 3653.487 ops/s
Iteration  19: 3641.557 ops/s
Iteration  20: 3660.818 ops/s
Iteration  21: 3725.907 ops/s
Iteration  22: 3652.952 ops/s
Iteration  23: 3658.627 ops/s
Iteration  24: 3660.926 ops/s
Iteration  25: 3730.502 ops/s
Iteration  26: 3749.435 ops/s
Iteration  27: 3755.369 ops/s
Iteration  28: 3748.616 ops/s
Iteration  29: 3696.170 ops/s
Iteration  30: 3661.225 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_errorDoesntStopOtherCalls":
  3678.917 ±(99.9%) 27.898 ops/s [Average]
  (min, avg, max) = (3615.048, 3678.917, 3755.369), stdev = 41.757
  CI (99.9%): [3651.019, 3706.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt     Score    Error  Units
AggregateCallTest._Benchmark.benchmark_enqueue_errorDoesntStopOtherCalls  thrpt   30  3678.917 ± 27.898  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_finish$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_finish

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5898.640 ops/s
# Warmup Iteration   2: 11761.918 ops/s
# Warmup Iteration   3: 15523.388 ops/s
# Warmup Iteration   4: 15168.535 ops/s
# Warmup Iteration   5: 17863.137 ops/s
# Warmup Iteration   6: 22499.078 ops/s
# Warmup Iteration   7: 21859.849 ops/s
# Warmup Iteration   8: 22492.365 ops/s
# Warmup Iteration   9: 22790.053 ops/s
# Warmup Iteration  10: 22805.351 ops/s
# Warmup Iteration  11: 22554.276 ops/s
# Warmup Iteration  12: 22353.821 ops/s
# Warmup Iteration  13: 22703.210 ops/s
# Warmup Iteration  14: 22709.246 ops/s
# Warmup Iteration  15: 22451.383 ops/s
# Warmup Iteration  16: 22449.760 ops/s
# Warmup Iteration  17: 22770.643 ops/s
# Warmup Iteration  18: 22183.676 ops/s
# Warmup Iteration  19: 22213.678 ops/s
# Warmup Iteration  20: 22398.344 ops/s
# Warmup Iteration  21: 15896.440 ops/s
# Warmup Iteration  22: 21683.328 ops/s
# Warmup Iteration  23: 22439.363 ops/s
# Warmup Iteration  24: 23029.072 ops/s
# Warmup Iteration  25: 22814.754 ops/s
# Warmup Iteration  26: 22791.856 ops/s
# Warmup Iteration  27: 22930.326 ops/s
# Warmup Iteration  28: 22874.696 ops/s
# Warmup Iteration  29: 22909.080 ops/s
# Warmup Iteration  30: 22602.473 ops/s
Iteration   1: 23049.298 ops/s
Iteration   2: 22688.061 ops/s
Iteration   3: 22377.393 ops/s
Iteration   4: 22917.648 ops/s
Iteration   5: 22607.150 ops/s
Iteration   6: 22556.573 ops/s
Iteration   7: 22733.369 ops/s
Iteration   8: 22936.230 ops/s
Iteration   9: 22496.885 ops/s
Iteration  10: 22852.246 ops/s
Iteration  11: 22809.657 ops/s
Iteration  12: 22774.640 ops/s
Iteration  13: 22903.043 ops/s
Iteration  14: 22771.198 ops/s
Iteration  15: 22647.017 ops/s
Iteration  16: 22735.701 ops/s
Iteration  17: 23081.931 ops/s
Iteration  18: 22911.179 ops/s
Iteration  19: 22433.633 ops/s
Iteration  20: 22915.369 ops/s
Iteration  21: 22770.778 ops/s
Iteration  22: 22654.946 ops/s
Iteration  23: 22873.603 ops/s
Iteration  24: 22210.325 ops/s
Iteration  25: 22839.417 ops/s
Iteration  26: 22649.043 ops/s
Iteration  27: 22971.876 ops/s
Iteration  28: 22519.946 ops/s
Iteration  29: 22373.479 ops/s
Iteration  30: 22886.630 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueue_finish":
  22731.609 ±(99.9%) 142.363 ops/s [Average]
  (min, avg, max) = (22210.325, 22731.609, 23081.931), stdev = 213.083
  CI (99.9%): [22589.246, 22873.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_enqueue_finish  thrpt   30  22731.609 ± 142.363  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueuesOnce$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueuesOnce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6850.419 ops/s
# Warmup Iteration   2: 14135.340 ops/s
# Warmup Iteration   3: 18374.563 ops/s
# Warmup Iteration   4: 18883.544 ops/s
# Warmup Iteration   5: 18951.009 ops/s
# Warmup Iteration   6: 26822.726 ops/s
# Warmup Iteration   7: 27453.334 ops/s
# Warmup Iteration   8: 27655.760 ops/s
# Warmup Iteration   9: 27353.971 ops/s
# Warmup Iteration  10: 27433.878 ops/s
# Warmup Iteration  11: 26920.937 ops/s
# Warmup Iteration  12: 28015.133 ops/s
# Warmup Iteration  13: 27759.633 ops/s
# Warmup Iteration  14: 27466.813 ops/s
# Warmup Iteration  15: 27499.143 ops/s
# Warmup Iteration  16: 27472.594 ops/s
# Warmup Iteration  17: 27544.289 ops/s
# Warmup Iteration  18: 27673.677 ops/s
# Warmup Iteration  19: 27621.498 ops/s
# Warmup Iteration  20: 27708.366 ops/s
# Warmup Iteration  21: 28135.646 ops/s
# Warmup Iteration  22: 28059.935 ops/s
# Warmup Iteration  23: 23780.954 ops/s
# Warmup Iteration  24: 19573.274 ops/s
# Warmup Iteration  25: 28432.528 ops/s
# Warmup Iteration  26: 28468.086 ops/s
# Warmup Iteration  27: 27769.656 ops/s
# Warmup Iteration  28: 27517.770 ops/s
# Warmup Iteration  29: 28227.384 ops/s
# Warmup Iteration  30: 28320.808 ops/s
Iteration   1: 27760.000 ops/s
Iteration   2: 28162.124 ops/s
Iteration   3: 28378.508 ops/s
Iteration   4: 28331.301 ops/s
Iteration   5: 28263.665 ops/s
Iteration   6: 28242.182 ops/s
Iteration   7: 28267.394 ops/s
Iteration   8: 28216.022 ops/s
Iteration   9: 28249.929 ops/s
Iteration  10: 28293.217 ops/s
Iteration  11: 28220.341 ops/s
Iteration  12: 28235.204 ops/s
Iteration  13: 28297.654 ops/s
Iteration  14: 28224.693 ops/s
Iteration  15: 28350.780 ops/s
Iteration  16: 28442.178 ops/s
Iteration  17: 28450.539 ops/s
Iteration  18: 28285.401 ops/s
Iteration  19: 28459.474 ops/s
Iteration  20: 27545.499 ops/s
Iteration  21: 27490.503 ops/s
Iteration  22: 27632.541 ops/s
Iteration  23: 28564.614 ops/s
Iteration  24: 27986.037 ops/s
Iteration  25: 27377.942 ops/s
Iteration  26: 28091.224 ops/s
Iteration  27: 27611.863 ops/s
Iteration  28: 28122.782 ops/s
Iteration  29: 27951.429 ops/s
Iteration  30: 27642.172 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_enqueuesOnce":
  28104.907 ±(99.9%) 217.386 ops/s [Average]
  (min, avg, max) = (27377.942, 28104.907, 28564.614), stdev = 325.374
  CI (99.9%): [27887.521, 28322.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_enqueuesOnce  thrpt   30  28104.907 ± 217.386  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4771.191 ops/s
# Warmup Iteration   2: 8948.702 ops/s
# Warmup Iteration   3: 10761.379 ops/s
# Warmup Iteration   4: 11755.759 ops/s
# Warmup Iteration   5: 11339.662 ops/s
# Warmup Iteration   6: 12620.425 ops/s
# Warmup Iteration   7: 15873.799 ops/s
# Warmup Iteration   8: 15698.299 ops/s
# Warmup Iteration   9: 15806.276 ops/s
# Warmup Iteration  10: 15972.042 ops/s
# Warmup Iteration  11: 16098.423 ops/s
# Warmup Iteration  12: 16137.729 ops/s
# Warmup Iteration  13: 16144.629 ops/s
# Warmup Iteration  14: 16065.759 ops/s
# Warmup Iteration  15: 15906.328 ops/s
# Warmup Iteration  16: 15915.675 ops/s
# Warmup Iteration  17: 15937.351 ops/s
# Warmup Iteration  18: 16467.379 ops/s
# Warmup Iteration  19: 16439.813 ops/s
# Warmup Iteration  20: 16393.730 ops/s
# Warmup Iteration  21: 16316.090 ops/s
# Warmup Iteration  22: 16356.625 ops/s
# Warmup Iteration  23: 16493.342 ops/s
# Warmup Iteration  24: 16390.385 ops/s
# Warmup Iteration  25: 16401.352 ops/s
# Warmup Iteration  26: 16473.186 ops/s
# Warmup Iteration  27: 14570.376 ops/s
# Warmup Iteration  28: 12060.910 ops/s
# Warmup Iteration  29: 15775.712 ops/s
# Warmup Iteration  30: 16297.855 ops/s
Iteration   1: 16289.182 ops/s
Iteration   2: 16103.150 ops/s
Iteration   3: 16314.800 ops/s
Iteration   4: 16372.429 ops/s
Iteration   5: 16370.247 ops/s
Iteration   6: 16268.402 ops/s
Iteration   7: 16204.570 ops/s
Iteration   8: 16280.147 ops/s
Iteration   9: 16122.083 ops/s
Iteration  10: 16049.062 ops/s
Iteration  11: 16256.658 ops/s
Iteration  12: 16037.463 ops/s
Iteration  13: 15925.006 ops/s
Iteration  14: 16268.319 ops/s
Iteration  15: 16385.257 ops/s
Iteration  16: 16338.075 ops/s
Iteration  17: 16240.025 ops/s
Iteration  18: 16463.114 ops/s
Iteration  19: 16349.192 ops/s
Iteration  20: 16337.842 ops/s
Iteration  21: 16432.729 ops/s
Iteration  22: 16444.531 ops/s
Iteration  23: 16374.193 ops/s
Iteration  24: 16116.168 ops/s
Iteration  25: 16018.087 ops/s
Iteration  26: 16436.613 ops/s
Iteration  27: 16483.755 ops/s
Iteration  28: 16497.791 ops/s
Iteration  29: 16439.270 ops/s
Iteration  30: 16301.996 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute":
  16284.005 ±(99.9%) 101.563 ops/s [Average]
  (min, avg, max) = (15925.006, 16284.005, 16497.791), stdev = 152.015
  CI (99.9%): [16182.442, 16385.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_execute  thrpt   30  16284.005 ± 101.563  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute_errorDoesntStopOtherCalls$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute_errorDoesntStopOtherCalls

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2982.418 ops/s
# Warmup Iteration   2: 4773.499 ops/s
# Warmup Iteration   3: 5320.776 ops/s
# Warmup Iteration   4: 6138.356 ops/s
# Warmup Iteration   5: 6790.859 ops/s
# Warmup Iteration   6: 6743.744 ops/s
# Warmup Iteration   7: 6657.360 ops/s
# Warmup Iteration   8: 7886.666 ops/s
# Warmup Iteration   9: 8260.223 ops/s
# Warmup Iteration  10: 8445.123 ops/s
# Warmup Iteration  11: 8428.538 ops/s
# Warmup Iteration  12: 8312.136 ops/s
# Warmup Iteration  13: 8254.841 ops/s
# Warmup Iteration  14: 8325.556 ops/s
# Warmup Iteration  15: 8273.649 ops/s
# Warmup Iteration  16: 8261.204 ops/s
# Warmup Iteration  17: 8376.181 ops/s
# Warmup Iteration  18: 8562.310 ops/s
# Warmup Iteration  19: 8524.738 ops/s
# Warmup Iteration  20: 8543.794 ops/s
# Warmup Iteration  21: 8498.676 ops/s
# Warmup Iteration  22: 8572.027 ops/s
# Warmup Iteration  23: 8560.669 ops/s
# Warmup Iteration  24: 8519.127 ops/s
# Warmup Iteration  25: 8542.916 ops/s
# Warmup Iteration  26: 8524.943 ops/s
# Warmup Iteration  27: 8428.876 ops/s
# Warmup Iteration  28: 8393.113 ops/s
# Warmup Iteration  29: 8557.638 ops/s
# Warmup Iteration  30: 8577.732 ops/s
Iteration   1: 8569.836 ops/s
Iteration   2: 8589.628 ops/s
Iteration   3: 8434.955 ops/s
Iteration   4: 8506.345 ops/s
Iteration   5: 8423.745 ops/s
Iteration   6: 8467.931 ops/s
Iteration   7: 8572.259 ops/s
Iteration   8: 8587.801 ops/s
Iteration   9: 8574.162 ops/s
Iteration  10: 8601.716 ops/s
Iteration  11: 8606.298 ops/s
Iteration  12: 8494.289 ops/s
Iteration  13: 8528.494 ops/s
Iteration  14: 7276.891 ops/s
Iteration  15: 6957.521 ops/s
Iteration  16: 7027.564 ops/s
Iteration  17: 6967.080 ops/s
Iteration  18: 8208.858 ops/s
Iteration  19: 8394.849 ops/s
Iteration  20: 8510.007 ops/s
Iteration  21: 8523.068 ops/s
Iteration  22: 8507.798 ops/s
Iteration  23: 8503.955 ops/s
Iteration  24: 8579.853 ops/s
Iteration  25: 8555.372 ops/s
Iteration  26: 8538.351 ops/s
Iteration  27: 8557.989 ops/s
Iteration  28: 8490.437 ops/s
Iteration  29: 8541.215 ops/s
Iteration  30: 8619.418 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute_errorDoesntStopOtherCalls":
  8323.923 ±(99.9%) 343.257 ops/s [Average]
  (min, avg, max) = (6957.521, 8323.923, 8619.418), stdev = 513.771
  CI (99.9%): [7980.666, 8667.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt     Score     Error  Units
AggregateCallTest._Benchmark.benchmark_execute_errorDoesntStopOtherCalls  thrpt   30  8323.923 ± 343.257  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute_finish$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute_finish

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10468.179 ops/s
# Warmup Iteration   2: 31600.193 ops/s
# Warmup Iteration   3: 39392.625 ops/s
# Warmup Iteration   4: 59193.003 ops/s
# Warmup Iteration   5: 75072.102 ops/s
# Warmup Iteration   6: 75575.702 ops/s
# Warmup Iteration   7: 74387.182 ops/s
# Warmup Iteration   8: 74958.592 ops/s
# Warmup Iteration   9: 73718.945 ops/s
# Warmup Iteration  10: 70549.549 ops/s
# Warmup Iteration  11: 72090.402 ops/s
# Warmup Iteration  12: 59048.831 ops/s
# Warmup Iteration  13: 59253.697 ops/s
# Warmup Iteration  14: 71173.471 ops/s
# Warmup Iteration  15: 72106.324 ops/s
# Warmup Iteration  16: 72348.371 ops/s
# Warmup Iteration  17: 71175.120 ops/s
# Warmup Iteration  18: 71565.016 ops/s
# Warmup Iteration  19: 71043.607 ops/s
# Warmup Iteration  20: 70857.112 ops/s
# Warmup Iteration  21: 71364.358 ops/s
# Warmup Iteration  22: 72514.984 ops/s
# Warmup Iteration  23: 72987.241 ops/s
# Warmup Iteration  24: 71284.793 ops/s
# Warmup Iteration  25: 71126.643 ops/s
# Warmup Iteration  26: 71456.046 ops/s
# Warmup Iteration  27: 70653.253 ops/s
# Warmup Iteration  28: 71396.241 ops/s
# Warmup Iteration  29: 71767.051 ops/s
# Warmup Iteration  30: 72171.953 ops/s
Iteration   1: 73587.344 ops/s
Iteration   2: 72559.785 ops/s
Iteration   3: 72643.668 ops/s
Iteration   4: 72712.410 ops/s
Iteration   5: 73031.439 ops/s
Iteration   6: 72973.586 ops/s
Iteration   7: 72948.604 ops/s
Iteration   8: 73027.771 ops/s
Iteration   9: 72950.045 ops/s
Iteration  10: 72435.088 ops/s
Iteration  11: 71842.065 ops/s
Iteration  12: 71918.156 ops/s
Iteration  13: 71685.300 ops/s
Iteration  14: 71842.118 ops/s
Iteration  15: 73324.376 ops/s
Iteration  16: 73484.433 ops/s
Iteration  17: 73539.350 ops/s
Iteration  18: 73190.863 ops/s
Iteration  19: 73712.549 ops/s
Iteration  20: 73579.942 ops/s
Iteration  21: 73067.242 ops/s
Iteration  22: 72884.575 ops/s
Iteration  23: 72942.908 ops/s
Iteration  24: 73181.767 ops/s
Iteration  25: 72707.388 ops/s
Iteration  26: 72745.927 ops/s
Iteration  27: 72860.522 ops/s
Iteration  28: 72682.802 ops/s
Iteration  29: 71866.512 ops/s
Iteration  30: 71109.310 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_execute_finish":
  72767.928 ±(99.9%) 425.002 ops/s [Average]
  (min, avg, max) = (71109.310, 72767.928, 73712.549), stdev = 636.124
  CI (99.9%): [72342.926, 73192.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_execute_finish  thrpt   30  72767.928 ± 425.002  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_executesOnce$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_executesOnce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6862.273 ops/s
# Warmup Iteration   2: 16834.391 ops/s
# Warmup Iteration   3: 20260.648 ops/s
# Warmup Iteration   4: 20200.559 ops/s
# Warmup Iteration   5: 21756.633 ops/s
# Warmup Iteration   6: 29788.723 ops/s
# Warmup Iteration   7: 29881.796 ops/s
# Warmup Iteration   8: 29624.067 ops/s
# Warmup Iteration   9: 29195.225 ops/s
# Warmup Iteration  10: 29565.023 ops/s
# Warmup Iteration  11: 29386.152 ops/s
# Warmup Iteration  12: 29509.737 ops/s
# Warmup Iteration  13: 29324.511 ops/s
# Warmup Iteration  14: 29151.094 ops/s
# Warmup Iteration  15: 29942.687 ops/s
# Warmup Iteration  16: 29732.849 ops/s
# Warmup Iteration  17: 30053.357 ops/s
# Warmup Iteration  18: 30314.782 ops/s
# Warmup Iteration  19: 29785.166 ops/s
# Warmup Iteration  20: 29213.741 ops/s
# Warmup Iteration  21: 29899.531 ops/s
# Warmup Iteration  22: 25823.948 ops/s
# Warmup Iteration  23: 21541.125 ops/s
# Warmup Iteration  24: 29385.399 ops/s
# Warmup Iteration  25: 29941.711 ops/s
# Warmup Iteration  26: 29868.992 ops/s
# Warmup Iteration  27: 29975.020 ops/s
# Warmup Iteration  28: 29967.913 ops/s
# Warmup Iteration  29: 29717.792 ops/s
# Warmup Iteration  30: 29959.471 ops/s
Iteration   1: 29176.702 ops/s
Iteration   2: 29957.060 ops/s
Iteration   3: 30200.461 ops/s
Iteration   4: 30209.442 ops/s
Iteration   5: 29109.399 ops/s
Iteration   6: 29315.284 ops/s
Iteration   7: 29308.211 ops/s
Iteration   8: 29285.992 ops/s
Iteration   9: 29258.449 ops/s
Iteration  10: 29660.538 ops/s
Iteration  11: 29633.611 ops/s
Iteration  12: 29665.786 ops/s
Iteration  13: 29946.586 ops/s
Iteration  14: 29930.817 ops/s
Iteration  15: 29627.433 ops/s
Iteration  16: 30161.454 ops/s
Iteration  17: 30901.178 ops/s
Iteration  18: 30996.418 ops/s
Iteration  19: 30445.111 ops/s
Iteration  20: 30757.385 ops/s
Iteration  21: 30710.805 ops/s
Iteration  22: 30836.159 ops/s
Iteration  23: 30316.451 ops/s
Iteration  24: 30269.554 ops/s
Iteration  25: 30364.443 ops/s
Iteration  26: 30487.138 ops/s
Iteration  27: 30423.829 ops/s
Iteration  28: 30093.612 ops/s
Iteration  29: 29902.156 ops/s
Iteration  30: 30319.101 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_executesOnce":
  30042.352 ±(99.9%) 365.261 ops/s [Average]
  (min, avg, max) = (29109.399, 30042.352, 30996.418), stdev = 546.706
  CI (99.9%): [29677.091, 30407.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_executesOnce  thrpt   30  30042.352 ± 365.261  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_emptyNotAllowed$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_emptyNotAllowed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13895.747 ops/s
# Warmup Iteration   2: 31913.971 ops/s
# Warmup Iteration   3: 38561.437 ops/s
# Warmup Iteration   4: 46869.157 ops/s
# Warmup Iteration   5: 65831.714 ops/s
# Warmup Iteration   6: 65827.062 ops/s
# Warmup Iteration   7: 66521.914 ops/s
# Warmup Iteration   8: 63634.578 ops/s
# Warmup Iteration   9: 64940.858 ops/s
# Warmup Iteration  10: 65815.930 ops/s
# Warmup Iteration  11: 65682.515 ops/s
# Warmup Iteration  12: 65641.736 ops/s
# Warmup Iteration  13: 64442.278 ops/s
# Warmup Iteration  14: 63619.293 ops/s
# Warmup Iteration  15: 42028.028 ops/s
# Warmup Iteration  16: 63021.981 ops/s
# Warmup Iteration  17: 63039.255 ops/s
# Warmup Iteration  18: 64335.338 ops/s
# Warmup Iteration  19: 64286.804 ops/s
# Warmup Iteration  20: 64402.748 ops/s
# Warmup Iteration  21: 64737.497 ops/s
# Warmup Iteration  22: 64525.631 ops/s
# Warmup Iteration  23: 63565.894 ops/s
# Warmup Iteration  24: 65343.602 ops/s
# Warmup Iteration  25: 63902.878 ops/s
# Warmup Iteration  26: 63890.647 ops/s
# Warmup Iteration  27: 64335.984 ops/s
# Warmup Iteration  28: 64685.328 ops/s
# Warmup Iteration  29: 63997.753 ops/s
# Warmup Iteration  30: 65383.775 ops/s
Iteration   1: 65061.302 ops/s
Iteration   2: 65098.191 ops/s
Iteration   3: 64966.931 ops/s
Iteration   4: 64910.437 ops/s
Iteration   5: 65350.501 ops/s
Iteration   6: 63758.080 ops/s
Iteration   7: 64484.785 ops/s
Iteration   8: 65356.710 ops/s
Iteration   9: 65492.753 ops/s
Iteration  10: 66353.511 ops/s
Iteration  11: 65861.099 ops/s
Iteration  12: 65198.776 ops/s
Iteration  13: 65441.566 ops/s
Iteration  14: 64947.810 ops/s
Iteration  15: 65840.013 ops/s
Iteration  16: 64566.705 ops/s
Iteration  17: 62590.791 ops/s
Iteration  18: 63612.616 ops/s
Iteration  19: 63384.926 ops/s
Iteration  20: 64335.758 ops/s
Iteration  21: 65192.754 ops/s
Iteration  22: 65434.118 ops/s
Iteration  23: 65028.427 ops/s
Iteration  24: 64569.077 ops/s
Iteration  25: 64391.767 ops/s
Iteration  26: 64428.641 ops/s
Iteration  27: 64502.850 ops/s
Iteration  28: 64800.861 ops/s
Iteration  29: 64412.444 ops/s
Iteration  30: 64502.524 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_emptyNotAllowed":
  64795.891 ±(99.9%) 519.660 ops/s [Average]
  (min, avg, max) = (62590.791, 64795.891, 66353.511), stdev = 777.802
  CI (99.9%): [64276.231, 65315.550] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_newVoidCall_emptyNotAllowed  thrpt   30  64795.891 ± 519.660  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_joinsMultipleCalls$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_joinsMultipleCalls

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5794.627 ops/s
# Warmup Iteration   2: 11162.473 ops/s
# Warmup Iteration   3: 16774.494 ops/s
# Warmup Iteration   4: 17770.466 ops/s
# Warmup Iteration   5: 30698.806 ops/s
# Warmup Iteration   6: 31066.070 ops/s
# Warmup Iteration   7: 30449.241 ops/s
# Warmup Iteration   8: 31490.088 ops/s
# Warmup Iteration   9: 31574.215 ops/s
# Warmup Iteration  10: 31323.635 ops/s
# Warmup Iteration  11: 30812.940 ops/s
# Warmup Iteration  12: 31005.910 ops/s
# Warmup Iteration  13: 31390.916 ops/s
# Warmup Iteration  14: 31767.702 ops/s
# Warmup Iteration  15: 21032.288 ops/s
# Warmup Iteration  16: 30404.575 ops/s
# Warmup Iteration  17: 32500.705 ops/s
# Warmup Iteration  18: 32488.928 ops/s
# Warmup Iteration  19: 32537.598 ops/s
# Warmup Iteration  20: 32455.887 ops/s
# Warmup Iteration  21: 32217.879 ops/s
# Warmup Iteration  22: 31448.774 ops/s
# Warmup Iteration  23: 31840.539 ops/s
# Warmup Iteration  24: 31835.439 ops/s
# Warmup Iteration  25: 32019.069 ops/s
# Warmup Iteration  26: 32683.425 ops/s
# Warmup Iteration  27: 32159.509 ops/s
# Warmup Iteration  28: 31888.808 ops/s
# Warmup Iteration  29: 31445.939 ops/s
# Warmup Iteration  30: 31691.849 ops/s
Iteration   1: 32660.675 ops/s
Iteration   2: 32687.217 ops/s
Iteration   3: 32742.549 ops/s
Iteration   4: 32917.746 ops/s
Iteration   5: 33069.747 ops/s
Iteration   6: 32647.132 ops/s
Iteration   7: 32293.355 ops/s
Iteration   8: 32250.989 ops/s
Iteration   9: 31942.975 ops/s
Iteration  10: 32821.981 ops/s
Iteration  11: 32526.485 ops/s
Iteration  12: 32332.618 ops/s
Iteration  13: 32783.865 ops/s
Iteration  14: 32215.805 ops/s
Iteration  15: 32710.614 ops/s
Iteration  16: 32403.024 ops/s
Iteration  17: 32650.555 ops/s
Iteration  18: 32813.326 ops/s
Iteration  19: 32686.049 ops/s
Iteration  20: 31806.609 ops/s
Iteration  21: 31860.145 ops/s
Iteration  22: 31905.517 ops/s
Iteration  23: 32406.286 ops/s
Iteration  24: 31545.741 ops/s
Iteration  25: 31743.524 ops/s
Iteration  26: 32134.762 ops/s
Iteration  27: 32058.187 ops/s
Iteration  28: 32373.900 ops/s
Iteration  29: 33202.302 ops/s
Iteration  30: 33129.325 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_joinsMultipleCalls":
  32444.100 ±(99.9%) 289.200 ops/s [Average]
  (min, avg, max) = (31545.741, 32444.100, 33202.302), stdev = 432.861
  CI (99.9%): [32154.900, 32733.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_newVoidCall_joinsMultipleCalls  thrpt   30  32444.100 ± 289.200  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_singletonReturnsOnlyElement$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_singletonReturnsOnlyElement

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14265.217 ops/s
# Warmup Iteration   2: 39514.606 ops/s
# Warmup Iteration   3: 45126.049 ops/s
# Warmup Iteration   4: 74459.876 ops/s
# Warmup Iteration   5: 85387.491 ops/s
# Warmup Iteration   6: 83131.562 ops/s
# Warmup Iteration   7: 86446.271 ops/s
# Warmup Iteration   8: 84917.228 ops/s
# Warmup Iteration   9: 85484.387 ops/s
# Warmup Iteration  10: 85542.900 ops/s
# Warmup Iteration  11: 86236.660 ops/s
# Warmup Iteration  12: 56122.755 ops/s
# Warmup Iteration  13: 85541.545 ops/s
# Warmup Iteration  14: 86278.694 ops/s
# Warmup Iteration  15: 85258.646 ops/s
# Warmup Iteration  16: 84930.948 ops/s
# Warmup Iteration  17: 85852.181 ops/s
# Warmup Iteration  18: 86496.915 ops/s
# Warmup Iteration  19: 86716.973 ops/s
# Warmup Iteration  20: 85744.446 ops/s
# Warmup Iteration  21: 86776.803 ops/s
# Warmup Iteration  22: 87021.011 ops/s
# Warmup Iteration  23: 86073.343 ops/s
# Warmup Iteration  24: 86811.156 ops/s
# Warmup Iteration  25: 87259.764 ops/s
# Warmup Iteration  26: 87167.584 ops/s
# Warmup Iteration  27: 87023.266 ops/s
# Warmup Iteration  28: 86225.422 ops/s
# Warmup Iteration  29: 86232.279 ops/s
# Warmup Iteration  30: 86751.016 ops/s
Iteration   1: 85854.963 ops/s
Iteration   2: 87231.762 ops/s
Iteration   3: 86782.905 ops/s
Iteration   4: 85994.433 ops/s
Iteration   5: 86045.771 ops/s
Iteration   6: 87322.251 ops/s
Iteration   7: 86268.489 ops/s
Iteration   8: 86298.131 ops/s
Iteration   9: 86699.184 ops/s
Iteration  10: 85770.354 ops/s
Iteration  11: 87128.675 ops/s
Iteration  12: 86956.659 ops/s
Iteration  13: 86318.832 ops/s
Iteration  14: 86447.608 ops/s
Iteration  15: 87414.079 ops/s
Iteration  16: 87691.394 ops/s
Iteration  17: 87218.850 ops/s
Iteration  18: 86922.371 ops/s
Iteration  19: 87496.904 ops/s
Iteration  20: 87369.860 ops/s
Iteration  21: 86152.723 ops/s
Iteration  22: 87833.795 ops/s
Iteration  23: 87549.647 ops/s
Iteration  24: 87464.843 ops/s
Iteration  25: 87410.425 ops/s
Iteration  26: 86950.089 ops/s
Iteration  27: 87223.650 ops/s
Iteration  28: 86686.915 ops/s
Iteration  29: 87314.778 ops/s
Iteration  30: 86275.007 ops/s


Result "zipkin2.internal.AggregateCallTest._Benchmark.benchmark_newVoidCall_singletonReturnsOnlyElement":
  86869.845 ±(99.9%) 398.349 ops/s [Average]
  (min, avg, max) = (85770.354, 86869.845, 87833.795), stdev = 596.230
  CI (99.9%): [86471.496, 87268.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt      Score     Error  Units
AggregateCallTest._Benchmark.benchmark_newVoidCall_singletonReturnsOnlyElement  thrpt   30  86869.845 ± 398.349  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.DateUtilTest._Benchmark.benchmark_getDays$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.DateUtilTest._Benchmark.benchmark_getDays

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 120545.135 ops/s
# Warmup Iteration   2: 151787.301 ops/s
# Warmup Iteration   3: 211586.804 ops/s
# Warmup Iteration   4: 271849.995 ops/s
# Warmup Iteration   5: 272143.532 ops/s
# Warmup Iteration   6: 268802.374 ops/s
# Warmup Iteration   7: 273138.762 ops/s
# Warmup Iteration   8: 273606.453 ops/s
# Warmup Iteration   9: 272594.267 ops/s
# Warmup Iteration  10: 273228.548 ops/s
# Warmup Iteration  11: 181491.769 ops/s
# Warmup Iteration  12: 273029.403 ops/s
# Warmup Iteration  13: 272581.302 ops/s
# Warmup Iteration  14: 273956.746 ops/s
# Warmup Iteration  15: 273583.775 ops/s
# Warmup Iteration  16: 273591.666 ops/s
# Warmup Iteration  17: 272483.759 ops/s
# Warmup Iteration  18: 270894.297 ops/s
# Warmup Iteration  19: 270961.055 ops/s
# Warmup Iteration  20: 272134.529 ops/s
# Warmup Iteration  21: 272824.259 ops/s
# Warmup Iteration  22: 272342.100 ops/s
# Warmup Iteration  23: 272624.856 ops/s
# Warmup Iteration  24: 271906.337 ops/s
# Warmup Iteration  25: 272992.322 ops/s
# Warmup Iteration  26: 272774.084 ops/s
# Warmup Iteration  27: 272421.809 ops/s
# Warmup Iteration  28: 272239.497 ops/s
# Warmup Iteration  29: 271928.838 ops/s
# Warmup Iteration  30: 272101.174 ops/s
Iteration   1: 272344.083 ops/s
Iteration   2: 272614.729 ops/s
Iteration   3: 272651.587 ops/s
Iteration   4: 272032.853 ops/s
Iteration   5: 272744.484 ops/s
Iteration   6: 272273.452 ops/s
Iteration   7: 271711.663 ops/s
Iteration   8: 271678.709 ops/s
Iteration   9: 271751.165 ops/s
Iteration  10: 271840.194 ops/s
Iteration  11: 272460.628 ops/s
Iteration  12: 272511.802 ops/s
Iteration  13: 272661.080 ops/s
Iteration  14: 272118.913 ops/s
Iteration  15: 272449.570 ops/s
Iteration  16: 273528.458 ops/s
Iteration  17: 273620.225 ops/s
Iteration  18: 273491.643 ops/s
Iteration  19: 273080.130 ops/s
Iteration  20: 271276.143 ops/s
Iteration  21: 271683.942 ops/s
Iteration  22: 272530.922 ops/s
Iteration  23: 272366.862 ops/s
Iteration  24: 272066.311 ops/s
Iteration  25: 270796.978 ops/s
Iteration  26: 272489.401 ops/s
Iteration  27: 271196.944 ops/s
Iteration  28: 271901.454 ops/s
Iteration  29: 271790.877 ops/s
Iteration  30: 273191.791 ops/s


Result "zipkin2.internal.DateUtilTest._Benchmark.benchmark_getDays":
  272295.233 ±(99.9%) 456.529 ops/s [Average]
  (min, avg, max) = (270796.978, 272295.233, 273620.225), stdev = 683.311
  CI (99.9%): [271838.704, 272751.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
DateUtilTest._Benchmark.benchmark_getDays  thrpt   30  272295.233 ± 456.529  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.DateUtilTest._Benchmark.benchmark_getDays_doesntLookEarlierThan1970$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.DateUtilTest._Benchmark.benchmark_getDays_doesntLookEarlierThan1970

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136430.095 ops/s
# Warmup Iteration   2: 170908.254 ops/s
# Warmup Iteration   3: 298952.356 ops/s
# Warmup Iteration   4: 332229.434 ops/s
# Warmup Iteration   5: 330266.961 ops/s
# Warmup Iteration   6: 331915.191 ops/s
# Warmup Iteration   7: 332879.819 ops/s
# Warmup Iteration   8: 331652.818 ops/s
# Warmup Iteration   9: 235635.735 ops/s
# Warmup Iteration  10: 324860.003 ops/s
# Warmup Iteration  11: 332595.542 ops/s
# Warmup Iteration  12: 332570.943 ops/s
# Warmup Iteration  13: 333054.061 ops/s
# Warmup Iteration  14: 331793.386 ops/s
# Warmup Iteration  15: 332070.367 ops/s
# Warmup Iteration  16: 333193.109 ops/s
# Warmup Iteration  17: 326071.863 ops/s
# Warmup Iteration  18: 325312.002 ops/s
# Warmup Iteration  19: 324981.709 ops/s
# Warmup Iteration  20: 326295.026 ops/s
# Warmup Iteration  21: 326673.119 ops/s
# Warmup Iteration  22: 327086.112 ops/s
# Warmup Iteration  23: 326599.091 ops/s
# Warmup Iteration  24: 325762.644 ops/s
# Warmup Iteration  25: 326592.338 ops/s
# Warmup Iteration  26: 326770.398 ops/s
# Warmup Iteration  27: 325989.777 ops/s
# Warmup Iteration  28: 325488.697 ops/s
# Warmup Iteration  29: 326670.352 ops/s
# Warmup Iteration  30: 327130.544 ops/s
Iteration   1: 327721.627 ops/s
Iteration   2: 326687.409 ops/s
Iteration   3: 326882.172 ops/s
Iteration   4: 325215.694 ops/s
Iteration   5: 324909.923 ops/s
Iteration   6: 325484.697 ops/s
Iteration   7: 325744.214 ops/s
Iteration   8: 326088.505 ops/s
Iteration   9: 326141.652 ops/s
Iteration  10: 325698.921 ops/s
Iteration  11: 326052.082 ops/s
Iteration  12: 324930.680 ops/s
Iteration  13: 326606.392 ops/s
Iteration  14: 327408.460 ops/s
Iteration  15: 325382.000 ops/s
Iteration  16: 325571.931 ops/s
Iteration  17: 325307.402 ops/s
Iteration  18: 326058.876 ops/s
Iteration  19: 325675.924 ops/s
Iteration  20: 325769.370 ops/s
Iteration  21: 324136.097 ops/s
Iteration  22: 325864.420 ops/s
Iteration  23: 326784.161 ops/s
Iteration  24: 325983.816 ops/s
Iteration  25: 325235.325 ops/s
Iteration  26: 327034.676 ops/s
Iteration  27: 326340.884 ops/s
Iteration  28: 325718.650 ops/s
Iteration  29: 326319.118 ops/s
Iteration  30: 326485.505 ops/s


Result "zipkin2.internal.DateUtilTest._Benchmark.benchmark_getDays_doesntLookEarlierThan1970":
  325974.686 ±(99.9%) 518.239 ops/s [Average]
  (min, avg, max) = (324136.097, 325974.686, 327721.627), stdev = 775.675
  CI (99.9%): [325456.447, 326492.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
DateUtilTest._Benchmark.benchmark_getDays_doesntLookEarlierThan1970  thrpt   30  325974.686 ± 518.239  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.DateUtilTest._Benchmark.benchmark_midnightUTCTest$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.DateUtilTest._Benchmark.benchmark_midnightUTCTest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63998.424 ops/s
# Warmup Iteration   2: 92004.142 ops/s
# Warmup Iteration   3: 99193.068 ops/s
# Warmup Iteration   4: 151475.367 ops/s
# Warmup Iteration   5: 163759.954 ops/s
# Warmup Iteration   6: 162546.909 ops/s
# Warmup Iteration   7: 161713.701 ops/s
# Warmup Iteration   8: 163996.672 ops/s
# Warmup Iteration   9: 163412.850 ops/s
# Warmup Iteration  10: 164092.416 ops/s
# Warmup Iteration  11: 164298.210 ops/s
# Warmup Iteration  12: 163321.551 ops/s
# Warmup Iteration  13: 163332.158 ops/s
# Warmup Iteration  14: 115763.623 ops/s
# Warmup Iteration  15: 150804.874 ops/s
# Warmup Iteration  16: 164874.650 ops/s
# Warmup Iteration  17: 162950.788 ops/s
# Warmup Iteration  18: 162567.382 ops/s
# Warmup Iteration  19: 162653.572 ops/s
# Warmup Iteration  20: 162373.320 ops/s
# Warmup Iteration  21: 162808.968 ops/s
# Warmup Iteration  22: 164018.741 ops/s
# Warmup Iteration  23: 164500.252 ops/s
# Warmup Iteration  24: 163266.964 ops/s
# Warmup Iteration  25: 163332.842 ops/s
# Warmup Iteration  26: 163414.289 ops/s
# Warmup Iteration  27: 162378.857 ops/s
# Warmup Iteration  28: 162470.609 ops/s
# Warmup Iteration  29: 163825.531 ops/s
# Warmup Iteration  30: 163645.694 ops/s
Iteration   1: 163561.424 ops/s
Iteration   2: 163426.900 ops/s
Iteration   3: 163185.232 ops/s
Iteration   4: 162649.253 ops/s
Iteration   5: 163522.318 ops/s
Iteration   6: 163807.556 ops/s
Iteration   7: 163785.205 ops/s
Iteration   8: 163749.815 ops/s
Iteration   9: 164006.535 ops/s
Iteration  10: 163655.818 ops/s
Iteration  11: 163810.449 ops/s
Iteration  12: 163667.098 ops/s
Iteration  13: 163384.783 ops/s
Iteration  14: 163130.570 ops/s
Iteration  15: 162287.741 ops/s
Iteration  16: 163371.985 ops/s
Iteration  17: 162545.182 ops/s
Iteration  18: 162957.707 ops/s
Iteration  19: 162510.199 ops/s
Iteration  20: 163984.315 ops/s
Iteration  21: 163653.028 ops/s
Iteration  22: 164080.691 ops/s
Iteration  23: 162948.317 ops/s
Iteration  24: 163596.490 ops/s
Iteration  25: 163273.076 ops/s
Iteration  26: 163383.939 ops/s
Iteration  27: 163781.959 ops/s
Iteration  28: 163732.226 ops/s
Iteration  29: 163864.027 ops/s
Iteration  30: 163067.833 ops/s


Result "zipkin2.internal.DateUtilTest._Benchmark.benchmark_midnightUTCTest":
  163412.722 ±(99.9%) 316.188 ops/s [Average]
  (min, avg, max) = (162287.741, 163412.722, 164080.691), stdev = 473.255
  CI (99.9%): [163096.535, 163728.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
DateUtilTest._Benchmark.benchmark_midnightUTCTest  thrpt   30  163412.722 ± 316.188  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.DependenciesTest._Benchmark.benchmark_dependenciesRoundTrip$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.DependenciesTest._Benchmark.benchmark_dependenciesRoundTrip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 228277.666 ops/s
# Warmup Iteration   2: 287253.965 ops/s
# Warmup Iteration   3: 450648.523 ops/s
# Warmup Iteration   4: 532528.812 ops/s
# Warmup Iteration   5: 528307.053 ops/s
# Warmup Iteration   6: 531938.870 ops/s
# Warmup Iteration   7: 530429.572 ops/s
# Warmup Iteration   8: 529681.599 ops/s
# Warmup Iteration   9: 534608.754 ops/s
# Warmup Iteration  10: 360080.448 ops/s
# Warmup Iteration  11: 527034.787 ops/s
# Warmup Iteration  12: 524451.718 ops/s
# Warmup Iteration  13: 529896.259 ops/s
# Warmup Iteration  14: 529357.485 ops/s
# Warmup Iteration  15: 528827.189 ops/s
# Warmup Iteration  16: 528580.106 ops/s
# Warmup Iteration  17: 529426.837 ops/s
# Warmup Iteration  18: 527578.929 ops/s
# Warmup Iteration  19: 528720.868 ops/s
# Warmup Iteration  20: 526538.366 ops/s
# Warmup Iteration  21: 528074.717 ops/s
# Warmup Iteration  22: 527419.773 ops/s
# Warmup Iteration  23: 528342.790 ops/s
# Warmup Iteration  24: 527611.153 ops/s
# Warmup Iteration  25: 527865.807 ops/s
# Warmup Iteration  26: 527026.525 ops/s
# Warmup Iteration  27: 529098.969 ops/s
# Warmup Iteration  28: 527822.011 ops/s
# Warmup Iteration  29: 527789.017 ops/s
# Warmup Iteration  30: 523642.335 ops/s
Iteration   1: 525617.395 ops/s
Iteration   2: 527882.322 ops/s
Iteration   3: 528965.634 ops/s
Iteration   4: 528548.631 ops/s
Iteration   5: 528584.181 ops/s
Iteration   6: 529582.853 ops/s
Iteration   7: 528237.372 ops/s
Iteration   8: 527946.847 ops/s
Iteration   9: 527901.043 ops/s
Iteration  10: 529266.366 ops/s
Iteration  11: 526027.608 ops/s
Iteration  12: 528223.338 ops/s
Iteration  13: 529824.412 ops/s
Iteration  14: 530279.275 ops/s
Iteration  15: 526555.647 ops/s
Iteration  16: 530411.904 ops/s
Iteration  17: 526780.864 ops/s
Iteration  18: 523761.364 ops/s
Iteration  19: 528722.424 ops/s
Iteration  20: 525775.187 ops/s
Iteration  21: 530334.441 ops/s
Iteration  22: 528269.703 ops/s
Iteration  23: 529502.578 ops/s
Iteration  24: 531213.351 ops/s
Iteration  25: 525159.895 ops/s
Iteration  26: 527576.183 ops/s
Iteration  27: 528853.404 ops/s
Iteration  28: 526945.453 ops/s
Iteration  29: 528006.470 ops/s
Iteration  30: 527609.967 ops/s


Result "zipkin2.internal.DependenciesTest._Benchmark.benchmark_dependenciesRoundTrip":
  528078.870 ±(99.9%) 1143.101 ops/s [Average]
  (min, avg, max) = (523761.364, 528078.870, 531213.351), stdev = 1710.940
  CI (99.9%): [526935.769, 529221.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
DependenciesTest._Benchmark.benchmark_dependenciesRoundTrip  thrpt   30  528078.870 ± 1143.101  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.FilterTracesTest._Benchmark.benchmark_doesntMutateInputWhenUnmatched$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.FilterTracesTest._Benchmark.benchmark_doesntMutateInputWhenUnmatched

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321132.505 ops/s
# Warmup Iteration   2: 419828.320 ops/s
# Warmup Iteration   3: 799610.635 ops/s
# Warmup Iteration   4: 849312.913 ops/s
# Warmup Iteration   5: 856351.089 ops/s
# Warmup Iteration   6: 860927.253 ops/s
# Warmup Iteration   7: 854293.019 ops/s
# Warmup Iteration   8: 678765.952 ops/s
# Warmup Iteration   9: 792261.485 ops/s
# Warmup Iteration  10: 865761.065 ops/s
# Warmup Iteration  11: 866202.829 ops/s
# Warmup Iteration  12: 860302.795 ops/s
# Warmup Iteration  13: 867458.119 ops/s
# Warmup Iteration  14: 867584.829 ops/s
# Warmup Iteration  15: 864525.277 ops/s
# Warmup Iteration  16: 866515.579 ops/s
# Warmup Iteration  17: 866357.601 ops/s
# Warmup Iteration  18: 868658.834 ops/s
# Warmup Iteration  19: 866469.811 ops/s
# Warmup Iteration  20: 866826.360 ops/s
# Warmup Iteration  21: 868114.864 ops/s
# Warmup Iteration  22: 866535.724 ops/s
# Warmup Iteration  23: 869295.221 ops/s
# Warmup Iteration  24: 861419.993 ops/s
# Warmup Iteration  25: 860225.085 ops/s
# Warmup Iteration  26: 863475.920 ops/s
# Warmup Iteration  27: 864284.220 ops/s
# Warmup Iteration  28: 863646.458 ops/s
# Warmup Iteration  29: 863915.434 ops/s
# Warmup Iteration  30: 864590.228 ops/s
Iteration   1: 864770.653 ops/s
Iteration   2: 866589.597 ops/s
Iteration   3: 867658.945 ops/s
Iteration   4: 862335.144 ops/s
Iteration   5: 867546.608 ops/s
Iteration   6: 866520.619 ops/s
Iteration   7: 863233.886 ops/s
Iteration   8: 859674.461 ops/s
Iteration   9: 857675.704 ops/s
Iteration  10: 867877.573 ops/s
Iteration  11: 866204.540 ops/s
Iteration  12: 861196.125 ops/s
Iteration  13: 863210.821 ops/s
Iteration  14: 862754.246 ops/s
Iteration  15: 865084.642 ops/s
Iteration  16: 862343.730 ops/s
Iteration  17: 866938.156 ops/s
Iteration  18: 865924.572 ops/s
Iteration  19: 863118.898 ops/s
Iteration  20: 866498.555 ops/s
Iteration  21: 865710.149 ops/s
Iteration  22: 867124.506 ops/s
Iteration  23: 865638.896 ops/s
Iteration  24: 863776.835 ops/s
Iteration  25: 868510.813 ops/s
Iteration  26: 868209.864 ops/s
Iteration  27: 864221.135 ops/s
Iteration  28: 861905.173 ops/s
Iteration  29: 869161.301 ops/s
Iteration  30: 867368.983 ops/s


Result "zipkin2.internal.FilterTracesTest._Benchmark.benchmark_doesntMutateInputWhenUnmatched":
  864959.504 ±(99.9%) 1853.494 ops/s [Average]
  (min, avg, max) = (857675.704, 864959.504, 869161.301), stdev = 2774.223
  CI (99.9%): [863106.010, 866812.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FilterTracesTest._Benchmark.benchmark_doesntMutateInputWhenUnmatched  thrpt   30  864959.504 ± 1853.494  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.FilterTracesTest._Benchmark.benchmark_returnsWhenValidlyMatches$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.FilterTracesTest._Benchmark.benchmark_returnsWhenValidlyMatches

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275131.124 ops/s
# Warmup Iteration   2: 364904.321 ops/s
# Warmup Iteration   3: 701961.408 ops/s
# Warmup Iteration   4: 742678.512 ops/s
# Warmup Iteration   5: 761133.089 ops/s
# Warmup Iteration   6: 759784.744 ops/s
# Warmup Iteration   7: 753713.719 ops/s
# Warmup Iteration   8: 639305.375 ops/s
# Warmup Iteration   9: 659818.168 ops/s
# Warmup Iteration  10: 762157.590 ops/s
# Warmup Iteration  11: 762636.077 ops/s
# Warmup Iteration  12: 763884.074 ops/s
# Warmup Iteration  13: 756104.343 ops/s
# Warmup Iteration  14: 764971.229 ops/s
# Warmup Iteration  15: 765458.478 ops/s
# Warmup Iteration  16: 764625.965 ops/s
# Warmup Iteration  17: 762023.716 ops/s
# Warmup Iteration  18: 758031.285 ops/s
# Warmup Iteration  19: 761242.379 ops/s
# Warmup Iteration  20: 761209.765 ops/s
# Warmup Iteration  21: 760087.529 ops/s
# Warmup Iteration  22: 761370.150 ops/s
# Warmup Iteration  23: 757673.489 ops/s
# Warmup Iteration  24: 757985.248 ops/s
# Warmup Iteration  25: 762977.745 ops/s
# Warmup Iteration  26: 759748.198 ops/s
# Warmup Iteration  27: 751541.749 ops/s
# Warmup Iteration  28: 750315.132 ops/s
# Warmup Iteration  29: 751744.143 ops/s
# Warmup Iteration  30: 765265.601 ops/s
Iteration   1: 760189.056 ops/s
Iteration   2: 762517.970 ops/s
Iteration   3: 761683.974 ops/s
Iteration   4: 764870.635 ops/s
Iteration   5: 748004.411 ops/s
Iteration   6: 765206.480 ops/s
Iteration   7: 764827.812 ops/s
Iteration   8: 763451.833 ops/s
Iteration   9: 765453.904 ops/s
Iteration  10: 761818.691 ops/s
Iteration  11: 765989.900 ops/s
Iteration  12: 749950.618 ops/s
Iteration  13: 761398.568 ops/s
Iteration  14: 766401.347 ops/s
Iteration  15: 761633.702 ops/s
Iteration  16: 765335.646 ops/s
Iteration  17: 765267.166 ops/s
Iteration  18: 765199.080 ops/s
Iteration  19: 765454.683 ops/s
Iteration  20: 761940.291 ops/s
Iteration  21: 764250.481 ops/s
Iteration  22: 766189.302 ops/s
Iteration  23: 750913.843 ops/s
Iteration  24: 751359.943 ops/s
Iteration  25: 748929.617 ops/s
Iteration  26: 761489.216 ops/s
Iteration  27: 762279.935 ops/s
Iteration  28: 764020.527 ops/s
Iteration  29: 764709.202 ops/s
Iteration  30: 753137.028 ops/s


Result "zipkin2.internal.FilterTracesTest._Benchmark.benchmark_returnsWhenValidlyMatches":
  761129.162 ±(99.9%) 3848.405 ops/s [Average]
  (min, avg, max) = (748004.411, 761129.162, 766401.347), stdev = 5760.111
  CI (99.9%): [757280.757, 764977.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FilterTracesTest._Benchmark.benchmark_returnsWhenValidlyMatches  thrpt   30  761129.162 ± 3848.405  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLongTest$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLongTest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79650.121 ops/s
# Warmup Iteration   2: 92864.358 ops/s
# Warmup Iteration   3: 94743.990 ops/s
# Warmup Iteration   4: 120243.034 ops/s
# Warmup Iteration   5: 138932.739 ops/s
# Warmup Iteration   6: 138661.946 ops/s
# Warmup Iteration   7: 137967.307 ops/s
# Warmup Iteration   8: 138285.490 ops/s
# Warmup Iteration   9: 138807.884 ops/s
# Warmup Iteration  10: 138568.020 ops/s
# Warmup Iteration  11: 138798.848 ops/s
# Warmup Iteration  12: 139220.984 ops/s
# Warmup Iteration  13: 139004.013 ops/s
# Warmup Iteration  14: 139065.297 ops/s
# Warmup Iteration  15: 138684.011 ops/s
# Warmup Iteration  16: 139153.802 ops/s
# Warmup Iteration  17: 121295.290 ops/s
# Warmup Iteration  18: 121022.583 ops/s
# Warmup Iteration  19: 144115.206 ops/s
# Warmup Iteration  20: 143786.598 ops/s
# Warmup Iteration  21: 143684.751 ops/s
# Warmup Iteration  22: 143998.140 ops/s
# Warmup Iteration  23: 143676.349 ops/s
# Warmup Iteration  24: 143917.329 ops/s
# Warmup Iteration  25: 144051.661 ops/s
# Warmup Iteration  26: 143311.990 ops/s
# Warmup Iteration  27: 143689.677 ops/s
# Warmup Iteration  28: 143665.383 ops/s
# Warmup Iteration  29: 143712.121 ops/s
# Warmup Iteration  30: 143752.490 ops/s
Iteration   1: 144132.134 ops/s
Iteration   2: 144250.243 ops/s
Iteration   3: 144090.000 ops/s
Iteration   4: 143896.367 ops/s
Iteration   5: 143916.809 ops/s
Iteration   6: 143741.272 ops/s
Iteration   7: 143206.271 ops/s
Iteration   8: 143445.886 ops/s
Iteration   9: 143769.990 ops/s
Iteration  10: 144037.885 ops/s
Iteration  11: 143690.702 ops/s
Iteration  12: 143817.049 ops/s
Iteration  13: 143303.088 ops/s
Iteration  14: 142357.716 ops/s
Iteration  15: 143357.439 ops/s
Iteration  16: 143506.093 ops/s
Iteration  17: 143574.915 ops/s
Iteration  18: 143872.448 ops/s
Iteration  19: 143598.253 ops/s
Iteration  20: 143456.716 ops/s
Iteration  21: 143201.250 ops/s
Iteration  22: 143423.821 ops/s
Iteration  23: 143306.837 ops/s
Iteration  24: 143440.486 ops/s
Iteration  25: 143734.299 ops/s
Iteration  26: 142967.534 ops/s
Iteration  27: 142792.218 ops/s
Iteration  28: 143662.561 ops/s
Iteration  29: 143516.256 ops/s
Iteration  30: 144201.677 ops/s


Result "zipkin2.internal.HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLongTest":
  143575.607 ±(99.9%) 281.017 ops/s [Average]
  (min, avg, max) = (142357.716, 143575.607, 144250.243), stdev = 420.613
  CI (99.9%): [143294.590, 143856.624] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLongTest  thrpt   30  143575.607 ± 281.017  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLong_downgrades128bitIdsByDroppingHighBits$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLong_downgrades128bitIdsByDroppingHighBits

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 363113.896 ops/s
# Warmup Iteration   2: 412259.673 ops/s
# Warmup Iteration   3: 837876.529 ops/s
# Warmup Iteration   4: 834887.004 ops/s
# Warmup Iteration   5: 844182.071 ops/s
# Warmup Iteration   6: 845069.264 ops/s
# Warmup Iteration   7: 842221.091 ops/s
# Warmup Iteration   8: 593714.012 ops/s
# Warmup Iteration   9: 813672.243 ops/s
# Warmup Iteration  10: 840596.464 ops/s
# Warmup Iteration  11: 840385.353 ops/s
# Warmup Iteration  12: 839123.486 ops/s
# Warmup Iteration  13: 841022.610 ops/s
# Warmup Iteration  14: 844836.968 ops/s
# Warmup Iteration  15: 842020.179 ops/s
# Warmup Iteration  16: 836905.009 ops/s
# Warmup Iteration  17: 839860.495 ops/s
# Warmup Iteration  18: 841214.618 ops/s
# Warmup Iteration  19: 841337.060 ops/s
# Warmup Iteration  20: 841994.480 ops/s
# Warmup Iteration  21: 836321.669 ops/s
# Warmup Iteration  22: 837951.351 ops/s
# Warmup Iteration  23: 840840.971 ops/s
# Warmup Iteration  24: 846038.691 ops/s
# Warmup Iteration  25: 844000.890 ops/s
# Warmup Iteration  26: 838836.748 ops/s
# Warmup Iteration  27: 842397.943 ops/s
# Warmup Iteration  28: 842318.459 ops/s
# Warmup Iteration  29: 841610.258 ops/s
# Warmup Iteration  30: 842269.391 ops/s
Iteration   1: 841473.726 ops/s
Iteration   2: 843099.591 ops/s
Iteration   3: 838386.777 ops/s
Iteration   4: 840631.532 ops/s
Iteration   5: 837756.738 ops/s
Iteration   6: 841486.864 ops/s
Iteration   7: 842153.240 ops/s
Iteration   8: 844437.958 ops/s
Iteration   9: 842936.111 ops/s
Iteration  10: 838035.725 ops/s
Iteration  11: 843173.697 ops/s
Iteration  12: 844791.030 ops/s
Iteration  13: 841040.522 ops/s
Iteration  14: 843031.300 ops/s
Iteration  15: 839933.777 ops/s
Iteration  16: 841423.043 ops/s
Iteration  17: 843087.795 ops/s
Iteration  18: 842155.549 ops/s
Iteration  19: 842724.380 ops/s
Iteration  20: 839167.610 ops/s
Iteration  21: 833530.701 ops/s
Iteration  22: 841677.092 ops/s
Iteration  23: 839886.668 ops/s
Iteration  24: 841692.615 ops/s
Iteration  25: 839951.842 ops/s
Iteration  26: 842964.177 ops/s
Iteration  27: 843714.319 ops/s
Iteration  28: 836448.991 ops/s
Iteration  29: 838231.161 ops/s
Iteration  30: 839734.462 ops/s


Result "zipkin2.internal.HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLong_downgrades128bitIdsByDroppingHighBits":
  840958.633 ±(99.9%) 1686.672 ops/s [Average]
  (min, avg, max) = (833530.701, 840958.633, 844791.030), stdev = 2524.532
  CI (99.9%): [839271.961, 842645.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
HexCodecTest._Benchmark.benchmark_lowerHexToUnsignedLong_downgrades128bitIdsByDroppingHighBits  thrpt   30  840958.633 ± 1686.672  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_Overflow$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_Overflow

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66666.025 ops/s
# Warmup Iteration   2: 82707.481 ops/s
# Warmup Iteration   3: 100186.809 ops/s
# Warmup Iteration   4: 150724.439 ops/s
# Warmup Iteration   5: 146479.012 ops/s
# Warmup Iteration   6: 147025.351 ops/s
# Warmup Iteration   7: 149880.332 ops/s
# Warmup Iteration   8: 151420.010 ops/s
# Warmup Iteration   9: 147954.688 ops/s
# Warmup Iteration  10: 148638.004 ops/s
# Warmup Iteration  11: 150549.000 ops/s
# Warmup Iteration  12: 95901.263 ops/s
# Warmup Iteration  13: 149967.741 ops/s
# Warmup Iteration  14: 149842.236 ops/s
# Warmup Iteration  15: 150113.888 ops/s
# Warmup Iteration  16: 149744.251 ops/s
# Warmup Iteration  17: 153055.624 ops/s
# Warmup Iteration  18: 153825.590 ops/s
# Warmup Iteration  19: 153221.610 ops/s
# Warmup Iteration  20: 153664.487 ops/s
# Warmup Iteration  21: 152862.990 ops/s
# Warmup Iteration  22: 152117.686 ops/s
# Warmup Iteration  23: 153917.133 ops/s
# Warmup Iteration  24: 152742.234 ops/s
# Warmup Iteration  25: 152576.721 ops/s
# Warmup Iteration  26: 152182.640 ops/s
# Warmup Iteration  27: 152433.696 ops/s
# Warmup Iteration  28: 153375.927 ops/s
# Warmup Iteration  29: 153881.106 ops/s
# Warmup Iteration  30: 153234.175 ops/s
Iteration   1: 152343.607 ops/s
Iteration   2: 152596.868 ops/s
Iteration   3: 151451.155 ops/s
Iteration   4: 152136.979 ops/s
Iteration   5: 153271.781 ops/s
Iteration   6: 153881.748 ops/s
Iteration   7: 152343.627 ops/s
Iteration   8: 152695.654 ops/s
Iteration   9: 152629.521 ops/s
Iteration  10: 152127.762 ops/s
Iteration  11: 152871.317 ops/s
Iteration  12: 153632.781 ops/s
Iteration  13: 153132.314 ops/s
Iteration  14: 153320.017 ops/s
Iteration  15: 152991.592 ops/s
Iteration  16: 152380.984 ops/s
Iteration  17: 152815.418 ops/s
Iteration  18: 153366.528 ops/s
Iteration  19: 152915.329 ops/s
Iteration  20: 152792.465 ops/s
Iteration  21: 153531.785 ops/s
Iteration  22: 154087.588 ops/s
Iteration  23: 153961.104 ops/s
Iteration  24: 152794.592 ops/s
Iteration  25: 153706.793 ops/s
Iteration  26: 153431.961 ops/s
Iteration  27: 153048.031 ops/s
Iteration  28: 153177.308 ops/s
Iteration  29: 153211.461 ops/s
Iteration  30: 152703.549 ops/s


Result "zipkin2.internal.JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_Overflow":
  152978.387 ±(99.9%) 400.460 ops/s [Average]
  (min, avg, max) = (151451.155, 152978.387, 154087.588), stdev = 599.390
  CI (99.9%): [152577.927, 153378.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_Overflow  thrpt   30  152978.387 ± 400.460  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_lessThanBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_lessThanBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61927.767 ops/s
# Warmup Iteration   2: 70123.988 ops/s
# Warmup Iteration   3: 75368.115 ops/s
# Warmup Iteration   4: 118073.521 ops/s
# Warmup Iteration   5: 118548.713 ops/s
# Warmup Iteration   6: 119759.311 ops/s
# Warmup Iteration   7: 118487.583 ops/s
# Warmup Iteration   8: 119551.304 ops/s
# Warmup Iteration   9: 118548.452 ops/s
# Warmup Iteration  10: 119510.263 ops/s
# Warmup Iteration  11: 120106.287 ops/s
# Warmup Iteration  12: 119100.875 ops/s
# Warmup Iteration  13: 105855.496 ops/s
# Warmup Iteration  14: 89264.622 ops/s
# Warmup Iteration  15: 119951.039 ops/s
# Warmup Iteration  16: 119963.584 ops/s
# Warmup Iteration  17: 122696.039 ops/s
# Warmup Iteration  18: 122933.874 ops/s
# Warmup Iteration  19: 121795.498 ops/s
# Warmup Iteration  20: 122524.648 ops/s
# Warmup Iteration  21: 122708.934 ops/s
# Warmup Iteration  22: 122938.820 ops/s
# Warmup Iteration  23: 122351.737 ops/s
# Warmup Iteration  24: 122595.763 ops/s
# Warmup Iteration  25: 122176.983 ops/s
# Warmup Iteration  26: 122586.579 ops/s
# Warmup Iteration  27: 122343.953 ops/s
# Warmup Iteration  28: 123120.118 ops/s
# Warmup Iteration  29: 122342.228 ops/s
# Warmup Iteration  30: 123315.140 ops/s
Iteration   1: 122530.950 ops/s
Iteration   2: 122092.242 ops/s
Iteration   3: 121871.321 ops/s
Iteration   4: 122734.561 ops/s
Iteration   5: 122140.446 ops/s
Iteration   6: 122822.721 ops/s
Iteration   7: 122354.342 ops/s
Iteration   8: 121878.015 ops/s
Iteration   9: 123322.293 ops/s
Iteration  10: 122890.930 ops/s
Iteration  11: 122836.166 ops/s
Iteration  12: 122750.604 ops/s
Iteration  13: 121743.201 ops/s
Iteration  14: 122848.395 ops/s
Iteration  15: 121241.306 ops/s
Iteration  16: 120957.493 ops/s
Iteration  17: 122448.732 ops/s
Iteration  18: 122391.598 ops/s
Iteration  19: 122599.515 ops/s
Iteration  20: 122246.077 ops/s
Iteration  21: 122396.455 ops/s
Iteration  22: 122606.013 ops/s
Iteration  23: 122399.542 ops/s
Iteration  24: 122360.469 ops/s
Iteration  25: 122685.478 ops/s
Iteration  26: 122500.994 ops/s
Iteration  27: 122906.026 ops/s
Iteration  28: 122171.735 ops/s
Iteration  29: 122902.219 ops/s
Iteration  30: 122944.867 ops/s


Result "zipkin2.internal.JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_lessThanBytes":
  122419.157 ±(99.9%) 340.502 ops/s [Average]
  (min, avg, max) = (120957.493, 122419.157, 123322.293), stdev = 509.647
  CI (99.9%): [122078.655, 122759.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score     Error  Units
JsonCodecTest._Benchmark.benchmark_doesntStackOverflowOnToBufferWriterBug_lessThanBytes  thrpt   30  122419.157 ± 340.502  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.JsonCodecTest._Benchmark.benchmark_exceptionReading_malformedJsonWraps$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.JsonCodecTest._Benchmark.benchmark_exceptionReading_malformedJsonWraps

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46845.231 ops/s
# Warmup Iteration   2: 61980.767 ops/s
# Warmup Iteration   3: 112624.385 ops/s
# Warmup Iteration   4: 112435.847 ops/s
# Warmup Iteration   5: 112981.985 ops/s
# Warmup Iteration   6: 112780.576 ops/s
# Warmup Iteration   7: 112046.893 ops/s
# Warmup Iteration   8: 81310.276 ops/s
# Warmup Iteration   9: 113823.785 ops/s
# Warmup Iteration  10: 114131.170 ops/s
# Warmup Iteration  11: 114311.798 ops/s
# Warmup Iteration  12: 112298.533 ops/s
# Warmup Iteration  13: 114110.904 ops/s
# Warmup Iteration  14: 114455.388 ops/s
# Warmup Iteration  15: 113244.383 ops/s
# Warmup Iteration  16: 112514.648 ops/s
# Warmup Iteration  17: 116296.064 ops/s
# Warmup Iteration  18: 117598.642 ops/s
# Warmup Iteration  19: 117067.649 ops/s
# Warmup Iteration  20: 115445.014 ops/s
# Warmup Iteration  21: 116337.759 ops/s
# Warmup Iteration  22: 117404.608 ops/s
# Warmup Iteration  23: 116021.529 ops/s
# Warmup Iteration  24: 115912.815 ops/s
# Warmup Iteration  25: 117209.883 ops/s
# Warmup Iteration  26: 115710.255 ops/s
# Warmup Iteration  27: 115226.215 ops/s
# Warmup Iteration  28: 116616.510 ops/s
# Warmup Iteration  29: 116772.243 ops/s
# Warmup Iteration  30: 115944.979 ops/s
Iteration   1: 116586.675 ops/s
Iteration   2: 116561.736 ops/s
Iteration   3: 115568.404 ops/s
Iteration   4: 118773.317 ops/s
Iteration   5: 117657.384 ops/s
Iteration   6: 116279.285 ops/s
Iteration   7: 118076.365 ops/s
Iteration   8: 117451.830 ops/s
Iteration   9: 117350.842 ops/s
Iteration  10: 115886.260 ops/s
Iteration  11: 117863.545 ops/s
Iteration  12: 117742.942 ops/s
Iteration  13: 117297.200 ops/s
Iteration  14: 116810.133 ops/s
Iteration  15: 117730.961 ops/s
Iteration  16: 117250.809 ops/s
Iteration  17: 115676.068 ops/s
Iteration  18: 116207.655 ops/s
Iteration  19: 115380.591 ops/s
Iteration  20: 117017.050 ops/s
Iteration  21: 117068.705 ops/s
Iteration  22: 117182.429 ops/s
Iteration  23: 116191.231 ops/s
Iteration  24: 115500.331 ops/s
Iteration  25: 115942.424 ops/s
Iteration  26: 115236.404 ops/s
Iteration  27: 116424.366 ops/s
Iteration  28: 116474.824 ops/s
Iteration  29: 116047.608 ops/s
Iteration  30: 116654.069 ops/s


Result "zipkin2.internal.JsonCodecTest._Benchmark.benchmark_exceptionReading_malformedJsonWraps":
  116729.715 ±(99.9%) 593.308 ops/s [Average]
  (min, avg, max) = (115236.404, 116729.715, 118773.317), stdev = 888.035
  CI (99.9%): [116136.407, 117323.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
JsonCodecTest._Benchmark.benchmark_exceptionReading_malformedJsonWraps  thrpt   30  116729.715 ± 593.308  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.JsonEscaperTest._Benchmark.benchmark_testJsonEscape$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.JsonEscaperTest._Benchmark.benchmark_testJsonEscape

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 210148.740 ops/s
# Warmup Iteration   2: 239262.771 ops/s
# Warmup Iteration   3: 461249.218 ops/s
# Warmup Iteration   4: 479175.981 ops/s
# Warmup Iteration   5: 478489.746 ops/s
# Warmup Iteration   6: 483804.473 ops/s
# Warmup Iteration   7: 482646.768 ops/s
# Warmup Iteration   8: 427408.719 ops/s
# Warmup Iteration   9: 381268.812 ops/s
# Warmup Iteration  10: 478829.529 ops/s
# Warmup Iteration  11: 479009.282 ops/s
# Warmup Iteration  12: 477344.722 ops/s
# Warmup Iteration  13: 479733.639 ops/s
# Warmup Iteration  14: 478922.788 ops/s
# Warmup Iteration  15: 473812.021 ops/s
# Warmup Iteration  16: 479853.126 ops/s
# Warmup Iteration  17: 482512.351 ops/s
# Warmup Iteration  18: 481113.438 ops/s
# Warmup Iteration  19: 481716.411 ops/s
# Warmup Iteration  20: 478372.037 ops/s
# Warmup Iteration  21: 478792.082 ops/s
# Warmup Iteration  22: 482038.741 ops/s
# Warmup Iteration  23: 483776.127 ops/s
# Warmup Iteration  24: 482698.977 ops/s
# Warmup Iteration  25: 481679.632 ops/s
# Warmup Iteration  26: 480784.295 ops/s
# Warmup Iteration  27: 480640.467 ops/s
# Warmup Iteration  28: 482346.111 ops/s
# Warmup Iteration  29: 483502.458 ops/s
# Warmup Iteration  30: 482101.280 ops/s
Iteration   1: 477640.153 ops/s
Iteration   2: 478000.828 ops/s
Iteration   3: 483059.907 ops/s
Iteration   4: 476461.427 ops/s
Iteration   5: 477934.144 ops/s
Iteration   6: 477318.354 ops/s
Iteration   7: 480800.566 ops/s
Iteration   8: 482300.838 ops/s
Iteration   9: 480791.210 ops/s
Iteration  10: 480305.729 ops/s
Iteration  11: 480705.935 ops/s
Iteration  12: 482435.485 ops/s
Iteration  13: 480192.161 ops/s
Iteration  14: 480233.683 ops/s
Iteration  15: 481777.313 ops/s
Iteration  16: 476016.634 ops/s
Iteration  17: 483719.018 ops/s
Iteration  18: 484368.901 ops/s
Iteration  19: 483301.608 ops/s
Iteration  20: 482017.073 ops/s
Iteration  21: 480421.831 ops/s
Iteration  22: 483679.143 ops/s
Iteration  23: 480849.146 ops/s
Iteration  24: 478807.967 ops/s
Iteration  25: 479621.018 ops/s
Iteration  26: 478807.181 ops/s
Iteration  27: 478806.535 ops/s
Iteration  28: 480421.228 ops/s
Iteration  29: 479569.908 ops/s
Iteration  30: 477283.572 ops/s


Result "zipkin2.internal.JsonEscaperTest._Benchmark.benchmark_testJsonEscape":
  480254.950 ±(99.9%) 1507.468 ops/s [Average]
  (min, avg, max) = (476016.634, 480254.950, 484368.901), stdev = 2256.307
  CI (99.9%): [478747.482, 481762.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
JsonEscaperTest._Benchmark.benchmark_testJsonEscape  thrpt   30  480254.950 ± 1507.468  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.JsonEscaperTest._Benchmark.benchmark_testJsonEscapedSizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.JsonEscaperTest._Benchmark.benchmark_testJsonEscapedSizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 295140.410 ops/s
# Warmup Iteration   2: 389554.051 ops/s
# Warmup Iteration   3: 761679.027 ops/s
# Warmup Iteration   4: 747538.341 ops/s
# Warmup Iteration   5: 754821.022 ops/s
# Warmup Iteration   6: 756416.498 ops/s
# Warmup Iteration   7: 552444.752 ops/s
# Warmup Iteration   8: 728711.261 ops/s
# Warmup Iteration   9: 760077.541 ops/s
# Warmup Iteration  10: 760404.229 ops/s
# Warmup Iteration  11: 761525.625 ops/s
# Warmup Iteration  12: 762323.967 ops/s
# Warmup Iteration  13: 762111.801 ops/s
# Warmup Iteration  14: 760552.881 ops/s
# Warmup Iteration  15: 760486.736 ops/s
# Warmup Iteration  16: 761378.197 ops/s
# Warmup Iteration  17: 760669.270 ops/s
# Warmup Iteration  18: 758939.770 ops/s
# Warmup Iteration  19: 759500.140 ops/s
# Warmup Iteration  20: 759898.780 ops/s
# Warmup Iteration  21: 757201.708 ops/s
# Warmup Iteration  22: 759918.939 ops/s
# Warmup Iteration  23: 758397.423 ops/s
# Warmup Iteration  24: 758456.533 ops/s
# Warmup Iteration  25: 757194.288 ops/s
# Warmup Iteration  26: 759020.502 ops/s
# Warmup Iteration  27: 756353.098 ops/s
# Warmup Iteration  28: 751295.339 ops/s
# Warmup Iteration  29: 758231.906 ops/s
# Warmup Iteration  30: 756290.545 ops/s
Iteration   1: 750912.363 ops/s
Iteration   2: 754296.444 ops/s
Iteration   3: 755503.148 ops/s
Iteration   4: 754937.279 ops/s
Iteration   5: 750496.914 ops/s
Iteration   6: 755890.311 ops/s
Iteration   7: 755311.452 ops/s
Iteration   8: 754459.372 ops/s
Iteration   9: 754014.523 ops/s
Iteration  10: 758408.075 ops/s
Iteration  11: 755283.298 ops/s
Iteration  12: 751632.596 ops/s
Iteration  13: 753497.947 ops/s
Iteration  14: 751679.753 ops/s
Iteration  15: 748869.789 ops/s
Iteration  16: 757546.684 ops/s
Iteration  17: 755354.806 ops/s
Iteration  18: 759718.674 ops/s
Iteration  19: 756170.872 ops/s
Iteration  20: 755481.753 ops/s
Iteration  21: 757969.935 ops/s
Iteration  22: 756614.927 ops/s
Iteration  23: 752083.650 ops/s
Iteration  24: 750385.538 ops/s
Iteration  25: 758269.154 ops/s
Iteration  26: 757720.537 ops/s
Iteration  27: 756429.685 ops/s
Iteration  28: 755859.484 ops/s
Iteration  29: 756306.626 ops/s
Iteration  30: 755851.431 ops/s


Result "zipkin2.internal.JsonEscaperTest._Benchmark.benchmark_testJsonEscapedSizeInBytes":
  754898.567 ±(99.9%) 1791.396 ops/s [Average]
  (min, avg, max) = (748869.789, 754898.567, 759718.674), stdev = 2681.278
  CI (99.9%): [753107.171, 756689.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
JsonEscaperTest._Benchmark.benchmark_testJsonEscapedSizeInBytes  thrpt   30  754898.567 ± 1791.396  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_boolean_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_boolean_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 234015.162 ops/s
# Warmup Iteration   2: 402289.946 ops/s
# Warmup Iteration   3: 613329.943 ops/s
# Warmup Iteration   4: 611710.156 ops/s
# Warmup Iteration   5: 619187.221 ops/s
# Warmup Iteration   6: 449282.821 ops/s
# Warmup Iteration   7: 615641.023 ops/s
# Warmup Iteration   8: 598465.261 ops/s
# Warmup Iteration   9: 617622.003 ops/s
# Warmup Iteration  10: 619136.317 ops/s
# Warmup Iteration  11: 618277.242 ops/s
# Warmup Iteration  12: 622091.096 ops/s
# Warmup Iteration  13: 613965.633 ops/s
# Warmup Iteration  14: 617873.002 ops/s
# Warmup Iteration  15: 607334.295 ops/s
# Warmup Iteration  16: 608920.398 ops/s
# Warmup Iteration  17: 607585.203 ops/s
# Warmup Iteration  18: 604576.410 ops/s
# Warmup Iteration  19: 607747.620 ops/s
# Warmup Iteration  20: 618984.406 ops/s
# Warmup Iteration  21: 618160.559 ops/s
# Warmup Iteration  22: 608280.400 ops/s
# Warmup Iteration  23: 616228.878 ops/s
# Warmup Iteration  24: 602813.173 ops/s
# Warmup Iteration  25: 611999.442 ops/s
# Warmup Iteration  26: 590674.125 ops/s
# Warmup Iteration  27: 611392.928 ops/s
# Warmup Iteration  28: 604426.010 ops/s
# Warmup Iteration  29: 613840.803 ops/s
# Warmup Iteration  30: 607855.423 ops/s
Iteration   1: 603961.372 ops/s
Iteration   2: 627847.695 ops/s
Iteration   3: 615842.437 ops/s
Iteration   4: 628979.669 ops/s
Iteration   5: 608204.535 ops/s
Iteration   6: 619988.286 ops/s
Iteration   7: 600024.584 ops/s
Iteration   8: 598761.664 ops/s
Iteration   9: 616003.572 ops/s
Iteration  10: 605344.797 ops/s
Iteration  11: 605993.444 ops/s
Iteration  12: 616286.110 ops/s
Iteration  13: 607224.302 ops/s
Iteration  14: 618139.994 ops/s
Iteration  15: 619659.693 ops/s
Iteration  16: 608704.753 ops/s
Iteration  17: 615354.293 ops/s
Iteration  18: 617212.015 ops/s
Iteration  19: 609017.187 ops/s
Iteration  20: 600001.738 ops/s
Iteration  21: 603816.191 ops/s
Iteration  22: 602536.982 ops/s
Iteration  23: 608829.343 ops/s
Iteration  24: 618042.924 ops/s
Iteration  25: 602802.861 ops/s
Iteration  26: 597696.023 ops/s
Iteration  27: 606226.002 ops/s
Iteration  28: 607963.220 ops/s
Iteration  29: 608157.027 ops/s
Iteration  30: 609711.808 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_boolean_sizeInBytes":
  610277.817 ±(99.9%) 5442.995 ops/s [Average]
  (min, avg, max) = (597696.023, 610277.817, 628979.669), stdev = 8146.819
  CI (99.9%): [604834.823, 615720.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_boolean_sizeInBytes  thrpt   30  610277.817 ± 5442.995  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fieldNumber_malformed$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fieldNumber_malformed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152483.961 ops/s
# Warmup Iteration   2: 173223.653 ops/s
# Warmup Iteration   3: 286552.798 ops/s
# Warmup Iteration   4: 313294.609 ops/s
# Warmup Iteration   5: 314479.751 ops/s
# Warmup Iteration   6: 314863.853 ops/s
# Warmup Iteration   7: 314039.250 ops/s
# Warmup Iteration   8: 315796.409 ops/s
# Warmup Iteration   9: 313412.098 ops/s
# Warmup Iteration  10: 222327.223 ops/s
# Warmup Iteration  11: 314293.713 ops/s
# Warmup Iteration  12: 316243.581 ops/s
# Warmup Iteration  13: 314866.034 ops/s
# Warmup Iteration  14: 315006.938 ops/s
# Warmup Iteration  15: 314842.672 ops/s
# Warmup Iteration  16: 313043.235 ops/s
# Warmup Iteration  17: 321532.770 ops/s
# Warmup Iteration  18: 320682.341 ops/s
# Warmup Iteration  19: 320939.281 ops/s
# Warmup Iteration  20: 322564.852 ops/s
# Warmup Iteration  21: 321753.036 ops/s
# Warmup Iteration  22: 322701.821 ops/s
# Warmup Iteration  23: 321437.254 ops/s
# Warmup Iteration  24: 321315.903 ops/s
# Warmup Iteration  25: 321619.107 ops/s
# Warmup Iteration  26: 323366.935 ops/s
# Warmup Iteration  27: 322534.275 ops/s
# Warmup Iteration  28: 322221.528 ops/s
# Warmup Iteration  29: 323213.019 ops/s
# Warmup Iteration  30: 321578.780 ops/s
Iteration   1: 321960.199 ops/s
Iteration   2: 322658.261 ops/s
Iteration   3: 323654.187 ops/s
Iteration   4: 321404.165 ops/s
Iteration   5: 319551.626 ops/s
Iteration   6: 319173.865 ops/s
Iteration   7: 320183.758 ops/s
Iteration   8: 319135.168 ops/s
Iteration   9: 318775.750 ops/s
Iteration  10: 321383.779 ops/s
Iteration  11: 319760.198 ops/s
Iteration  12: 321514.452 ops/s
Iteration  13: 320758.797 ops/s
Iteration  14: 320807.942 ops/s
Iteration  15: 321907.773 ops/s
Iteration  16: 320001.449 ops/s
Iteration  17: 320257.792 ops/s
Iteration  18: 324049.568 ops/s
Iteration  19: 323216.113 ops/s
Iteration  20: 321063.460 ops/s
Iteration  21: 318608.222 ops/s
Iteration  22: 318981.624 ops/s
Iteration  23: 320287.098 ops/s
Iteration  24: 322626.068 ops/s
Iteration  25: 324310.241 ops/s
Iteration  26: 321236.751 ops/s
Iteration  27: 322611.544 ops/s
Iteration  28: 321928.126 ops/s
Iteration  29: 320462.822 ops/s
Iteration  30: 320991.203 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fieldNumber_malformed":
  321108.733 ±(99.9%) 1048.245 ops/s [Average]
  (min, avg, max) = (318608.222, 321108.733, 324310.241), stdev = 1568.963
  CI (99.9%): [320060.489, 322156.978] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_fieldNumber_malformed  thrpt   30  321108.733 ± 1048.245  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_key_fieldOneLengthDelimited$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_key_fieldOneLengthDelimited

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 223585.677 ops/s
# Warmup Iteration   2: 398082.577 ops/s
# Warmup Iteration   3: 595234.458 ops/s
# Warmup Iteration   4: 599770.842 ops/s
# Warmup Iteration   5: 602807.636 ops/s
# Warmup Iteration   6: 432756.279 ops/s
# Warmup Iteration   7: 602290.177 ops/s
# Warmup Iteration   8: 603071.090 ops/s
# Warmup Iteration   9: 603131.849 ops/s
# Warmup Iteration  10: 599701.277 ops/s
# Warmup Iteration  11: 601180.585 ops/s
# Warmup Iteration  12: 597898.927 ops/s
# Warmup Iteration  13: 600589.450 ops/s
# Warmup Iteration  14: 602883.010 ops/s
# Warmup Iteration  15: 598915.397 ops/s
# Warmup Iteration  16: 600144.745 ops/s
# Warmup Iteration  17: 593230.708 ops/s
# Warmup Iteration  18: 595541.142 ops/s
# Warmup Iteration  19: 600658.996 ops/s
# Warmup Iteration  20: 601078.203 ops/s
# Warmup Iteration  21: 604868.609 ops/s
# Warmup Iteration  22: 601401.567 ops/s
# Warmup Iteration  23: 606047.675 ops/s
# Warmup Iteration  24: 603895.591 ops/s
# Warmup Iteration  25: 602022.055 ops/s
# Warmup Iteration  26: 601634.990 ops/s
# Warmup Iteration  27: 606750.622 ops/s
# Warmup Iteration  28: 607954.364 ops/s
# Warmup Iteration  29: 603328.654 ops/s
# Warmup Iteration  30: 604106.097 ops/s
Iteration   1: 601305.569 ops/s
Iteration   2: 605637.008 ops/s
Iteration   3: 606022.750 ops/s
Iteration   4: 606244.458 ops/s
Iteration   5: 603146.331 ops/s
Iteration   6: 600572.011 ops/s
Iteration   7: 600124.704 ops/s
Iteration   8: 601790.009 ops/s
Iteration   9: 603698.834 ops/s
Iteration  10: 603267.266 ops/s
Iteration  11: 607228.450 ops/s
Iteration  12: 607017.435 ops/s
Iteration  13: 603987.721 ops/s
Iteration  14: 606553.481 ops/s
Iteration  15: 604624.275 ops/s
Iteration  16: 604692.487 ops/s
Iteration  17: 600730.672 ops/s
Iteration  18: 603209.412 ops/s
Iteration  19: 605632.810 ops/s
Iteration  20: 602175.441 ops/s
Iteration  21: 604344.961 ops/s
Iteration  22: 603161.980 ops/s
Iteration  23: 602021.208 ops/s
Iteration  24: 603675.235 ops/s
Iteration  25: 600975.326 ops/s
Iteration  26: 605234.530 ops/s
Iteration  27: 604161.827 ops/s
Iteration  28: 601737.406 ops/s
Iteration  29: 598644.093 ops/s
Iteration  30: 599484.773 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_key_fieldOneLengthDelimited":
  603370.082 ±(99.9%) 1540.282 ops/s [Average]
  (min, avg, max) = (598644.093, 603370.082, 607228.450), stdev = 2305.422
  CI (99.9%): [601829.800, 604910.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_key_fieldOneLengthDelimited  thrpt   30  603370.082 ± 1540.282  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefixAndValue_LENGTH_DELIMITED_truncated$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefixAndValue_LENGTH_DELIMITED_truncated

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142064.063 ops/s
# Warmup Iteration   2: 162766.832 ops/s
# Warmup Iteration   3: 268643.190 ops/s
# Warmup Iteration   4: 295474.877 ops/s
# Warmup Iteration   5: 296793.257 ops/s
# Warmup Iteration   6: 293516.037 ops/s
# Warmup Iteration   7: 294304.908 ops/s
# Warmup Iteration   8: 294281.267 ops/s
# Warmup Iteration   9: 294248.404 ops/s
# Warmup Iteration  10: 207712.831 ops/s
# Warmup Iteration  11: 296978.764 ops/s
# Warmup Iteration  12: 294103.372 ops/s
# Warmup Iteration  13: 294575.147 ops/s
# Warmup Iteration  14: 296131.763 ops/s
# Warmup Iteration  15: 295075.469 ops/s
# Warmup Iteration  16: 294749.127 ops/s
# Warmup Iteration  17: 301687.142 ops/s
# Warmup Iteration  18: 301145.562 ops/s
# Warmup Iteration  19: 301086.346 ops/s
# Warmup Iteration  20: 300967.349 ops/s
# Warmup Iteration  21: 299792.434 ops/s
# Warmup Iteration  22: 302786.818 ops/s
# Warmup Iteration  23: 298713.794 ops/s
# Warmup Iteration  24: 300065.224 ops/s
# Warmup Iteration  25: 298744.012 ops/s
# Warmup Iteration  26: 299688.366 ops/s
# Warmup Iteration  27: 302266.748 ops/s
# Warmup Iteration  28: 300996.690 ops/s
# Warmup Iteration  29: 300381.317 ops/s
# Warmup Iteration  30: 299141.606 ops/s
Iteration   1: 297842.989 ops/s
Iteration   2: 298154.446 ops/s
Iteration   3: 298021.891 ops/s
Iteration   4: 297565.243 ops/s
Iteration   5: 297271.080 ops/s
Iteration   6: 301217.957 ops/s
Iteration   7: 302489.563 ops/s
Iteration   8: 300735.546 ops/s
Iteration   9: 299836.437 ops/s
Iteration  10: 301619.414 ops/s
Iteration  11: 299751.964 ops/s
Iteration  12: 298977.773 ops/s
Iteration  13: 302762.010 ops/s
Iteration  14: 299786.276 ops/s
Iteration  15: 301651.514 ops/s
Iteration  16: 300133.006 ops/s
Iteration  17: 301215.435 ops/s
Iteration  18: 302745.383 ops/s
Iteration  19: 300534.678 ops/s
Iteration  20: 301251.331 ops/s
Iteration  21: 299244.312 ops/s
Iteration  22: 298260.881 ops/s
Iteration  23: 300322.016 ops/s
Iteration  24: 302712.156 ops/s
Iteration  25: 299349.308 ops/s
Iteration  26: 300311.490 ops/s
Iteration  27: 301534.970 ops/s
Iteration  28: 300302.917 ops/s
Iteration  29: 299342.485 ops/s
Iteration  30: 301977.469 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefixAndValue_LENGTH_DELIMITED_truncated":
  300230.731 ±(99.9%) 1077.153 ops/s [Average]
  (min, avg, max) = (297271.080, 300230.731, 302762.010), stdev = 1612.232
  CI (99.9%): [299153.578, 301307.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefixAndValue_LENGTH_DELIMITED_truncated  thrpt   30  300230.731 ± 1077.153  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefix_LENGTH_DELIMITED$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefix_LENGTH_DELIMITED

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 240794.836 ops/s
# Warmup Iteration   2: 416946.858 ops/s
# Warmup Iteration   3: 624287.091 ops/s
# Warmup Iteration   4: 627788.750 ops/s
# Warmup Iteration   5: 636497.214 ops/s
# Warmup Iteration   6: 457459.731 ops/s
# Warmup Iteration   7: 630058.365 ops/s
# Warmup Iteration   8: 629787.833 ops/s
# Warmup Iteration   9: 632628.631 ops/s
# Warmup Iteration  10: 637049.971 ops/s
# Warmup Iteration  11: 634978.513 ops/s
# Warmup Iteration  12: 631089.587 ops/s
# Warmup Iteration  13: 633788.260 ops/s
# Warmup Iteration  14: 635167.100 ops/s
# Warmup Iteration  15: 634718.015 ops/s
# Warmup Iteration  16: 622183.613 ops/s
# Warmup Iteration  17: 619090.922 ops/s
# Warmup Iteration  18: 628745.216 ops/s
# Warmup Iteration  19: 627236.813 ops/s
# Warmup Iteration  20: 631297.908 ops/s
# Warmup Iteration  21: 637372.652 ops/s
# Warmup Iteration  22: 624186.647 ops/s
# Warmup Iteration  23: 627909.572 ops/s
# Warmup Iteration  24: 632591.843 ops/s
# Warmup Iteration  25: 631192.915 ops/s
# Warmup Iteration  26: 631595.451 ops/s
# Warmup Iteration  27: 628385.130 ops/s
# Warmup Iteration  28: 632542.060 ops/s
# Warmup Iteration  29: 624538.623 ops/s
# Warmup Iteration  30: 632064.447 ops/s
Iteration   1: 625633.465 ops/s
Iteration   2: 623243.298 ops/s
Iteration   3: 625982.360 ops/s
Iteration   4: 626121.960 ops/s
Iteration   5: 624366.025 ops/s
Iteration   6: 623322.977 ops/s
Iteration   7: 626049.251 ops/s
Iteration   8: 629878.931 ops/s
Iteration   9: 634951.358 ops/s
Iteration  10: 637591.539 ops/s
Iteration  11: 626764.648 ops/s
Iteration  12: 632838.748 ops/s
Iteration  13: 640054.071 ops/s
Iteration  14: 633320.242 ops/s
Iteration  15: 628450.889 ops/s
Iteration  16: 634157.039 ops/s
Iteration  17: 626194.663 ops/s
Iteration  18: 634499.129 ops/s
Iteration  19: 633094.095 ops/s
Iteration  20: 627271.430 ops/s
Iteration  21: 630359.103 ops/s
Iteration  22: 628710.098 ops/s
Iteration  23: 628546.444 ops/s
Iteration  24: 620935.590 ops/s
Iteration  25: 633224.220 ops/s
Iteration  26: 633142.508 ops/s
Iteration  27: 625680.304 ops/s
Iteration  28: 630417.199 ops/s
Iteration  29: 625418.995 ops/s
Iteration  30: 630133.167 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefix_LENGTH_DELIMITED":
  629345.125 ±(99.9%) 3052.521 ops/s [Average]
  (min, avg, max) = (620935.590, 629345.125, 640054.071), stdev = 4568.871
  CI (99.9%): [626292.603, 632397.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_readLengthPrefix_LENGTH_DELIMITED  thrpt   30  629345.125 ± 3052.521  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_read_FIXED64$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_read_FIXED64

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 247955.378 ops/s
# Warmup Iteration   2: 420505.965 ops/s
# Warmup Iteration   3: 618631.603 ops/s
# Warmup Iteration   4: 627311.865 ops/s
# Warmup Iteration   5: 623850.252 ops/s
# Warmup Iteration   6: 455437.527 ops/s
# Warmup Iteration   7: 621204.663 ops/s
# Warmup Iteration   8: 617423.705 ops/s
# Warmup Iteration   9: 621774.206 ops/s
# Warmup Iteration  10: 623131.244 ops/s
# Warmup Iteration  11: 629933.164 ops/s
# Warmup Iteration  12: 624517.404 ops/s
# Warmup Iteration  13: 628391.358 ops/s
# Warmup Iteration  14: 625751.747 ops/s
# Warmup Iteration  15: 603347.620 ops/s
# Warmup Iteration  16: 623122.317 ops/s
# Warmup Iteration  17: 624742.062 ops/s
# Warmup Iteration  18: 623884.314 ops/s
# Warmup Iteration  19: 615855.700 ops/s
# Warmup Iteration  20: 615927.199 ops/s
# Warmup Iteration  21: 625666.681 ops/s
# Warmup Iteration  22: 623120.442 ops/s
# Warmup Iteration  23: 622667.920 ops/s
# Warmup Iteration  24: 609959.108 ops/s
# Warmup Iteration  25: 626780.402 ops/s
# Warmup Iteration  26: 624269.010 ops/s
# Warmup Iteration  27: 623201.080 ops/s
# Warmup Iteration  28: 627300.398 ops/s
# Warmup Iteration  29: 615642.466 ops/s
# Warmup Iteration  30: 622254.637 ops/s
Iteration   1: 611302.293 ops/s
Iteration   2: 616153.039 ops/s
Iteration   3: 618265.173 ops/s
Iteration   4: 614648.503 ops/s
Iteration   5: 626010.112 ops/s
Iteration   6: 615044.634 ops/s
Iteration   7: 623844.432 ops/s
Iteration   8: 622825.378 ops/s
Iteration   9: 618516.495 ops/s
Iteration  10: 626235.143 ops/s
Iteration  11: 623470.028 ops/s
Iteration  12: 626568.294 ops/s
Iteration  13: 626928.744 ops/s
Iteration  14: 623968.404 ops/s
Iteration  15: 627527.421 ops/s
Iteration  16: 629515.886 ops/s
Iteration  17: 629441.595 ops/s
Iteration  18: 628150.505 ops/s
Iteration  19: 624329.769 ops/s
Iteration  20: 627509.643 ops/s
Iteration  21: 622147.052 ops/s
Iteration  22: 629384.120 ops/s
Iteration  23: 617398.765 ops/s
Iteration  24: 622139.806 ops/s
Iteration  25: 625308.679 ops/s
Iteration  26: 620495.444 ops/s
Iteration  27: 619513.358 ops/s
Iteration  28: 626382.126 ops/s
Iteration  29: 629039.319 ops/s
Iteration  30: 626238.258 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_read_FIXED64":
  623276.747 ±(99.9%) 3318.397 ops/s [Average]
  (min, avg, max) = (611302.293, 623276.747, 629515.886), stdev = 4966.820
  CI (99.9%): [619958.351, 626595.144] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_read_FIXED64  thrpt   30  623276.747 ± 3318.397  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED32$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED32

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 249895.726 ops/s
# Warmup Iteration   2: 424283.142 ops/s
# Warmup Iteration   3: 629133.095 ops/s
# Warmup Iteration   4: 640478.569 ops/s
# Warmup Iteration   5: 638419.958 ops/s
# Warmup Iteration   6: 461534.301 ops/s
# Warmup Iteration   7: 636400.239 ops/s
# Warmup Iteration   8: 635337.930 ops/s
# Warmup Iteration   9: 633242.088 ops/s
# Warmup Iteration  10: 635582.342 ops/s
# Warmup Iteration  11: 626809.229 ops/s
# Warmup Iteration  12: 632895.112 ops/s
# Warmup Iteration  13: 637656.080 ops/s
# Warmup Iteration  14: 633571.641 ops/s
# Warmup Iteration  15: 629986.650 ops/s
# Warmup Iteration  16: 620088.188 ops/s
# Warmup Iteration  17: 635438.568 ops/s
# Warmup Iteration  18: 634754.163 ops/s
# Warmup Iteration  19: 632512.126 ops/s
# Warmup Iteration  20: 638226.296 ops/s
# Warmup Iteration  21: 630036.487 ops/s
# Warmup Iteration  22: 632030.931 ops/s
# Warmup Iteration  23: 628307.508 ops/s
# Warmup Iteration  24: 638513.738 ops/s
# Warmup Iteration  25: 633682.049 ops/s
# Warmup Iteration  26: 638467.901 ops/s
# Warmup Iteration  27: 629902.758 ops/s
# Warmup Iteration  28: 636031.630 ops/s
# Warmup Iteration  29: 631740.827 ops/s
# Warmup Iteration  30: 631986.551 ops/s
Iteration   1: 632110.485 ops/s
Iteration   2: 637715.325 ops/s
Iteration   3: 634901.178 ops/s
Iteration   4: 638915.466 ops/s
Iteration   5: 635383.461 ops/s
Iteration   6: 638534.770 ops/s
Iteration   7: 629728.842 ops/s
Iteration   8: 639519.455 ops/s
Iteration   9: 634450.842 ops/s
Iteration  10: 634588.145 ops/s
Iteration  11: 632543.720 ops/s
Iteration  12: 625520.628 ops/s
Iteration  13: 634806.658 ops/s
Iteration  14: 637116.178 ops/s
Iteration  15: 638670.785 ops/s
Iteration  16: 634618.131 ops/s
Iteration  17: 633602.267 ops/s
Iteration  18: 629242.740 ops/s
Iteration  19: 640862.411 ops/s
Iteration  20: 631394.550 ops/s
Iteration  21: 637428.828 ops/s
Iteration  22: 630457.842 ops/s
Iteration  23: 631022.017 ops/s
Iteration  24: 638322.173 ops/s
Iteration  25: 639372.616 ops/s
Iteration  26: 636874.281 ops/s
Iteration  27: 630592.601 ops/s
Iteration  28: 633408.443 ops/s
Iteration  29: 638047.925 ops/s
Iteration  30: 625030.059 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED32":
  634492.761 ±(99.9%) 2740.230 ops/s [Average]
  (min, avg, max) = (625030.059, 634492.761, 640862.411), stdev = 4101.448
  CI (99.9%): [631752.530, 637232.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED32  thrpt   30  634492.761 ± 2740.230  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED64$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED64

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 249333.226 ops/s
# Warmup Iteration   2: 411766.709 ops/s
# Warmup Iteration   3: 639624.733 ops/s
# Warmup Iteration   4: 640053.090 ops/s
# Warmup Iteration   5: 643613.109 ops/s
# Warmup Iteration   6: 489242.376 ops/s
# Warmup Iteration   7: 614813.502 ops/s
# Warmup Iteration   8: 640437.362 ops/s
# Warmup Iteration   9: 643299.141 ops/s
# Warmup Iteration  10: 645359.379 ops/s
# Warmup Iteration  11: 642354.318 ops/s
# Warmup Iteration  12: 644113.309 ops/s
# Warmup Iteration  13: 645541.281 ops/s
# Warmup Iteration  14: 645736.935 ops/s
# Warmup Iteration  15: 644137.510 ops/s
# Warmup Iteration  16: 644525.555 ops/s
# Warmup Iteration  17: 638590.700 ops/s
# Warmup Iteration  18: 635305.254 ops/s
# Warmup Iteration  19: 637607.169 ops/s
# Warmup Iteration  20: 638068.860 ops/s
# Warmup Iteration  21: 639676.988 ops/s
# Warmup Iteration  22: 633917.427 ops/s
# Warmup Iteration  23: 633916.106 ops/s
# Warmup Iteration  24: 636324.034 ops/s
# Warmup Iteration  25: 641059.263 ops/s
# Warmup Iteration  26: 633038.001 ops/s
# Warmup Iteration  27: 635403.450 ops/s
# Warmup Iteration  28: 636324.923 ops/s
# Warmup Iteration  29: 638237.239 ops/s
# Warmup Iteration  30: 627281.829 ops/s
Iteration   1: 624345.915 ops/s
Iteration   2: 628545.470 ops/s
Iteration   3: 633514.086 ops/s
Iteration   4: 635055.009 ops/s
Iteration   5: 635233.957 ops/s
Iteration   6: 628898.261 ops/s
Iteration   7: 635557.386 ops/s
Iteration   8: 634118.824 ops/s
Iteration   9: 641314.101 ops/s
Iteration  10: 637354.783 ops/s
Iteration  11: 631534.312 ops/s
Iteration  12: 638937.207 ops/s
Iteration  13: 642912.319 ops/s
Iteration  14: 641163.882 ops/s
Iteration  15: 635947.919 ops/s
Iteration  16: 636658.302 ops/s
Iteration  17: 638332.613 ops/s
Iteration  18: 639912.057 ops/s
Iteration  19: 636139.705 ops/s
Iteration  20: 638020.945 ops/s
Iteration  21: 637848.596 ops/s
Iteration  22: 638233.058 ops/s
Iteration  23: 640654.547 ops/s
Iteration  24: 636152.319 ops/s
Iteration  25: 633037.159 ops/s
Iteration  26: 633101.974 ops/s
Iteration  27: 639428.099 ops/s
Iteration  28: 634748.800 ops/s
Iteration  29: 635234.398 ops/s
Iteration  30: 632625.878 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED64":
  635818.729 ±(99.9%) 2727.080 ops/s [Average]
  (min, avg, max) = (624345.915, 635818.729, 642912.319), stdev = 4081.766
  CI (99.9%): [633091.649, 638545.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_skipValue_FIXED64  thrpt   30  635818.729 ± 2727.080  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_LENGTH_DELIMITED$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_LENGTH_DELIMITED

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236181.684 ops/s
# Warmup Iteration   2: 380335.777 ops/s
# Warmup Iteration   3: 618443.719 ops/s
# Warmup Iteration   4: 621436.971 ops/s
# Warmup Iteration   5: 621003.711 ops/s
# Warmup Iteration   6: 506315.005 ops/s
# Warmup Iteration   7: 560929.678 ops/s
# Warmup Iteration   8: 624309.415 ops/s
# Warmup Iteration   9: 619926.193 ops/s
# Warmup Iteration  10: 628146.572 ops/s
# Warmup Iteration  11: 621898.062 ops/s
# Warmup Iteration  12: 626484.280 ops/s
# Warmup Iteration  13: 622558.910 ops/s
# Warmup Iteration  14: 615017.803 ops/s
# Warmup Iteration  15: 613295.291 ops/s
# Warmup Iteration  16: 622181.025 ops/s
# Warmup Iteration  17: 621072.306 ops/s
# Warmup Iteration  18: 613787.971 ops/s
# Warmup Iteration  19: 632308.915 ops/s
# Warmup Iteration  20: 621999.420 ops/s
# Warmup Iteration  21: 619515.342 ops/s
# Warmup Iteration  22: 615519.828 ops/s
# Warmup Iteration  23: 615363.052 ops/s
# Warmup Iteration  24: 619744.560 ops/s
# Warmup Iteration  25: 616987.665 ops/s
# Warmup Iteration  26: 613886.261 ops/s
# Warmup Iteration  27: 616601.987 ops/s
# Warmup Iteration  28: 617305.318 ops/s
# Warmup Iteration  29: 612976.489 ops/s
# Warmup Iteration  30: 620669.944 ops/s
Iteration   1: 619914.218 ops/s
Iteration   2: 618576.994 ops/s
Iteration   3: 620298.341 ops/s
Iteration   4: 614273.167 ops/s
Iteration   5: 618685.239 ops/s
Iteration   6: 615561.513 ops/s
Iteration   7: 615781.005 ops/s
Iteration   8: 613556.994 ops/s
Iteration   9: 615030.998 ops/s
Iteration  10: 615124.654 ops/s
Iteration  11: 616298.041 ops/s
Iteration  12: 617865.878 ops/s
Iteration  13: 620238.056 ops/s
Iteration  14: 620292.466 ops/s
Iteration  15: 619041.220 ops/s
Iteration  16: 610841.655 ops/s
Iteration  17: 616465.895 ops/s
Iteration  18: 616765.423 ops/s
Iteration  19: 621403.246 ops/s
Iteration  20: 618624.845 ops/s
Iteration  21: 615840.129 ops/s
Iteration  22: 611297.848 ops/s
Iteration  23: 622783.497 ops/s
Iteration  24: 611462.952 ops/s
Iteration  25: 613230.080 ops/s
Iteration  26: 606569.571 ops/s
Iteration  27: 617791.591 ops/s
Iteration  28: 601025.275 ops/s
Iteration  29: 606490.438 ops/s
Iteration  30: 618102.272 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_LENGTH_DELIMITED":
  615641.117 ±(99.9%) 3223.380 ops/s [Average]
  (min, avg, max) = (601025.275, 615641.117, 622783.497), stdev = 4824.604
  CI (99.9%): [612417.736, 618864.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_skipValue_LENGTH_DELIMITED  thrpt   30  615641.117 ± 3223.380  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_VARINT$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_VARINT

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 247344.499 ops/s
# Warmup Iteration   2: 412441.319 ops/s
# Warmup Iteration   3: 628882.237 ops/s
# Warmup Iteration   4: 631795.884 ops/s
# Warmup Iteration   5: 638573.054 ops/s
# Warmup Iteration   6: 475290.068 ops/s
# Warmup Iteration   7: 619559.712 ops/s
# Warmup Iteration   8: 631744.621 ops/s
# Warmup Iteration   9: 638467.207 ops/s
# Warmup Iteration  10: 638776.160 ops/s
# Warmup Iteration  11: 635619.177 ops/s
# Warmup Iteration  12: 634080.339 ops/s
# Warmup Iteration  13: 639447.432 ops/s
# Warmup Iteration  14: 633729.432 ops/s
# Warmup Iteration  15: 636481.183 ops/s
# Warmup Iteration  16: 641618.076 ops/s
# Warmup Iteration  17: 636645.754 ops/s
# Warmup Iteration  18: 636701.827 ops/s
# Warmup Iteration  19: 632952.619 ops/s
# Warmup Iteration  20: 636295.951 ops/s
# Warmup Iteration  21: 636585.936 ops/s
# Warmup Iteration  22: 636695.942 ops/s
# Warmup Iteration  23: 635012.279 ops/s
# Warmup Iteration  24: 637590.254 ops/s
# Warmup Iteration  25: 632901.970 ops/s
# Warmup Iteration  26: 634846.237 ops/s
# Warmup Iteration  27: 637799.060 ops/s
# Warmup Iteration  28: 631610.139 ops/s
# Warmup Iteration  29: 614433.755 ops/s
# Warmup Iteration  30: 624952.818 ops/s
Iteration   1: 635429.174 ops/s
Iteration   2: 629507.045 ops/s
Iteration   3: 634368.110 ops/s
Iteration   4: 641104.828 ops/s
Iteration   5: 633450.216 ops/s
Iteration   6: 633142.685 ops/s
Iteration   7: 635366.394 ops/s
Iteration   8: 642022.637 ops/s
Iteration   9: 634502.898 ops/s
Iteration  10: 631830.258 ops/s
Iteration  11: 632597.879 ops/s
Iteration  12: 631837.421 ops/s
Iteration  13: 629668.603 ops/s
Iteration  14: 639080.840 ops/s
Iteration  15: 637997.954 ops/s
Iteration  16: 627854.787 ops/s
Iteration  17: 633272.472 ops/s
Iteration  18: 630602.681 ops/s
Iteration  19: 639993.231 ops/s
Iteration  20: 630971.722 ops/s
Iteration  21: 633979.907 ops/s
Iteration  22: 633777.823 ops/s
Iteration  23: 636472.881 ops/s
Iteration  24: 632027.308 ops/s
Iteration  25: 636005.337 ops/s
Iteration  26: 637198.618 ops/s
Iteration  27: 636118.881 ops/s
Iteration  28: 631120.901 ops/s
Iteration  29: 634105.537 ops/s
Iteration  30: 633782.889 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_field_skipValue_VARINT":
  634306.397 ±(99.9%) 2292.785 ops/s [Average]
  (min, avg, max) = (627854.787, 634306.397, 642022.637), stdev = 3431.733
  CI (99.9%): [632013.612, 636599.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_field_skipValue_VARINT  thrpt   30  634306.397 ± 2292.785  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fixed32_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fixed32_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246839.832 ops/s
# Warmup Iteration   2: 419978.348 ops/s
# Warmup Iteration   3: 628103.170 ops/s
# Warmup Iteration   4: 639281.480 ops/s
# Warmup Iteration   5: 638157.207 ops/s
# Warmup Iteration   6: 461884.440 ops/s
# Warmup Iteration   7: 637381.802 ops/s
# Warmup Iteration   8: 629219.355 ops/s
# Warmup Iteration   9: 642306.627 ops/s
# Warmup Iteration  10: 634470.593 ops/s
# Warmup Iteration  11: 635620.762 ops/s
# Warmup Iteration  12: 641886.675 ops/s
# Warmup Iteration  13: 625115.610 ops/s
# Warmup Iteration  14: 628189.162 ops/s
# Warmup Iteration  15: 637539.462 ops/s
# Warmup Iteration  16: 632053.403 ops/s
# Warmup Iteration  17: 628464.524 ops/s
# Warmup Iteration  18: 632044.086 ops/s
# Warmup Iteration  19: 627518.476 ops/s
# Warmup Iteration  20: 628174.130 ops/s
# Warmup Iteration  21: 631432.099 ops/s
# Warmup Iteration  22: 630638.415 ops/s
# Warmup Iteration  23: 629009.213 ops/s
# Warmup Iteration  24: 636074.251 ops/s
# Warmup Iteration  25: 624999.817 ops/s
# Warmup Iteration  26: 632129.665 ops/s
# Warmup Iteration  27: 633053.775 ops/s
# Warmup Iteration  28: 628618.301 ops/s
# Warmup Iteration  29: 631409.968 ops/s
# Warmup Iteration  30: 628873.100 ops/s
Iteration   1: 634484.106 ops/s
Iteration   2: 633562.427 ops/s
Iteration   3: 630700.003 ops/s
Iteration   4: 629374.316 ops/s
Iteration   5: 631710.459 ops/s
Iteration   6: 627175.773 ops/s
Iteration   7: 627417.567 ops/s
Iteration   8: 629456.732 ops/s
Iteration   9: 629503.417 ops/s
Iteration  10: 631354.860 ops/s
Iteration  11: 632197.167 ops/s
Iteration  12: 633334.527 ops/s
Iteration  13: 627611.216 ops/s
Iteration  14: 627589.149 ops/s
Iteration  15: 626266.340 ops/s
Iteration  16: 630708.525 ops/s
Iteration  17: 626957.532 ops/s
Iteration  18: 632424.897 ops/s
Iteration  19: 631792.691 ops/s
Iteration  20: 629286.791 ops/s
Iteration  21: 636803.854 ops/s
Iteration  22: 631303.879 ops/s
Iteration  23: 628368.388 ops/s
Iteration  24: 635091.102 ops/s
Iteration  25: 633160.307 ops/s
Iteration  26: 625082.035 ops/s
Iteration  27: 615932.344 ops/s
Iteration  28: 617528.222 ops/s
Iteration  29: 631264.688 ops/s
Iteration  30: 633262.255 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fixed32_sizeInBytes":
  629690.186 ±(99.9%) 3008.296 ops/s [Average]
  (min, avg, max) = (615932.344, 629690.186, 636803.854), stdev = 4502.676
  CI (99.9%): [626681.890, 632698.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_fixed32_sizeInBytes  thrpt   30  629690.186 ± 3008.296  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fixed64_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fixed64_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246070.030 ops/s
# Warmup Iteration   2: 423899.769 ops/s
# Warmup Iteration   3: 627421.781 ops/s
# Warmup Iteration   4: 635728.715 ops/s
# Warmup Iteration   5: 632125.253 ops/s
# Warmup Iteration   6: 460227.406 ops/s
# Warmup Iteration   7: 639449.278 ops/s
# Warmup Iteration   8: 637554.700 ops/s
# Warmup Iteration   9: 645616.764 ops/s
# Warmup Iteration  10: 641551.772 ops/s
# Warmup Iteration  11: 635308.819 ops/s
# Warmup Iteration  12: 630198.606 ops/s
# Warmup Iteration  13: 637501.426 ops/s
# Warmup Iteration  14: 631694.621 ops/s
# Warmup Iteration  15: 634763.079 ops/s
# Warmup Iteration  16: 641077.042 ops/s
# Warmup Iteration  17: 641104.513 ops/s
# Warmup Iteration  18: 642850.538 ops/s
# Warmup Iteration  19: 642688.814 ops/s
# Warmup Iteration  20: 636378.340 ops/s
# Warmup Iteration  21: 638331.710 ops/s
# Warmup Iteration  22: 633243.878 ops/s
# Warmup Iteration  23: 641360.122 ops/s
# Warmup Iteration  24: 641810.144 ops/s
# Warmup Iteration  25: 642477.466 ops/s
# Warmup Iteration  26: 644057.849 ops/s
# Warmup Iteration  27: 636631.644 ops/s
# Warmup Iteration  28: 623776.187 ops/s
# Warmup Iteration  29: 631920.823 ops/s
# Warmup Iteration  30: 639467.400 ops/s
Iteration   1: 635331.547 ops/s
Iteration   2: 634569.007 ops/s
Iteration   3: 638531.432 ops/s
Iteration   4: 637375.063 ops/s
Iteration   5: 635113.118 ops/s
Iteration   6: 635367.564 ops/s
Iteration   7: 640496.868 ops/s
Iteration   8: 643500.943 ops/s
Iteration   9: 639002.935 ops/s
Iteration  10: 635801.149 ops/s
Iteration  11: 637060.329 ops/s
Iteration  12: 637241.187 ops/s
Iteration  13: 636084.234 ops/s
Iteration  14: 629716.468 ops/s
Iteration  15: 633179.364 ops/s
Iteration  16: 637229.935 ops/s
Iteration  17: 638418.917 ops/s
Iteration  18: 641608.796 ops/s
Iteration  19: 625942.945 ops/s
Iteration  20: 634361.176 ops/s
Iteration  21: 634110.630 ops/s
Iteration  22: 629372.998 ops/s
Iteration  23: 628640.745 ops/s
Iteration  24: 635498.010 ops/s
Iteration  25: 636419.040 ops/s
Iteration  26: 629981.327 ops/s
Iteration  27: 636053.438 ops/s
Iteration  28: 636828.431 ops/s
Iteration  29: 630938.987 ops/s
Iteration  30: 632231.294 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_fixed64_sizeInBytes":
  635200.263 ±(99.9%) 2631.541 ops/s [Average]
  (min, avg, max) = (625942.945, 635200.263, 643500.943), stdev = 3938.767
  CI (99.9%): [632568.721, 637831.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_fixed64_sizeInBytes  thrpt   30  635200.263 ± 2631.541  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_supportedFields$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_supportedFields

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148632.249 ops/s
# Warmup Iteration   2: 308321.755 ops/s
# Warmup Iteration   3: 447541.955 ops/s
# Warmup Iteration   4: 452347.112 ops/s
# Warmup Iteration   5: 321609.550 ops/s
# Warmup Iteration   6: 450493.602 ops/s
# Warmup Iteration   7: 449208.481 ops/s
# Warmup Iteration   8: 448636.792 ops/s
# Warmup Iteration   9: 449470.749 ops/s
# Warmup Iteration  10: 449699.265 ops/s
# Warmup Iteration  11: 446430.459 ops/s
# Warmup Iteration  12: 446393.579 ops/s
# Warmup Iteration  13: 445914.973 ops/s
# Warmup Iteration  14: 448106.605 ops/s
# Warmup Iteration  15: 449314.769 ops/s
# Warmup Iteration  16: 451594.452 ops/s
# Warmup Iteration  17: 451017.335 ops/s
# Warmup Iteration  18: 452667.017 ops/s
# Warmup Iteration  19: 452873.301 ops/s
# Warmup Iteration  20: 450921.037 ops/s
# Warmup Iteration  21: 449264.068 ops/s
# Warmup Iteration  22: 447722.021 ops/s
# Warmup Iteration  23: 449447.068 ops/s
# Warmup Iteration  24: 451210.415 ops/s
# Warmup Iteration  25: 448239.620 ops/s
# Warmup Iteration  26: 448325.813 ops/s
# Warmup Iteration  27: 451874.302 ops/s
# Warmup Iteration  28: 452973.811 ops/s
# Warmup Iteration  29: 451976.652 ops/s
# Warmup Iteration  30: 451416.770 ops/s
Iteration   1: 450272.102 ops/s
Iteration   2: 452181.327 ops/s
Iteration   3: 452805.969 ops/s
Iteration   4: 451897.732 ops/s
Iteration   5: 451051.224 ops/s
Iteration   6: 451124.579 ops/s
Iteration   7: 451675.838 ops/s
Iteration   8: 447960.547 ops/s
Iteration   9: 447806.290 ops/s
Iteration  10: 448040.599 ops/s
Iteration  11: 445949.234 ops/s
Iteration  12: 449804.001 ops/s
Iteration  13: 450585.298 ops/s
Iteration  14: 447893.698 ops/s
Iteration  15: 448152.492 ops/s
Iteration  16: 448273.725 ops/s
Iteration  17: 449384.708 ops/s
Iteration  18: 450879.097 ops/s
Iteration  19: 451074.928 ops/s
Iteration  20: 448365.850 ops/s
Iteration  21: 449051.842 ops/s
Iteration  22: 448490.510 ops/s
Iteration  23: 447164.001 ops/s
Iteration  24: 445408.143 ops/s
Iteration  25: 446226.354 ops/s
Iteration  26: 448583.831 ops/s
Iteration  27: 451902.786 ops/s
Iteration  28: 445781.679 ops/s
Iteration  29: 446522.112 ops/s
Iteration  30: 447069.397 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_supportedFields":
  449045.996 ±(99.9%) 1415.868 ops/s [Average]
  (min, avg, max) = (445408.143, 449045.996, 452805.969), stdev = 2119.205
  CI (99.9%): [447630.128, 450461.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_supportedFields  thrpt   30  449045.996 ± 1415.868  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_utf8_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_utf8_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245189.790 ops/s
# Warmup Iteration   2: 412945.265 ops/s
# Warmup Iteration   3: 615637.521 ops/s
# Warmup Iteration   4: 623213.961 ops/s
# Warmup Iteration   5: 618183.595 ops/s
# Warmup Iteration   6: 466847.496 ops/s
# Warmup Iteration   7: 616163.684 ops/s
# Warmup Iteration   8: 629131.016 ops/s
# Warmup Iteration   9: 628137.360 ops/s
# Warmup Iteration  10: 632324.216 ops/s
# Warmup Iteration  11: 632177.660 ops/s
# Warmup Iteration  12: 623461.644 ops/s
# Warmup Iteration  13: 623995.532 ops/s
# Warmup Iteration  14: 626629.258 ops/s
# Warmup Iteration  15: 628504.384 ops/s
# Warmup Iteration  16: 631598.923 ops/s
# Warmup Iteration  17: 627940.613 ops/s
# Warmup Iteration  18: 626342.176 ops/s
# Warmup Iteration  19: 627507.657 ops/s
# Warmup Iteration  20: 624843.117 ops/s
# Warmup Iteration  21: 630548.388 ops/s
# Warmup Iteration  22: 628072.358 ops/s
# Warmup Iteration  23: 629209.187 ops/s
# Warmup Iteration  24: 635722.477 ops/s
# Warmup Iteration  25: 630879.347 ops/s
# Warmup Iteration  26: 630805.181 ops/s
# Warmup Iteration  27: 618572.471 ops/s
# Warmup Iteration  28: 626019.238 ops/s
# Warmup Iteration  29: 626018.641 ops/s
# Warmup Iteration  30: 625755.415 ops/s
Iteration   1: 623057.562 ops/s
Iteration   2: 619674.759 ops/s
Iteration   3: 625690.406 ops/s
Iteration   4: 630324.837 ops/s
Iteration   5: 629869.926 ops/s
Iteration   6: 633545.462 ops/s
Iteration   7: 633801.565 ops/s
Iteration   8: 632687.454 ops/s
Iteration   9: 631606.209 ops/s
Iteration  10: 632153.309 ops/s
Iteration  11: 631858.793 ops/s
Iteration  12: 632678.128 ops/s
Iteration  13: 630736.964 ops/s
Iteration  14: 632177.775 ops/s
Iteration  15: 626501.731 ops/s
Iteration  16: 626706.185 ops/s
Iteration  17: 629151.057 ops/s
Iteration  18: 624312.695 ops/s
Iteration  19: 627974.792 ops/s
Iteration  20: 632007.636 ops/s
Iteration  21: 634232.454 ops/s
Iteration  22: 631244.278 ops/s
Iteration  23: 623099.003 ops/s
Iteration  24: 622504.965 ops/s
Iteration  25: 625125.865 ops/s
Iteration  26: 612395.467 ops/s
Iteration  27: 616322.637 ops/s
Iteration  28: 625039.123 ops/s
Iteration  29: 627613.514 ops/s
Iteration  30: 617270.229 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_utf8_sizeInBytes":
  627378.826 ±(99.9%) 3774.134 ops/s [Average]
  (min, avg, max) = (612395.467, 627378.826, 634232.454), stdev = 5648.946
  CI (99.9%): [623604.692, 631152.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_utf8_sizeInBytes  thrpt   30  627378.826 ± 3774.134  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_varint_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_varint_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217395.921 ops/s
# Warmup Iteration   2: 394655.010 ops/s
# Warmup Iteration   3: 585094.052 ops/s
# Warmup Iteration   4: 585982.701 ops/s
# Warmup Iteration   5: 589059.971 ops/s
# Warmup Iteration   6: 422251.967 ops/s
# Warmup Iteration   7: 586962.012 ops/s
# Warmup Iteration   8: 588699.302 ops/s
# Warmup Iteration   9: 599078.633 ops/s
# Warmup Iteration  10: 591190.450 ops/s
# Warmup Iteration  11: 580871.056 ops/s
# Warmup Iteration  12: 580744.398 ops/s
# Warmup Iteration  13: 585399.765 ops/s
# Warmup Iteration  14: 589398.660 ops/s
# Warmup Iteration  15: 584987.979 ops/s
# Warmup Iteration  16: 582431.091 ops/s
# Warmup Iteration  17: 584525.623 ops/s
# Warmup Iteration  18: 588360.507 ops/s
# Warmup Iteration  19: 588289.183 ops/s
# Warmup Iteration  20: 593632.995 ops/s
# Warmup Iteration  21: 582019.641 ops/s
# Warmup Iteration  22: 585308.796 ops/s
# Warmup Iteration  23: 584020.499 ops/s
# Warmup Iteration  24: 587046.873 ops/s
# Warmup Iteration  25: 588543.189 ops/s
# Warmup Iteration  26: 591526.760 ops/s
# Warmup Iteration  27: 585467.974 ops/s
# Warmup Iteration  28: 588930.360 ops/s
# Warmup Iteration  29: 586324.057 ops/s
# Warmup Iteration  30: 589900.274 ops/s
Iteration   1: 587020.423 ops/s
Iteration   2: 592065.155 ops/s
Iteration   3: 586117.928 ops/s
Iteration   4: 589051.645 ops/s
Iteration   5: 577649.789 ops/s
Iteration   6: 582314.619 ops/s
Iteration   7: 587923.430 ops/s
Iteration   8: 586036.117 ops/s
Iteration   9: 585780.542 ops/s
Iteration  10: 591942.779 ops/s
Iteration  11: 583757.580 ops/s
Iteration  12: 580884.055 ops/s
Iteration  13: 585590.992 ops/s
Iteration  14: 578359.191 ops/s
Iteration  15: 585149.992 ops/s
Iteration  16: 586544.037 ops/s
Iteration  17: 592594.079 ops/s
Iteration  18: 584343.792 ops/s
Iteration  19: 583550.904 ops/s
Iteration  20: 589518.492 ops/s
Iteration  21: 584513.210 ops/s
Iteration  22: 576908.692 ops/s
Iteration  23: 571061.613 ops/s
Iteration  24: 583153.410 ops/s
Iteration  25: 585209.957 ops/s
Iteration  26: 588057.218 ops/s
Iteration  27: 588389.489 ops/s
Iteration  28: 591783.108 ops/s
Iteration  29: 592225.425 ops/s
Iteration  30: 590505.222 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_varint_sizeInBytes":
  585600.096 ±(99.9%) 3373.316 ops/s [Average]
  (min, avg, max) = (571061.613, 585600.096, 592594.079), stdev = 5049.021
  CI (99.9%): [582226.780, 588973.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
Proto3FieldsTest._Benchmark.benchmark_varint_sizeInBytes  thrpt   30  585600.096 ± 3373.316  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_wireType_unsupported$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_wireType_unsupported

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 85146.387 ops/s
# Warmup Iteration   2: 96846.975 ops/s
# Warmup Iteration   3: 117317.782 ops/s
# Warmup Iteration   4: 158919.725 ops/s
# Warmup Iteration   5: 157922.109 ops/s
# Warmup Iteration   6: 158499.980 ops/s
# Warmup Iteration   7: 159351.949 ops/s
# Warmup Iteration   8: 159940.942 ops/s
# Warmup Iteration   9: 159366.801 ops/s
# Warmup Iteration  10: 159860.047 ops/s
# Warmup Iteration  11: 159173.438 ops/s
# Warmup Iteration  12: 151858.079 ops/s
# Warmup Iteration  13: 112909.453 ops/s
# Warmup Iteration  14: 158509.435 ops/s
# Warmup Iteration  15: 158781.851 ops/s
# Warmup Iteration  16: 158955.151 ops/s
# Warmup Iteration  17: 164691.292 ops/s
# Warmup Iteration  18: 164742.638 ops/s
# Warmup Iteration  19: 164705.969 ops/s
# Warmup Iteration  20: 165175.120 ops/s
# Warmup Iteration  21: 164715.235 ops/s
# Warmup Iteration  22: 163644.477 ops/s
# Warmup Iteration  23: 164922.422 ops/s
# Warmup Iteration  24: 163806.372 ops/s
# Warmup Iteration  25: 165715.146 ops/s
# Warmup Iteration  26: 163527.207 ops/s
# Warmup Iteration  27: 164273.215 ops/s
# Warmup Iteration  28: 163822.345 ops/s
# Warmup Iteration  29: 164787.224 ops/s
# Warmup Iteration  30: 164733.402 ops/s
Iteration   1: 165197.416 ops/s
Iteration   2: 164620.060 ops/s
Iteration   3: 163925.415 ops/s
Iteration   4: 164939.994 ops/s
Iteration   5: 163379.946 ops/s
Iteration   6: 162619.567 ops/s
Iteration   7: 166372.804 ops/s
Iteration   8: 165716.565 ops/s
Iteration   9: 164697.315 ops/s
Iteration  10: 164973.417 ops/s
Iteration  11: 164142.554 ops/s
Iteration  12: 164817.083 ops/s
Iteration  13: 163065.907 ops/s
Iteration  14: 163903.378 ops/s
Iteration  15: 165003.618 ops/s
Iteration  16: 165347.415 ops/s
Iteration  17: 164663.302 ops/s
Iteration  18: 164152.583 ops/s
Iteration  19: 164838.145 ops/s
Iteration  20: 166313.419 ops/s
Iteration  21: 166949.480 ops/s
Iteration  22: 165878.657 ops/s
Iteration  23: 164027.380 ops/s
Iteration  24: 165716.478 ops/s
Iteration  25: 165970.225 ops/s
Iteration  26: 165774.461 ops/s
Iteration  27: 165199.554 ops/s
Iteration  28: 164659.492 ops/s
Iteration  29: 164510.048 ops/s
Iteration  30: 163776.671 ops/s


Result "zipkin2.internal.Proto3FieldsTest._Benchmark.benchmark_wireType_unsupported":
  164838.412 ±(99.9%) 670.648 ops/s [Average]
  (min, avg, max) = (162619.567, 164838.412, 166949.480), stdev = 1003.795
  CI (99.9%): [164167.764, 165509.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
Proto3FieldsTest._Benchmark.benchmark_wireType_unsupported  thrpt   30  164838.412 ± 670.648  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_empty$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 399459.615 ops/s
# Warmup Iteration   2: 448490.783 ops/s
# Warmup Iteration   3: 908567.767 ops/s
# Warmup Iteration   4: 899952.338 ops/s
# Warmup Iteration   5: 911088.715 ops/s
# Warmup Iteration   6: 913884.204 ops/s
# Warmup Iteration   7: 914592.330 ops/s
# Warmup Iteration   8: 738386.245 ops/s
# Warmup Iteration   9: 794687.099 ops/s
# Warmup Iteration  10: 903383.592 ops/s
# Warmup Iteration  11: 903723.448 ops/s
# Warmup Iteration  12: 906857.443 ops/s
# Warmup Iteration  13: 907312.993 ops/s
# Warmup Iteration  14: 908053.719 ops/s
# Warmup Iteration  15: 909497.268 ops/s
# Warmup Iteration  16: 905870.341 ops/s
# Warmup Iteration  17: 903498.026 ops/s
# Warmup Iteration  18: 900909.277 ops/s
# Warmup Iteration  19: 901197.103 ops/s
# Warmup Iteration  20: 900977.854 ops/s
# Warmup Iteration  21: 897892.306 ops/s
# Warmup Iteration  22: 901719.748 ops/s
# Warmup Iteration  23: 901352.456 ops/s
# Warmup Iteration  24: 903174.717 ops/s
# Warmup Iteration  25: 899603.324 ops/s
# Warmup Iteration  26: 897531.661 ops/s
# Warmup Iteration  27: 898302.950 ops/s
# Warmup Iteration  28: 896874.401 ops/s
# Warmup Iteration  29: 898614.090 ops/s
# Warmup Iteration  30: 899555.972 ops/s
Iteration   1: 900647.371 ops/s
Iteration   2: 897404.657 ops/s
Iteration   3: 898979.518 ops/s
Iteration   4: 899661.134 ops/s
Iteration   5: 895441.071 ops/s
Iteration   6: 900826.836 ops/s
Iteration   7: 902231.812 ops/s
Iteration   8: 898633.863 ops/s
Iteration   9: 896450.585 ops/s
Iteration  10: 898973.457 ops/s
Iteration  11: 897069.228 ops/s
Iteration  12: 899074.497 ops/s
Iteration  13: 894944.149 ops/s
Iteration  14: 900884.596 ops/s
Iteration  15: 899516.914 ops/s
Iteration  16: 900431.593 ops/s
Iteration  17: 900764.129 ops/s
Iteration  18: 901499.681 ops/s
Iteration  19: 901549.268 ops/s
Iteration  20: 897397.633 ops/s
Iteration  21: 896553.616 ops/s
Iteration  22: 904091.242 ops/s
Iteration  23: 900639.775 ops/s
Iteration  24: 903322.074 ops/s
Iteration  25: 898853.322 ops/s
Iteration  26: 900325.778 ops/s
Iteration  27: 902764.073 ops/s
Iteration  28: 902090.459 ops/s
Iteration  29: 902712.842 ops/s
Iteration  30: 900330.624 ops/s


Result "zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_empty":
  899802.193 ±(99.9%) 1560.863 ops/s [Average]
  (min, avg, max) = (894944.149, 899802.193, 904091.242), stdev = 2336.227
  CI (99.9%): [898241.330, 901363.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
Proto3SpanWriterTest._Benchmark.benchmark_writeList_empty  thrpt   30  899802.193 ± 1560.863  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_multiple$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_multiple

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125320.824 ops/s
# Warmup Iteration   2: 197187.484 ops/s
# Warmup Iteration   3: 199675.994 ops/s
# Warmup Iteration   4: 212517.851 ops/s
# Warmup Iteration   5: 282182.536 ops/s
# Warmup Iteration   6: 281398.975 ops/s
# Warmup Iteration   7: 279944.482 ops/s
# Warmup Iteration   8: 282201.017 ops/s
# Warmup Iteration   9: 277676.450 ops/s
# Warmup Iteration  10: 281381.545 ops/s
# Warmup Iteration  11: 281117.763 ops/s
# Warmup Iteration  12: 279103.588 ops/s
# Warmup Iteration  13: 282467.049 ops/s
# Warmup Iteration  14: 279643.915 ops/s
# Warmup Iteration  15: 281833.975 ops/s
# Warmup Iteration  16: 281923.102 ops/s
# Warmup Iteration  17: 279930.526 ops/s
# Warmup Iteration  18: 282453.311 ops/s
# Warmup Iteration  19: 245792.194 ops/s
# Warmup Iteration  20: 232965.740 ops/s
# Warmup Iteration  21: 280707.976 ops/s
# Warmup Iteration  22: 283056.801 ops/s
# Warmup Iteration  23: 282487.033 ops/s
# Warmup Iteration  24: 282813.793 ops/s
# Warmup Iteration  25: 282710.734 ops/s
# Warmup Iteration  26: 283018.485 ops/s
# Warmup Iteration  27: 282210.350 ops/s
# Warmup Iteration  28: 282814.662 ops/s
# Warmup Iteration  29: 282607.045 ops/s
# Warmup Iteration  30: 281910.181 ops/s
Iteration   1: 282178.641 ops/s
Iteration   2: 282237.637 ops/s
Iteration   3: 282036.072 ops/s
Iteration   4: 282208.829 ops/s
Iteration   5: 281492.137 ops/s
Iteration   6: 282667.484 ops/s
Iteration   7: 281187.595 ops/s
Iteration   8: 280743.139 ops/s
Iteration   9: 281773.987 ops/s
Iteration  10: 279996.660 ops/s
Iteration  11: 280018.055 ops/s
Iteration  12: 280264.847 ops/s
Iteration  13: 281788.658 ops/s
Iteration  14: 281396.081 ops/s
Iteration  15: 282639.036 ops/s
Iteration  16: 282098.648 ops/s
Iteration  17: 281887.413 ops/s
Iteration  18: 282226.306 ops/s
Iteration  19: 281078.043 ops/s
Iteration  20: 283319.042 ops/s
Iteration  21: 282166.338 ops/s
Iteration  22: 282220.034 ops/s
Iteration  23: 282295.533 ops/s
Iteration  24: 281635.135 ops/s
Iteration  25: 281806.666 ops/s
Iteration  26: 282065.480 ops/s
Iteration  27: 282939.868 ops/s
Iteration  28: 282835.567 ops/s
Iteration  29: 282991.115 ops/s
Iteration  30: 282949.754 ops/s


Result "zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_multiple":
  281904.793 ±(99.9%) 569.799 ops/s [Average]
  (min, avg, max) = (279996.660, 281904.793, 283319.042), stdev = 852.849
  CI (99.9%): [281334.994, 282474.592] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
Proto3SpanWriterTest._Benchmark.benchmark_writeList_multiple  thrpt   30  281904.793 ± 569.799  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithSpanKeyAndLengthPrefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithSpanKeyAndLengthPrefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 112698.149 ops/s
# Warmup Iteration   2: 160445.546 ops/s
# Warmup Iteration   3: 193573.516 ops/s
# Warmup Iteration   4: 269919.110 ops/s
# Warmup Iteration   5: 268450.334 ops/s
# Warmup Iteration   6: 264402.024 ops/s
# Warmup Iteration   7: 269147.097 ops/s
# Warmup Iteration   8: 272018.597 ops/s
# Warmup Iteration   9: 269644.059 ops/s
# Warmup Iteration  10: 268191.580 ops/s
# Warmup Iteration  11: 273083.764 ops/s
# Warmup Iteration  12: 190870.976 ops/s
# Warmup Iteration  13: 272425.952 ops/s
# Warmup Iteration  14: 272014.895 ops/s
# Warmup Iteration  15: 269509.871 ops/s
# Warmup Iteration  16: 270879.537 ops/s
# Warmup Iteration  17: 271238.036 ops/s
# Warmup Iteration  18: 271805.407 ops/s
# Warmup Iteration  19: 272616.584 ops/s
# Warmup Iteration  20: 270547.414 ops/s
# Warmup Iteration  21: 271622.650 ops/s
# Warmup Iteration  22: 271730.807 ops/s
# Warmup Iteration  23: 272163.759 ops/s
# Warmup Iteration  24: 270839.328 ops/s
# Warmup Iteration  25: 271537.854 ops/s
# Warmup Iteration  26: 270911.086 ops/s
# Warmup Iteration  27: 270879.875 ops/s
# Warmup Iteration  28: 272186.982 ops/s
# Warmup Iteration  29: 271148.299 ops/s
# Warmup Iteration  30: 270825.741 ops/s
Iteration   1: 271365.410 ops/s
Iteration   2: 268714.235 ops/s
Iteration   3: 271217.125 ops/s
Iteration   4: 270259.310 ops/s
Iteration   5: 270537.893 ops/s
Iteration   6: 272872.784 ops/s
Iteration   7: 272955.963 ops/s
Iteration   8: 272208.388 ops/s
Iteration   9: 269754.471 ops/s
Iteration  10: 271164.313 ops/s
Iteration  11: 270972.164 ops/s
Iteration  12: 271369.482 ops/s
Iteration  13: 272168.599 ops/s
Iteration  14: 269224.522 ops/s
Iteration  15: 271952.883 ops/s
Iteration  16: 271393.781 ops/s
Iteration  17: 270818.974 ops/s
Iteration  18: 270792.481 ops/s
Iteration  19: 270386.850 ops/s
Iteration  20: 270740.374 ops/s
Iteration  21: 271540.460 ops/s
Iteration  22: 272132.633 ops/s
Iteration  23: 272260.718 ops/s
Iteration  24: 271641.833 ops/s
Iteration  25: 271547.779 ops/s
Iteration  26: 272296.797 ops/s
Iteration  27: 272941.573 ops/s
Iteration  28: 271582.427 ops/s
Iteration  29: 271558.116 ops/s
Iteration  30: 271897.802 ops/s


Result "zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithSpanKeyAndLengthPrefix":
  271342.338 ±(99.9%) 680.048 ops/s [Average]
  (min, avg, max) = (268714.235, 271342.338, 272955.963), stdev = 1017.864
  CI (99.9%): [270662.290, 272022.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score     Error  Units
Proto3SpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithSpanKeyAndLengthPrefix  thrpt   30  271342.338 ± 680.048  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_startsWithSpanKeyAndLengthPrefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_startsWithSpanKeyAndLengthPrefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153106.715 ops/s
# Warmup Iteration   2: 234320.419 ops/s
# Warmup Iteration   3: 236004.367 ops/s
# Warmup Iteration   4: 308147.982 ops/s
# Warmup Iteration   5: 359618.733 ops/s
# Warmup Iteration   6: 355986.675 ops/s
# Warmup Iteration   7: 359393.981 ops/s
# Warmup Iteration   8: 354914.429 ops/s
# Warmup Iteration   9: 357047.974 ops/s
# Warmup Iteration  10: 353053.209 ops/s
# Warmup Iteration  11: 357269.250 ops/s
# Warmup Iteration  12: 353006.699 ops/s
# Warmup Iteration  13: 357649.516 ops/s
# Warmup Iteration  14: 352672.783 ops/s
# Warmup Iteration  15: 357090.881 ops/s
# Warmup Iteration  16: 298259.078 ops/s
# Warmup Iteration  17: 306084.103 ops/s
# Warmup Iteration  18: 353877.065 ops/s
# Warmup Iteration  19: 356482.387 ops/s
# Warmup Iteration  20: 353230.238 ops/s
# Warmup Iteration  21: 355278.269 ops/s
# Warmup Iteration  22: 354310.312 ops/s
# Warmup Iteration  23: 356940.838 ops/s
# Warmup Iteration  24: 357161.614 ops/s
# Warmup Iteration  25: 355376.428 ops/s
# Warmup Iteration  26: 355042.310 ops/s
# Warmup Iteration  27: 356421.210 ops/s
# Warmup Iteration  28: 355293.885 ops/s
# Warmup Iteration  29: 355177.579 ops/s
# Warmup Iteration  30: 353189.815 ops/s
Iteration   1: 355362.629 ops/s
Iteration   2: 355039.342 ops/s
Iteration   3: 354827.687 ops/s
Iteration   4: 355737.172 ops/s
Iteration   5: 354349.514 ops/s
Iteration   6: 353093.210 ops/s
Iteration   7: 353780.170 ops/s
Iteration   8: 356215.935 ops/s
Iteration   9: 355341.569 ops/s
Iteration  10: 356135.702 ops/s
Iteration  11: 355337.755 ops/s
Iteration  12: 355619.839 ops/s
Iteration  13: 353744.247 ops/s
Iteration  14: 354981.860 ops/s
Iteration  15: 355520.798 ops/s
Iteration  16: 355411.799 ops/s
Iteration  17: 353443.184 ops/s
Iteration  18: 354387.247 ops/s
Iteration  19: 354646.727 ops/s
Iteration  20: 354596.414 ops/s
Iteration  21: 355463.599 ops/s
Iteration  22: 354569.664 ops/s
Iteration  23: 355234.331 ops/s
Iteration  24: 355351.139 ops/s
Iteration  25: 355462.372 ops/s
Iteration  26: 353867.652 ops/s
Iteration  27: 353954.796 ops/s
Iteration  28: 355873.959 ops/s
Iteration  29: 356763.770 ops/s
Iteration  30: 354988.927 ops/s


Result "zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_writeList_startsWithSpanKeyAndLengthPrefix":
  354970.100 ±(99.9%) 578.683 ops/s [Average]
  (min, avg, max) = (353093.210, 354970.100, 356763.770), stdev = 866.146
  CI (99.9%): [354391.417, 355548.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
Proto3SpanWriterTest._Benchmark.benchmark_writeList_startsWithSpanKeyAndLengthPrefix  thrpt   30  354970.100 ± 578.683  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_write_startsWithSpanKeyAndLengthPrefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_write_startsWithSpanKeyAndLengthPrefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 167724.017 ops/s
# Warmup Iteration   2: 244901.271 ops/s
# Warmup Iteration   3: 246715.136 ops/s
# Warmup Iteration   4: 325183.131 ops/s
# Warmup Iteration   5: 365982.160 ops/s
# Warmup Iteration   6: 358427.382 ops/s
# Warmup Iteration   7: 362089.416 ops/s
# Warmup Iteration   8: 360179.353 ops/s
# Warmup Iteration   9: 362119.399 ops/s
# Warmup Iteration  10: 361740.615 ops/s
# Warmup Iteration  11: 364169.512 ops/s
# Warmup Iteration  12: 358185.059 ops/s
# Warmup Iteration  13: 362201.176 ops/s
# Warmup Iteration  14: 357424.019 ops/s
# Warmup Iteration  15: 363917.490 ops/s
# Warmup Iteration  16: 308932.145 ops/s
# Warmup Iteration  17: 311365.506 ops/s
# Warmup Iteration  18: 365134.916 ops/s
# Warmup Iteration  19: 364264.621 ops/s
# Warmup Iteration  20: 365210.160 ops/s
# Warmup Iteration  21: 364066.850 ops/s
# Warmup Iteration  22: 364829.671 ops/s
# Warmup Iteration  23: 364719.636 ops/s
# Warmup Iteration  24: 363628.562 ops/s
# Warmup Iteration  25: 363612.621 ops/s
# Warmup Iteration  26: 363130.687 ops/s
# Warmup Iteration  27: 363473.479 ops/s
# Warmup Iteration  28: 363481.791 ops/s
# Warmup Iteration  29: 362177.114 ops/s
# Warmup Iteration  30: 363159.769 ops/s
Iteration   1: 361792.065 ops/s
Iteration   2: 366212.240 ops/s
Iteration   3: 366574.227 ops/s
Iteration   4: 364388.260 ops/s
Iteration   5: 361419.902 ops/s
Iteration   6: 362992.881 ops/s
Iteration   7: 362640.142 ops/s
Iteration   8: 358944.246 ops/s
Iteration   9: 360549.155 ops/s
Iteration  10: 362128.320 ops/s
Iteration  11: 362519.255 ops/s
Iteration  12: 362666.465 ops/s
Iteration  13: 364776.474 ops/s
Iteration  14: 363995.769 ops/s
Iteration  15: 364249.970 ops/s
Iteration  16: 364014.291 ops/s
Iteration  17: 364755.889 ops/s
Iteration  18: 362461.570 ops/s
Iteration  19: 365084.450 ops/s
Iteration  20: 365453.072 ops/s
Iteration  21: 364336.305 ops/s
Iteration  22: 364607.827 ops/s
Iteration  23: 365754.837 ops/s
Iteration  24: 366697.515 ops/s
Iteration  25: 365284.595 ops/s
Iteration  26: 363940.317 ops/s
Iteration  27: 361137.822 ops/s
Iteration  28: 362034.135 ops/s
Iteration  29: 365178.326 ops/s
Iteration  30: 362552.438 ops/s


Result "zipkin2.internal.Proto3SpanWriterTest._Benchmark.benchmark_write_startsWithSpanKeyAndLengthPrefix":
  363638.092 ±(99.9%) 1253.028 ops/s [Average]
  (min, avg, max) = (358944.246, 363638.092, 366697.515), stdev = 1875.474
  CI (99.9%): [362385.064, 364891.120] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
Proto3SpanWriterTest._Benchmark.benchmark_write_startsWithSpanKeyAndLengthPrefix  thrpt   30  363638.092 ± 1253.028  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_annotation_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_annotation_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244536.751 ops/s
# Warmup Iteration   2: 409460.774 ops/s
# Warmup Iteration   3: 610890.235 ops/s
# Warmup Iteration   4: 612747.753 ops/s
# Warmup Iteration   5: 615590.940 ops/s
# Warmup Iteration   6: 469413.296 ops/s
# Warmup Iteration   7: 599724.100 ops/s
# Warmup Iteration   8: 615297.180 ops/s
# Warmup Iteration   9: 606482.066 ops/s
# Warmup Iteration  10: 609281.978 ops/s
# Warmup Iteration  11: 605949.796 ops/s
# Warmup Iteration  12: 609674.125 ops/s
# Warmup Iteration  13: 607017.584 ops/s
# Warmup Iteration  14: 613476.629 ops/s
# Warmup Iteration  15: 609392.381 ops/s
# Warmup Iteration  16: 615576.545 ops/s
# Warmup Iteration  17: 614215.449 ops/s
# Warmup Iteration  18: 619067.370 ops/s
# Warmup Iteration  19: 614514.089 ops/s
# Warmup Iteration  20: 613497.342 ops/s
# Warmup Iteration  21: 609905.069 ops/s
# Warmup Iteration  22: 607827.173 ops/s
# Warmup Iteration  23: 595303.732 ops/s
# Warmup Iteration  24: 608970.551 ops/s
# Warmup Iteration  25: 611739.891 ops/s
# Warmup Iteration  26: 612083.317 ops/s
# Warmup Iteration  27: 617130.515 ops/s
# Warmup Iteration  28: 616401.138 ops/s
# Warmup Iteration  29: 612171.224 ops/s
# Warmup Iteration  30: 612884.543 ops/s
Iteration   1: 611097.460 ops/s
Iteration   2: 612540.217 ops/s
Iteration   3: 613991.476 ops/s
Iteration   4: 605214.568 ops/s
Iteration   5: 607008.497 ops/s
Iteration   6: 611777.696 ops/s
Iteration   7: 604612.079 ops/s
Iteration   8: 614119.767 ops/s
Iteration   9: 610573.694 ops/s
Iteration  10: 605259.851 ops/s
Iteration  11: 614003.303 ops/s
Iteration  12: 615913.421 ops/s
Iteration  13: 608719.621 ops/s
Iteration  14: 606423.394 ops/s
Iteration  15: 606726.593 ops/s
Iteration  16: 600914.078 ops/s
Iteration  17: 612481.402 ops/s
Iteration  18: 613917.433 ops/s
Iteration  19: 613688.838 ops/s
Iteration  20: 608213.377 ops/s
Iteration  21: 607296.445 ops/s
Iteration  22: 609449.526 ops/s
Iteration  23: 615037.876 ops/s
Iteration  24: 613702.835 ops/s
Iteration  25: 613001.944 ops/s
Iteration  26: 614847.348 ops/s
Iteration  27: 614675.272 ops/s
Iteration  28: 608016.485 ops/s
Iteration  29: 608542.644 ops/s
Iteration  30: 614834.879 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_annotation_sizeInBytes":
  610553.401 ±(99.9%) 2619.264 ops/s [Average]
  (min, avg, max) = (600914.078, 610553.401, 615913.421), stdev = 3920.391
  CI (99.9%): [607934.137, 613172.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_annotation_sizeInBytes  thrpt   30  610553.401 ± 2619.264  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_endpoint_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_endpoint_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 177445.492 ops/s
# Warmup Iteration   2: 258133.747 ops/s
# Warmup Iteration   3: 481278.897 ops/s
# Warmup Iteration   4: 474639.849 ops/s
# Warmup Iteration   5: 474164.584 ops/s
# Warmup Iteration   6: 475301.043 ops/s
# Warmup Iteration   7: 334415.766 ops/s
# Warmup Iteration   8: 471505.237 ops/s
# Warmup Iteration   9: 476553.612 ops/s
# Warmup Iteration  10: 476524.542 ops/s
# Warmup Iteration  11: 474421.412 ops/s
# Warmup Iteration  12: 476769.444 ops/s
# Warmup Iteration  13: 474923.270 ops/s
# Warmup Iteration  14: 474800.904 ops/s
# Warmup Iteration  15: 475692.450 ops/s
# Warmup Iteration  16: 475855.235 ops/s
# Warmup Iteration  17: 475062.031 ops/s
# Warmup Iteration  18: 480030.284 ops/s
# Warmup Iteration  19: 479964.748 ops/s
# Warmup Iteration  20: 480235.148 ops/s
# Warmup Iteration  21: 479801.122 ops/s
# Warmup Iteration  22: 477534.400 ops/s
# Warmup Iteration  23: 478435.665 ops/s
# Warmup Iteration  24: 476918.499 ops/s
# Warmup Iteration  25: 481221.274 ops/s
# Warmup Iteration  26: 479974.778 ops/s
# Warmup Iteration  27: 478022.083 ops/s
# Warmup Iteration  28: 479117.738 ops/s
# Warmup Iteration  29: 480423.095 ops/s
# Warmup Iteration  30: 476967.898 ops/s
Iteration   1: 478071.910 ops/s
Iteration   2: 477781.867 ops/s
Iteration   3: 474016.010 ops/s
Iteration   4: 475874.619 ops/s
Iteration   5: 480095.931 ops/s
Iteration   6: 480213.399 ops/s
Iteration   7: 476672.759 ops/s
Iteration   8: 474752.659 ops/s
Iteration   9: 475920.652 ops/s
Iteration  10: 475673.259 ops/s
Iteration  11: 478358.703 ops/s
Iteration  12: 475200.084 ops/s
Iteration  13: 472877.413 ops/s
Iteration  14: 470028.687 ops/s
Iteration  15: 471259.852 ops/s
Iteration  16: 475066.775 ops/s
Iteration  17: 474528.037 ops/s
Iteration  18: 477148.957 ops/s
Iteration  19: 472979.620 ops/s
Iteration  20: 476327.928 ops/s
Iteration  21: 473496.998 ops/s
Iteration  22: 473078.448 ops/s
Iteration  23: 474328.945 ops/s
Iteration  24: 477868.627 ops/s
Iteration  25: 476713.816 ops/s
Iteration  26: 477240.123 ops/s
Iteration  27: 473586.824 ops/s
Iteration  28: 476077.627 ops/s
Iteration  29: 478290.030 ops/s
Iteration  30: 478172.470 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_endpoint_sizeInBytes":
  475723.434 ±(99.9%) 1628.847 ops/s [Average]
  (min, avg, max) = (470028.687, 475723.434, 480213.399), stdev = 2437.981
  CI (99.9%): [474094.587, 477352.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_endpoint_sizeInBytes  thrpt   30  475723.434 ± 1628.847  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76146.854 ops/s
# Warmup Iteration   2: 130030.615 ops/s
# Warmup Iteration   3: 187338.001 ops/s
# Warmup Iteration   4: 244657.350 ops/s
# Warmup Iteration   5: 240251.091 ops/s
# Warmup Iteration   6: 242783.673 ops/s
# Warmup Iteration   7: 243962.178 ops/s
# Warmup Iteration   8: 242757.602 ops/s
# Warmup Iteration   9: 241613.700 ops/s
# Warmup Iteration  10: 173627.817 ops/s
# Warmup Iteration  11: 245002.379 ops/s
# Warmup Iteration  12: 245285.172 ops/s
# Warmup Iteration  13: 244249.036 ops/s
# Warmup Iteration  14: 245322.412 ops/s
# Warmup Iteration  15: 244401.273 ops/s
# Warmup Iteration  16: 245643.471 ops/s
# Warmup Iteration  17: 244916.641 ops/s
# Warmup Iteration  18: 244565.380 ops/s
# Warmup Iteration  19: 244136.685 ops/s
# Warmup Iteration  20: 244869.075 ops/s
# Warmup Iteration  21: 243038.195 ops/s
# Warmup Iteration  22: 242509.041 ops/s
# Warmup Iteration  23: 244043.266 ops/s
# Warmup Iteration  24: 244468.048 ops/s
# Warmup Iteration  25: 243221.012 ops/s
# Warmup Iteration  26: 243749.445 ops/s
# Warmup Iteration  27: 243794.052 ops/s
# Warmup Iteration  28: 244462.597 ops/s
# Warmup Iteration  29: 243696.246 ops/s
# Warmup Iteration  30: 244289.675 ops/s
Iteration   1: 244358.181 ops/s
Iteration   2: 244689.327 ops/s
Iteration   3: 245179.433 ops/s
Iteration   4: 246182.795 ops/s
Iteration   5: 244049.435 ops/s
Iteration   6: 245685.617 ops/s
Iteration   7: 243886.376 ops/s
Iteration   8: 242797.171 ops/s
Iteration   9: 244015.420 ops/s
Iteration  10: 243983.943 ops/s
Iteration  11: 245378.505 ops/s
Iteration  12: 245358.962 ops/s
Iteration  13: 244424.457 ops/s
Iteration  14: 242652.602 ops/s
Iteration  15: 243806.514 ops/s
Iteration  16: 242115.076 ops/s
Iteration  17: 244546.670 ops/s
Iteration  18: 244516.026 ops/s
Iteration  19: 243779.904 ops/s
Iteration  20: 245056.514 ops/s
Iteration  21: 242128.808 ops/s
Iteration  22: 242958.788 ops/s
Iteration  23: 241967.400 ops/s
Iteration  24: 243915.665 ops/s
Iteration  25: 242805.767 ops/s
Iteration  26: 244055.866 ops/s
Iteration  27: 242408.733 ops/s
Iteration  28: 241078.663 ops/s
Iteration  29: 242487.849 ops/s
Iteration  30: 242841.915 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read":
  243770.413 ±(99.9%) 835.874 ops/s [Average]
  (min, avg, max) = (241078.663, 243770.413, 246182.795), stdev = 1251.098
  CI (99.9%): [242934.538, 244606.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read  thrpt   30  243770.413 ± 835.874  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_annotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_annotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142765.153 ops/s
# Warmup Iteration   2: 215179.396 ops/s
# Warmup Iteration   3: 435916.616 ops/s
# Warmup Iteration   4: 435380.271 ops/s
# Warmup Iteration   5: 435388.479 ops/s
# Warmup Iteration   6: 431327.193 ops/s
# Warmup Iteration   7: 333689.113 ops/s
# Warmup Iteration   8: 431735.108 ops/s
# Warmup Iteration   9: 440408.394 ops/s
# Warmup Iteration  10: 439028.158 ops/s
# Warmup Iteration  11: 440620.335 ops/s
# Warmup Iteration  12: 439596.249 ops/s
# Warmup Iteration  13: 438961.459 ops/s
# Warmup Iteration  14: 440231.744 ops/s
# Warmup Iteration  15: 440454.513 ops/s
# Warmup Iteration  16: 442112.587 ops/s
# Warmup Iteration  17: 438786.535 ops/s
# Warmup Iteration  18: 436456.000 ops/s
# Warmup Iteration  19: 438593.273 ops/s
# Warmup Iteration  20: 439151.633 ops/s
# Warmup Iteration  21: 436905.465 ops/s
# Warmup Iteration  22: 438109.378 ops/s
# Warmup Iteration  23: 438022.599 ops/s
# Warmup Iteration  24: 435162.993 ops/s
# Warmup Iteration  25: 439342.481 ops/s
# Warmup Iteration  26: 439518.254 ops/s
# Warmup Iteration  27: 435514.282 ops/s
# Warmup Iteration  28: 434110.416 ops/s
# Warmup Iteration  29: 439070.692 ops/s
# Warmup Iteration  30: 437308.125 ops/s
Iteration   1: 440055.609 ops/s
Iteration   2: 437994.304 ops/s
Iteration   3: 436274.384 ops/s
Iteration   4: 438952.569 ops/s
Iteration   5: 436158.183 ops/s
Iteration   6: 437194.665 ops/s
Iteration   7: 438781.596 ops/s
Iteration   8: 437012.022 ops/s
Iteration   9: 438704.950 ops/s
Iteration  10: 441419.892 ops/s
Iteration  11: 435753.057 ops/s
Iteration  12: 433623.730 ops/s
Iteration  13: 434496.524 ops/s
Iteration  14: 441914.773 ops/s
Iteration  15: 437601.829 ops/s
Iteration  16: 437286.077 ops/s
Iteration  17: 436623.923 ops/s
Iteration  18: 436453.225 ops/s
Iteration  19: 436961.956 ops/s
Iteration  20: 434015.488 ops/s
Iteration  21: 440205.766 ops/s
Iteration  22: 438919.961 ops/s
Iteration  23: 441096.551 ops/s
Iteration  24: 439289.707 ops/s
Iteration  25: 438093.315 ops/s
Iteration  26: 439575.788 ops/s
Iteration  27: 438585.031 ops/s
Iteration  28: 439463.211 ops/s
Iteration  29: 438432.376 ops/s
Iteration  30: 435837.292 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_annotation":
  437892.592 ±(99.9%) 1393.165 ops/s [Average]
  (min, avg, max) = (433623.730, 437892.592, 441914.773), stdev = 2085.224
  CI (99.9%): [436499.427, 439285.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_annotation  thrpt   30  437892.592 ± 1393.165  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_debug$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_debug

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161691.598 ops/s
# Warmup Iteration   2: 264086.738 ops/s
# Warmup Iteration   3: 491769.432 ops/s
# Warmup Iteration   4: 484465.114 ops/s
# Warmup Iteration   5: 492529.127 ops/s
# Warmup Iteration   6: 491346.950 ops/s
# Warmup Iteration   7: 351152.998 ops/s
# Warmup Iteration   8: 490785.959 ops/s
# Warmup Iteration   9: 488850.715 ops/s
# Warmup Iteration  10: 489833.180 ops/s
# Warmup Iteration  11: 491758.753 ops/s
# Warmup Iteration  12: 490628.724 ops/s
# Warmup Iteration  13: 489498.328 ops/s
# Warmup Iteration  14: 492203.424 ops/s
# Warmup Iteration  15: 493421.971 ops/s
# Warmup Iteration  16: 489785.146 ops/s
# Warmup Iteration  17: 490683.767 ops/s
# Warmup Iteration  18: 491820.661 ops/s
# Warmup Iteration  19: 491145.515 ops/s
# Warmup Iteration  20: 489259.062 ops/s
# Warmup Iteration  21: 485358.933 ops/s
# Warmup Iteration  22: 491060.765 ops/s
# Warmup Iteration  23: 493406.617 ops/s
# Warmup Iteration  24: 494253.299 ops/s
# Warmup Iteration  25: 490912.948 ops/s
# Warmup Iteration  26: 489253.360 ops/s
# Warmup Iteration  27: 493916.851 ops/s
# Warmup Iteration  28: 497855.206 ops/s
# Warmup Iteration  29: 495154.970 ops/s
# Warmup Iteration  30: 491012.136 ops/s
Iteration   1: 487430.944 ops/s
Iteration   2: 489431.483 ops/s
Iteration   3: 498372.575 ops/s
Iteration   4: 496006.030 ops/s
Iteration   5: 498220.325 ops/s
Iteration   6: 495885.987 ops/s
Iteration   7: 496647.690 ops/s
Iteration   8: 489343.735 ops/s
Iteration   9: 489117.574 ops/s
Iteration  10: 487089.935 ops/s
Iteration  11: 491390.569 ops/s
Iteration  12: 491752.086 ops/s
Iteration  13: 492601.199 ops/s
Iteration  14: 492831.937 ops/s
Iteration  15: 491137.224 ops/s
Iteration  16: 489399.118 ops/s
Iteration  17: 488616.720 ops/s
Iteration  18: 487494.497 ops/s
Iteration  19: 490395.579 ops/s
Iteration  20: 491453.325 ops/s
Iteration  21: 490929.521 ops/s
Iteration  22: 491703.895 ops/s
Iteration  23: 492491.105 ops/s
Iteration  24: 491613.655 ops/s
Iteration  25: 488980.063 ops/s
Iteration  26: 488100.342 ops/s
Iteration  27: 490402.785 ops/s
Iteration  28: 488999.061 ops/s
Iteration  29: 488604.001 ops/s
Iteration  30: 485733.053 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_debug":
  491072.534 ±(99.9%) 2167.147 ops/s [Average]
  (min, avg, max) = (485733.053, 491072.534, 498372.575), stdev = 3243.684
  CI (99.9%): [488905.387, 493239.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_debug  thrpt   30  491072.534 ± 2167.147  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_endpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_endpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 124874.597 ops/s
# Warmup Iteration   2: 179568.220 ops/s
# Warmup Iteration   3: 347357.727 ops/s
# Warmup Iteration   4: 360380.171 ops/s
# Warmup Iteration   5: 355434.851 ops/s
# Warmup Iteration   6: 358464.619 ops/s
# Warmup Iteration   7: 361388.111 ops/s
# Warmup Iteration   8: 263033.038 ops/s
# Warmup Iteration   9: 366171.228 ops/s
# Warmup Iteration  10: 365885.528 ops/s
# Warmup Iteration  11: 363635.908 ops/s
# Warmup Iteration  12: 363027.536 ops/s
# Warmup Iteration  13: 362092.694 ops/s
# Warmup Iteration  14: 363417.248 ops/s
# Warmup Iteration  15: 363386.034 ops/s
# Warmup Iteration  16: 363375.152 ops/s
# Warmup Iteration  17: 364600.440 ops/s
# Warmup Iteration  18: 364352.755 ops/s
# Warmup Iteration  19: 363820.449 ops/s
# Warmup Iteration  20: 366216.414 ops/s
# Warmup Iteration  21: 365441.302 ops/s
# Warmup Iteration  22: 363695.906 ops/s
# Warmup Iteration  23: 363269.724 ops/s
# Warmup Iteration  24: 365231.892 ops/s
# Warmup Iteration  25: 365824.109 ops/s
# Warmup Iteration  26: 364128.696 ops/s
# Warmup Iteration  27: 363767.727 ops/s
# Warmup Iteration  28: 364876.064 ops/s
# Warmup Iteration  29: 363656.261 ops/s
# Warmup Iteration  30: 364225.822 ops/s
Iteration   1: 366622.094 ops/s
Iteration   2: 363903.337 ops/s
Iteration   3: 365114.603 ops/s
Iteration   4: 365086.111 ops/s
Iteration   5: 364438.589 ops/s
Iteration   6: 365646.308 ops/s
Iteration   7: 364021.072 ops/s
Iteration   8: 365166.517 ops/s
Iteration   9: 361815.198 ops/s
Iteration  10: 360468.033 ops/s
Iteration  11: 361786.165 ops/s
Iteration  12: 361847.071 ops/s
Iteration  13: 364429.801 ops/s
Iteration  14: 364889.162 ops/s
Iteration  15: 364791.499 ops/s
Iteration  16: 363905.288 ops/s
Iteration  17: 361841.164 ops/s
Iteration  18: 365372.071 ops/s
Iteration  19: 363874.938 ops/s
Iteration  20: 365840.817 ops/s
Iteration  21: 365239.427 ops/s
Iteration  22: 363055.201 ops/s
Iteration  23: 364370.451 ops/s
Iteration  24: 363477.552 ops/s
Iteration  25: 363065.201 ops/s
Iteration  26: 363594.334 ops/s
Iteration  27: 365288.044 ops/s
Iteration  28: 366039.080 ops/s
Iteration  29: 363608.583 ops/s
Iteration  30: 364258.680 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_endpoints":
  364095.213 ±(99.9%) 973.385 ops/s [Average]
  (min, avg, max) = (360468.033, 364095.213, 366622.094), stdev = 1456.917
  CI (99.9%): [363121.828, 365068.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_endpoints  thrpt   30  364095.213 ± 973.385  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_ids$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_ids

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171167.774 ops/s
# Warmup Iteration   2: 256640.733 ops/s
# Warmup Iteration   3: 448344.792 ops/s
# Warmup Iteration   4: 443119.940 ops/s
# Warmup Iteration   5: 448621.778 ops/s
# Warmup Iteration   6: 444173.179 ops/s
# Warmup Iteration   7: 319460.901 ops/s
# Warmup Iteration   8: 445636.239 ops/s
# Warmup Iteration   9: 444419.888 ops/s
# Warmup Iteration  10: 443176.840 ops/s
# Warmup Iteration  11: 452836.844 ops/s
# Warmup Iteration  12: 444122.290 ops/s
# Warmup Iteration  13: 443276.135 ops/s
# Warmup Iteration  14: 447843.107 ops/s
# Warmup Iteration  15: 446466.803 ops/s
# Warmup Iteration  16: 444526.548 ops/s
# Warmup Iteration  17: 451906.498 ops/s
# Warmup Iteration  18: 442108.691 ops/s
# Warmup Iteration  19: 444530.917 ops/s
# Warmup Iteration  20: 439037.708 ops/s
# Warmup Iteration  21: 445630.822 ops/s
# Warmup Iteration  22: 443792.243 ops/s
# Warmup Iteration  23: 447433.790 ops/s
# Warmup Iteration  24: 442514.764 ops/s
# Warmup Iteration  25: 444576.468 ops/s
# Warmup Iteration  26: 446202.148 ops/s
# Warmup Iteration  27: 442676.105 ops/s
# Warmup Iteration  28: 447478.770 ops/s
# Warmup Iteration  29: 441591.414 ops/s
# Warmup Iteration  30: 441566.909 ops/s
Iteration   1: 444795.295 ops/s
Iteration   2: 440418.120 ops/s
Iteration   3: 438207.638 ops/s
Iteration   4: 442452.931 ops/s
Iteration   5: 441093.159 ops/s
Iteration   6: 441754.283 ops/s
Iteration   7: 442984.156 ops/s
Iteration   8: 446705.179 ops/s
Iteration   9: 443567.128 ops/s
Iteration  10: 444100.807 ops/s
Iteration  11: 444411.706 ops/s
Iteration  12: 442723.166 ops/s
Iteration  13: 443832.911 ops/s
Iteration  14: 434718.585 ops/s
Iteration  15: 441493.472 ops/s
Iteration  16: 445629.660 ops/s
Iteration  17: 446167.845 ops/s
Iteration  18: 443044.964 ops/s
Iteration  19: 438779.953 ops/s
Iteration  20: 440591.391 ops/s
Iteration  21: 442993.839 ops/s
Iteration  22: 440614.989 ops/s
Iteration  23: 440104.587 ops/s
Iteration  24: 446753.978 ops/s
Iteration  25: 442051.450 ops/s
Iteration  26: 441935.075 ops/s
Iteration  27: 442674.979 ops/s
Iteration  28: 442143.247 ops/s
Iteration  29: 440129.936 ops/s
Iteration  30: 447450.112 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_ids":
  442477.485 ±(99.9%) 1834.617 ops/s [Average]
  (min, avg, max) = (434718.585, 442477.485, 447450.112), stdev = 2745.969
  CI (99.9%): [440642.867, 444312.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_ids  thrpt   30  442477.485 ± 1834.617  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169447.022 ops/s
# Warmup Iteration   2: 261164.141 ops/s
# Warmup Iteration   3: 491923.910 ops/s
# Warmup Iteration   4: 486483.222 ops/s
# Warmup Iteration   5: 489126.498 ops/s
# Warmup Iteration   6: 494137.395 ops/s
# Warmup Iteration   7: 343375.269 ops/s
# Warmup Iteration   8: 495521.064 ops/s
# Warmup Iteration   9: 495907.728 ops/s
# Warmup Iteration  10: 493092.214 ops/s
# Warmup Iteration  11: 494748.645 ops/s
# Warmup Iteration  12: 494566.772 ops/s
# Warmup Iteration  13: 495105.235 ops/s
# Warmup Iteration  14: 498078.853 ops/s
# Warmup Iteration  15: 499111.707 ops/s
# Warmup Iteration  16: 494009.231 ops/s
# Warmup Iteration  17: 484966.651 ops/s
# Warmup Iteration  18: 480551.576 ops/s
# Warmup Iteration  19: 483090.312 ops/s
# Warmup Iteration  20: 481792.352 ops/s
# Warmup Iteration  21: 483994.908 ops/s
# Warmup Iteration  22: 483587.851 ops/s
# Warmup Iteration  23: 480698.020 ops/s
# Warmup Iteration  24: 483384.792 ops/s
# Warmup Iteration  25: 483412.072 ops/s
# Warmup Iteration  26: 481641.195 ops/s
# Warmup Iteration  27: 485631.310 ops/s
# Warmup Iteration  28: 484800.071 ops/s
# Warmup Iteration  29: 484820.771 ops/s
# Warmup Iteration  30: 487376.427 ops/s
Iteration   1: 485159.950 ops/s
Iteration   2: 482783.219 ops/s
Iteration   3: 485963.291 ops/s
Iteration   4: 483225.678 ops/s
Iteration   5: 482482.206 ops/s
Iteration   6: 481107.138 ops/s
Iteration   7: 478432.406 ops/s
Iteration   8: 480023.569 ops/s
Iteration   9: 479906.252 ops/s
Iteration  10: 481038.056 ops/s
Iteration  11: 486159.531 ops/s
Iteration  12: 484551.877 ops/s
Iteration  13: 483620.447 ops/s
Iteration  14: 489152.824 ops/s
Iteration  15: 487516.091 ops/s
Iteration  16: 488191.005 ops/s
Iteration  17: 486875.901 ops/s
Iteration  18: 489316.821 ops/s
Iteration  19: 485959.564 ops/s
Iteration  20: 481234.938 ops/s
Iteration  21: 484459.641 ops/s
Iteration  22: 489236.228 ops/s
Iteration  23: 486494.237 ops/s
Iteration  24: 488213.315 ops/s
Iteration  25: 485085.723 ops/s
Iteration  26: 486458.699 ops/s
Iteration  27: 487025.363 ops/s
Iteration  28: 490067.956 ops/s
Iteration  29: 490050.084 ops/s
Iteration  30: 490873.359 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind":
  485355.512 ±(99.9%) 2265.458 ops/s [Average]
  (min, avg, max) = (478432.406, 485355.512, 490873.359), stdev = 3390.831
  CI (99.9%): [483090.055, 487620.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind  thrpt   30  485355.512 ± 2265.458  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind_tolerant$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind_tolerant

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 133818.884 ops/s
# Warmup Iteration   2: 203015.904 ops/s
# Warmup Iteration   3: 360081.072 ops/s
# Warmup Iteration   4: 355769.318 ops/s
# Warmup Iteration   5: 357155.943 ops/s
# Warmup Iteration   6: 358509.458 ops/s
# Warmup Iteration   7: 254671.113 ops/s
# Warmup Iteration   8: 359762.349 ops/s
# Warmup Iteration   9: 358544.165 ops/s
# Warmup Iteration  10: 359206.432 ops/s
# Warmup Iteration  11: 359058.434 ops/s
# Warmup Iteration  12: 359445.102 ops/s
# Warmup Iteration  13: 357248.058 ops/s
# Warmup Iteration  14: 358745.817 ops/s
# Warmup Iteration  15: 358518.618 ops/s
# Warmup Iteration  16: 356079.011 ops/s
# Warmup Iteration  17: 352738.853 ops/s
# Warmup Iteration  18: 354106.764 ops/s
# Warmup Iteration  19: 351523.217 ops/s
# Warmup Iteration  20: 352325.819 ops/s
# Warmup Iteration  21: 355240.253 ops/s
# Warmup Iteration  22: 356783.614 ops/s
# Warmup Iteration  23: 356034.445 ops/s
# Warmup Iteration  24: 355968.891 ops/s
# Warmup Iteration  25: 355197.635 ops/s
# Warmup Iteration  26: 355038.028 ops/s
# Warmup Iteration  27: 354574.095 ops/s
# Warmup Iteration  28: 354483.589 ops/s
# Warmup Iteration  29: 355067.391 ops/s
# Warmup Iteration  30: 353869.176 ops/s
Iteration   1: 352766.356 ops/s
Iteration   2: 352725.452 ops/s
Iteration   3: 353179.974 ops/s
Iteration   4: 352868.249 ops/s
Iteration   5: 353415.770 ops/s
Iteration   6: 355212.976 ops/s
Iteration   7: 355079.924 ops/s
Iteration   8: 355103.361 ops/s
Iteration   9: 353638.438 ops/s
Iteration  10: 353165.282 ops/s
Iteration  11: 350802.099 ops/s
Iteration  12: 355624.215 ops/s
Iteration  13: 357073.589 ops/s
Iteration  14: 354481.425 ops/s
Iteration  15: 352523.128 ops/s
Iteration  16: 354871.071 ops/s
Iteration  17: 355549.598 ops/s
Iteration  18: 355944.689 ops/s
Iteration  19: 356077.232 ops/s
Iteration  20: 353995.954 ops/s
Iteration  21: 356742.409 ops/s
Iteration  22: 352052.953 ops/s
Iteration  23: 354605.273 ops/s
Iteration  24: 354550.715 ops/s
Iteration  25: 351539.783 ops/s
Iteration  26: 355576.563 ops/s
Iteration  27: 353736.718 ops/s
Iteration  28: 354640.168 ops/s
Iteration  29: 354535.528 ops/s
Iteration  30: 354595.334 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind_tolerant":
  354222.474 ±(99.9%) 1009.895 ops/s [Average]
  (min, avg, max) = (350802.099, 354222.474, 357073.589), stdev = 1511.563
  CI (99.9%): [353212.580, 355232.369] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_kind_tolerant  thrpt   30  354222.474 ± 1009.895  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_name$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_name

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170938.870 ops/s
# Warmup Iteration   2: 256553.776 ops/s
# Warmup Iteration   3: 466748.319 ops/s
# Warmup Iteration   4: 469073.370 ops/s
# Warmup Iteration   5: 467731.967 ops/s
# Warmup Iteration   6: 472453.939 ops/s
# Warmup Iteration   7: 339488.342 ops/s
# Warmup Iteration   8: 475515.180 ops/s
# Warmup Iteration   9: 475961.001 ops/s
# Warmup Iteration  10: 472041.270 ops/s
# Warmup Iteration  11: 474248.369 ops/s
# Warmup Iteration  12: 475198.482 ops/s
# Warmup Iteration  13: 473977.801 ops/s
# Warmup Iteration  14: 470838.659 ops/s
# Warmup Iteration  15: 473550.047 ops/s
# Warmup Iteration  16: 476487.127 ops/s
# Warmup Iteration  17: 471166.254 ops/s
# Warmup Iteration  18: 471463.366 ops/s
# Warmup Iteration  19: 473763.898 ops/s
# Warmup Iteration  20: 468874.081 ops/s
# Warmup Iteration  21: 474588.624 ops/s
# Warmup Iteration  22: 470060.340 ops/s
# Warmup Iteration  23: 473872.612 ops/s
# Warmup Iteration  24: 471893.098 ops/s
# Warmup Iteration  25: 472047.503 ops/s
# Warmup Iteration  26: 472410.599 ops/s
# Warmup Iteration  27: 468612.960 ops/s
# Warmup Iteration  28: 472044.242 ops/s
# Warmup Iteration  29: 470907.745 ops/s
# Warmup Iteration  30: 472586.679 ops/s
Iteration   1: 469973.449 ops/s
Iteration   2: 472198.023 ops/s
Iteration   3: 469440.826 ops/s
Iteration   4: 465667.628 ops/s
Iteration   5: 473404.031 ops/s
Iteration   6: 470463.779 ops/s
Iteration   7: 468846.899 ops/s
Iteration   8: 473727.326 ops/s
Iteration   9: 474490.831 ops/s
Iteration  10: 471109.610 ops/s
Iteration  11: 472163.756 ops/s
Iteration  12: 468935.615 ops/s
Iteration  13: 470260.056 ops/s
Iteration  14: 472246.255 ops/s
Iteration  15: 474341.054 ops/s
Iteration  16: 471111.051 ops/s
Iteration  17: 472694.499 ops/s
Iteration  18: 474301.235 ops/s
Iteration  19: 474517.738 ops/s
Iteration  20: 471852.270 ops/s
Iteration  21: 473597.523 ops/s
Iteration  22: 472345.179 ops/s
Iteration  23: 471020.044 ops/s
Iteration  24: 474619.523 ops/s
Iteration  25: 472274.188 ops/s
Iteration  26: 475659.366 ops/s
Iteration  27: 471577.432 ops/s
Iteration  28: 474888.998 ops/s
Iteration  29: 472691.995 ops/s
Iteration  30: 476282.034 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_name":
  472223.407 ±(99.9%) 1548.410 ops/s [Average]
  (min, avg, max) = (465667.628, 472223.407, 476282.034), stdev = 2317.588
  CI (99.9%): [470674.997, 473771.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_name  thrpt   30  472223.407 ± 1548.410  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171379.843 ops/s
# Warmup Iteration   2: 256100.611 ops/s
# Warmup Iteration   3: 492755.308 ops/s
# Warmup Iteration   4: 487042.933 ops/s
# Warmup Iteration   5: 488982.756 ops/s
# Warmup Iteration   6: 486326.288 ops/s
# Warmup Iteration   7: 345542.081 ops/s
# Warmup Iteration   8: 490557.828 ops/s
# Warmup Iteration   9: 489370.466 ops/s
# Warmup Iteration  10: 488845.627 ops/s
# Warmup Iteration  11: 489035.996 ops/s
# Warmup Iteration  12: 490578.903 ops/s
# Warmup Iteration  13: 490665.668 ops/s
# Warmup Iteration  14: 489040.481 ops/s
# Warmup Iteration  15: 489630.392 ops/s
# Warmup Iteration  16: 493526.690 ops/s
# Warmup Iteration  17: 489766.826 ops/s
# Warmup Iteration  18: 485969.566 ops/s
# Warmup Iteration  19: 489427.788 ops/s
# Warmup Iteration  20: 489079.740 ops/s
# Warmup Iteration  21: 489381.361 ops/s
# Warmup Iteration  22: 489937.749 ops/s
# Warmup Iteration  23: 490472.824 ops/s
# Warmup Iteration  24: 491478.205 ops/s
# Warmup Iteration  25: 491263.255 ops/s
# Warmup Iteration  26: 490031.460 ops/s
# Warmup Iteration  27: 488688.320 ops/s
# Warmup Iteration  28: 489032.476 ops/s
# Warmup Iteration  29: 488685.842 ops/s
# Warmup Iteration  30: 489654.541 ops/s
Iteration   1: 489851.782 ops/s
Iteration   2: 485707.194 ops/s
Iteration   3: 485999.534 ops/s
Iteration   4: 491051.590 ops/s
Iteration   5: 488131.822 ops/s
Iteration   6: 491352.153 ops/s
Iteration   7: 493295.675 ops/s
Iteration   8: 492346.397 ops/s
Iteration   9: 491007.313 ops/s
Iteration  10: 487266.093 ops/s
Iteration  11: 487971.802 ops/s
Iteration  12: 486290.476 ops/s
Iteration  13: 487390.262 ops/s
Iteration  14: 489304.141 ops/s
Iteration  15: 491153.809 ops/s
Iteration  16: 487643.427 ops/s
Iteration  17: 488819.790 ops/s
Iteration  18: 491816.451 ops/s
Iteration  19: 490727.223 ops/s
Iteration  20: 490570.785 ops/s
Iteration  21: 493101.713 ops/s
Iteration  22: 489616.455 ops/s
Iteration  23: 488401.221 ops/s
Iteration  24: 490253.543 ops/s
Iteration  25: 491778.684 ops/s
Iteration  26: 488138.435 ops/s
Iteration  27: 488205.072 ops/s
Iteration  28: 489891.318 ops/s
Iteration  29: 491963.574 ops/s
Iteration  30: 489590.950 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_shared":
  489621.289 ±(99.9%) 1388.791 ops/s [Average]
  (min, avg, max) = (485707.194, 489621.289, 493295.675), stdev = 2078.677
  CI (99.9%): [488232.498, 491010.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_shared  thrpt   30  489621.289 ± 1388.791  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136042.019 ops/s
# Warmup Iteration   2: 212475.190 ops/s
# Warmup Iteration   3: 401362.703 ops/s
# Warmup Iteration   4: 399622.857 ops/s
# Warmup Iteration   5: 403833.434 ops/s
# Warmup Iteration   6: 402512.329 ops/s
# Warmup Iteration   7: 282172.365 ops/s
# Warmup Iteration   8: 407400.811 ops/s
# Warmup Iteration   9: 409134.055 ops/s
# Warmup Iteration  10: 408039.000 ops/s
# Warmup Iteration  11: 406085.203 ops/s
# Warmup Iteration  12: 402059.379 ops/s
# Warmup Iteration  13: 405662.908 ops/s
# Warmup Iteration  14: 401891.453 ops/s
# Warmup Iteration  15: 403811.102 ops/s
# Warmup Iteration  16: 406471.245 ops/s
# Warmup Iteration  17: 401916.718 ops/s
# Warmup Iteration  18: 401781.373 ops/s
# Warmup Iteration  19: 401924.834 ops/s
# Warmup Iteration  20: 398100.074 ops/s
# Warmup Iteration  21: 400709.737 ops/s
# Warmup Iteration  22: 399386.532 ops/s
# Warmup Iteration  23: 402919.277 ops/s
# Warmup Iteration  24: 400957.376 ops/s
# Warmup Iteration  25: 400664.540 ops/s
# Warmup Iteration  26: 399496.783 ops/s
# Warmup Iteration  27: 401001.932 ops/s
# Warmup Iteration  28: 398642.899 ops/s
# Warmup Iteration  29: 399618.845 ops/s
# Warmup Iteration  30: 400325.299 ops/s
Iteration   1: 402598.422 ops/s
Iteration   2: 398804.846 ops/s
Iteration   3: 396752.765 ops/s
Iteration   4: 394435.304 ops/s
Iteration   5: 393112.065 ops/s
Iteration   6: 397243.131 ops/s
Iteration   7: 396780.280 ops/s
Iteration   8: 396707.203 ops/s
Iteration   9: 399878.878 ops/s
Iteration  10: 395363.855 ops/s
Iteration  11: 398419.640 ops/s
Iteration  12: 399009.155 ops/s
Iteration  13: 396888.173 ops/s
Iteration  14: 399334.676 ops/s
Iteration  15: 398929.856 ops/s
Iteration  16: 397547.713 ops/s
Iteration  17: 401002.614 ops/s
Iteration  18: 398194.745 ops/s
Iteration  19: 400008.054 ops/s
Iteration  20: 396503.713 ops/s
Iteration  21: 398291.260 ops/s
Iteration  22: 397994.040 ops/s
Iteration  23: 397359.381 ops/s
Iteration  24: 401685.936 ops/s
Iteration  25: 398762.913 ops/s
Iteration  26: 400438.267 ops/s
Iteration  27: 400170.121 ops/s
Iteration  28: 395924.291 ops/s
Iteration  29: 396990.724 ops/s
Iteration  30: 398002.429 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag":
  398104.482 ±(99.9%) 1387.554 ops/s [Average]
  (min, avg, max) = (393112.065, 398104.482, 402598.422), stdev = 2076.825
  CI (99.9%): [396716.928, 399492.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag  thrpt   30  398104.482 ± 1387.554  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag_empty$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144003.567 ops/s
# Warmup Iteration   2: 219783.190 ops/s
# Warmup Iteration   3: 418878.050 ops/s
# Warmup Iteration   4: 414358.628 ops/s
# Warmup Iteration   5: 416200.160 ops/s
# Warmup Iteration   6: 418225.911 ops/s
# Warmup Iteration   7: 300186.329 ops/s
# Warmup Iteration   8: 414663.799 ops/s
# Warmup Iteration   9: 419420.570 ops/s
# Warmup Iteration  10: 418172.351 ops/s
# Warmup Iteration  11: 416495.903 ops/s
# Warmup Iteration  12: 416578.790 ops/s
# Warmup Iteration  13: 417979.582 ops/s
# Warmup Iteration  14: 416254.572 ops/s
# Warmup Iteration  15: 416417.071 ops/s
# Warmup Iteration  16: 413245.389 ops/s
# Warmup Iteration  17: 414044.292 ops/s
# Warmup Iteration  18: 417351.744 ops/s
# Warmup Iteration  19: 418075.055 ops/s
# Warmup Iteration  20: 417092.358 ops/s
# Warmup Iteration  21: 416042.560 ops/s
# Warmup Iteration  22: 417068.943 ops/s
# Warmup Iteration  23: 416170.052 ops/s
# Warmup Iteration  24: 414931.860 ops/s
# Warmup Iteration  25: 416501.562 ops/s
# Warmup Iteration  26: 416104.523 ops/s
# Warmup Iteration  27: 415366.126 ops/s
# Warmup Iteration  28: 416867.293 ops/s
# Warmup Iteration  29: 416163.010 ops/s
# Warmup Iteration  30: 418572.280 ops/s
Iteration   1: 414661.601 ops/s
Iteration   2: 414447.465 ops/s
Iteration   3: 416324.515 ops/s
Iteration   4: 414397.887 ops/s
Iteration   5: 415856.684 ops/s
Iteration   6: 415352.703 ops/s
Iteration   7: 417159.670 ops/s
Iteration   8: 420144.011 ops/s
Iteration   9: 417273.261 ops/s
Iteration  10: 418646.635 ops/s
Iteration  11: 418235.944 ops/s
Iteration  12: 417390.757 ops/s
Iteration  13: 418845.251 ops/s
Iteration  14: 417432.467 ops/s
Iteration  15: 418142.676 ops/s
Iteration  16: 416567.224 ops/s
Iteration  17: 416678.974 ops/s
Iteration  18: 418496.730 ops/s
Iteration  19: 416929.536 ops/s
Iteration  20: 416827.143 ops/s
Iteration  21: 415163.639 ops/s
Iteration  22: 416623.158 ops/s
Iteration  23: 413938.929 ops/s
Iteration  24: 413818.409 ops/s
Iteration  25: 415269.698 ops/s
Iteration  26: 416067.049 ops/s
Iteration  27: 416227.889 ops/s
Iteration  28: 418248.172 ops/s
Iteration  29: 417494.043 ops/s
Iteration  30: 416935.850 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag_empty":
  416653.266 ±(99.9%) 1043.464 ops/s [Average]
  (min, avg, max) = (413818.409, 416653.266, 420144.011), stdev = 1561.808
  CI (99.9%): [415609.802, 417696.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_tag_empty  thrpt   30  416653.266 ± 1043.464  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_timestamp_duration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_timestamp_duration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 155827.904 ops/s
# Warmup Iteration   2: 243749.866 ops/s
# Warmup Iteration   3: 472753.913 ops/s
# Warmup Iteration   4: 468276.725 ops/s
# Warmup Iteration   5: 467943.613 ops/s
# Warmup Iteration   6: 472258.232 ops/s
# Warmup Iteration   7: 350285.303 ops/s
# Warmup Iteration   8: 472107.203 ops/s
# Warmup Iteration   9: 472911.220 ops/s
# Warmup Iteration  10: 471743.410 ops/s
# Warmup Iteration  11: 468053.272 ops/s
# Warmup Iteration  12: 472175.180 ops/s
# Warmup Iteration  13: 475729.679 ops/s
# Warmup Iteration  14: 473062.380 ops/s
# Warmup Iteration  15: 473415.670 ops/s
# Warmup Iteration  16: 474082.817 ops/s
# Warmup Iteration  17: 463841.378 ops/s
# Warmup Iteration  18: 462230.852 ops/s
# Warmup Iteration  19: 461158.786 ops/s
# Warmup Iteration  20: 462797.185 ops/s
# Warmup Iteration  21: 465186.233 ops/s
# Warmup Iteration  22: 464007.753 ops/s
# Warmup Iteration  23: 464151.101 ops/s
# Warmup Iteration  24: 464685.404 ops/s
# Warmup Iteration  25: 458423.002 ops/s
# Warmup Iteration  26: 465355.034 ops/s
# Warmup Iteration  27: 464217.564 ops/s
# Warmup Iteration  28: 466175.907 ops/s
# Warmup Iteration  29: 464019.542 ops/s
# Warmup Iteration  30: 464901.388 ops/s
Iteration   1: 461527.756 ops/s
Iteration   2: 460458.326 ops/s
Iteration   3: 464195.105 ops/s
Iteration   4: 462777.649 ops/s
Iteration   5: 467029.831 ops/s
Iteration   6: 463119.257 ops/s
Iteration   7: 463957.700 ops/s
Iteration   8: 465655.948 ops/s
Iteration   9: 464489.613 ops/s
Iteration  10: 463601.683 ops/s
Iteration  11: 459828.787 ops/s
Iteration  12: 458353.049 ops/s
Iteration  13: 466262.921 ops/s
Iteration  14: 464835.720 ops/s
Iteration  15: 465500.965 ops/s
Iteration  16: 462784.538 ops/s
Iteration  17: 467387.770 ops/s
Iteration  18: 466269.895 ops/s
Iteration  19: 463948.894 ops/s
Iteration  20: 465849.406 ops/s
Iteration  21: 466656.781 ops/s
Iteration  22: 461502.125 ops/s
Iteration  23: 462301.523 ops/s
Iteration  24: 465460.150 ops/s
Iteration  25: 468164.655 ops/s
Iteration  26: 463778.951 ops/s
Iteration  27: 463288.075 ops/s
Iteration  28: 466078.812 ops/s
Iteration  29: 467143.566 ops/s
Iteration  30: 462957.796 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_timestamp_duration":
  464172.242 ±(99.9%) 1582.935 ops/s [Average]
  (min, avg, max) = (458353.049, 464172.242, 468164.655), stdev = 2369.263
  CI (99.9%): [462589.306, 465755.177] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_read_timestamp_duration  thrpt   30  464172.242 ± 1582.935  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_debug$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_debug

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 106690.561 ops/s
# Warmup Iteration   2: 183571.691 ops/s
# Warmup Iteration   3: 287775.823 ops/s
# Warmup Iteration   4: 342340.023 ops/s
# Warmup Iteration   5: 336972.703 ops/s
# Warmup Iteration   6: 339775.289 ops/s
# Warmup Iteration   7: 342440.692 ops/s
# Warmup Iteration   8: 342828.271 ops/s
# Warmup Iteration   9: 278446.319 ops/s
# Warmup Iteration  10: 312176.903 ops/s
# Warmup Iteration  11: 343789.231 ops/s
# Warmup Iteration  12: 345219.993 ops/s
# Warmup Iteration  13: 348410.940 ops/s
# Warmup Iteration  14: 341887.710 ops/s
# Warmup Iteration  15: 342496.701 ops/s
# Warmup Iteration  16: 343973.715 ops/s
# Warmup Iteration  17: 342325.934 ops/s
# Warmup Iteration  18: 340721.164 ops/s
# Warmup Iteration  19: 342189.382 ops/s
# Warmup Iteration  20: 343059.365 ops/s
# Warmup Iteration  21: 343697.632 ops/s
# Warmup Iteration  22: 344142.015 ops/s
# Warmup Iteration  23: 342977.733 ops/s
# Warmup Iteration  24: 342114.101 ops/s
# Warmup Iteration  25: 342631.796 ops/s
# Warmup Iteration  26: 344493.021 ops/s
# Warmup Iteration  27: 344271.260 ops/s
# Warmup Iteration  28: 344854.058 ops/s
# Warmup Iteration  29: 343399.778 ops/s
# Warmup Iteration  30: 342146.417 ops/s
Iteration   1: 337669.567 ops/s
Iteration   2: 341289.099 ops/s
Iteration   3: 340725.767 ops/s
Iteration   4: 342676.871 ops/s
Iteration   5: 340090.628 ops/s
Iteration   6: 339566.824 ops/s
Iteration   7: 341456.786 ops/s
Iteration   8: 339761.414 ops/s
Iteration   9: 338814.395 ops/s
Iteration  10: 344583.096 ops/s
Iteration  11: 346243.989 ops/s
Iteration  12: 343555.707 ops/s
Iteration  13: 344365.462 ops/s
Iteration  14: 344029.982 ops/s
Iteration  15: 344740.823 ops/s
Iteration  16: 340414.946 ops/s
Iteration  17: 344704.704 ops/s
Iteration  18: 344533.539 ops/s
Iteration  19: 339703.587 ops/s
Iteration  20: 344538.930 ops/s
Iteration  21: 339246.470 ops/s
Iteration  22: 341628.872 ops/s
Iteration  23: 343415.069 ops/s
Iteration  24: 344473.577 ops/s
Iteration  25: 340485.037 ops/s
Iteration  26: 339242.260 ops/s
Iteration  27: 340533.939 ops/s
Iteration  28: 341715.239 ops/s
Iteration  29: 342937.886 ops/s
Iteration  30: 336466.447 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_debug":
  341787.030 ±(99.9%) 1649.509 ops/s [Average]
  (min, avg, max) = (336466.447, 341787.030, 346243.989), stdev = 2468.907
  CI (99.9%): [340137.522, 343436.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_debug  thrpt   30  341787.030 ± 1649.509  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_kind$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_kind

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150261.043 ops/s
# Warmup Iteration   2: 215272.066 ops/s
# Warmup Iteration   3: 442571.371 ops/s
# Warmup Iteration   4: 473816.663 ops/s
# Warmup Iteration   5: 467652.743 ops/s
# Warmup Iteration   6: 470388.684 ops/s
# Warmup Iteration   7: 469568.425 ops/s
# Warmup Iteration   8: 319082.203 ops/s
# Warmup Iteration   9: 469705.768 ops/s
# Warmup Iteration  10: 474848.147 ops/s
# Warmup Iteration  11: 474266.594 ops/s
# Warmup Iteration  12: 471666.667 ops/s
# Warmup Iteration  13: 473874.952 ops/s
# Warmup Iteration  14: 472097.779 ops/s
# Warmup Iteration  15: 472476.022 ops/s
# Warmup Iteration  16: 471223.586 ops/s
# Warmup Iteration  17: 473630.751 ops/s
# Warmup Iteration  18: 473923.809 ops/s
# Warmup Iteration  19: 474263.474 ops/s
# Warmup Iteration  20: 468768.589 ops/s
# Warmup Iteration  21: 469761.599 ops/s
# Warmup Iteration  22: 474948.676 ops/s
# Warmup Iteration  23: 471904.655 ops/s
# Warmup Iteration  24: 472275.676 ops/s
# Warmup Iteration  25: 473153.182 ops/s
# Warmup Iteration  26: 472405.447 ops/s
# Warmup Iteration  27: 471285.600 ops/s
# Warmup Iteration  28: 469037.093 ops/s
# Warmup Iteration  29: 473195.801 ops/s
# Warmup Iteration  30: 466993.440 ops/s
Iteration   1: 467534.170 ops/s
Iteration   2: 468870.142 ops/s
Iteration   3: 475015.175 ops/s
Iteration   4: 473502.140 ops/s
Iteration   5: 473561.152 ops/s
Iteration   6: 473331.718 ops/s
Iteration   7: 467501.866 ops/s
Iteration   8: 471504.711 ops/s
Iteration   9: 470649.517 ops/s
Iteration  10: 468643.105 ops/s
Iteration  11: 469688.330 ops/s
Iteration  12: 476849.956 ops/s
Iteration  13: 472976.817 ops/s
Iteration  14: 475162.449 ops/s
Iteration  15: 473972.132 ops/s
Iteration  16: 469903.016 ops/s
Iteration  17: 471065.806 ops/s
Iteration  18: 473378.184 ops/s
Iteration  19: 476149.374 ops/s
Iteration  20: 473823.282 ops/s
Iteration  21: 470825.370 ops/s
Iteration  22: 469658.017 ops/s
Iteration  23: 472867.947 ops/s
Iteration  24: 469443.995 ops/s
Iteration  25: 472981.262 ops/s
Iteration  26: 471574.347 ops/s
Iteration  27: 469780.159 ops/s
Iteration  28: 470373.712 ops/s
Iteration  29: 474648.549 ops/s
Iteration  30: 476778.541 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_kind":
  472067.165 ±(99.9%) 1767.104 ops/s [Average]
  (min, avg, max) = (467501.866, 472067.165, 476849.956), stdev = 2644.919
  CI (99.9%): [470300.060, 473834.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_kind  thrpt   30  472067.165 ± 1767.104  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_omitsEmptyEndpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_omitsEmptyEndpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151632.421 ops/s
# Warmup Iteration   2: 260988.923 ops/s
# Warmup Iteration   3: 506301.389 ops/s
# Warmup Iteration   4: 498194.123 ops/s
# Warmup Iteration   5: 503287.855 ops/s
# Warmup Iteration   6: 501356.781 ops/s
# Warmup Iteration   7: 361350.479 ops/s
# Warmup Iteration   8: 500979.414 ops/s
# Warmup Iteration   9: 500479.143 ops/s
# Warmup Iteration  10: 502332.088 ops/s
# Warmup Iteration  11: 501181.560 ops/s
# Warmup Iteration  12: 500740.295 ops/s
# Warmup Iteration  13: 498992.302 ops/s
# Warmup Iteration  14: 498228.849 ops/s
# Warmup Iteration  15: 495556.296 ops/s
# Warmup Iteration  16: 500214.079 ops/s
# Warmup Iteration  17: 498431.931 ops/s
# Warmup Iteration  18: 497743.416 ops/s
# Warmup Iteration  19: 497425.531 ops/s
# Warmup Iteration  20: 497194.815 ops/s
# Warmup Iteration  21: 496090.357 ops/s
# Warmup Iteration  22: 497504.146 ops/s
# Warmup Iteration  23: 496601.471 ops/s
# Warmup Iteration  24: 495931.738 ops/s
# Warmup Iteration  25: 499601.464 ops/s
# Warmup Iteration  26: 498469.941 ops/s
# Warmup Iteration  27: 501293.388 ops/s
# Warmup Iteration  28: 500713.448 ops/s
# Warmup Iteration  29: 500639.626 ops/s
# Warmup Iteration  30: 495488.503 ops/s
Iteration   1: 499010.267 ops/s
Iteration   2: 496218.365 ops/s
Iteration   3: 501395.579 ops/s
Iteration   4: 497650.807 ops/s
Iteration   5: 500324.224 ops/s
Iteration   6: 496091.641 ops/s
Iteration   7: 496552.069 ops/s
Iteration   8: 494277.986 ops/s
Iteration   9: 496030.742 ops/s
Iteration  10: 496204.699 ops/s
Iteration  11: 496944.806 ops/s
Iteration  12: 491066.937 ops/s
Iteration  13: 497826.671 ops/s
Iteration  14: 500488.798 ops/s
Iteration  15: 496495.643 ops/s
Iteration  16: 496382.827 ops/s
Iteration  17: 497526.943 ops/s
Iteration  18: 497745.160 ops/s
Iteration  19: 497340.410 ops/s
Iteration  20: 498254.722 ops/s
Iteration  21: 496221.573 ops/s
Iteration  22: 494225.808 ops/s
Iteration  23: 497979.815 ops/s
Iteration  24: 499777.297 ops/s
Iteration  25: 499573.854 ops/s
Iteration  26: 500541.535 ops/s
Iteration  27: 494010.587 ops/s
Iteration  28: 489234.277 ops/s
Iteration  29: 489385.453 ops/s
Iteration  30: 497156.937 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_omitsEmptyEndpoints":
  496731.214 ±(99.9%) 1992.386 ops/s [Average]
  (min, avg, max) = (489234.277, 496731.214, 501395.579), stdev = 2982.110
  CI (99.9%): [494738.828, 498723.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_omitsEmptyEndpoints  thrpt   30  496731.214 ± 1992.386  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 97745.183 ops/s
# Warmup Iteration   2: 177762.505 ops/s
# Warmup Iteration   3: 261042.235 ops/s
# Warmup Iteration   4: 323470.674 ops/s
# Warmup Iteration   5: 320462.600 ops/s
# Warmup Iteration   6: 326301.839 ops/s
# Warmup Iteration   7: 323826.545 ops/s
# Warmup Iteration   8: 325256.047 ops/s
# Warmup Iteration   9: 330375.584 ops/s
# Warmup Iteration  10: 236890.806 ops/s
# Warmup Iteration  11: 328623.056 ops/s
# Warmup Iteration  12: 326358.803 ops/s
# Warmup Iteration  13: 326508.375 ops/s
# Warmup Iteration  14: 329227.368 ops/s
# Warmup Iteration  15: 330422.240 ops/s
# Warmup Iteration  16: 329167.325 ops/s
# Warmup Iteration  17: 327290.447 ops/s
# Warmup Iteration  18: 329060.130 ops/s
# Warmup Iteration  19: 328875.993 ops/s
# Warmup Iteration  20: 328372.708 ops/s
# Warmup Iteration  21: 329976.706 ops/s
# Warmup Iteration  22: 329155.115 ops/s
# Warmup Iteration  23: 327730.503 ops/s
# Warmup Iteration  24: 328163.803 ops/s
# Warmup Iteration  25: 328425.596 ops/s
# Warmup Iteration  26: 328053.936 ops/s
# Warmup Iteration  27: 328724.351 ops/s
# Warmup Iteration  28: 326287.704 ops/s
# Warmup Iteration  29: 324115.958 ops/s
# Warmup Iteration  30: 328045.077 ops/s
Iteration   1: 329097.814 ops/s
Iteration   2: 328396.561 ops/s
Iteration   3: 331233.227 ops/s
Iteration   4: 331151.716 ops/s
Iteration   5: 331725.187 ops/s
Iteration   6: 330224.621 ops/s
Iteration   7: 329766.378 ops/s
Iteration   8: 331192.981 ops/s
Iteration   9: 330938.012 ops/s
Iteration  10: 329979.552 ops/s
Iteration  11: 330527.646 ops/s
Iteration  12: 328585.479 ops/s
Iteration  13: 331642.533 ops/s
Iteration  14: 328407.684 ops/s
Iteration  15: 332050.626 ops/s
Iteration  16: 332507.274 ops/s
Iteration  17: 329431.018 ops/s
Iteration  18: 330312.514 ops/s
Iteration  19: 331911.999 ops/s
Iteration  20: 331299.217 ops/s
Iteration  21: 331063.730 ops/s
Iteration  22: 331426.397 ops/s
Iteration  23: 330034.877 ops/s
Iteration  24: 329734.745 ops/s
Iteration  25: 331097.158 ops/s
Iteration  26: 330871.541 ops/s
Iteration  27: 330800.136 ops/s
Iteration  28: 329524.233 ops/s
Iteration  29: 328172.128 ops/s
Iteration  30: 330177.702 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_shared":
  330442.823 ±(99.9%) 774.231 ops/s [Average]
  (min, avg, max) = (328172.128, 330442.823, 332507.274), stdev = 1158.832
  CI (99.9%): [329668.592, 331217.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_shared  thrpt   30  330442.823 ± 774.231  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_startsWithFieldInListOfSpans$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_startsWithFieldInListOfSpans

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163747.719 ops/s
# Warmup Iteration   2: 231493.912 ops/s
# Warmup Iteration   3: 458829.473 ops/s
# Warmup Iteration   4: 453217.034 ops/s
# Warmup Iteration   5: 460609.107 ops/s
# Warmup Iteration   6: 458815.880 ops/s
# Warmup Iteration   7: 422298.385 ops/s
# Warmup Iteration   8: 363584.757 ops/s
# Warmup Iteration   9: 459585.174 ops/s
# Warmup Iteration  10: 457254.289 ops/s
# Warmup Iteration  11: 460872.287 ops/s
# Warmup Iteration  12: 461214.663 ops/s
# Warmup Iteration  13: 460219.953 ops/s
# Warmup Iteration  14: 452787.883 ops/s
# Warmup Iteration  15: 457569.512 ops/s
# Warmup Iteration  16: 458531.496 ops/s
# Warmup Iteration  17: 457955.276 ops/s
# Warmup Iteration  18: 457855.157 ops/s
# Warmup Iteration  19: 455660.581 ops/s
# Warmup Iteration  20: 457328.490 ops/s
# Warmup Iteration  21: 456084.792 ops/s
# Warmup Iteration  22: 456098.235 ops/s
# Warmup Iteration  23: 457237.544 ops/s
# Warmup Iteration  24: 456588.054 ops/s
# Warmup Iteration  25: 458319.893 ops/s
# Warmup Iteration  26: 459186.979 ops/s
# Warmup Iteration  27: 458839.886 ops/s
# Warmup Iteration  28: 455596.083 ops/s
# Warmup Iteration  29: 455488.660 ops/s
# Warmup Iteration  30: 454648.647 ops/s
Iteration   1: 456487.504 ops/s
Iteration   2: 458159.209 ops/s
Iteration   3: 458241.821 ops/s
Iteration   4: 454409.989 ops/s
Iteration   5: 453040.954 ops/s
Iteration   6: 453677.213 ops/s
Iteration   7: 453795.719 ops/s
Iteration   8: 453570.396 ops/s
Iteration   9: 455157.864 ops/s
Iteration  10: 454496.290 ops/s
Iteration  11: 457554.942 ops/s
Iteration  12: 459748.158 ops/s
Iteration  13: 456529.394 ops/s
Iteration  14: 457742.182 ops/s
Iteration  15: 455090.653 ops/s
Iteration  16: 455808.165 ops/s
Iteration  17: 455958.448 ops/s
Iteration  18: 459703.850 ops/s
Iteration  19: 457432.627 ops/s
Iteration  20: 458785.834 ops/s
Iteration  21: 456387.040 ops/s
Iteration  22: 455618.582 ops/s
Iteration  23: 454696.694 ops/s
Iteration  24: 453613.938 ops/s
Iteration  25: 456917.121 ops/s
Iteration  26: 452766.494 ops/s
Iteration  27: 453912.683 ops/s
Iteration  28: 458265.171 ops/s
Iteration  29: 457721.249 ops/s
Iteration  30: 457034.597 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_startsWithFieldInListOfSpans":
  456077.493 ±(99.9%) 1341.061 ops/s [Average]
  (min, avg, max) = (452766.494, 456077.493, 459748.158), stdev = 2007.238
  CI (99.9%): [454736.431, 457418.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_startsWithFieldInListOfSpans  thrpt   30  456077.493 ± 1341.061  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_writesIds$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_writesIds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 91772.193 ops/s
# Warmup Iteration   2: 124267.401 ops/s
# Warmup Iteration   3: 136435.191 ops/s
# Warmup Iteration   4: 188444.448 ops/s
# Warmup Iteration   5: 187026.784 ops/s
# Warmup Iteration   6: 188649.803 ops/s
# Warmup Iteration   7: 187974.043 ops/s
# Warmup Iteration   8: 186578.093 ops/s
# Warmup Iteration   9: 189381.247 ops/s
# Warmup Iteration  10: 187782.213 ops/s
# Warmup Iteration  11: 188749.203 ops/s
# Warmup Iteration  12: 187922.577 ops/s
# Warmup Iteration  13: 181766.942 ops/s
# Warmup Iteration  14: 141612.657 ops/s
# Warmup Iteration  15: 188653.273 ops/s
# Warmup Iteration  16: 188479.515 ops/s
# Warmup Iteration  17: 187895.550 ops/s
# Warmup Iteration  18: 188314.786 ops/s
# Warmup Iteration  19: 188311.764 ops/s
# Warmup Iteration  20: 188197.225 ops/s
# Warmup Iteration  21: 188931.369 ops/s
# Warmup Iteration  22: 188809.930 ops/s
# Warmup Iteration  23: 187990.524 ops/s
# Warmup Iteration  24: 189144.293 ops/s
# Warmup Iteration  25: 188944.186 ops/s
# Warmup Iteration  26: 188211.631 ops/s
# Warmup Iteration  27: 188289.154 ops/s
# Warmup Iteration  28: 187837.688 ops/s
# Warmup Iteration  29: 186998.443 ops/s
# Warmup Iteration  30: 188218.723 ops/s
Iteration   1: 187882.636 ops/s
Iteration   2: 188164.601 ops/s
Iteration   3: 189156.904 ops/s
Iteration   4: 188099.325 ops/s
Iteration   5: 187790.018 ops/s
Iteration   6: 189006.328 ops/s
Iteration   7: 188261.104 ops/s
Iteration   8: 188169.453 ops/s
Iteration   9: 188671.979 ops/s
Iteration  10: 188013.302 ops/s
Iteration  11: 187390.101 ops/s
Iteration  12: 187077.970 ops/s
Iteration  13: 188571.550 ops/s
Iteration  14: 188517.576 ops/s
Iteration  15: 188957.600 ops/s
Iteration  16: 188650.422 ops/s
Iteration  17: 187586.370 ops/s
Iteration  18: 186692.359 ops/s
Iteration  19: 188244.343 ops/s
Iteration  20: 188523.017 ops/s
Iteration  21: 188954.824 ops/s
Iteration  22: 188269.773 ops/s
Iteration  23: 189074.774 ops/s
Iteration  24: 188986.100 ops/s
Iteration  25: 188984.309 ops/s
Iteration  26: 189049.632 ops/s
Iteration  27: 188845.138 ops/s
Iteration  28: 188405.184 ops/s
Iteration  29: 188664.707 ops/s
Iteration  30: 188893.431 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_writesIds":
  188385.161 ±(99.9%) 415.502 ops/s [Average]
  (min, avg, max) = (186692.359, 188385.161, 189156.904), stdev = 621.904
  CI (99.9%): [187969.659, 188800.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_span_write_writesIds  thrpt   30  188385.161 ± 415.502  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_tag_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_tag_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244064.852 ops/s
# Warmup Iteration   2: 418741.830 ops/s
# Warmup Iteration   3: 609820.180 ops/s
# Warmup Iteration   4: 619987.166 ops/s
# Warmup Iteration   5: 621278.626 ops/s
# Warmup Iteration   6: 448189.210 ops/s
# Warmup Iteration   7: 615265.213 ops/s
# Warmup Iteration   8: 612256.995 ops/s
# Warmup Iteration   9: 614107.564 ops/s
# Warmup Iteration  10: 614094.408 ops/s
# Warmup Iteration  11: 619002.885 ops/s
# Warmup Iteration  12: 609712.772 ops/s
# Warmup Iteration  13: 609963.999 ops/s
# Warmup Iteration  14: 619058.275 ops/s
# Warmup Iteration  15: 620669.874 ops/s
# Warmup Iteration  16: 620285.622 ops/s
# Warmup Iteration  17: 613145.466 ops/s
# Warmup Iteration  18: 617674.680 ops/s
# Warmup Iteration  19: 615713.334 ops/s
# Warmup Iteration  20: 610539.998 ops/s
# Warmup Iteration  21: 615689.994 ops/s
# Warmup Iteration  22: 619359.856 ops/s
# Warmup Iteration  23: 619924.604 ops/s
# Warmup Iteration  24: 617350.214 ops/s
# Warmup Iteration  25: 615468.231 ops/s
# Warmup Iteration  26: 619652.198 ops/s
# Warmup Iteration  27: 614474.613 ops/s
# Warmup Iteration  28: 617172.782 ops/s
# Warmup Iteration  29: 617915.058 ops/s
# Warmup Iteration  30: 614189.554 ops/s
Iteration   1: 614026.696 ops/s
Iteration   2: 616387.893 ops/s
Iteration   3: 615423.956 ops/s
Iteration   4: 617552.814 ops/s
Iteration   5: 619594.605 ops/s
Iteration   6: 617122.272 ops/s
Iteration   7: 619904.797 ops/s
Iteration   8: 613838.146 ops/s
Iteration   9: 617729.053 ops/s
Iteration  10: 621084.145 ops/s
Iteration  11: 618662.934 ops/s
Iteration  12: 615020.917 ops/s
Iteration  13: 613839.819 ops/s
Iteration  14: 615793.594 ops/s
Iteration  15: 614468.723 ops/s
Iteration  16: 617966.597 ops/s
Iteration  17: 616635.029 ops/s
Iteration  18: 618478.963 ops/s
Iteration  19: 614834.931 ops/s
Iteration  20: 619557.412 ops/s
Iteration  21: 618429.832 ops/s
Iteration  22: 615117.905 ops/s
Iteration  23: 612267.470 ops/s
Iteration  24: 609977.567 ops/s
Iteration  25: 609702.396 ops/s
Iteration  26: 614800.469 ops/s
Iteration  27: 605958.027 ops/s
Iteration  28: 609635.605 ops/s
Iteration  29: 615226.182 ops/s
Iteration  30: 618085.817 ops/s


Result "zipkin2.internal.Proto3ZipkinFieldsTest._Benchmark.benchmark_tag_sizeInBytes":
  615570.819 ±(99.9%) 2314.451 ops/s [Average]
  (min, avg, max) = (605958.027, 615570.819, 621084.145), stdev = 3464.162
  CI (99.9%): [613256.368, 617885.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
Proto3ZipkinFieldsTest._Benchmark.benchmark_tag_sizeInBytes  thrpt   30  615570.819 ± 2314.451  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_byteBuffer_arrayOffset$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_byteBuffer_arrayOffset

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 307697.721 ops/s
# Warmup Iteration   2: 370121.632 ops/s
# Warmup Iteration   3: 761641.894 ops/s
# Warmup Iteration   4: 766392.906 ops/s
# Warmup Iteration   5: 777528.867 ops/s
# Warmup Iteration   6: 776352.471 ops/s
# Warmup Iteration   7: 771659.370 ops/s
# Warmup Iteration   8: 518898.429 ops/s
# Warmup Iteration   9: 777860.428 ops/s
# Warmup Iteration  10: 778478.492 ops/s
# Warmup Iteration  11: 777707.589 ops/s
# Warmup Iteration  12: 775632.879 ops/s
# Warmup Iteration  13: 779145.839 ops/s
# Warmup Iteration  14: 778844.400 ops/s
# Warmup Iteration  15: 777943.520 ops/s
# Warmup Iteration  16: 778536.173 ops/s
# Warmup Iteration  17: 772338.435 ops/s
# Warmup Iteration  18: 777273.469 ops/s
# Warmup Iteration  19: 773848.382 ops/s
# Warmup Iteration  20: 775534.173 ops/s
# Warmup Iteration  21: 775724.824 ops/s
# Warmup Iteration  22: 775389.263 ops/s
# Warmup Iteration  23: 773395.973 ops/s
# Warmup Iteration  24: 774873.814 ops/s
# Warmup Iteration  25: 773720.412 ops/s
# Warmup Iteration  26: 775837.900 ops/s
# Warmup Iteration  27: 772522.359 ops/s
# Warmup Iteration  28: 773033.236 ops/s
# Warmup Iteration  29: 777202.338 ops/s
# Warmup Iteration  30: 775482.726 ops/s
Iteration   1: 775466.594 ops/s
Iteration   2: 773383.019 ops/s
Iteration   3: 775540.435 ops/s
Iteration   4: 776634.930 ops/s
Iteration   5: 777057.366 ops/s
Iteration   6: 776455.399 ops/s
Iteration   7: 776781.121 ops/s
Iteration   8: 776119.238 ops/s
Iteration   9: 777389.043 ops/s
Iteration  10: 773049.423 ops/s
Iteration  11: 770000.132 ops/s
Iteration  12: 771937.522 ops/s
Iteration  13: 772090.537 ops/s
Iteration  14: 766259.082 ops/s
Iteration  15: 770312.776 ops/s
Iteration  16: 767926.091 ops/s
Iteration  17: 771870.124 ops/s
Iteration  18: 768448.177 ops/s
Iteration  19: 765600.649 ops/s
Iteration  20: 771206.221 ops/s
Iteration  21: 770855.486 ops/s
Iteration  22: 769222.305 ops/s
Iteration  23: 771144.009 ops/s
Iteration  24: 767974.774 ops/s
Iteration  25: 762829.291 ops/s
Iteration  26: 762479.259 ops/s
Iteration  27: 765804.378 ops/s
Iteration  28: 772817.088 ops/s
Iteration  29: 769481.103 ops/s
Iteration  30: 768486.868 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_byteBuffer_arrayOffset":
  771154.081 ±(99.9%) 2804.407 ops/s [Average]
  (min, avg, max) = (762479.259, 771154.081, 777389.043), stdev = 4197.505
  CI (99.9%): [768349.674, 773958.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_byteBuffer_arrayOffset  thrpt   30  771154.081 ± 2804.407  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_byteBuffer_limited$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_byteBuffer_limited

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 349204.179 ops/s
# Warmup Iteration   2: 412251.078 ops/s
# Warmup Iteration   3: 720475.238 ops/s
# Warmup Iteration   4: 796836.511 ops/s
# Warmup Iteration   5: 806344.797 ops/s
# Warmup Iteration   6: 800256.434 ops/s
# Warmup Iteration   7: 797207.821 ops/s
# Warmup Iteration   8: 797029.429 ops/s
# Warmup Iteration   9: 536928.254 ops/s
# Warmup Iteration  10: 804571.778 ops/s
# Warmup Iteration  11: 806544.384 ops/s
# Warmup Iteration  12: 812734.796 ops/s
# Warmup Iteration  13: 803723.948 ops/s
# Warmup Iteration  14: 803995.430 ops/s
# Warmup Iteration  15: 809687.747 ops/s
# Warmup Iteration  16: 807518.732 ops/s
# Warmup Iteration  17: 803615.664 ops/s
# Warmup Iteration  18: 797987.509 ops/s
# Warmup Iteration  19: 801298.899 ops/s
# Warmup Iteration  20: 804237.350 ops/s
# Warmup Iteration  21: 804025.237 ops/s
# Warmup Iteration  22: 801262.217 ops/s
# Warmup Iteration  23: 798956.366 ops/s
# Warmup Iteration  24: 799329.121 ops/s
# Warmup Iteration  25: 809437.205 ops/s
# Warmup Iteration  26: 806602.631 ops/s
# Warmup Iteration  27: 800911.000 ops/s
# Warmup Iteration  28: 797180.402 ops/s
# Warmup Iteration  29: 800426.077 ops/s
# Warmup Iteration  30: 804407.297 ops/s
Iteration   1: 801210.668 ops/s
Iteration   2: 797533.991 ops/s
Iteration   3: 803442.122 ops/s
Iteration   4: 805022.789 ops/s
Iteration   5: 800007.977 ops/s
Iteration   6: 799835.402 ops/s
Iteration   7: 799804.531 ops/s
Iteration   8: 805612.094 ops/s
Iteration   9: 803322.549 ops/s
Iteration  10: 805895.541 ops/s
Iteration  11: 806731.311 ops/s
Iteration  12: 800890.954 ops/s
Iteration  13: 796586.184 ops/s
Iteration  14: 799201.512 ops/s
Iteration  15: 800996.899 ops/s
Iteration  16: 802764.156 ops/s
Iteration  17: 809556.091 ops/s
Iteration  18: 798721.491 ops/s
Iteration  19: 802883.190 ops/s
Iteration  20: 809050.583 ops/s
Iteration  21: 803920.591 ops/s
Iteration  22: 808143.085 ops/s
Iteration  23: 810254.349 ops/s
Iteration  24: 807722.419 ops/s
Iteration  25: 804611.119 ops/s
Iteration  26: 807295.719 ops/s
Iteration  27: 800163.746 ops/s
Iteration  28: 805367.860 ops/s
Iteration  29: 805850.922 ops/s
Iteration  30: 809627.993 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_byteBuffer_limited":
  803734.261 ±(99.9%) 2574.411 ops/s [Average]
  (min, avg, max) = (796586.184, 803734.261, 810254.349), stdev = 3853.258
  CI (99.9%): [801159.850, 806308.672] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_byteBuffer_limited  thrpt   30  803734.261 ± 2574.411  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_byteBuff$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_byteBuff

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 338545.999 ops/s
# Warmup Iteration   2: 390538.420 ops/s
# Warmup Iteration   3: 810822.096 ops/s
# Warmup Iteration   4: 817260.236 ops/s
# Warmup Iteration   5: 830839.967 ops/s
# Warmup Iteration   6: 822294.468 ops/s
# Warmup Iteration   7: 822507.479 ops/s
# Warmup Iteration   8: 546292.004 ops/s
# Warmup Iteration   9: 820049.197 ops/s
# Warmup Iteration  10: 826135.464 ops/s
# Warmup Iteration  11: 823408.566 ops/s
# Warmup Iteration  12: 820570.988 ops/s
# Warmup Iteration  13: 820890.829 ops/s
# Warmup Iteration  14: 819372.539 ops/s
# Warmup Iteration  15: 828274.149 ops/s
# Warmup Iteration  16: 821551.151 ops/s
# Warmup Iteration  17: 819169.947 ops/s
# Warmup Iteration  18: 822886.933 ops/s
# Warmup Iteration  19: 819947.631 ops/s
# Warmup Iteration  20: 827086.557 ops/s
# Warmup Iteration  21: 822746.630 ops/s
# Warmup Iteration  22: 817908.550 ops/s
# Warmup Iteration  23: 821355.369 ops/s
# Warmup Iteration  24: 821440.799 ops/s
# Warmup Iteration  25: 828546.467 ops/s
# Warmup Iteration  26: 827474.037 ops/s
# Warmup Iteration  27: 827408.724 ops/s
# Warmup Iteration  28: 823164.116 ops/s
# Warmup Iteration  29: 824082.411 ops/s
# Warmup Iteration  30: 828885.098 ops/s
Iteration   1: 825069.959 ops/s
Iteration   2: 823201.075 ops/s
Iteration   3: 819614.791 ops/s
Iteration   4: 822743.717 ops/s
Iteration   5: 833111.333 ops/s
Iteration   6: 832434.271 ops/s
Iteration   7: 831427.757 ops/s
Iteration   8: 833276.973 ops/s
Iteration   9: 832205.749 ops/s
Iteration  10: 831832.409 ops/s
Iteration  11: 833489.865 ops/s
Iteration  12: 833579.256 ops/s
Iteration  13: 833871.735 ops/s
Iteration  14: 834110.696 ops/s
Iteration  15: 834655.385 ops/s
Iteration  16: 833811.420 ops/s
Iteration  17: 832597.981 ops/s
Iteration  18: 832240.959 ops/s
Iteration  19: 831619.704 ops/s
Iteration  20: 830123.797 ops/s
Iteration  21: 832542.809 ops/s
Iteration  22: 832641.900 ops/s
Iteration  23: 834150.920 ops/s
Iteration  24: 831986.191 ops/s
Iteration  25: 834256.409 ops/s
Iteration  26: 833097.222 ops/s
Iteration  27: 834058.752 ops/s
Iteration  28: 833764.387 ops/s
Iteration  29: 832645.707 ops/s
Iteration  30: 831003.918 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_byteBuff":
  831505.568 ±(99.9%) 2506.341 ops/s [Average]
  (min, avg, max) = (819614.791, 831505.568, 834655.385), stdev = 3751.373
  CI (99.9%): [828999.228, 834011.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readInt_byteBuff  thrpt   30  831505.568 ± 2506.341  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_byteBuff_littleEndian$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_byteBuff_littleEndian

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 344226.195 ops/s
# Warmup Iteration   2: 404002.770 ops/s
# Warmup Iteration   3: 838808.950 ops/s
# Warmup Iteration   4: 824933.038 ops/s
# Warmup Iteration   5: 831665.983 ops/s
# Warmup Iteration   6: 835352.111 ops/s
# Warmup Iteration   7: 834703.274 ops/s
# Warmup Iteration   8: 569450.923 ops/s
# Warmup Iteration   9: 835866.088 ops/s
# Warmup Iteration  10: 833425.725 ops/s
# Warmup Iteration  11: 836378.777 ops/s
# Warmup Iteration  12: 834970.707 ops/s
# Warmup Iteration  13: 829932.143 ops/s
# Warmup Iteration  14: 833880.587 ops/s
# Warmup Iteration  15: 833195.588 ops/s
# Warmup Iteration  16: 826086.081 ops/s
# Warmup Iteration  17: 830269.133 ops/s
# Warmup Iteration  18: 832603.376 ops/s
# Warmup Iteration  19: 830841.097 ops/s
# Warmup Iteration  20: 834362.143 ops/s
# Warmup Iteration  21: 831778.293 ops/s
# Warmup Iteration  22: 831189.925 ops/s
# Warmup Iteration  23: 834511.011 ops/s
# Warmup Iteration  24: 832901.924 ops/s
# Warmup Iteration  25: 835497.072 ops/s
# Warmup Iteration  26: 832151.595 ops/s
# Warmup Iteration  27: 828728.556 ops/s
# Warmup Iteration  28: 831194.439 ops/s
# Warmup Iteration  29: 832398.335 ops/s
# Warmup Iteration  30: 835624.777 ops/s
Iteration   1: 832229.379 ops/s
Iteration   2: 832156.230 ops/s
Iteration   3: 835418.255 ops/s
Iteration   4: 832701.646 ops/s
Iteration   5: 834129.664 ops/s
Iteration   6: 833613.777 ops/s
Iteration   7: 835744.249 ops/s
Iteration   8: 838947.821 ops/s
Iteration   9: 835553.592 ops/s
Iteration  10: 835285.456 ops/s
Iteration  11: 829089.551 ops/s
Iteration  12: 835744.644 ops/s
Iteration  13: 828464.307 ops/s
Iteration  14: 831936.332 ops/s
Iteration  15: 828120.113 ops/s
Iteration  16: 829888.109 ops/s
Iteration  17: 833407.467 ops/s
Iteration  18: 826989.239 ops/s
Iteration  19: 837324.298 ops/s
Iteration  20: 834237.579 ops/s
Iteration  21: 834397.696 ops/s
Iteration  22: 835540.440 ops/s
Iteration  23: 833809.765 ops/s
Iteration  24: 833295.190 ops/s
Iteration  25: 830105.378 ops/s
Iteration  26: 834870.759 ops/s
Iteration  27: 833329.597 ops/s
Iteration  28: 831879.099 ops/s
Iteration  29: 831530.647 ops/s
Iteration  30: 835604.310 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_byteBuff_littleEndian":
  833178.153 ±(99.9%) 1875.329 ops/s [Average]
  (min, avg, max) = (826989.239, 833178.153, 838947.821), stdev = 2806.904
  CI (99.9%): [831302.824, 835053.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readInt_byteBuff_littleEndian  thrpt   30  833178.153 ± 1875.329  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_bytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_bytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366264.993 ops/s
# Warmup Iteration   2: 421677.516 ops/s
# Warmup Iteration   3: 866921.237 ops/s
# Warmup Iteration   4: 853739.094 ops/s
# Warmup Iteration   5: 860707.934 ops/s
# Warmup Iteration   6: 859506.973 ops/s
# Warmup Iteration   7: 859209.060 ops/s
# Warmup Iteration   8: 575628.840 ops/s
# Warmup Iteration   9: 859659.112 ops/s
# Warmup Iteration  10: 854585.469 ops/s
# Warmup Iteration  11: 855084.633 ops/s
# Warmup Iteration  12: 851213.622 ops/s
# Warmup Iteration  13: 857039.695 ops/s
# Warmup Iteration  14: 858773.738 ops/s
# Warmup Iteration  15: 857750.275 ops/s
# Warmup Iteration  16: 849930.296 ops/s
# Warmup Iteration  17: 850273.293 ops/s
# Warmup Iteration  18: 854319.291 ops/s
# Warmup Iteration  19: 858135.268 ops/s
# Warmup Iteration  20: 856555.552 ops/s
# Warmup Iteration  21: 854550.411 ops/s
# Warmup Iteration  22: 853202.512 ops/s
# Warmup Iteration  23: 851436.582 ops/s
# Warmup Iteration  24: 857630.664 ops/s
# Warmup Iteration  25: 859079.030 ops/s
# Warmup Iteration  26: 859385.860 ops/s
# Warmup Iteration  27: 858345.756 ops/s
# Warmup Iteration  28: 858392.910 ops/s
# Warmup Iteration  29: 856314.875 ops/s
# Warmup Iteration  30: 855876.625 ops/s
Iteration   1: 852803.325 ops/s
Iteration   2: 857743.913 ops/s
Iteration   3: 849977.821 ops/s
Iteration   4: 854654.750 ops/s
Iteration   5: 848326.411 ops/s
Iteration   6: 850530.670 ops/s
Iteration   7: 859359.980 ops/s
Iteration   8: 855695.350 ops/s
Iteration   9: 857929.099 ops/s
Iteration  10: 847677.513 ops/s
Iteration  11: 853318.991 ops/s
Iteration  12: 847700.855 ops/s
Iteration  13: 854675.970 ops/s
Iteration  14: 853496.992 ops/s
Iteration  15: 854540.691 ops/s
Iteration  16: 849553.744 ops/s
Iteration  17: 858177.712 ops/s
Iteration  18: 856893.047 ops/s
Iteration  19: 860101.336 ops/s
Iteration  20: 856395.595 ops/s
Iteration  21: 854467.302 ops/s
Iteration  22: 850056.599 ops/s
Iteration  23: 852877.286 ops/s
Iteration  24: 856038.668 ops/s
Iteration  25: 853004.486 ops/s
Iteration  26: 857933.004 ops/s
Iteration  27: 858645.419 ops/s
Iteration  28: 857696.749 ops/s
Iteration  29: 863998.284 ops/s
Iteration  30: 848876.293 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readInt_bytes":
  854438.262 ±(99.9%) 2736.047 ops/s [Average]
  (min, avg, max) = (847677.513, 854438.262, 863998.284), stdev = 4095.187
  CI (99.9%): [851702.215, 857174.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readInt_bytes  thrpt   30  854438.262 ± 2736.047  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 338700.221 ops/s
# Warmup Iteration   2: 394711.018 ops/s
# Warmup Iteration   3: 831026.250 ops/s
# Warmup Iteration   4: 828975.855 ops/s
# Warmup Iteration   5: 826489.611 ops/s
# Warmup Iteration   6: 831462.930 ops/s
# Warmup Iteration   7: 833359.025 ops/s
# Warmup Iteration   8: 549812.993 ops/s
# Warmup Iteration   9: 832464.568 ops/s
# Warmup Iteration  10: 834271.560 ops/s
# Warmup Iteration  11: 831139.105 ops/s
# Warmup Iteration  12: 830123.333 ops/s
# Warmup Iteration  13: 835324.761 ops/s
# Warmup Iteration  14: 832014.186 ops/s
# Warmup Iteration  15: 824461.325 ops/s
# Warmup Iteration  16: 824870.141 ops/s
# Warmup Iteration  17: 827685.224 ops/s
# Warmup Iteration  18: 828301.204 ops/s
# Warmup Iteration  19: 837253.460 ops/s
# Warmup Iteration  20: 834931.514 ops/s
# Warmup Iteration  21: 829338.186 ops/s
# Warmup Iteration  22: 830967.328 ops/s
# Warmup Iteration  23: 831894.825 ops/s
# Warmup Iteration  24: 834984.281 ops/s
# Warmup Iteration  25: 827518.427 ops/s
# Warmup Iteration  26: 826424.013 ops/s
# Warmup Iteration  27: 830793.156 ops/s
# Warmup Iteration  28: 831031.076 ops/s
# Warmup Iteration  29: 834275.232 ops/s
# Warmup Iteration  30: 830861.333 ops/s
Iteration   1: 831475.467 ops/s
Iteration   2: 826046.883 ops/s
Iteration   3: 823972.439 ops/s
Iteration   4: 832671.962 ops/s
Iteration   5: 827899.700 ops/s
Iteration   6: 824949.686 ops/s
Iteration   7: 832613.609 ops/s
Iteration   8: 839340.397 ops/s
Iteration   9: 830968.414 ops/s
Iteration  10: 834576.478 ops/s
Iteration  11: 831478.384 ops/s
Iteration  12: 837313.494 ops/s
Iteration  13: 830761.843 ops/s
Iteration  14: 830587.205 ops/s
Iteration  15: 829317.486 ops/s
Iteration  16: 829431.522 ops/s
Iteration  17: 834844.251 ops/s
Iteration  18: 836102.924 ops/s
Iteration  19: 835697.425 ops/s
Iteration  20: 837743.293 ops/s
Iteration  21: 839160.450 ops/s
Iteration  22: 835895.463 ops/s
Iteration  23: 839309.439 ops/s
Iteration  24: 830225.645 ops/s
Iteration  25: 836777.340 ops/s
Iteration  26: 830955.126 ops/s
Iteration  27: 836254.226 ops/s
Iteration  28: 840870.516 ops/s
Iteration  29: 826276.219 ops/s
Iteration  30: 837683.733 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff":
  833040.034 ±(99.9%) 3096.256 ops/s [Average]
  (min, avg, max) = (823972.439, 833040.034, 840870.516), stdev = 4634.331
  CI (99.9%): [829943.778, 836136.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff  thrpt   30  833040.034 ± 3096.256  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff_littleEndian$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff_littleEndian

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 318423.673 ops/s
# Warmup Iteration   2: 378557.846 ops/s
# Warmup Iteration   3: 822422.895 ops/s
# Warmup Iteration   4: 828469.447 ops/s
# Warmup Iteration   5: 826828.455 ops/s
# Warmup Iteration   6: 830649.527 ops/s
# Warmup Iteration   7: 824814.761 ops/s
# Warmup Iteration   8: 569010.184 ops/s
# Warmup Iteration   9: 835263.307 ops/s
# Warmup Iteration  10: 831935.082 ops/s
# Warmup Iteration  11: 834277.197 ops/s
# Warmup Iteration  12: 829984.887 ops/s
# Warmup Iteration  13: 830088.106 ops/s
# Warmup Iteration  14: 836961.068 ops/s
# Warmup Iteration  15: 831447.488 ops/s
# Warmup Iteration  16: 832200.016 ops/s
# Warmup Iteration  17: 828797.052 ops/s
# Warmup Iteration  18: 830684.586 ops/s
# Warmup Iteration  19: 837038.816 ops/s
# Warmup Iteration  20: 834376.095 ops/s
# Warmup Iteration  21: 836430.685 ops/s
# Warmup Iteration  22: 834101.608 ops/s
# Warmup Iteration  23: 833024.474 ops/s
# Warmup Iteration  24: 834993.254 ops/s
# Warmup Iteration  25: 835537.612 ops/s
# Warmup Iteration  26: 838312.999 ops/s
# Warmup Iteration  27: 833311.762 ops/s
# Warmup Iteration  28: 831449.595 ops/s
# Warmup Iteration  29: 835205.451 ops/s
# Warmup Iteration  30: 833272.354 ops/s
Iteration   1: 833053.914 ops/s
Iteration   2: 831202.445 ops/s
Iteration   3: 827447.188 ops/s
Iteration   4: 827885.785 ops/s
Iteration   5: 826363.828 ops/s
Iteration   6: 834718.713 ops/s
Iteration   7: 837596.747 ops/s
Iteration   8: 832495.323 ops/s
Iteration   9: 832321.158 ops/s
Iteration  10: 833206.626 ops/s
Iteration  11: 831154.501 ops/s
Iteration  12: 831598.875 ops/s
Iteration  13: 825815.396 ops/s
Iteration  14: 823650.081 ops/s
Iteration  15: 831533.101 ops/s
Iteration  16: 830957.501 ops/s
Iteration  17: 834153.816 ops/s
Iteration  18: 836816.902 ops/s
Iteration  19: 831739.316 ops/s
Iteration  20: 830892.583 ops/s
Iteration  21: 828794.421 ops/s
Iteration  22: 833235.357 ops/s
Iteration  23: 829782.755 ops/s
Iteration  24: 825128.169 ops/s
Iteration  25: 830640.371 ops/s
Iteration  26: 834572.821 ops/s
Iteration  27: 838895.500 ops/s
Iteration  28: 833497.311 ops/s
Iteration  29: 830243.053 ops/s
Iteration  30: 835413.099 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff_littleEndian":
  831493.555 ±(99.9%) 2419.161 ops/s [Average]
  (min, avg, max) = (823650.081, 831493.555, 838895.500), stdev = 3620.887
  CI (99.9%): [829074.394, 833912.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readLongLe_byteBuff_littleEndian  thrpt   30  831493.555 ± 2419.161  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_bytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_bytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 359885.540 ops/s
# Warmup Iteration   2: 403188.989 ops/s
# Warmup Iteration   3: 860955.904 ops/s
# Warmup Iteration   4: 859819.709 ops/s
# Warmup Iteration   5: 868030.972 ops/s
# Warmup Iteration   6: 866919.167 ops/s
# Warmup Iteration   7: 862860.277 ops/s
# Warmup Iteration   8: 592821.740 ops/s
# Warmup Iteration   9: 874288.510 ops/s
# Warmup Iteration  10: 872033.075 ops/s
# Warmup Iteration  11: 870285.688 ops/s
# Warmup Iteration  12: 871308.498 ops/s
# Warmup Iteration  13: 874181.689 ops/s
# Warmup Iteration  14: 873733.845 ops/s
# Warmup Iteration  15: 867947.563 ops/s
# Warmup Iteration  16: 867247.853 ops/s
# Warmup Iteration  17: 866636.495 ops/s
# Warmup Iteration  18: 871051.572 ops/s
# Warmup Iteration  19: 870042.805 ops/s
# Warmup Iteration  20: 865818.018 ops/s
# Warmup Iteration  21: 863766.218 ops/s
# Warmup Iteration  22: 866313.010 ops/s
# Warmup Iteration  23: 872684.672 ops/s
# Warmup Iteration  24: 875718.613 ops/s
# Warmup Iteration  25: 867473.073 ops/s
# Warmup Iteration  26: 870118.842 ops/s
# Warmup Iteration  27: 875294.317 ops/s
# Warmup Iteration  28: 870804.618 ops/s
# Warmup Iteration  29: 870130.576 ops/s
# Warmup Iteration  30: 870860.506 ops/s
Iteration   1: 869160.775 ops/s
Iteration   2: 866723.384 ops/s
Iteration   3: 865857.455 ops/s
Iteration   4: 863910.329 ops/s
Iteration   5: 864399.073 ops/s
Iteration   6: 868315.860 ops/s
Iteration   7: 876351.531 ops/s
Iteration   8: 866121.156 ops/s
Iteration   9: 871186.044 ops/s
Iteration  10: 862957.281 ops/s
Iteration  11: 863698.740 ops/s
Iteration  12: 862950.771 ops/s
Iteration  13: 866958.001 ops/s
Iteration  14: 867542.650 ops/s
Iteration  15: 874300.513 ops/s
Iteration  16: 872265.915 ops/s
Iteration  17: 877954.616 ops/s
Iteration  18: 876020.555 ops/s
Iteration  19: 874525.222 ops/s
Iteration  20: 865298.875 ops/s
Iteration  21: 873405.648 ops/s
Iteration  22: 866212.470 ops/s
Iteration  23: 868581.181 ops/s
Iteration  24: 870079.728 ops/s
Iteration  25: 873913.446 ops/s
Iteration  26: 868944.530 ops/s
Iteration  27: 876312.115 ops/s
Iteration  28: 869216.094 ops/s
Iteration  29: 872027.795 ops/s
Iteration  30: 870834.247 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLongLe_bytes":
  869534.200 ±(99.9%) 2935.542 ops/s [Average]
  (min, avg, max) = (862950.771, 869534.200, 877954.616), stdev = 4393.782
  CI (99.9%): [866598.658, 872469.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readLongLe_bytes  thrpt   30  869534.200 ± 2935.542  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_byteBuff$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_byteBuff

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332227.680 ops/s
# Warmup Iteration   2: 387350.763 ops/s
# Warmup Iteration   3: 829639.363 ops/s
# Warmup Iteration   4: 812821.167 ops/s
# Warmup Iteration   5: 837335.351 ops/s
# Warmup Iteration   6: 840946.315 ops/s
# Warmup Iteration   7: 840791.184 ops/s
# Warmup Iteration   8: 558527.962 ops/s
# Warmup Iteration   9: 829670.280 ops/s
# Warmup Iteration  10: 825791.115 ops/s
# Warmup Iteration  11: 827017.646 ops/s
# Warmup Iteration  12: 825761.018 ops/s
# Warmup Iteration  13: 827404.398 ops/s
# Warmup Iteration  14: 826597.584 ops/s
# Warmup Iteration  15: 827773.826 ops/s
# Warmup Iteration  16: 824475.283 ops/s
# Warmup Iteration  17: 820557.781 ops/s
# Warmup Iteration  18: 821952.009 ops/s
# Warmup Iteration  19: 823124.050 ops/s
# Warmup Iteration  20: 822607.698 ops/s
# Warmup Iteration  21: 821789.155 ops/s
# Warmup Iteration  22: 821774.945 ops/s
# Warmup Iteration  23: 823120.468 ops/s
# Warmup Iteration  24: 821646.682 ops/s
# Warmup Iteration  25: 818524.098 ops/s
# Warmup Iteration  26: 817013.580 ops/s
# Warmup Iteration  27: 814661.677 ops/s
# Warmup Iteration  28: 819953.949 ops/s
# Warmup Iteration  29: 824172.998 ops/s
# Warmup Iteration  30: 825696.138 ops/s
Iteration   1: 822587.077 ops/s
Iteration   2: 814515.063 ops/s
Iteration   3: 815719.430 ops/s
Iteration   4: 817615.310 ops/s
Iteration   5: 821103.627 ops/s
Iteration   6: 819552.405 ops/s
Iteration   7: 821814.485 ops/s
Iteration   8: 811427.128 ops/s
Iteration   9: 812648.308 ops/s
Iteration  10: 811554.709 ops/s
Iteration  11: 812973.410 ops/s
Iteration  12: 812907.376 ops/s
Iteration  13: 817933.002 ops/s
Iteration  14: 817054.129 ops/s
Iteration  15: 824354.352 ops/s
Iteration  16: 821477.177 ops/s
Iteration  17: 823727.054 ops/s
Iteration  18: 810897.955 ops/s
Iteration  19: 815192.293 ops/s
Iteration  20: 822082.921 ops/s
Iteration  21: 814732.565 ops/s
Iteration  22: 815659.610 ops/s
Iteration  23: 815253.127 ops/s
Iteration  24: 818287.793 ops/s
Iteration  25: 815728.818 ops/s
Iteration  26: 819400.795 ops/s
Iteration  27: 815411.668 ops/s
Iteration  28: 809353.452 ops/s
Iteration  29: 817097.201 ops/s
Iteration  30: 813190.167 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_byteBuff":
  816708.414 ±(99.9%) 2710.033 ops/s [Average]
  (min, avg, max) = (809353.452, 816708.414, 824354.352), stdev = 4056.250
  CI (99.9%): [813998.381, 819418.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readLong_byteBuff  thrpt   30  816708.414 ± 2710.033  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_byteBuff_littleEndian$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_byteBuff_littleEndian

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 331559.189 ops/s
# Warmup Iteration   2: 385996.988 ops/s
# Warmup Iteration   3: 817352.533 ops/s
# Warmup Iteration   4: 806823.730 ops/s
# Warmup Iteration   5: 808966.501 ops/s
# Warmup Iteration   6: 811856.381 ops/s
# Warmup Iteration   7: 820156.440 ops/s
# Warmup Iteration   8: 557299.934 ops/s
# Warmup Iteration   9: 824582.820 ops/s
# Warmup Iteration  10: 821448.828 ops/s
# Warmup Iteration  11: 824241.115 ops/s
# Warmup Iteration  12: 822937.194 ops/s
# Warmup Iteration  13: 820535.456 ops/s
# Warmup Iteration  14: 817598.133 ops/s
# Warmup Iteration  15: 815426.632 ops/s
# Warmup Iteration  16: 818329.787 ops/s
# Warmup Iteration  17: 821198.214 ops/s
# Warmup Iteration  18: 820235.661 ops/s
# Warmup Iteration  19: 815378.782 ops/s
# Warmup Iteration  20: 816183.449 ops/s
# Warmup Iteration  21: 814266.272 ops/s
# Warmup Iteration  22: 821363.957 ops/s
# Warmup Iteration  23: 823127.472 ops/s
# Warmup Iteration  24: 817305.160 ops/s
# Warmup Iteration  25: 816231.483 ops/s
# Warmup Iteration  26: 814645.113 ops/s
# Warmup Iteration  27: 817658.666 ops/s
# Warmup Iteration  28: 818009.771 ops/s
# Warmup Iteration  29: 820860.439 ops/s
# Warmup Iteration  30: 816819.429 ops/s
Iteration   1: 820061.330 ops/s
Iteration   2: 818611.162 ops/s
Iteration   3: 819369.418 ops/s
Iteration   4: 821075.491 ops/s
Iteration   5: 818691.748 ops/s
Iteration   6: 828688.520 ops/s
Iteration   7: 817976.804 ops/s
Iteration   8: 815754.168 ops/s
Iteration   9: 817026.422 ops/s
Iteration  10: 809077.413 ops/s
Iteration  11: 812578.324 ops/s
Iteration  12: 815419.819 ops/s
Iteration  13: 825367.849 ops/s
Iteration  14: 826886.867 ops/s
Iteration  15: 825934.572 ops/s
Iteration  16: 828051.556 ops/s
Iteration  17: 825717.886 ops/s
Iteration  18: 820478.166 ops/s
Iteration  19: 823052.441 ops/s
Iteration  20: 818165.793 ops/s
Iteration  21: 820446.467 ops/s
Iteration  22: 816552.107 ops/s
Iteration  23: 825706.866 ops/s
Iteration  24: 830369.948 ops/s
Iteration  25: 822680.316 ops/s
Iteration  26: 825986.005 ops/s
Iteration  27: 828076.734 ops/s
Iteration  28: 821994.424 ops/s
Iteration  29: 824555.588 ops/s
Iteration  30: 820110.664 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_byteBuff_littleEndian":
  821482.162 ±(99.9%) 3393.566 ops/s [Average]
  (min, avg, max) = (809077.413, 821482.162, 830369.948), stdev = 5079.330
  CI (99.9%): [818088.596, 824875.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readLong_byteBuff_littleEndian  thrpt   30  821482.162 ± 3393.566  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_bytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_bytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 350019.300 ops/s
# Warmup Iteration   2: 403123.410 ops/s
# Warmup Iteration   3: 860298.419 ops/s
# Warmup Iteration   4: 854810.867 ops/s
# Warmup Iteration   5: 859433.228 ops/s
# Warmup Iteration   6: 862891.459 ops/s
# Warmup Iteration   7: 862734.508 ops/s
# Warmup Iteration   8: 583152.915 ops/s
# Warmup Iteration   9: 861628.952 ops/s
# Warmup Iteration  10: 863495.112 ops/s
# Warmup Iteration  11: 860943.350 ops/s
# Warmup Iteration  12: 866490.870 ops/s
# Warmup Iteration  13: 871494.456 ops/s
# Warmup Iteration  14: 865806.157 ops/s
# Warmup Iteration  15: 860586.419 ops/s
# Warmup Iteration  16: 858963.266 ops/s
# Warmup Iteration  17: 868643.565 ops/s
# Warmup Iteration  18: 871392.099 ops/s
# Warmup Iteration  19: 869253.749 ops/s
# Warmup Iteration  20: 867480.140 ops/s
# Warmup Iteration  21: 869015.735 ops/s
# Warmup Iteration  22: 868168.590 ops/s
# Warmup Iteration  23: 868441.905 ops/s
# Warmup Iteration  24: 864841.141 ops/s
# Warmup Iteration  25: 860357.160 ops/s
# Warmup Iteration  26: 867041.922 ops/s
# Warmup Iteration  27: 864379.268 ops/s
# Warmup Iteration  28: 866077.812 ops/s
# Warmup Iteration  29: 861985.054 ops/s
# Warmup Iteration  30: 864378.336 ops/s
Iteration   1: 862054.502 ops/s
Iteration   2: 867592.767 ops/s
Iteration   3: 868320.387 ops/s
Iteration   4: 858000.435 ops/s
Iteration   5: 864323.490 ops/s
Iteration   6: 868061.740 ops/s
Iteration   7: 857632.825 ops/s
Iteration   8: 863383.774 ops/s
Iteration   9: 863178.112 ops/s
Iteration  10: 861077.281 ops/s
Iteration  11: 859182.403 ops/s
Iteration  12: 863768.819 ops/s
Iteration  13: 861287.682 ops/s
Iteration  14: 857157.141 ops/s
Iteration  15: 868309.723 ops/s
Iteration  16: 863661.376 ops/s
Iteration  17: 865414.236 ops/s
Iteration  18: 867923.659 ops/s
Iteration  19: 856903.217 ops/s
Iteration  20: 862498.302 ops/s
Iteration  21: 860519.622 ops/s
Iteration  22: 862228.727 ops/s
Iteration  23: 863421.224 ops/s
Iteration  24: 860500.605 ops/s
Iteration  25: 865350.633 ops/s
Iteration  26: 864924.616 ops/s
Iteration  27: 855105.817 ops/s
Iteration  28: 857312.858 ops/s
Iteration  29: 853904.337 ops/s
Iteration  30: 857319.246 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readLong_bytes":
  862010.652 ±(99.9%) 2736.215 ops/s [Average]
  (min, avg, max) = (853904.337, 862010.652, 868320.387), stdev = 4095.438
  CI (99.9%): [859274.437, 864746.867] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readLong_bytes  thrpt   30  862010.652 ± 2736.215  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_byteBuff$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_byteBuff

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 333405.832 ops/s
# Warmup Iteration   2: 391966.996 ops/s
# Warmup Iteration   3: 821214.862 ops/s
# Warmup Iteration   4: 816502.210 ops/s
# Warmup Iteration   5: 827806.649 ops/s
# Warmup Iteration   6: 836728.795 ops/s
# Warmup Iteration   7: 839685.405 ops/s
# Warmup Iteration   8: 564010.656 ops/s
# Warmup Iteration   9: 829169.149 ops/s
# Warmup Iteration  10: 833764.572 ops/s
# Warmup Iteration  11: 832908.950 ops/s
# Warmup Iteration  12: 830699.108 ops/s
# Warmup Iteration  13: 836580.118 ops/s
# Warmup Iteration  14: 838519.767 ops/s
# Warmup Iteration  15: 836903.442 ops/s
# Warmup Iteration  16: 835572.743 ops/s
# Warmup Iteration  17: 833052.460 ops/s
# Warmup Iteration  18: 833091.490 ops/s
# Warmup Iteration  19: 832520.574 ops/s
# Warmup Iteration  20: 835093.132 ops/s
# Warmup Iteration  21: 837242.365 ops/s
# Warmup Iteration  22: 835937.698 ops/s
# Warmup Iteration  23: 837564.520 ops/s
# Warmup Iteration  24: 834568.442 ops/s
# Warmup Iteration  25: 832579.344 ops/s
# Warmup Iteration  26: 830147.963 ops/s
# Warmup Iteration  27: 830002.655 ops/s
# Warmup Iteration  28: 838635.970 ops/s
# Warmup Iteration  29: 828957.855 ops/s
# Warmup Iteration  30: 833955.240 ops/s
Iteration   1: 840889.054 ops/s
Iteration   2: 839937.886 ops/s
Iteration   3: 840532.672 ops/s
Iteration   4: 841509.253 ops/s
Iteration   5: 840394.723 ops/s
Iteration   6: 843075.523 ops/s
Iteration   7: 840526.274 ops/s
Iteration   8: 837229.068 ops/s
Iteration   9: 832321.896 ops/s
Iteration  10: 830924.980 ops/s
Iteration  11: 837301.336 ops/s
Iteration  12: 840104.944 ops/s
Iteration  13: 838221.562 ops/s
Iteration  14: 839982.619 ops/s
Iteration  15: 841099.487 ops/s
Iteration  16: 840215.398 ops/s
Iteration  17: 837712.501 ops/s
Iteration  18: 835559.424 ops/s
Iteration  19: 835244.722 ops/s
Iteration  20: 831244.729 ops/s
Iteration  21: 833892.478 ops/s
Iteration  22: 833276.694 ops/s
Iteration  23: 827539.581 ops/s
Iteration  24: 829682.130 ops/s
Iteration  25: 839094.828 ops/s
Iteration  26: 834973.397 ops/s
Iteration  27: 836758.516 ops/s
Iteration  28: 829532.101 ops/s
Iteration  29: 834825.603 ops/s
Iteration  30: 832781.262 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_byteBuff":
  836546.155 ±(99.9%) 2800.623 ops/s [Average]
  (min, avg, max) = (827539.581, 836546.155, 843075.523), stdev = 4191.841
  CI (99.9%): [833745.532, 839346.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readShort_byteBuff  thrpt   30  836546.155 ± 2800.623  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_byteBuff_littleEndian$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_byteBuff_littleEndian

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343411.365 ops/s
# Warmup Iteration   2: 398969.378 ops/s
# Warmup Iteration   3: 821699.024 ops/s
# Warmup Iteration   4: 818201.788 ops/s
# Warmup Iteration   5: 833463.701 ops/s
# Warmup Iteration   6: 830211.222 ops/s
# Warmup Iteration   7: 827438.060 ops/s
# Warmup Iteration   8: 560179.687 ops/s
# Warmup Iteration   9: 824182.612 ops/s
# Warmup Iteration  10: 824200.342 ops/s
# Warmup Iteration  11: 825211.981 ops/s
# Warmup Iteration  12: 828315.019 ops/s
# Warmup Iteration  13: 824056.394 ops/s
# Warmup Iteration  14: 821253.853 ops/s
# Warmup Iteration  15: 823973.554 ops/s
# Warmup Iteration  16: 828987.600 ops/s
# Warmup Iteration  17: 833142.866 ops/s
# Warmup Iteration  18: 832370.482 ops/s
# Warmup Iteration  19: 831742.036 ops/s
# Warmup Iteration  20: 831410.253 ops/s
# Warmup Iteration  21: 831736.678 ops/s
# Warmup Iteration  22: 830575.498 ops/s
# Warmup Iteration  23: 825553.695 ops/s
# Warmup Iteration  24: 822568.285 ops/s
# Warmup Iteration  25: 824523.891 ops/s
# Warmup Iteration  26: 827577.420 ops/s
# Warmup Iteration  27: 823134.173 ops/s
# Warmup Iteration  28: 826777.462 ops/s
# Warmup Iteration  29: 828327.498 ops/s
# Warmup Iteration  30: 820935.039 ops/s
Iteration   1: 826060.557 ops/s
Iteration   2: 824137.445 ops/s
Iteration   3: 831327.845 ops/s
Iteration   4: 833483.041 ops/s
Iteration   5: 830356.621 ops/s
Iteration   6: 821279.951 ops/s
Iteration   7: 826281.889 ops/s
Iteration   8: 830012.916 ops/s
Iteration   9: 829099.261 ops/s
Iteration  10: 827758.637 ops/s
Iteration  11: 830748.568 ops/s
Iteration  12: 819699.152 ops/s
Iteration  13: 831093.000 ops/s
Iteration  14: 828002.606 ops/s
Iteration  15: 830146.870 ops/s
Iteration  16: 825715.458 ops/s
Iteration  17: 818474.977 ops/s
Iteration  18: 828028.447 ops/s
Iteration  19: 820825.628 ops/s
Iteration  20: 826817.222 ops/s
Iteration  21: 823035.573 ops/s
Iteration  22: 822986.961 ops/s
Iteration  23: 822832.293 ops/s
Iteration  24: 827314.569 ops/s
Iteration  25: 828924.052 ops/s
Iteration  26: 824938.837 ops/s
Iteration  27: 821503.506 ops/s
Iteration  28: 818450.651 ops/s
Iteration  29: 824973.346 ops/s
Iteration  30: 820501.484 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_byteBuff_littleEndian":
  825827.045 ±(99.9%) 2781.280 ops/s [Average]
  (min, avg, max) = (818450.651, 825827.045, 833483.041), stdev = 4162.889
  CI (99.9%): [823045.766, 828608.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readShort_byteBuff_littleEndian  thrpt   30  825827.045 ± 2781.280  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_bytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_bytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 358105.953 ops/s
# Warmup Iteration   2: 406788.107 ops/s
# Warmup Iteration   3: 852123.764 ops/s
# Warmup Iteration   4: 839844.183 ops/s
# Warmup Iteration   5: 863854.707 ops/s
# Warmup Iteration   6: 861089.655 ops/s
# Warmup Iteration   7: 866942.221 ops/s
# Warmup Iteration   8: 578892.239 ops/s
# Warmup Iteration   9: 861807.434 ops/s
# Warmup Iteration  10: 863460.730 ops/s
# Warmup Iteration  11: 858139.129 ops/s
# Warmup Iteration  12: 862734.773 ops/s
# Warmup Iteration  13: 861452.042 ops/s
# Warmup Iteration  14: 861871.551 ops/s
# Warmup Iteration  15: 863518.960 ops/s
# Warmup Iteration  16: 858725.294 ops/s
# Warmup Iteration  17: 862674.515 ops/s
# Warmup Iteration  18: 858593.644 ops/s
# Warmup Iteration  19: 855145.919 ops/s
# Warmup Iteration  20: 858740.197 ops/s
# Warmup Iteration  21: 860185.286 ops/s
# Warmup Iteration  22: 863028.385 ops/s
# Warmup Iteration  23: 863440.751 ops/s
# Warmup Iteration  24: 860771.989 ops/s
# Warmup Iteration  25: 865378.724 ops/s
# Warmup Iteration  26: 860139.162 ops/s
# Warmup Iteration  27: 869740.508 ops/s
# Warmup Iteration  28: 858190.572 ops/s
# Warmup Iteration  29: 865970.387 ops/s
# Warmup Iteration  30: 860920.963 ops/s
Iteration   1: 852575.833 ops/s
Iteration   2: 851614.980 ops/s
Iteration   3: 853302.383 ops/s
Iteration   4: 867118.724 ops/s
Iteration   5: 856942.167 ops/s
Iteration   6: 859648.476 ops/s
Iteration   7: 857239.465 ops/s
Iteration   8: 856854.709 ops/s
Iteration   9: 864342.353 ops/s
Iteration  10: 864051.813 ops/s
Iteration  11: 864914.966 ops/s
Iteration  12: 864712.953 ops/s
Iteration  13: 861707.309 ops/s
Iteration  14: 866082.351 ops/s
Iteration  15: 863255.759 ops/s
Iteration  16: 850432.859 ops/s
Iteration  17: 862323.913 ops/s
Iteration  18: 858507.631 ops/s
Iteration  19: 864593.791 ops/s
Iteration  20: 864967.170 ops/s
Iteration  21: 866919.377 ops/s
Iteration  22: 861648.645 ops/s
Iteration  23: 863622.685 ops/s
Iteration  24: 868020.636 ops/s
Iteration  25: 859232.432 ops/s
Iteration  26: 855495.200 ops/s
Iteration  27: 849869.515 ops/s
Iteration  28: 854629.703 ops/s
Iteration  29: 854086.434 ops/s
Iteration  30: 862351.183 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readShort_bytes":
  860035.514 ±(99.9%) 3608.351 ops/s [Average]
  (min, avg, max) = (849869.515, 860035.514, 868020.636), stdev = 5400.811
  CI (99.9%): [856427.163, 863643.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readShort_bytes  thrpt   30  860035.514 ± 3608.351  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint32$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint32

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 327119.268 ops/s
# Warmup Iteration   2: 396352.460 ops/s
# Warmup Iteration   3: 810110.088 ops/s
# Warmup Iteration   4: 811467.032 ops/s
# Warmup Iteration   5: 810896.984 ops/s
# Warmup Iteration   6: 813193.446 ops/s
# Warmup Iteration   7: 773296.228 ops/s
# Warmup Iteration   8: 594564.991 ops/s
# Warmup Iteration   9: 809989.259 ops/s
# Warmup Iteration  10: 815339.387 ops/s
# Warmup Iteration  11: 808225.111 ops/s
# Warmup Iteration  12: 815613.817 ops/s
# Warmup Iteration  13: 809860.011 ops/s
# Warmup Iteration  14: 813898.358 ops/s
# Warmup Iteration  15: 813230.575 ops/s
# Warmup Iteration  16: 818169.506 ops/s
# Warmup Iteration  17: 817017.635 ops/s
# Warmup Iteration  18: 817120.086 ops/s
# Warmup Iteration  19: 815223.427 ops/s
# Warmup Iteration  20: 814390.191 ops/s
# Warmup Iteration  21: 813741.410 ops/s
# Warmup Iteration  22: 815493.753 ops/s
# Warmup Iteration  23: 803242.929 ops/s
# Warmup Iteration  24: 807555.556 ops/s
# Warmup Iteration  25: 808587.257 ops/s
# Warmup Iteration  26: 807109.081 ops/s
# Warmup Iteration  27: 807514.836 ops/s
# Warmup Iteration  28: 803325.673 ops/s
# Warmup Iteration  29: 810743.003 ops/s
# Warmup Iteration  30: 807632.735 ops/s
Iteration   1: 812046.515 ops/s
Iteration   2: 804512.743 ops/s
Iteration   3: 810957.743 ops/s
Iteration   4: 816001.577 ops/s
Iteration   5: 803820.774 ops/s
Iteration   6: 813739.717 ops/s
Iteration   7: 810850.721 ops/s
Iteration   8: 814375.971 ops/s
Iteration   9: 807983.432 ops/s
Iteration  10: 804021.650 ops/s
Iteration  11: 811586.750 ops/s
Iteration  12: 808954.832 ops/s
Iteration  13: 809578.764 ops/s
Iteration  14: 815985.499 ops/s
Iteration  15: 805303.093 ops/s
Iteration  16: 799256.336 ops/s
Iteration  17: 809745.441 ops/s
Iteration  18: 806346.636 ops/s
Iteration  19: 809923.752 ops/s
Iteration  20: 802930.253 ops/s
Iteration  21: 808073.336 ops/s
Iteration  22: 810957.280 ops/s
Iteration  23: 818981.554 ops/s
Iteration  24: 816569.398 ops/s
Iteration  25: 804470.713 ops/s
Iteration  26: 810860.419 ops/s
Iteration  27: 812580.770 ops/s
Iteration  28: 814915.258 ops/s
Iteration  29: 814812.052 ops/s
Iteration  30: 810720.492 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint32":
  810028.782 ±(99.9%) 3133.285 ops/s [Average]
  (min, avg, max) = (799256.336, 810028.782, 818981.554), stdev = 4689.755
  CI (99.9%): [806895.497, 813162.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readVarint32  thrpt   30  810028.782 ± 3133.285  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint32_malformedTooBig$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint32_malformedTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 202098.890 ops/s
# Warmup Iteration   2: 231400.779 ops/s
# Warmup Iteration   3: 235521.170 ops/s
# Warmup Iteration   4: 372267.084 ops/s
# Warmup Iteration   5: 372359.715 ops/s
# Warmup Iteration   6: 371338.645 ops/s
# Warmup Iteration   7: 367334.733 ops/s
# Warmup Iteration   8: 371420.199 ops/s
# Warmup Iteration   9: 368542.941 ops/s
# Warmup Iteration  10: 369423.618 ops/s
# Warmup Iteration  11: 365747.324 ops/s
# Warmup Iteration  12: 368434.268 ops/s
# Warmup Iteration  13: 369270.405 ops/s
# Warmup Iteration  14: 296210.520 ops/s
# Warmup Iteration  15: 307827.788 ops/s
# Warmup Iteration  16: 368019.754 ops/s
# Warmup Iteration  17: 382171.902 ops/s
# Warmup Iteration  18: 383304.496 ops/s
# Warmup Iteration  19: 381054.492 ops/s
# Warmup Iteration  20: 379767.380 ops/s
# Warmup Iteration  21: 378215.013 ops/s
# Warmup Iteration  22: 380352.135 ops/s
# Warmup Iteration  23: 378464.995 ops/s
# Warmup Iteration  24: 377793.976 ops/s
# Warmup Iteration  25: 379265.315 ops/s
# Warmup Iteration  26: 378097.954 ops/s
# Warmup Iteration  27: 379511.879 ops/s
# Warmup Iteration  28: 379870.139 ops/s
# Warmup Iteration  29: 376818.784 ops/s
# Warmup Iteration  30: 376405.126 ops/s
Iteration   1: 377612.767 ops/s
Iteration   2: 376921.602 ops/s
Iteration   3: 384172.687 ops/s
Iteration   4: 379575.050 ops/s
Iteration   5: 378454.179 ops/s
Iteration   6: 379089.986 ops/s
Iteration   7: 379898.079 ops/s
Iteration   8: 380942.508 ops/s
Iteration   9: 382679.365 ops/s
Iteration  10: 383451.033 ops/s
Iteration  11: 380385.709 ops/s
Iteration  12: 376094.229 ops/s
Iteration  13: 381816.581 ops/s
Iteration  14: 381486.317 ops/s
Iteration  15: 378227.871 ops/s
Iteration  16: 378643.142 ops/s
Iteration  17: 379904.765 ops/s
Iteration  18: 379363.972 ops/s
Iteration  19: 378967.089 ops/s
Iteration  20: 379110.597 ops/s
Iteration  21: 375416.371 ops/s
Iteration  22: 378790.168 ops/s
Iteration  23: 381653.194 ops/s
Iteration  24: 379366.991 ops/s
Iteration  25: 376066.005 ops/s
Iteration  26: 377471.819 ops/s
Iteration  27: 379132.772 ops/s
Iteration  28: 378995.414 ops/s
Iteration  29: 379395.748 ops/s
Iteration  30: 377860.995 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint32_malformedTooBig":
  379364.900 ±(99.9%) 1393.817 ops/s [Average]
  (min, avg, max) = (375416.371, 379364.900, 384172.687), stdev = 2086.199
  CI (99.9%): [377971.084, 380758.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readVarint32_malformedTooBig  thrpt   30  379364.900 ± 1393.817  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint64$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint64

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 314774.528 ops/s
# Warmup Iteration   2: 382735.873 ops/s
# Warmup Iteration   3: 785213.897 ops/s
# Warmup Iteration   4: 785768.556 ops/s
# Warmup Iteration   5: 794407.611 ops/s
# Warmup Iteration   6: 793176.603 ops/s
# Warmup Iteration   7: 731532.973 ops/s
# Warmup Iteration   8: 592199.831 ops/s
# Warmup Iteration   9: 789979.368 ops/s
# Warmup Iteration  10: 789859.304 ops/s
# Warmup Iteration  11: 794909.116 ops/s
# Warmup Iteration  12: 795973.627 ops/s
# Warmup Iteration  13: 790902.300 ops/s
# Warmup Iteration  14: 794896.082 ops/s
# Warmup Iteration  15: 800065.602 ops/s
# Warmup Iteration  16: 800581.726 ops/s
# Warmup Iteration  17: 797958.679 ops/s
# Warmup Iteration  18: 799855.936 ops/s
# Warmup Iteration  19: 798514.084 ops/s
# Warmup Iteration  20: 794856.523 ops/s
# Warmup Iteration  21: 795385.862 ops/s
# Warmup Iteration  22: 793325.213 ops/s
# Warmup Iteration  23: 792334.010 ops/s
# Warmup Iteration  24: 798255.041 ops/s
# Warmup Iteration  25: 789848.920 ops/s
# Warmup Iteration  26: 794256.456 ops/s
# Warmup Iteration  27: 796722.266 ops/s
# Warmup Iteration  28: 792728.821 ops/s
# Warmup Iteration  29: 788126.281 ops/s
# Warmup Iteration  30: 791886.290 ops/s
Iteration   1: 793804.067 ops/s
Iteration   2: 795854.255 ops/s
Iteration   3: 795265.794 ops/s
Iteration   4: 785934.449 ops/s
Iteration   5: 790534.494 ops/s
Iteration   6: 797570.786 ops/s
Iteration   7: 794500.665 ops/s
Iteration   8: 789246.986 ops/s
Iteration   9: 792554.229 ops/s
Iteration  10: 793557.409 ops/s
Iteration  11: 794985.203 ops/s
Iteration  12: 796330.414 ops/s
Iteration  13: 796328.321 ops/s
Iteration  14: 791524.281 ops/s
Iteration  15: 795676.044 ops/s
Iteration  16: 795076.109 ops/s
Iteration  17: 792073.446 ops/s
Iteration  18: 793106.618 ops/s
Iteration  19: 793067.359 ops/s
Iteration  20: 792105.443 ops/s
Iteration  21: 791832.651 ops/s
Iteration  22: 796727.447 ops/s
Iteration  23: 795800.293 ops/s
Iteration  24: 788669.689 ops/s
Iteration  25: 791892.978 ops/s
Iteration  26: 794934.310 ops/s
Iteration  27: 793283.977 ops/s
Iteration  28: 789727.194 ops/s
Iteration  29: 793888.688 ops/s
Iteration  30: 790883.535 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint64":
  793224.571 ±(99.9%) 1799.871 ops/s [Average]
  (min, avg, max) = (785934.449, 793224.571, 797570.786), stdev = 2693.963
  CI (99.9%): [791424.700, 795024.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readVarint64  thrpt   30  793224.571 ± 1799.871  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint64_malformedTooBig$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint64_malformedTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 205796.608 ops/s
# Warmup Iteration   2: 233298.217 ops/s
# Warmup Iteration   3: 243447.870 ops/s
# Warmup Iteration   4: 370217.462 ops/s
# Warmup Iteration   5: 366146.764 ops/s
# Warmup Iteration   6: 368947.487 ops/s
# Warmup Iteration   7: 368450.797 ops/s
# Warmup Iteration   8: 372572.175 ops/s
# Warmup Iteration   9: 368080.034 ops/s
# Warmup Iteration  10: 370853.703 ops/s
# Warmup Iteration  11: 370837.220 ops/s
# Warmup Iteration  12: 367548.663 ops/s
# Warmup Iteration  13: 367527.143 ops/s
# Warmup Iteration  14: 292035.934 ops/s
# Warmup Iteration  15: 319322.380 ops/s
# Warmup Iteration  16: 367244.561 ops/s
# Warmup Iteration  17: 373114.858 ops/s
# Warmup Iteration  18: 372665.313 ops/s
# Warmup Iteration  19: 371706.001 ops/s
# Warmup Iteration  20: 371744.722 ops/s
# Warmup Iteration  21: 374103.149 ops/s
# Warmup Iteration  22: 371781.116 ops/s
# Warmup Iteration  23: 374556.662 ops/s
# Warmup Iteration  24: 374795.106 ops/s
# Warmup Iteration  25: 373716.713 ops/s
# Warmup Iteration  26: 376402.676 ops/s
# Warmup Iteration  27: 370121.282 ops/s
# Warmup Iteration  28: 372200.817 ops/s
# Warmup Iteration  29: 371832.732 ops/s
# Warmup Iteration  30: 373400.682 ops/s
Iteration   1: 372820.721 ops/s
Iteration   2: 376274.268 ops/s
Iteration   3: 370153.974 ops/s
Iteration   4: 371471.437 ops/s
Iteration   5: 375781.776 ops/s
Iteration   6: 375385.546 ops/s
Iteration   7: 376501.764 ops/s
Iteration   8: 371490.319 ops/s
Iteration   9: 372877.096 ops/s
Iteration  10: 372393.756 ops/s
Iteration  11: 372964.154 ops/s
Iteration  12: 376524.185 ops/s
Iteration  13: 373409.654 ops/s
Iteration  14: 374329.329 ops/s
Iteration  15: 373388.206 ops/s
Iteration  16: 371674.053 ops/s
Iteration  17: 372908.073 ops/s
Iteration  18: 373960.510 ops/s
Iteration  19: 373730.328 ops/s
Iteration  20: 371924.938 ops/s
Iteration  21: 374272.806 ops/s
Iteration  22: 375101.953 ops/s
Iteration  23: 371645.782 ops/s
Iteration  24: 372048.846 ops/s
Iteration  25: 371822.307 ops/s
Iteration  26: 376150.775 ops/s
Iteration  27: 373926.152 ops/s
Iteration  28: 375097.062 ops/s
Iteration  29: 373276.376 ops/s
Iteration  30: 372413.175 ops/s


Result "zipkin2.internal.ReadBufferTest._Benchmark.benchmark_readVarint64_malformedTooBig":
  373523.977 ±(99.9%) 1150.258 ops/s [Average]
  (min, avg, max) = (370153.974, 373523.977, 376524.185), stdev = 1721.652
  CI (99.9%): [372373.719, 374674.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ReadBufferTest._Benchmark.benchmark_readVarint64_malformedTooBig  thrpt   30  373523.977 ± 1150.258  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_addChild_nullNotAllowed$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_addChild_nullNotAllowed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 192366.339 ops/s
# Warmup Iteration   2: 221973.013 ops/s
# Warmup Iteration   3: 224566.061 ops/s
# Warmup Iteration   4: 354751.248 ops/s
# Warmup Iteration   5: 349151.522 ops/s
# Warmup Iteration   6: 349866.044 ops/s
# Warmup Iteration   7: 345972.646 ops/s
# Warmup Iteration   8: 345071.202 ops/s
# Warmup Iteration   9: 345891.888 ops/s
# Warmup Iteration  10: 348838.492 ops/s
# Warmup Iteration  11: 344236.881 ops/s
# Warmup Iteration  12: 346151.177 ops/s
# Warmup Iteration  13: 349732.432 ops/s
# Warmup Iteration  14: 308323.077 ops/s
# Warmup Iteration  15: 279085.026 ops/s
# Warmup Iteration  16: 352661.469 ops/s
# Warmup Iteration  17: 362436.567 ops/s
# Warmup Iteration  18: 362112.285 ops/s
# Warmup Iteration  19: 361134.920 ops/s
# Warmup Iteration  20: 359466.859 ops/s
# Warmup Iteration  21: 361262.637 ops/s
# Warmup Iteration  22: 361859.392 ops/s
# Warmup Iteration  23: 362701.779 ops/s
# Warmup Iteration  24: 361462.289 ops/s
# Warmup Iteration  25: 362897.224 ops/s
# Warmup Iteration  26: 362955.158 ops/s
# Warmup Iteration  27: 361439.863 ops/s
# Warmup Iteration  28: 361175.142 ops/s
# Warmup Iteration  29: 361847.476 ops/s
# Warmup Iteration  30: 357808.680 ops/s
Iteration   1: 360951.696 ops/s
Iteration   2: 357898.885 ops/s
Iteration   3: 359067.941 ops/s
Iteration   4: 359583.400 ops/s
Iteration   5: 356794.771 ops/s
Iteration   6: 355195.355 ops/s
Iteration   7: 360487.735 ops/s
Iteration   8: 362862.506 ops/s
Iteration   9: 360698.905 ops/s
Iteration  10: 358853.414 ops/s
Iteration  11: 360934.001 ops/s
Iteration  12: 356640.310 ops/s
Iteration  13: 354810.857 ops/s
Iteration  14: 359804.175 ops/s
Iteration  15: 357811.394 ops/s
Iteration  16: 355570.434 ops/s
Iteration  17: 359670.844 ops/s
Iteration  18: 359774.809 ops/s
Iteration  19: 357713.486 ops/s
Iteration  20: 358851.164 ops/s
Iteration  21: 359679.326 ops/s
Iteration  22: 355401.142 ops/s
Iteration  23: 356395.332 ops/s
Iteration  24: 356460.364 ops/s
Iteration  25: 357738.800 ops/s
Iteration  26: 353190.518 ops/s
Iteration  27: 359204.844 ops/s
Iteration  28: 358113.094 ops/s
Iteration  29: 357401.710 ops/s
Iteration  30: 357836.678 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_addChild_nullNotAllowed":
  358179.930 ±(99.9%) 1439.910 ops/s [Average]
  (min, avg, max) = (353190.518, 358179.930, 362862.506), stdev = 2155.189
  CI (99.9%): [356740.020, 359619.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SpanNodeTest._Benchmark.benchmark_addChild_nullNotAllowed  thrpt   30  358179.930 ± 1439.910  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_addChild_selfNotAllowed$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_addChild_selfNotAllowed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122972.557 ops/s
# Warmup Iteration   2: 152679.576 ops/s
# Warmup Iteration   3: 215238.423 ops/s
# Warmup Iteration   4: 289307.770 ops/s
# Warmup Iteration   5: 286826.658 ops/s
# Warmup Iteration   6: 287979.659 ops/s
# Warmup Iteration   7: 287603.673 ops/s
# Warmup Iteration   8: 284883.965 ops/s
# Warmup Iteration   9: 286443.227 ops/s
# Warmup Iteration  10: 274628.694 ops/s
# Warmup Iteration  11: 191242.785 ops/s
# Warmup Iteration  12: 285604.134 ops/s
# Warmup Iteration  13: 284058.718 ops/s
# Warmup Iteration  14: 285692.365 ops/s
# Warmup Iteration  15: 288058.538 ops/s
# Warmup Iteration  16: 288177.887 ops/s
# Warmup Iteration  17: 293915.256 ops/s
# Warmup Iteration  18: 296320.051 ops/s
# Warmup Iteration  19: 293714.843 ops/s
# Warmup Iteration  20: 295740.792 ops/s
# Warmup Iteration  21: 293495.509 ops/s
# Warmup Iteration  22: 293679.439 ops/s
# Warmup Iteration  23: 292849.916 ops/s
# Warmup Iteration  24: 291824.583 ops/s
# Warmup Iteration  25: 294336.085 ops/s
# Warmup Iteration  26: 295253.637 ops/s
# Warmup Iteration  27: 294718.099 ops/s
# Warmup Iteration  28: 295599.199 ops/s
# Warmup Iteration  29: 293994.824 ops/s
# Warmup Iteration  30: 293830.916 ops/s
Iteration   1: 293749.792 ops/s
Iteration   2: 291264.263 ops/s
Iteration   3: 292271.039 ops/s
Iteration   4: 294618.641 ops/s
Iteration   5: 296783.037 ops/s
Iteration   6: 296037.222 ops/s
Iteration   7: 294292.274 ops/s
Iteration   8: 296381.872 ops/s
Iteration   9: 295941.754 ops/s
Iteration  10: 297777.733 ops/s
Iteration  11: 296657.817 ops/s
Iteration  12: 295990.033 ops/s
Iteration  13: 294628.374 ops/s
Iteration  14: 296012.963 ops/s
Iteration  15: 294519.036 ops/s
Iteration  16: 293243.212 ops/s
Iteration  17: 290182.970 ops/s
Iteration  18: 291869.629 ops/s
Iteration  19: 290559.769 ops/s
Iteration  20: 292164.373 ops/s
Iteration  21: 293312.812 ops/s
Iteration  22: 292679.234 ops/s
Iteration  23: 292081.700 ops/s
Iteration  24: 293696.581 ops/s
Iteration  25: 294498.583 ops/s
Iteration  26: 291205.050 ops/s
Iteration  27: 294204.558 ops/s
Iteration  28: 294051.121 ops/s
Iteration  29: 294278.744 ops/s
Iteration  30: 292936.488 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_addChild_selfNotAllowed":
  293929.689 ±(99.9%) 1315.298 ops/s [Average]
  (min, avg, max) = (290182.970, 293929.689, 297777.733), stdev = 1968.676
  CI (99.9%): [292614.392, 295244.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SpanNodeTest._Benchmark.benchmark_addChild_selfNotAllowed  thrpt   30  293929.689 ± 1315.298  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_changingIps$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_changingIps

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54710.697 ops/s
# Warmup Iteration   2: 72367.164 ops/s
# Warmup Iteration   3: 122501.518 ops/s
# Warmup Iteration   4: 230072.680 ops/s
# Warmup Iteration   5: 224563.023 ops/s
# Warmup Iteration   6: 226246.424 ops/s
# Warmup Iteration   7: 227987.287 ops/s
# Warmup Iteration   8: 167973.725 ops/s
# Warmup Iteration   9: 214396.147 ops/s
# Warmup Iteration  10: 227753.791 ops/s
# Warmup Iteration  11: 228540.615 ops/s
# Warmup Iteration  12: 229045.167 ops/s
# Warmup Iteration  13: 229528.227 ops/s
# Warmup Iteration  14: 229632.974 ops/s
# Warmup Iteration  15: 228933.343 ops/s
# Warmup Iteration  16: 228132.300 ops/s
# Warmup Iteration  17: 229978.201 ops/s
# Warmup Iteration  18: 230302.993 ops/s
# Warmup Iteration  19: 229516.985 ops/s
# Warmup Iteration  20: 230741.347 ops/s
# Warmup Iteration  21: 230229.968 ops/s
# Warmup Iteration  22: 229794.586 ops/s
# Warmup Iteration  23: 228855.261 ops/s
# Warmup Iteration  24: 229825.994 ops/s
# Warmup Iteration  25: 229478.001 ops/s
# Warmup Iteration  26: 228933.117 ops/s
# Warmup Iteration  27: 227944.210 ops/s
# Warmup Iteration  28: 227796.301 ops/s
# Warmup Iteration  29: 229003.743 ops/s
# Warmup Iteration  30: 229388.871 ops/s
Iteration   1: 228138.114 ops/s
Iteration   2: 229979.942 ops/s
Iteration   3: 229647.730 ops/s
Iteration   4: 227921.908 ops/s
Iteration   5: 229610.977 ops/s
Iteration   6: 228507.994 ops/s
Iteration   7: 228977.157 ops/s
Iteration   8: 230470.412 ops/s
Iteration   9: 227304.836 ops/s
Iteration  10: 230203.272 ops/s
Iteration  11: 227358.224 ops/s
Iteration  12: 229035.490 ops/s
Iteration  13: 228358.348 ops/s
Iteration  14: 226337.771 ops/s
Iteration  15: 228169.363 ops/s
Iteration  16: 227161.343 ops/s
Iteration  17: 227600.886 ops/s
Iteration  18: 228214.696 ops/s
Iteration  19: 226891.961 ops/s
Iteration  20: 229647.360 ops/s
Iteration  21: 227407.179 ops/s
Iteration  22: 227812.724 ops/s
Iteration  23: 229066.952 ops/s
Iteration  24: 229879.527 ops/s
Iteration  25: 228332.500 ops/s
Iteration  26: 228369.503 ops/s
Iteration  27: 229612.653 ops/s
Iteration  28: 228834.323 ops/s
Iteration  29: 227187.261 ops/s
Iteration  30: 230538.401 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_changingIps":
  228552.627 ±(99.9%) 761.837 ops/s [Average]
  (min, avg, max) = (226337.771, 228552.627, 230538.401), stdev = 1140.282
  CI (99.9%): [227790.790, 229314.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_build_changingIps  thrpt   30  228552.627 ± 761.837  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_headless$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_headless

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64925.971 ops/s
# Warmup Iteration   2: 92385.010 ops/s
# Warmup Iteration   3: 215009.864 ops/s
# Warmup Iteration   4: 221552.461 ops/s
# Warmup Iteration   5: 224082.809 ops/s
# Warmup Iteration   6: 222713.028 ops/s
# Warmup Iteration   7: 159958.526 ops/s
# Warmup Iteration   8: 210360.581 ops/s
# Warmup Iteration   9: 222875.626 ops/s
# Warmup Iteration  10: 222815.290 ops/s
# Warmup Iteration  11: 223380.279 ops/s
# Warmup Iteration  12: 222062.969 ops/s
# Warmup Iteration  13: 222690.356 ops/s
# Warmup Iteration  14: 223650.472 ops/s
# Warmup Iteration  15: 222910.400 ops/s
# Warmup Iteration  16: 222930.182 ops/s
# Warmup Iteration  17: 223162.409 ops/s
# Warmup Iteration  18: 224532.617 ops/s
# Warmup Iteration  19: 225117.129 ops/s
# Warmup Iteration  20: 225113.353 ops/s
# Warmup Iteration  21: 223129.784 ops/s
# Warmup Iteration  22: 223762.745 ops/s
# Warmup Iteration  23: 224128.035 ops/s
# Warmup Iteration  24: 223807.686 ops/s
# Warmup Iteration  25: 225114.883 ops/s
# Warmup Iteration  26: 224720.179 ops/s
# Warmup Iteration  27: 224286.049 ops/s
# Warmup Iteration  28: 224384.489 ops/s
# Warmup Iteration  29: 223030.940 ops/s
# Warmup Iteration  30: 224549.059 ops/s
Iteration   1: 224814.167 ops/s
Iteration   2: 223796.021 ops/s
Iteration   3: 224847.626 ops/s
Iteration   4: 224841.303 ops/s
Iteration   5: 224835.626 ops/s
Iteration   6: 224941.366 ops/s
Iteration   7: 225207.290 ops/s
Iteration   8: 225036.657 ops/s
Iteration   9: 225837.051 ops/s
Iteration  10: 225898.763 ops/s
Iteration  11: 225287.944 ops/s
Iteration  12: 226236.232 ops/s
Iteration  13: 225329.825 ops/s
Iteration  14: 225132.783 ops/s
Iteration  15: 223419.529 ops/s
Iteration  16: 223790.176 ops/s
Iteration  17: 224172.650 ops/s
Iteration  18: 224624.128 ops/s
Iteration  19: 224579.774 ops/s
Iteration  20: 225302.665 ops/s
Iteration  21: 225263.222 ops/s
Iteration  22: 223245.783 ops/s
Iteration  23: 222980.190 ops/s
Iteration  24: 222836.560 ops/s
Iteration  25: 223962.605 ops/s
Iteration  26: 222535.365 ops/s
Iteration  27: 222896.563 ops/s
Iteration  28: 225167.012 ops/s
Iteration  29: 224594.321 ops/s
Iteration  30: 224990.661 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_headless":
  224546.795 ±(99.9%) 649.673 ops/s [Average]
  (min, avg, max) = (222535.365, 224546.795, 226236.232), stdev = 972.400
  CI (99.9%): [223897.122, 225196.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_build_headless  thrpt   30  224546.795 ± 649.673  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_noChildLeftBehind$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_noChildLeftBehind

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31068.608 ops/s
# Warmup Iteration   2: 61818.214 ops/s
# Warmup Iteration   3: 100923.685 ops/s
# Warmup Iteration   4: 139360.513 ops/s
# Warmup Iteration   5: 140313.219 ops/s
# Warmup Iteration   6: 139062.784 ops/s
# Warmup Iteration   7: 138371.036 ops/s
# Warmup Iteration   8: 138524.487 ops/s
# Warmup Iteration   9: 91782.240 ops/s
# Warmup Iteration  10: 140338.064 ops/s
# Warmup Iteration  11: 139325.500 ops/s
# Warmup Iteration  12: 139430.603 ops/s
# Warmup Iteration  13: 139844.609 ops/s
# Warmup Iteration  14: 139810.614 ops/s
# Warmup Iteration  15: 140480.828 ops/s
# Warmup Iteration  16: 140683.143 ops/s
# Warmup Iteration  17: 139548.050 ops/s
# Warmup Iteration  18: 139945.224 ops/s
# Warmup Iteration  19: 138905.194 ops/s
# Warmup Iteration  20: 139867.171 ops/s
# Warmup Iteration  21: 139242.224 ops/s
# Warmup Iteration  22: 138472.820 ops/s
# Warmup Iteration  23: 138944.318 ops/s
# Warmup Iteration  24: 139058.915 ops/s
# Warmup Iteration  25: 140612.143 ops/s
# Warmup Iteration  26: 138846.636 ops/s
# Warmup Iteration  27: 139785.623 ops/s
# Warmup Iteration  28: 138890.748 ops/s
# Warmup Iteration  29: 138692.431 ops/s
# Warmup Iteration  30: 139824.138 ops/s
Iteration   1: 139931.958 ops/s
Iteration   2: 140050.668 ops/s
Iteration   3: 140007.063 ops/s
Iteration   4: 139659.269 ops/s
Iteration   5: 138738.790 ops/s
Iteration   6: 139564.883 ops/s
Iteration   7: 139018.393 ops/s
Iteration   8: 139245.001 ops/s
Iteration   9: 140279.648 ops/s
Iteration  10: 138942.579 ops/s
Iteration  11: 139224.824 ops/s
Iteration  12: 138533.746 ops/s
Iteration  13: 138438.634 ops/s
Iteration  14: 138540.311 ops/s
Iteration  15: 139130.674 ops/s
Iteration  16: 139789.548 ops/s
Iteration  17: 139018.525 ops/s
Iteration  18: 139909.123 ops/s
Iteration  19: 140691.101 ops/s
Iteration  20: 140743.914 ops/s
Iteration  21: 140678.286 ops/s
Iteration  22: 138971.376 ops/s
Iteration  23: 139832.141 ops/s
Iteration  24: 138740.562 ops/s
Iteration  25: 139578.364 ops/s
Iteration  26: 138913.010 ops/s
Iteration  27: 138810.334 ops/s
Iteration  28: 139431.514 ops/s
Iteration  29: 139914.970 ops/s
Iteration  30: 140013.112 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_noChildLeftBehind":
  139478.077 ±(99.9%) 444.231 ops/s [Average]
  (min, avg, max) = (138438.634, 139478.077, 140743.914), stdev = 664.903
  CI (99.9%): [139033.847, 139922.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_build_noChildLeftBehind  thrpt   30  139478.077 ± 444.231  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_outOfOrder$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_outOfOrder

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 67317.273 ops/s
# Warmup Iteration   2: 94419.196 ops/s
# Warmup Iteration   3: 223358.013 ops/s
# Warmup Iteration   4: 221062.103 ops/s
# Warmup Iteration   5: 226774.856 ops/s
# Warmup Iteration   6: 226757.648 ops/s
# Warmup Iteration   7: 154128.503 ops/s
# Warmup Iteration   8: 224902.336 ops/s
# Warmup Iteration   9: 227654.201 ops/s
# Warmup Iteration  10: 227163.761 ops/s
# Warmup Iteration  11: 226726.273 ops/s
# Warmup Iteration  12: 226864.830 ops/s
# Warmup Iteration  13: 225216.498 ops/s
# Warmup Iteration  14: 226713.855 ops/s
# Warmup Iteration  15: 227343.642 ops/s
# Warmup Iteration  16: 226041.525 ops/s
# Warmup Iteration  17: 226340.217 ops/s
# Warmup Iteration  18: 226003.243 ops/s
# Warmup Iteration  19: 226242.890 ops/s
# Warmup Iteration  20: 228321.150 ops/s
# Warmup Iteration  21: 227074.882 ops/s
# Warmup Iteration  22: 226554.310 ops/s
# Warmup Iteration  23: 226312.695 ops/s
# Warmup Iteration  24: 227034.437 ops/s
# Warmup Iteration  25: 227438.831 ops/s
# Warmup Iteration  26: 226489.537 ops/s
# Warmup Iteration  27: 225567.593 ops/s
# Warmup Iteration  28: 225479.759 ops/s
# Warmup Iteration  29: 226618.690 ops/s
# Warmup Iteration  30: 227582.481 ops/s
Iteration   1: 227767.756 ops/s
Iteration   2: 227027.337 ops/s
Iteration   3: 228027.804 ops/s
Iteration   4: 227373.558 ops/s
Iteration   5: 227463.544 ops/s
Iteration   6: 226487.215 ops/s
Iteration   7: 227318.031 ops/s
Iteration   8: 227832.868 ops/s
Iteration   9: 228508.813 ops/s
Iteration  10: 227936.768 ops/s
Iteration  11: 226628.481 ops/s
Iteration  12: 226975.153 ops/s
Iteration  13: 225326.979 ops/s
Iteration  14: 224634.795 ops/s
Iteration  15: 226206.117 ops/s
Iteration  16: 226456.904 ops/s
Iteration  17: 225657.320 ops/s
Iteration  18: 225434.280 ops/s
Iteration  19: 228331.596 ops/s
Iteration  20: 227861.818 ops/s
Iteration  21: 227909.595 ops/s
Iteration  22: 225916.188 ops/s
Iteration  23: 227038.384 ops/s
Iteration  24: 226391.031 ops/s
Iteration  25: 228096.511 ops/s
Iteration  26: 227726.830 ops/s
Iteration  27: 227779.060 ops/s
Iteration  28: 227997.914 ops/s
Iteration  29: 227968.089 ops/s
Iteration  30: 227430.407 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_outOfOrder":
  227117.038 ±(99.9%) 666.489 ops/s [Average]
  (min, avg, max) = (224634.795, 227117.038, 228508.813), stdev = 997.570
  CI (99.9%): [226450.549, 227783.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_build_outOfOrder  thrpt   30  227117.038 ± 666.489  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_redundantIgnored$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_redundantIgnored

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50945.994 ops/s
# Warmup Iteration   2: 97729.299 ops/s
# Warmup Iteration   3: 165853.264 ops/s
# Warmup Iteration   4: 208372.554 ops/s
# Warmup Iteration   5: 203653.968 ops/s
# Warmup Iteration   6: 207017.668 ops/s
# Warmup Iteration   7: 206556.663 ops/s
# Warmup Iteration   8: 189482.948 ops/s
# Warmup Iteration   9: 159042.769 ops/s
# Warmup Iteration  10: 206468.030 ops/s
# Warmup Iteration  11: 205367.582 ops/s
# Warmup Iteration  12: 205343.222 ops/s
# Warmup Iteration  13: 204104.585 ops/s
# Warmup Iteration  14: 207038.196 ops/s
# Warmup Iteration  15: 206271.883 ops/s
# Warmup Iteration  16: 205871.175 ops/s
# Warmup Iteration  17: 206151.934 ops/s
# Warmup Iteration  18: 205043.267 ops/s
# Warmup Iteration  19: 207281.766 ops/s
# Warmup Iteration  20: 204114.794 ops/s
# Warmup Iteration  21: 203629.379 ops/s
# Warmup Iteration  22: 206235.743 ops/s
# Warmup Iteration  23: 206361.370 ops/s
# Warmup Iteration  24: 205666.106 ops/s
# Warmup Iteration  25: 206503.040 ops/s
# Warmup Iteration  26: 205196.296 ops/s
# Warmup Iteration  27: 205383.358 ops/s
# Warmup Iteration  28: 205157.136 ops/s
# Warmup Iteration  29: 205731.304 ops/s
# Warmup Iteration  30: 206250.606 ops/s
Iteration   1: 208387.565 ops/s
Iteration   2: 205537.316 ops/s
Iteration   3: 205420.253 ops/s
Iteration   4: 205663.170 ops/s
Iteration   5: 205245.216 ops/s
Iteration   6: 205986.186 ops/s
Iteration   7: 205984.337 ops/s
Iteration   8: 207925.325 ops/s
Iteration   9: 206587.487 ops/s
Iteration  10: 205078.902 ops/s
Iteration  11: 205671.314 ops/s
Iteration  12: 204112.673 ops/s
Iteration  13: 205169.697 ops/s
Iteration  14: 206547.038 ops/s
Iteration  15: 205849.139 ops/s
Iteration  16: 206803.287 ops/s
Iteration  17: 206941.829 ops/s
Iteration  18: 208894.978 ops/s
Iteration  19: 206562.737 ops/s
Iteration  20: 206434.846 ops/s
Iteration  21: 204526.734 ops/s
Iteration  22: 206735.331 ops/s
Iteration  23: 206548.623 ops/s
Iteration  24: 206710.054 ops/s
Iteration  25: 206435.069 ops/s
Iteration  26: 205862.818 ops/s
Iteration  27: 206558.692 ops/s
Iteration  28: 208160.152 ops/s
Iteration  29: 207701.185 ops/s
Iteration  30: 207883.510 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_redundantIgnored":
  206397.515 ±(99.9%) 758.111 ops/s [Average]
  (min, avg, max) = (204112.673, 206397.515, 208894.978), stdev = 1134.705
  CI (99.9%): [205639.405, 207155.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_build_redundantIgnored  thrpt   30  206397.515 ± 758.111  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_skewedTrace$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_skewedTrace

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60938.718 ops/s
# Warmup Iteration   2: 97290.561 ops/s
# Warmup Iteration   3: 130323.752 ops/s
# Warmup Iteration   4: 192222.638 ops/s
# Warmup Iteration   5: 193336.795 ops/s
# Warmup Iteration   6: 193981.980 ops/s
# Warmup Iteration   7: 196417.974 ops/s
# Warmup Iteration   8: 198241.678 ops/s
# Warmup Iteration   9: 234569.048 ops/s
# Warmup Iteration  10: 167351.392 ops/s
# Warmup Iteration  11: 218413.493 ops/s
# Warmup Iteration  12: 234546.833 ops/s
# Warmup Iteration  13: 233089.570 ops/s
# Warmup Iteration  14: 234759.967 ops/s
# Warmup Iteration  15: 232340.153 ops/s
# Warmup Iteration  16: 231335.039 ops/s
# Warmup Iteration  17: 233254.241 ops/s
# Warmup Iteration  18: 233099.008 ops/s
# Warmup Iteration  19: 235629.889 ops/s
# Warmup Iteration  20: 232943.381 ops/s
# Warmup Iteration  21: 234266.841 ops/s
# Warmup Iteration  22: 234447.961 ops/s
# Warmup Iteration  23: 234021.730 ops/s
# Warmup Iteration  24: 235179.109 ops/s
# Warmup Iteration  25: 230423.680 ops/s
# Warmup Iteration  26: 233007.107 ops/s
# Warmup Iteration  27: 232156.830 ops/s
# Warmup Iteration  28: 232206.414 ops/s
# Warmup Iteration  29: 231768.842 ops/s
# Warmup Iteration  30: 233755.734 ops/s
Iteration   1: 232992.171 ops/s
Iteration   2: 233741.517 ops/s
Iteration   3: 234200.419 ops/s
Iteration   4: 232778.182 ops/s
Iteration   5: 233821.444 ops/s
Iteration   6: 232778.389 ops/s
Iteration   7: 235495.630 ops/s
Iteration   8: 233700.002 ops/s
Iteration   9: 234115.458 ops/s
Iteration  10: 233828.866 ops/s
Iteration  11: 231050.243 ops/s
Iteration  12: 233233.666 ops/s
Iteration  13: 232804.900 ops/s
Iteration  14: 232985.544 ops/s
Iteration  15: 232346.395 ops/s
Iteration  16: 230610.410 ops/s
Iteration  17: 234513.322 ops/s
Iteration  18: 235757.350 ops/s
Iteration  19: 231156.236 ops/s
Iteration  20: 231992.409 ops/s
Iteration  21: 233437.156 ops/s
Iteration  22: 232233.602 ops/s
Iteration  23: 233267.779 ops/s
Iteration  24: 232808.815 ops/s
Iteration  25: 233190.118 ops/s
Iteration  26: 234681.925 ops/s
Iteration  27: 235610.244 ops/s
Iteration  28: 234651.169 ops/s
Iteration  29: 233415.504 ops/s
Iteration  30: 233661.563 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_build_skewedTrace":
  233362.014 ±(99.9%) 838.917 ops/s [Average]
  (min, avg, max) = (230610.410, 233362.014, 235757.350), stdev = 1255.652
  CI (99.9%): [232523.097, 234200.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_build_skewedTrace  thrpt   30  233362.014 ± 838.917  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75695.672 ops/s
# Warmup Iteration   2: 110197.186 ops/s
# Warmup Iteration   3: 250328.187 ops/s
# Warmup Iteration   4: 247542.198 ops/s
# Warmup Iteration   5: 248185.093 ops/s
# Warmup Iteration   6: 250429.206 ops/s
# Warmup Iteration   7: 169099.039 ops/s
# Warmup Iteration   8: 248840.653 ops/s
# Warmup Iteration   9: 248972.119 ops/s
# Warmup Iteration  10: 246110.303 ops/s
# Warmup Iteration  11: 246758.074 ops/s
# Warmup Iteration  12: 246580.356 ops/s
# Warmup Iteration  13: 248218.350 ops/s
# Warmup Iteration  14: 249640.712 ops/s
# Warmup Iteration  15: 248933.014 ops/s
# Warmup Iteration  16: 248118.130 ops/s
# Warmup Iteration  17: 246645.716 ops/s
# Warmup Iteration  18: 247226.815 ops/s
# Warmup Iteration  19: 248450.922 ops/s
# Warmup Iteration  20: 247993.078 ops/s
# Warmup Iteration  21: 248577.183 ops/s
# Warmup Iteration  22: 245655.569 ops/s
# Warmup Iteration  23: 247347.580 ops/s
# Warmup Iteration  24: 249201.321 ops/s
# Warmup Iteration  25: 246844.842 ops/s
# Warmup Iteration  26: 247409.325 ops/s
# Warmup Iteration  27: 247571.292 ops/s
# Warmup Iteration  28: 247063.268 ops/s
# Warmup Iteration  29: 248415.029 ops/s
# Warmup Iteration  30: 246317.565 ops/s
Iteration   1: 245314.060 ops/s
Iteration   2: 246179.876 ops/s
Iteration   3: 247058.522 ops/s
Iteration   4: 245853.992 ops/s
Iteration   5: 248003.730 ops/s
Iteration   6: 248514.197 ops/s
Iteration   7: 249154.546 ops/s
Iteration   8: 247253.629 ops/s
Iteration   9: 248082.213 ops/s
Iteration  10: 248398.709 ops/s
Iteration  11: 248330.021 ops/s
Iteration  12: 247616.875 ops/s
Iteration  13: 249503.756 ops/s
Iteration  14: 248173.857 ops/s
Iteration  15: 250146.648 ops/s
Iteration  16: 247455.174 ops/s
Iteration  17: 249099.745 ops/s
Iteration  18: 246555.381 ops/s
Iteration  19: 245528.323 ops/s
Iteration  20: 246297.930 ops/s
Iteration  21: 245468.843 ops/s
Iteration  22: 245057.599 ops/s
Iteration  23: 245810.242 ops/s
Iteration  24: 247120.929 ops/s
Iteration  25: 248039.901 ops/s
Iteration  26: 248916.837 ops/s
Iteration  27: 248894.977 ops/s
Iteration  28: 249021.224 ops/s
Iteration  29: 247144.058 ops/s
Iteration  30: 247221.634 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree":
  247507.248 ±(99.9%) 923.987 ops/s [Average]
  (min, avg, max) = (245057.599, 247507.248, 250146.648), stdev = 1382.981
  CI (99.9%): [246583.260, 248431.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree  thrpt   30  247507.248 ± 923.987  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_dedupes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_dedupes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 174849.467 ops/s
# Warmup Iteration   2: 226183.303 ops/s
# Warmup Iteration   3: 513476.399 ops/s
# Warmup Iteration   4: 506508.700 ops/s
# Warmup Iteration   5: 508093.881 ops/s
# Warmup Iteration   6: 508344.647 ops/s
# Warmup Iteration   7: 379699.836 ops/s
# Warmup Iteration   8: 475017.077 ops/s
# Warmup Iteration   9: 508481.124 ops/s
# Warmup Iteration  10: 508526.460 ops/s
# Warmup Iteration  11: 507802.023 ops/s
# Warmup Iteration  12: 510907.434 ops/s
# Warmup Iteration  13: 508420.713 ops/s
# Warmup Iteration  14: 509129.570 ops/s
# Warmup Iteration  15: 508859.453 ops/s
# Warmup Iteration  16: 505981.239 ops/s
# Warmup Iteration  17: 509596.965 ops/s
# Warmup Iteration  18: 510986.347 ops/s
# Warmup Iteration  19: 511460.172 ops/s
# Warmup Iteration  20: 510149.419 ops/s
# Warmup Iteration  21: 511235.342 ops/s
# Warmup Iteration  22: 510756.873 ops/s
# Warmup Iteration  23: 510582.742 ops/s
# Warmup Iteration  24: 509462.893 ops/s
# Warmup Iteration  25: 511559.972 ops/s
# Warmup Iteration  26: 510682.839 ops/s
# Warmup Iteration  27: 509422.907 ops/s
# Warmup Iteration  28: 510636.986 ops/s
# Warmup Iteration  29: 512513.433 ops/s
# Warmup Iteration  30: 509428.844 ops/s
Iteration   1: 506361.871 ops/s
Iteration   2: 504112.676 ops/s
Iteration   3: 505400.437 ops/s
Iteration   4: 507911.434 ops/s
Iteration   5: 511319.999 ops/s
Iteration   6: 509422.639 ops/s
Iteration   7: 510517.330 ops/s
Iteration   8: 505449.324 ops/s
Iteration   9: 506890.809 ops/s
Iteration  10: 510464.824 ops/s
Iteration  11: 507463.518 ops/s
Iteration  12: 509533.570 ops/s
Iteration  13: 505439.208 ops/s
Iteration  14: 507983.375 ops/s
Iteration  15: 508429.863 ops/s
Iteration  16: 510167.162 ops/s
Iteration  17: 512153.504 ops/s
Iteration  18: 505723.244 ops/s
Iteration  19: 504820.026 ops/s
Iteration  20: 507010.761 ops/s
Iteration  21: 504897.527 ops/s
Iteration  22: 500740.393 ops/s
Iteration  23: 508606.914 ops/s
Iteration  24: 508825.703 ops/s
Iteration  25: 508598.290 ops/s
Iteration  26: 511034.123 ops/s
Iteration  27: 512119.162 ops/s
Iteration  28: 509941.901 ops/s
Iteration  29: 506151.816 ops/s
Iteration  30: 506758.848 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_dedupes":
  507808.342 ±(99.9%) 1767.200 ops/s [Average]
  (min, avg, max) = (500740.393, 507808.342, 512153.504), stdev = 2645.061
  CI (99.9%): [506041.142, 509575.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree_dedupes  thrpt   30  507808.342 ± 1767.200  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_duplicateRoots$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_duplicateRoots

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66700.718 ops/s
# Warmup Iteration   2: 99988.264 ops/s
# Warmup Iteration   3: 193340.248 ops/s
# Warmup Iteration   4: 214470.865 ops/s
# Warmup Iteration   5: 216064.883 ops/s
# Warmup Iteration   6: 215355.352 ops/s
# Warmup Iteration   7: 216849.954 ops/s
# Warmup Iteration   8: 159533.019 ops/s
# Warmup Iteration   9: 200248.966 ops/s
# Warmup Iteration  10: 216282.797 ops/s
# Warmup Iteration  11: 215341.829 ops/s
# Warmup Iteration  12: 216762.429 ops/s
# Warmup Iteration  13: 217153.869 ops/s
# Warmup Iteration  14: 218002.035 ops/s
# Warmup Iteration  15: 216779.807 ops/s
# Warmup Iteration  16: 215982.607 ops/s
# Warmup Iteration  17: 215353.374 ops/s
# Warmup Iteration  18: 216658.603 ops/s
# Warmup Iteration  19: 215619.601 ops/s
# Warmup Iteration  20: 215068.372 ops/s
# Warmup Iteration  21: 216490.598 ops/s
# Warmup Iteration  22: 215741.903 ops/s
# Warmup Iteration  23: 216133.742 ops/s
# Warmup Iteration  24: 215058.796 ops/s
# Warmup Iteration  25: 215401.484 ops/s
# Warmup Iteration  26: 216969.213 ops/s
# Warmup Iteration  27: 216028.100 ops/s
# Warmup Iteration  28: 215830.021 ops/s
# Warmup Iteration  29: 215365.346 ops/s
# Warmup Iteration  30: 215153.227 ops/s
Iteration   1: 214628.860 ops/s
Iteration   2: 216253.484 ops/s
Iteration   3: 216376.682 ops/s
Iteration   4: 215168.213 ops/s
Iteration   5: 216352.639 ops/s
Iteration   6: 217238.647 ops/s
Iteration   7: 216586.701 ops/s
Iteration   8: 215474.144 ops/s
Iteration   9: 216098.389 ops/s
Iteration  10: 217081.582 ops/s
Iteration  11: 215957.600 ops/s
Iteration  12: 215415.244 ops/s
Iteration  13: 215012.708 ops/s
Iteration  14: 217041.212 ops/s
Iteration  15: 213214.235 ops/s
Iteration  16: 215229.651 ops/s
Iteration  17: 217584.817 ops/s
Iteration  18: 216512.494 ops/s
Iteration  19: 216197.272 ops/s
Iteration  20: 215298.694 ops/s
Iteration  21: 213932.546 ops/s
Iteration  22: 214251.456 ops/s
Iteration  23: 214630.820 ops/s
Iteration  24: 217144.857 ops/s
Iteration  25: 217270.497 ops/s
Iteration  26: 216012.246 ops/s
Iteration  27: 216886.331 ops/s
Iteration  28: 215048.301 ops/s
Iteration  29: 215962.801 ops/s
Iteration  30: 216866.478 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_duplicateRoots":
  215890.987 ±(99.9%) 728.897 ops/s [Average]
  (min, avg, max) = (213214.235, 215890.987, 217584.817), stdev = 1090.979
  CI (99.9%): [215162.089, 216619.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree_duplicateRoots  thrpt   30  215890.987 ± 728.897  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40881.132 ops/s
# Warmup Iteration   2: 60828.823 ops/s
# Warmup Iteration   3: 138244.858 ops/s
# Warmup Iteration   4: 156151.965 ops/s
# Warmup Iteration   5: 160097.168 ops/s
# Warmup Iteration   6: 159312.984 ops/s
# Warmup Iteration   7: 130551.670 ops/s
# Warmup Iteration   8: 136145.181 ops/s
# Warmup Iteration   9: 158786.194 ops/s
# Warmup Iteration  10: 160290.226 ops/s
# Warmup Iteration  11: 160643.765 ops/s
# Warmup Iteration  12: 160737.719 ops/s
# Warmup Iteration  13: 160976.769 ops/s
# Warmup Iteration  14: 160387.197 ops/s
# Warmup Iteration  15: 159762.569 ops/s
# Warmup Iteration  16: 160458.437 ops/s
# Warmup Iteration  17: 160682.829 ops/s
# Warmup Iteration  18: 160384.012 ops/s
# Warmup Iteration  19: 159193.464 ops/s
# Warmup Iteration  20: 160946.659 ops/s
# Warmup Iteration  21: 160594.663 ops/s
# Warmup Iteration  22: 160809.403 ops/s
# Warmup Iteration  23: 160979.883 ops/s
# Warmup Iteration  24: 160114.089 ops/s
# Warmup Iteration  25: 159481.570 ops/s
# Warmup Iteration  26: 161204.432 ops/s
# Warmup Iteration  27: 161623.270 ops/s
# Warmup Iteration  28: 161633.725 ops/s
# Warmup Iteration  29: 159704.290 ops/s
# Warmup Iteration  30: 159710.300 ops/s
Iteration   1: 159830.353 ops/s
Iteration   2: 161037.324 ops/s
Iteration   3: 161462.918 ops/s
Iteration   4: 162673.397 ops/s
Iteration   5: 161665.089 ops/s
Iteration   6: 162165.993 ops/s
Iteration   7: 161361.301 ops/s
Iteration   8: 161469.838 ops/s
Iteration   9: 160607.705 ops/s
Iteration  10: 160536.556 ops/s
Iteration  11: 160517.783 ops/s
Iteration  12: 160395.608 ops/s
Iteration  13: 161544.724 ops/s
Iteration  14: 160737.223 ops/s
Iteration  15: 160416.399 ops/s
Iteration  16: 162005.027 ops/s
Iteration  17: 161224.504 ops/s
Iteration  18: 160839.116 ops/s
Iteration  19: 159839.337 ops/s
Iteration  20: 160312.843 ops/s
Iteration  21: 160645.580 ops/s
Iteration  22: 160230.383 ops/s
Iteration  23: 161419.963 ops/s
Iteration  24: 161408.196 ops/s
Iteration  25: 160404.508 ops/s
Iteration  26: 161909.675 ops/s
Iteration  27: 161099.825 ops/s
Iteration  28: 161099.118 ops/s
Iteration  29: 161937.217 ops/s
Iteration  30: 161298.187 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans":
  161069.856 ±(99.9%) 467.506 ops/s [Average]
  (min, avg, max) = (159830.353, 161069.856, 162673.397), stdev = 699.740
  CI (99.9%): [160602.351, 161537.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans  thrpt   30  161069.856 ± 467.506  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans_mixedShared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans_mixedShared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42184.088 ops/s
# Warmup Iteration   2: 58198.749 ops/s
# Warmup Iteration   3: 130240.808 ops/s
# Warmup Iteration   4: 157506.687 ops/s
# Warmup Iteration   5: 158304.537 ops/s
# Warmup Iteration   6: 158313.726 ops/s
# Warmup Iteration   7: 131516.557 ops/s
# Warmup Iteration   8: 131411.864 ops/s
# Warmup Iteration   9: 156790.826 ops/s
# Warmup Iteration  10: 157673.057 ops/s
# Warmup Iteration  11: 158533.924 ops/s
# Warmup Iteration  12: 158530.845 ops/s
# Warmup Iteration  13: 158013.091 ops/s
# Warmup Iteration  14: 158004.142 ops/s
# Warmup Iteration  15: 156730.560 ops/s
# Warmup Iteration  16: 158339.526 ops/s
# Warmup Iteration  17: 158344.828 ops/s
# Warmup Iteration  18: 158605.478 ops/s
# Warmup Iteration  19: 157661.797 ops/s
# Warmup Iteration  20: 157519.328 ops/s
# Warmup Iteration  21: 158858.711 ops/s
# Warmup Iteration  22: 157762.209 ops/s
# Warmup Iteration  23: 158746.209 ops/s
# Warmup Iteration  24: 158459.954 ops/s
# Warmup Iteration  25: 157048.295 ops/s
# Warmup Iteration  26: 157917.788 ops/s
# Warmup Iteration  27: 157082.067 ops/s
# Warmup Iteration  28: 158638.413 ops/s
# Warmup Iteration  29: 158148.848 ops/s
# Warmup Iteration  30: 157519.045 ops/s
Iteration   1: 157753.353 ops/s
Iteration   2: 158545.744 ops/s
Iteration   3: 156757.483 ops/s
Iteration   4: 158376.174 ops/s
Iteration   5: 158722.477 ops/s
Iteration   6: 159252.960 ops/s
Iteration   7: 157676.643 ops/s
Iteration   8: 158114.972 ops/s
Iteration   9: 157001.321 ops/s
Iteration  10: 158659.214 ops/s
Iteration  11: 159073.628 ops/s
Iteration  12: 158856.652 ops/s
Iteration  13: 158742.079 ops/s
Iteration  14: 159094.657 ops/s
Iteration  15: 159403.601 ops/s
Iteration  16: 159802.745 ops/s
Iteration  17: 159021.188 ops/s
Iteration  18: 159394.385 ops/s
Iteration  19: 158751.917 ops/s
Iteration  20: 159445.885 ops/s
Iteration  21: 159307.020 ops/s
Iteration  22: 159679.738 ops/s
Iteration  23: 158977.902 ops/s
Iteration  24: 159111.920 ops/s
Iteration  25: 159464.555 ops/s
Iteration  26: 159543.971 ops/s
Iteration  27: 158883.674 ops/s
Iteration  28: 159248.764 ops/s
Iteration  29: 159277.680 ops/s
Iteration  30: 159080.036 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans_mixedShared":
  158834.078 ±(99.9%) 491.651 ops/s [Average]
  (min, avg, max) = (156757.483, 158834.078, 159802.745), stdev = 735.881
  CI (99.9%): [158342.427, 159325.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                   Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree_qualifiesChildrenOfDuplicateServerSpans_mixedShared  thrpt   30  158834.078 ± 491.651  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70093.600 ops/s
# Warmup Iteration   2: 105642.580 ops/s
# Warmup Iteration   3: 244397.897 ops/s
# Warmup Iteration   4: 239685.929 ops/s
# Warmup Iteration   5: 244840.433 ops/s
# Warmup Iteration   6: 244286.028 ops/s
# Warmup Iteration   7: 165575.812 ops/s
# Warmup Iteration   8: 245612.437 ops/s
# Warmup Iteration   9: 245314.904 ops/s
# Warmup Iteration  10: 244607.473 ops/s
# Warmup Iteration  11: 245380.212 ops/s
# Warmup Iteration  12: 245110.133 ops/s
# Warmup Iteration  13: 244674.191 ops/s
# Warmup Iteration  14: 245241.403 ops/s
# Warmup Iteration  15: 244332.943 ops/s
# Warmup Iteration  16: 245348.529 ops/s
# Warmup Iteration  17: 242613.206 ops/s
# Warmup Iteration  18: 243694.456 ops/s
# Warmup Iteration  19: 243188.348 ops/s
# Warmup Iteration  20: 242278.320 ops/s
# Warmup Iteration  21: 242432.790 ops/s
# Warmup Iteration  22: 241114.286 ops/s
# Warmup Iteration  23: 241969.999 ops/s
# Warmup Iteration  24: 241049.479 ops/s
# Warmup Iteration  25: 241487.787 ops/s
# Warmup Iteration  26: 243691.261 ops/s
# Warmup Iteration  27: 243654.841 ops/s
# Warmup Iteration  28: 243878.693 ops/s
# Warmup Iteration  29: 241864.053 ops/s
# Warmup Iteration  30: 241425.130 ops/s
Iteration   1: 242991.476 ops/s
Iteration   2: 242886.855 ops/s
Iteration   3: 242254.832 ops/s
Iteration   4: 242239.468 ops/s
Iteration   5: 244047.662 ops/s
Iteration   6: 241614.852 ops/s
Iteration   7: 240809.915 ops/s
Iteration   8: 242178.089 ops/s
Iteration   9: 241118.607 ops/s
Iteration  10: 241735.441 ops/s
Iteration  11: 241800.309 ops/s
Iteration  12: 241434.643 ops/s
Iteration  13: 242069.010 ops/s
Iteration  14: 242301.331 ops/s
Iteration  15: 245035.406 ops/s
Iteration  16: 242437.444 ops/s
Iteration  17: 243875.527 ops/s
Iteration  18: 240170.724 ops/s
Iteration  19: 241935.813 ops/s
Iteration  20: 242724.929 ops/s
Iteration  21: 242814.249 ops/s
Iteration  22: 242004.407 ops/s
Iteration  23: 240704.350 ops/s
Iteration  24: 243157.314 ops/s
Iteration  25: 244423.551 ops/s
Iteration  26: 242295.708 ops/s
Iteration  27: 240968.914 ops/s
Iteration  28: 240917.141 ops/s
Iteration  29: 242713.008 ops/s
Iteration  30: 241784.616 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedId":
  242248.186 ±(99.9%) 748.170 ops/s [Average]
  (min, avg, max) = (240170.724, 242248.186, 245035.406), stdev = 1119.826
  CI (99.9%): [241500.016, 242996.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedId  thrpt   30  242248.186 ± 748.170  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedRootId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedRootId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65201.845 ops/s
# Warmup Iteration   2: 101376.905 ops/s
# Warmup Iteration   3: 249163.195 ops/s
# Warmup Iteration   4: 245230.929 ops/s
# Warmup Iteration   5: 248076.575 ops/s
# Warmup Iteration   6: 248728.188 ops/s
# Warmup Iteration   7: 171882.868 ops/s
# Warmup Iteration   8: 249420.887 ops/s
# Warmup Iteration   9: 248542.613 ops/s
# Warmup Iteration  10: 252828.552 ops/s
# Warmup Iteration  11: 252587.331 ops/s
# Warmup Iteration  12: 252238.998 ops/s
# Warmup Iteration  13: 251316.192 ops/s
# Warmup Iteration  14: 247213.043 ops/s
# Warmup Iteration  15: 250213.027 ops/s
# Warmup Iteration  16: 250238.151 ops/s
# Warmup Iteration  17: 249999.426 ops/s
# Warmup Iteration  18: 248267.705 ops/s
# Warmup Iteration  19: 248296.010 ops/s
# Warmup Iteration  20: 249350.277 ops/s
# Warmup Iteration  21: 248609.184 ops/s
# Warmup Iteration  22: 249288.542 ops/s
# Warmup Iteration  23: 249068.440 ops/s
# Warmup Iteration  24: 247980.668 ops/s
# Warmup Iteration  25: 249865.578 ops/s
# Warmup Iteration  26: 250695.603 ops/s
# Warmup Iteration  27: 250158.489 ops/s
# Warmup Iteration  28: 249526.630 ops/s
# Warmup Iteration  29: 248205.882 ops/s
# Warmup Iteration  30: 249454.004 ops/s
Iteration   1: 249673.693 ops/s
Iteration   2: 248249.870 ops/s
Iteration   3: 250539.637 ops/s
Iteration   4: 249876.937 ops/s
Iteration   5: 250755.428 ops/s
Iteration   6: 248263.129 ops/s
Iteration   7: 248661.111 ops/s
Iteration   8: 250586.553 ops/s
Iteration   9: 251841.224 ops/s
Iteration  10: 251314.506 ops/s
Iteration  11: 250892.871 ops/s
Iteration  12: 251242.869 ops/s
Iteration  13: 250978.224 ops/s
Iteration  14: 252405.112 ops/s
Iteration  15: 251958.027 ops/s
Iteration  16: 251627.314 ops/s
Iteration  17: 251418.688 ops/s
Iteration  18: 251396.919 ops/s
Iteration  19: 250767.076 ops/s
Iteration  20: 251229.179 ops/s
Iteration  21: 251278.219 ops/s
Iteration  22: 251992.664 ops/s
Iteration  23: 252187.019 ops/s
Iteration  24: 251169.763 ops/s
Iteration  25: 251904.648 ops/s
Iteration  26: 251412.492 ops/s
Iteration  27: 251649.645 ops/s
Iteration  28: 252239.221 ops/s
Iteration  29: 252015.104 ops/s
Iteration  30: 252154.814 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedRootId":
  251056.065 ±(99.9%) 747.555 ops/s [Average]
  (min, avg, max) = (248249.870, 251056.065, 252405.112), stdev = 1118.906
  CI (99.9%): [250308.510, 251803.620] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_constructsTraceTree_sharedRootId  thrpt   30  251056.065 ± 747.555  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_ordersChildrenByTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_ordersChildrenByTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76466.892 ops/s
# Warmup Iteration   2: 114937.569 ops/s
# Warmup Iteration   3: 256933.032 ops/s
# Warmup Iteration   4: 285978.942 ops/s
# Warmup Iteration   5: 289115.829 ops/s
# Warmup Iteration   6: 288176.520 ops/s
# Warmup Iteration   7: 219380.290 ops/s
# Warmup Iteration   8: 255598.582 ops/s
# Warmup Iteration   9: 287286.317 ops/s
# Warmup Iteration  10: 288104.041 ops/s
# Warmup Iteration  11: 286565.449 ops/s
# Warmup Iteration  12: 287999.425 ops/s
# Warmup Iteration  13: 287188.000 ops/s
# Warmup Iteration  14: 286387.476 ops/s
# Warmup Iteration  15: 287686.850 ops/s
# Warmup Iteration  16: 288418.491 ops/s
# Warmup Iteration  17: 287026.033 ops/s
# Warmup Iteration  18: 284492.766 ops/s
# Warmup Iteration  19: 284455.478 ops/s
# Warmup Iteration  20: 283219.638 ops/s
# Warmup Iteration  21: 282191.364 ops/s
# Warmup Iteration  22: 284479.709 ops/s
# Warmup Iteration  23: 281993.494 ops/s
# Warmup Iteration  24: 283184.559 ops/s
# Warmup Iteration  25: 285703.554 ops/s
# Warmup Iteration  26: 284270.761 ops/s
# Warmup Iteration  27: 285797.424 ops/s
# Warmup Iteration  28: 280181.892 ops/s
# Warmup Iteration  29: 281129.087 ops/s
# Warmup Iteration  30: 284524.821 ops/s
Iteration   1: 284779.986 ops/s
Iteration   2: 283546.712 ops/s
Iteration   3: 285290.754 ops/s
Iteration   4: 286010.882 ops/s
Iteration   5: 282101.439 ops/s
Iteration   6: 284069.717 ops/s
Iteration   7: 284380.259 ops/s
Iteration   8: 283104.149 ops/s
Iteration   9: 282963.323 ops/s
Iteration  10: 283616.506 ops/s
Iteration  11: 281540.161 ops/s
Iteration  12: 282418.625 ops/s
Iteration  13: 284476.013 ops/s
Iteration  14: 287128.477 ops/s
Iteration  15: 284125.241 ops/s
Iteration  16: 282880.562 ops/s
Iteration  17: 285019.567 ops/s
Iteration  18: 282173.140 ops/s
Iteration  19: 285538.308 ops/s
Iteration  20: 283847.754 ops/s
Iteration  21: 282004.275 ops/s
Iteration  22: 282311.665 ops/s
Iteration  23: 282795.106 ops/s
Iteration  24: 286020.712 ops/s
Iteration  25: 281975.082 ops/s
Iteration  26: 283028.754 ops/s
Iteration  27: 283397.161 ops/s
Iteration  28: 283429.212 ops/s
Iteration  29: 284850.123 ops/s
Iteration  30: 284322.271 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_ordersChildrenByTimestamp":
  283771.531 ±(99.9%) 930.611 ops/s [Average]
  (min, avg, max) = (281540.161, 283771.531, 287128.477), stdev = 1392.896
  CI (99.9%): [282840.920, 284702.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
SpanNodeTest._Benchmark.benchmark_ordersChildrenByTimestamp  thrpt   30  283771.531 ± 930.611  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_traversesBreadthFirst$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.SpanNodeTest._Benchmark.benchmark_traversesBreadthFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27523.137 ops/s
# Warmup Iteration   2: 34999.577 ops/s
# Warmup Iteration   3: 75571.449 ops/s
# Warmup Iteration   4: 82720.963 ops/s
# Warmup Iteration   5: 82817.342 ops/s
# Warmup Iteration   6: 82726.778 ops/s
# Warmup Iteration   7: 83398.868 ops/s
# Warmup Iteration   8: 55617.934 ops/s
# Warmup Iteration   9: 84417.798 ops/s
# Warmup Iteration  10: 84199.813 ops/s
# Warmup Iteration  11: 83202.930 ops/s
# Warmup Iteration  12: 84381.184 ops/s
# Warmup Iteration  13: 83529.870 ops/s
# Warmup Iteration  14: 83837.119 ops/s
# Warmup Iteration  15: 83614.299 ops/s
# Warmup Iteration  16: 83808.623 ops/s
# Warmup Iteration  17: 84226.604 ops/s
# Warmup Iteration  18: 83461.506 ops/s
# Warmup Iteration  19: 83991.982 ops/s
# Warmup Iteration  20: 83743.396 ops/s
# Warmup Iteration  21: 83535.317 ops/s
# Warmup Iteration  22: 84430.607 ops/s
# Warmup Iteration  23: 83247.154 ops/s
# Warmup Iteration  24: 83975.111 ops/s
# Warmup Iteration  25: 83497.549 ops/s
# Warmup Iteration  26: 83532.590 ops/s
# Warmup Iteration  27: 84359.808 ops/s
# Warmup Iteration  28: 83111.623 ops/s
# Warmup Iteration  29: 83961.111 ops/s
# Warmup Iteration  30: 83646.755 ops/s
Iteration   1: 84078.118 ops/s
Iteration   2: 83970.366 ops/s
Iteration   3: 84940.267 ops/s
Iteration   4: 83975.839 ops/s
Iteration   5: 84067.726 ops/s
Iteration   6: 84448.434 ops/s
Iteration   7: 84539.547 ops/s
Iteration   8: 84820.981 ops/s
Iteration   9: 84491.329 ops/s
Iteration  10: 84840.099 ops/s
Iteration  11: 84338.955 ops/s
Iteration  12: 84713.334 ops/s
Iteration  13: 84760.635 ops/s
Iteration  14: 84979.217 ops/s
Iteration  15: 84604.440 ops/s
Iteration  16: 84692.927 ops/s
Iteration  17: 84614.572 ops/s
Iteration  18: 84793.946 ops/s
Iteration  19: 84783.535 ops/s
Iteration  20: 84806.630 ops/s
Iteration  21: 84971.161 ops/s
Iteration  22: 84391.791 ops/s
Iteration  23: 84792.259 ops/s
Iteration  24: 84781.540 ops/s
Iteration  25: 84870.764 ops/s
Iteration  26: 84537.000 ops/s
Iteration  27: 84978.418 ops/s
Iteration  28: 84557.966 ops/s
Iteration  29: 84725.079 ops/s
Iteration  30: 84499.870 ops/s


Result "zipkin2.internal.SpanNodeTest._Benchmark.benchmark_traversesBreadthFirst":
  84612.225 ±(99.9%) 194.997 ops/s [Average]
  (min, avg, max) = (83970.366, 84612.225, 84979.217), stdev = 291.862
  CI (99.9%): [84417.228, 84807.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
SpanNodeTest._Benchmark.benchmark_traversesBreadthFirst  thrpt   30  84612.225 ± 194.997  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_backfillsMissingParentIdOnSharedSpan$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_backfillsMissingParentIdOnSharedSpan

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 416.149 ops/s
# Warmup Iteration   2: 538.366 ops/s
# Warmup Iteration   3: 540.296 ops/s
# Warmup Iteration   4: 782.548 ops/s
# Warmup Iteration   5: 922.272 ops/s
# Warmup Iteration   6: 910.949 ops/s
# Warmup Iteration   7: 908.877 ops/s
# Warmup Iteration   8: 916.214 ops/s
# Warmup Iteration   9: 935.950 ops/s
# Warmup Iteration  10: 946.037 ops/s
# Warmup Iteration  11: 941.026 ops/s
# Warmup Iteration  12: 929.150 ops/s
# Warmup Iteration  13: 926.704 ops/s
# Warmup Iteration  14: 931.680 ops/s
# Warmup Iteration  15: 709.341 ops/s
# Warmup Iteration  16: 809.628 ops/s
# Warmup Iteration  17: 956.538 ops/s
# Warmup Iteration  18: 953.490 ops/s
# Warmup Iteration  19: 958.017 ops/s
# Warmup Iteration  20: 964.296 ops/s
# Warmup Iteration  21: 961.331 ops/s
# Warmup Iteration  22: 952.576 ops/s
# Warmup Iteration  23: 955.680 ops/s
# Warmup Iteration  24: 962.728 ops/s
# Warmup Iteration  25: 959.152 ops/s
# Warmup Iteration  26: 958.716 ops/s
# Warmup Iteration  27: 955.109 ops/s
# Warmup Iteration  28: 950.751 ops/s
# Warmup Iteration  29: 949.865 ops/s
# Warmup Iteration  30: 951.805 ops/s
Iteration   1: 949.566 ops/s
Iteration   2: 950.519 ops/s
Iteration   3: 955.442 ops/s
Iteration   4: 958.067 ops/s
Iteration   5: 940.895 ops/s
Iteration   6: 949.371 ops/s
Iteration   7: 956.804 ops/s
Iteration   8: 943.043 ops/s
Iteration   9: 941.040 ops/s
Iteration  10: 937.101 ops/s
Iteration  11: 944.582 ops/s
Iteration  12: 951.587 ops/s
Iteration  13: 950.966 ops/s
Iteration  14: 944.518 ops/s
Iteration  15: 944.143 ops/s
Iteration  16: 944.267 ops/s
Iteration  17: 952.357 ops/s
Iteration  18: 953.534 ops/s
Iteration  19: 944.877 ops/s
Iteration  20: 952.156 ops/s
Iteration  21: 950.593 ops/s
Iteration  22: 951.946 ops/s
Iteration  23: 958.190 ops/s
Iteration  24: 952.170 ops/s
Iteration  25: 945.224 ops/s
Iteration  26: 955.896 ops/s
Iteration  27: 953.665 ops/s
Iteration  28: 958.770 ops/s
Iteration  29: 957.945 ops/s
Iteration  30: 952.452 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_backfillsMissingParentIdOnSharedSpan":
  950.056 ±(99.9%) 3.907 ops/s [Average]
  (min, avg, max) = (937.101, 950.056, 958.770), stdev = 5.848
  CI (99.9%): [946.149, 953.963] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt    Score   Error  Units
TraceTest._Benchmark.benchmark_backfillsMissingParentIdOnSharedSpan  thrpt   30  950.056 ± 3.907  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_backfillsMissingSharedFlag$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_backfillsMissingSharedFlag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 421.630 ops/s
# Warmup Iteration   2: 548.116 ops/s
# Warmup Iteration   3: 552.593 ops/s
# Warmup Iteration   4: 770.912 ops/s
# Warmup Iteration   5: 903.397 ops/s
# Warmup Iteration   6: 898.071 ops/s
# Warmup Iteration   7: 906.495 ops/s
# Warmup Iteration   8: 924.280 ops/s
# Warmup Iteration   9: 937.717 ops/s
# Warmup Iteration  10: 925.704 ops/s
# Warmup Iteration  11: 924.234 ops/s
# Warmup Iteration  12: 922.018 ops/s
# Warmup Iteration  13: 928.128 ops/s
# Warmup Iteration  14: 909.606 ops/s
# Warmup Iteration  15: 795.910 ops/s
# Warmup Iteration  16: 697.448 ops/s
# Warmup Iteration  17: 931.454 ops/s
# Warmup Iteration  18: 931.991 ops/s
# Warmup Iteration  19: 935.162 ops/s
# Warmup Iteration  20: 935.139 ops/s
# Warmup Iteration  21: 934.171 ops/s
# Warmup Iteration  22: 934.133 ops/s
# Warmup Iteration  23: 936.849 ops/s
# Warmup Iteration  24: 931.831 ops/s
# Warmup Iteration  25: 931.698 ops/s
# Warmup Iteration  26: 926.958 ops/s
# Warmup Iteration  27: 935.934 ops/s
# Warmup Iteration  28: 935.855 ops/s
# Warmup Iteration  29: 941.241 ops/s
# Warmup Iteration  30: 940.362 ops/s
Iteration   1: 935.856 ops/s
Iteration   2: 919.630 ops/s
Iteration   3: 916.481 ops/s
Iteration   4: 919.748 ops/s
Iteration   5: 927.006 ops/s
Iteration   6: 935.188 ops/s
Iteration   7: 933.762 ops/s
Iteration   8: 944.628 ops/s
Iteration   9: 933.568 ops/s
Iteration  10: 933.119 ops/s
Iteration  11: 923.816 ops/s
Iteration  12: 926.607 ops/s
Iteration  13: 918.264 ops/s
Iteration  14: 918.553 ops/s
Iteration  15: 908.864 ops/s
Iteration  16: 925.116 ops/s
Iteration  17: 925.138 ops/s
Iteration  18: 923.282 ops/s
Iteration  19: 906.671 ops/s
Iteration  20: 908.995 ops/s
Iteration  21: 907.091 ops/s
Iteration  22: 918.952 ops/s
Iteration  23: 923.041 ops/s
Iteration  24: 919.219 ops/s
Iteration  25: 916.846 ops/s
Iteration  26: 924.945 ops/s
Iteration  27: 915.665 ops/s
Iteration  28: 919.785 ops/s
Iteration  29: 911.829 ops/s
Iteration  30: 918.241 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_backfillsMissingSharedFlag":
  921.997 ±(99.9%) 6.111 ops/s [Average]
  (min, avg, max) = (906.671, 921.997, 944.628), stdev = 9.147
  CI (99.9%): [915.886, 928.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt    Score   Error  Units
TraceTest._Benchmark.benchmark_backfillsMissingSharedFlag  thrpt   30  921.997 ± 6.111  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_choosesBestTraceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_choosesBestTraceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101119.921 ops/s
# Warmup Iteration   2: 139898.804 ops/s
# Warmup Iteration   3: 289178.185 ops/s
# Warmup Iteration   4: 302230.079 ops/s
# Warmup Iteration   5: 303759.441 ops/s
# Warmup Iteration   6: 307502.670 ops/s
# Warmup Iteration   7: 305757.774 ops/s
# Warmup Iteration   8: 209364.690 ops/s
# Warmup Iteration   9: 306860.256 ops/s
# Warmup Iteration  10: 307357.919 ops/s
# Warmup Iteration  11: 307561.443 ops/s
# Warmup Iteration  12: 307420.871 ops/s
# Warmup Iteration  13: 307031.440 ops/s
# Warmup Iteration  14: 306428.967 ops/s
# Warmup Iteration  15: 306194.578 ops/s
# Warmup Iteration  16: 307739.801 ops/s
# Warmup Iteration  17: 306083.502 ops/s
# Warmup Iteration  18: 305738.541 ops/s
# Warmup Iteration  19: 305655.919 ops/s
# Warmup Iteration  20: 305311.469 ops/s
# Warmup Iteration  21: 307623.789 ops/s
# Warmup Iteration  22: 307652.857 ops/s
# Warmup Iteration  23: 307020.586 ops/s
# Warmup Iteration  24: 307199.564 ops/s
# Warmup Iteration  25: 306862.584 ops/s
# Warmup Iteration  26: 307310.019 ops/s
# Warmup Iteration  27: 306270.495 ops/s
# Warmup Iteration  28: 307329.518 ops/s
# Warmup Iteration  29: 307281.552 ops/s
# Warmup Iteration  30: 305840.079 ops/s
Iteration   1: 306646.585 ops/s
Iteration   2: 306743.644 ops/s
Iteration   3: 306310.208 ops/s
Iteration   4: 306422.888 ops/s
Iteration   5: 308901.752 ops/s
Iteration   6: 306651.447 ops/s
Iteration   7: 305409.472 ops/s
Iteration   8: 306592.690 ops/s
Iteration   9: 305915.262 ops/s
Iteration  10: 306523.269 ops/s
Iteration  11: 307495.320 ops/s
Iteration  12: 309085.222 ops/s
Iteration  13: 306836.134 ops/s
Iteration  14: 306354.662 ops/s
Iteration  15: 306723.731 ops/s
Iteration  16: 306427.581 ops/s
Iteration  17: 305801.822 ops/s
Iteration  18: 304250.050 ops/s
Iteration  19: 305264.149 ops/s
Iteration  20: 307344.610 ops/s
Iteration  21: 307573.403 ops/s
Iteration  22: 307827.371 ops/s
Iteration  23: 307006.751 ops/s
Iteration  24: 306677.605 ops/s
Iteration  25: 307878.800 ops/s
Iteration  26: 304913.762 ops/s
Iteration  27: 306534.867 ops/s
Iteration  28: 305561.226 ops/s
Iteration  29: 306353.937 ops/s
Iteration  30: 306646.991 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_choosesBestTraceId":
  306622.507 ±(99.9%) 693.028 ops/s [Average]
  (min, avg, max) = (304250.050, 306622.507, 309085.222), stdev = 1037.292
  CI (99.9%): [305929.479, 307315.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
TraceTest._Benchmark.benchmark_choosesBestTraceId  thrpt   30  306622.507 ± 693.028  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_cleanupComparator_ordersClientFirst$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_cleanupComparator_ordersClientFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 194040.421 ops/s
# Warmup Iteration   2: 337113.105 ops/s
# Warmup Iteration   3: 585760.646 ops/s
# Warmup Iteration   4: 687847.152 ops/s
# Warmup Iteration   5: 688366.569 ops/s
# Warmup Iteration   6: 696476.777 ops/s
# Warmup Iteration   7: 703236.424 ops/s
# Warmup Iteration   8: 580759.017 ops/s
# Warmup Iteration   9: 589865.430 ops/s
# Warmup Iteration  10: 692576.324 ops/s
# Warmup Iteration  11: 693201.806 ops/s
# Warmup Iteration  12: 694347.350 ops/s
# Warmup Iteration  13: 695695.170 ops/s
# Warmup Iteration  14: 691254.999 ops/s
# Warmup Iteration  15: 690285.304 ops/s
# Warmup Iteration  16: 690875.227 ops/s
# Warmup Iteration  17: 687081.933 ops/s
# Warmup Iteration  18: 686297.671 ops/s
# Warmup Iteration  19: 684064.166 ops/s
# Warmup Iteration  20: 685911.538 ops/s
# Warmup Iteration  21: 688958.300 ops/s
# Warmup Iteration  22: 689219.388 ops/s
# Warmup Iteration  23: 688657.996 ops/s
# Warmup Iteration  24: 684624.659 ops/s
# Warmup Iteration  25: 688239.359 ops/s
# Warmup Iteration  26: 693566.666 ops/s
# Warmup Iteration  27: 689095.338 ops/s
# Warmup Iteration  28: 688174.138 ops/s
# Warmup Iteration  29: 683096.184 ops/s
# Warmup Iteration  30: 685288.266 ops/s
Iteration   1: 691187.701 ops/s
Iteration   2: 695131.857 ops/s
Iteration   3: 695532.725 ops/s
Iteration   4: 696562.130 ops/s
Iteration   5: 696134.108 ops/s
Iteration   6: 695799.162 ops/s
Iteration   7: 696343.523 ops/s
Iteration   8: 695361.776 ops/s
Iteration   9: 694268.987 ops/s
Iteration  10: 695643.349 ops/s
Iteration  11: 695337.576 ops/s
Iteration  12: 691881.877 ops/s
Iteration  13: 692952.178 ops/s
Iteration  14: 694732.393 ops/s
Iteration  15: 695849.370 ops/s
Iteration  16: 695358.379 ops/s
Iteration  17: 691813.537 ops/s
Iteration  18: 689100.517 ops/s
Iteration  19: 693359.573 ops/s
Iteration  20: 691635.495 ops/s
Iteration  21: 694540.298 ops/s
Iteration  22: 689421.308 ops/s
Iteration  23: 694177.357 ops/s
Iteration  24: 692656.534 ops/s
Iteration  25: 689719.500 ops/s
Iteration  26: 695492.388 ops/s
Iteration  27: 693785.838 ops/s
Iteration  28: 692898.625 ops/s
Iteration  29: 693402.103 ops/s
Iteration  30: 690418.938 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_cleanupComparator_ordersClientFirst":
  693683.303 ±(99.9%) 1462.977 ops/s [Average]
  (min, avg, max) = (689100.517, 693683.303, 696562.130), stdev = 2189.715
  CI (99.9%): [692220.327, 695146.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
TraceTest._Benchmark.benchmark_cleanupComparator_ordersClientFirst  thrpt   30  693683.303 ± 1462.977  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_cleanupComparator_transitiveKindComparison$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_cleanupComparator_transitiveKindComparison

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44372.088 ops/s
# Warmup Iteration   2: 55865.077 ops/s
# Warmup Iteration   3: 82618.101 ops/s
# Warmup Iteration   4: 101205.551 ops/s
# Warmup Iteration   5: 101332.618 ops/s
# Warmup Iteration   6: 101096.927 ops/s
# Warmup Iteration   7: 100237.750 ops/s
# Warmup Iteration   8: 100310.676 ops/s
# Warmup Iteration   9: 100336.604 ops/s
# Warmup Iteration  10: 86690.321 ops/s
# Warmup Iteration  11: 81593.144 ops/s
# Warmup Iteration  12: 100224.635 ops/s
# Warmup Iteration  13: 100670.167 ops/s
# Warmup Iteration  14: 100933.081 ops/s
# Warmup Iteration  15: 100778.037 ops/s
# Warmup Iteration  16: 100240.648 ops/s
# Warmup Iteration  17: 101249.963 ops/s
# Warmup Iteration  18: 100675.662 ops/s
# Warmup Iteration  19: 100628.338 ops/s
# Warmup Iteration  20: 101075.946 ops/s
# Warmup Iteration  21: 101085.862 ops/s
# Warmup Iteration  22: 101255.382 ops/s
# Warmup Iteration  23: 100631.604 ops/s
# Warmup Iteration  24: 100986.444 ops/s
# Warmup Iteration  25: 100888.511 ops/s
# Warmup Iteration  26: 100698.391 ops/s
# Warmup Iteration  27: 101656.723 ops/s
# Warmup Iteration  28: 101856.437 ops/s
# Warmup Iteration  29: 101537.323 ops/s
# Warmup Iteration  30: 101760.974 ops/s
Iteration   1: 101534.893 ops/s
Iteration   2: 101198.892 ops/s
Iteration   3: 100916.777 ops/s
Iteration   4: 101053.866 ops/s
Iteration   5: 100677.241 ops/s
Iteration   6: 100962.214 ops/s
Iteration   7: 99535.092 ops/s
Iteration   8: 100639.834 ops/s
Iteration   9: 101528.577 ops/s
Iteration  10: 101480.494 ops/s
Iteration  11: 101206.198 ops/s
Iteration  12: 99966.012 ops/s
Iteration  13: 100779.135 ops/s
Iteration  14: 100226.476 ops/s
Iteration  15: 100421.160 ops/s
Iteration  16: 100666.286 ops/s
Iteration  17: 100667.324 ops/s
Iteration  18: 101343.196 ops/s
Iteration  19: 101126.880 ops/s
Iteration  20: 101755.492 ops/s
Iteration  21: 101333.053 ops/s
Iteration  22: 101387.705 ops/s
Iteration  23: 99794.214 ops/s
Iteration  24: 100418.103 ops/s
Iteration  25: 101403.391 ops/s
Iteration  26: 100463.882 ops/s
Iteration  27: 100935.349 ops/s
Iteration  28: 100786.328 ops/s
Iteration  29: 101259.705 ops/s
Iteration  30: 101375.777 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_cleanupComparator_transitiveKindComparison":
  100894.785 ±(99.9%) 365.474 ops/s [Average]
  (min, avg, max) = (99535.092, 100894.785, 101755.492), stdev = 547.025
  CI (99.9%): [100529.311, 101260.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
TraceTest._Benchmark.benchmark_cleanupComparator_transitiveKindComparison  thrpt   30  100894.785 ± 365.474  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_deletesSelfReferencingParentId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_deletesSelfReferencingParentId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 585.686 ops/s
# Warmup Iteration   2: 781.551 ops/s
# Warmup Iteration   3: 787.640 ops/s
# Warmup Iteration   4: 991.410 ops/s
# Warmup Iteration   5: 1262.392 ops/s
# Warmup Iteration   6: 1254.476 ops/s
# Warmup Iteration   7: 1280.457 ops/s
# Warmup Iteration   8: 1266.197 ops/s
# Warmup Iteration   9: 1289.769 ops/s
# Warmup Iteration  10: 1289.821 ops/s
# Warmup Iteration  11: 1283.512 ops/s
# Warmup Iteration  12: 1282.444 ops/s
# Warmup Iteration  13: 1291.949 ops/s
# Warmup Iteration  14: 1254.898 ops/s
# Warmup Iteration  15: 1265.540 ops/s
# Warmup Iteration  16: 1064.767 ops/s
# Warmup Iteration  17: 1022.359 ops/s
# Warmup Iteration  18: 1315.952 ops/s
# Warmup Iteration  19: 1307.419 ops/s
# Warmup Iteration  20: 1317.549 ops/s
# Warmup Iteration  21: 1308.519 ops/s
# Warmup Iteration  22: 1307.995 ops/s
# Warmup Iteration  23: 1296.176 ops/s
# Warmup Iteration  24: 1322.620 ops/s
# Warmup Iteration  25: 1324.900 ops/s
# Warmup Iteration  26: 1293.985 ops/s
# Warmup Iteration  27: 1310.631 ops/s
# Warmup Iteration  28: 1310.073 ops/s
# Warmup Iteration  29: 1316.272 ops/s
# Warmup Iteration  30: 1314.390 ops/s
Iteration   1: 1295.707 ops/s
Iteration   2: 1307.693 ops/s
Iteration   3: 1319.910 ops/s
Iteration   4: 1317.828 ops/s
Iteration   5: 1310.874 ops/s
Iteration   6: 1315.618 ops/s
Iteration   7: 1314.065 ops/s
Iteration   8: 1319.227 ops/s
Iteration   9: 1305.848 ops/s
Iteration  10: 1319.093 ops/s
Iteration  11: 1316.523 ops/s
Iteration  12: 1312.415 ops/s
Iteration  13: 1313.932 ops/s
Iteration  14: 1318.993 ops/s
Iteration  15: 1328.586 ops/s
Iteration  16: 1319.882 ops/s
Iteration  17: 1319.163 ops/s
Iteration  18: 1318.248 ops/s
Iteration  19: 1303.969 ops/s
Iteration  20: 1313.663 ops/s
Iteration  21: 1317.846 ops/s
Iteration  22: 1320.992 ops/s
Iteration  23: 1310.929 ops/s
Iteration  24: 1315.722 ops/s
Iteration  25: 1313.772 ops/s
Iteration  26: 1312.426 ops/s
Iteration  27: 1320.961 ops/s
Iteration  28: 1318.258 ops/s
Iteration  29: 1337.488 ops/s
Iteration  30: 1332.015 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_deletesSelfReferencingParentId":
  1316.388 ±(99.9%) 5.312 ops/s [Average]
  (min, avg, max) = (1295.707, 1316.388, 1337.488), stdev = 7.950
  CI (99.9%): [1311.076, 1321.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt     Score   Error  Units
TraceTest._Benchmark.benchmark_deletesSelfReferencingParentId  thrpt   30  1316.388 ± 5.312  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_doesntMergeSharedSpansOnDifferentIPs$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_doesntMergeSharedSpansOnDifferentIPs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315.735 ops/s
# Warmup Iteration   2: 403.898 ops/s
# Warmup Iteration   3: 403.279 ops/s
# Warmup Iteration   4: 535.467 ops/s
# Warmup Iteration   5: 649.640 ops/s
# Warmup Iteration   6: 643.175 ops/s
# Warmup Iteration   7: 636.851 ops/s
# Warmup Iteration   8: 646.839 ops/s
# Warmup Iteration   9: 655.397 ops/s
# Warmup Iteration  10: 660.856 ops/s
# Warmup Iteration  11: 661.551 ops/s
# Warmup Iteration  12: 653.260 ops/s
# Warmup Iteration  13: 652.730 ops/s
# Warmup Iteration  14: 656.985 ops/s
# Warmup Iteration  15: 659.972 ops/s
# Warmup Iteration  16: 471.958 ops/s
# Warmup Iteration  17: 624.995 ops/s
# Warmup Iteration  18: 676.626 ops/s
# Warmup Iteration  19: 676.911 ops/s
# Warmup Iteration  20: 681.505 ops/s
# Warmup Iteration  21: 678.495 ops/s
# Warmup Iteration  22: 674.890 ops/s
# Warmup Iteration  23: 673.226 ops/s
# Warmup Iteration  24: 676.582 ops/s
# Warmup Iteration  25: 684.600 ops/s
# Warmup Iteration  26: 681.051 ops/s
# Warmup Iteration  27: 682.114 ops/s
# Warmup Iteration  28: 680.098 ops/s
# Warmup Iteration  29: 675.509 ops/s
# Warmup Iteration  30: 676.884 ops/s
Iteration   1: 682.180 ops/s
Iteration   2: 678.980 ops/s
Iteration   3: 677.037 ops/s
Iteration   4: 669.821 ops/s
Iteration   5: 672.437 ops/s
Iteration   6: 675.811 ops/s
Iteration   7: 674.012 ops/s
Iteration   8: 679.504 ops/s
Iteration   9: 678.374 ops/s
Iteration  10: 682.202 ops/s
Iteration  11: 679.220 ops/s
Iteration  12: 680.045 ops/s
Iteration  13: 679.723 ops/s
Iteration  14: 672.631 ops/s
Iteration  15: 680.191 ops/s
Iteration  16: 682.586 ops/s
Iteration  17: 682.978 ops/s
Iteration  18: 683.404 ops/s
Iteration  19: 685.872 ops/s
Iteration  20: 680.539 ops/s
Iteration  21: 670.967 ops/s
Iteration  22: 671.910 ops/s
Iteration  23: 680.317 ops/s
Iteration  24: 677.417 ops/s
Iteration  25: 670.085 ops/s
Iteration  26: 680.416 ops/s
Iteration  27: 671.696 ops/s
Iteration  28: 668.289 ops/s
Iteration  29: 674.078 ops/s
Iteration  30: 666.685 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_doesntMergeSharedSpansOnDifferentIPs":
  676.980 ±(99.9%) 3.399 ops/s [Average]
  (min, avg, max) = (666.685, 676.980, 685.872), stdev = 5.088
  CI (99.9%): [673.581, 680.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt    Score   Error  Units
TraceTest._Benchmark.benchmark_doesntMergeSharedSpansOnDifferentIPs  thrpt   30  676.980 ± 3.399  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_mergesIncompleteEndpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_mergesIncompleteEndpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 407.840 ops/s
# Warmup Iteration   2: 524.456 ops/s
# Warmup Iteration   3: 528.888 ops/s
# Warmup Iteration   4: 759.646 ops/s
# Warmup Iteration   5: 913.607 ops/s
# Warmup Iteration   6: 937.409 ops/s
# Warmup Iteration   7: 949.857 ops/s
# Warmup Iteration   8: 916.198 ops/s
# Warmup Iteration   9: 939.771 ops/s
# Warmup Iteration  10: 940.551 ops/s
# Warmup Iteration  11: 935.468 ops/s
# Warmup Iteration  12: 932.922 ops/s
# Warmup Iteration  13: 941.675 ops/s
# Warmup Iteration  14: 949.815 ops/s
# Warmup Iteration  15: 761.830 ops/s
# Warmup Iteration  16: 757.787 ops/s
# Warmup Iteration  17: 944.050 ops/s
# Warmup Iteration  18: 925.921 ops/s
# Warmup Iteration  19: 932.043 ops/s
# Warmup Iteration  20: 940.996 ops/s
# Warmup Iteration  21: 937.239 ops/s
# Warmup Iteration  22: 944.537 ops/s
# Warmup Iteration  23: 927.265 ops/s
# Warmup Iteration  24: 944.956 ops/s
# Warmup Iteration  25: 938.123 ops/s
# Warmup Iteration  26: 938.216 ops/s
# Warmup Iteration  27: 941.366 ops/s
# Warmup Iteration  28: 943.206 ops/s
# Warmup Iteration  29: 950.622 ops/s
# Warmup Iteration  30: 945.490 ops/s
Iteration   1: 937.193 ops/s
Iteration   2: 945.548 ops/s
Iteration   3: 945.354 ops/s
Iteration   4: 947.829 ops/s
Iteration   5: 940.506 ops/s
Iteration   6: 936.893 ops/s
Iteration   7: 948.720 ops/s
Iteration   8: 953.424 ops/s
Iteration   9: 934.512 ops/s
Iteration  10: 941.479 ops/s
Iteration  11: 932.634 ops/s
Iteration  12: 924.575 ops/s
Iteration  13: 923.778 ops/s
Iteration  14: 926.434 ops/s
Iteration  15: 937.169 ops/s
Iteration  16: 939.340 ops/s
Iteration  17: 943.438 ops/s
Iteration  18: 948.786 ops/s
Iteration  19: 946.687 ops/s
Iteration  20: 937.040 ops/s
Iteration  21: 939.218 ops/s
Iteration  22: 940.125 ops/s
Iteration  23: 931.382 ops/s
Iteration  24: 939.495 ops/s
Iteration  25: 934.802 ops/s
Iteration  26: 935.503 ops/s
Iteration  27: 944.476 ops/s
Iteration  28: 949.197 ops/s
Iteration  29: 942.793 ops/s
Iteration  30: 934.052 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_mergesIncompleteEndpoints":
  939.413 ±(99.9%) 4.927 ops/s [Average]
  (min, avg, max) = (923.778, 939.413, 953.424), stdev = 7.375
  CI (99.9%): [934.485, 944.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt    Score   Error  Units
TraceTest._Benchmark.benchmark_mergesIncompleteEndpoints  thrpt   30  939.413 ± 4.927  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_mergesWhenMissingEndpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_mergesWhenMissingEndpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 414.191 ops/s
# Warmup Iteration   2: 533.108 ops/s
# Warmup Iteration   3: 527.682 ops/s
# Warmup Iteration   4: 712.496 ops/s
# Warmup Iteration   5: 875.624 ops/s
# Warmup Iteration   6: 863.948 ops/s
# Warmup Iteration   7: 860.522 ops/s
# Warmup Iteration   8: 874.157 ops/s
# Warmup Iteration   9: 889.365 ops/s
# Warmup Iteration  10: 884.786 ops/s
# Warmup Iteration  11: 880.587 ops/s
# Warmup Iteration  12: 890.602 ops/s
# Warmup Iteration  13: 894.870 ops/s
# Warmup Iteration  14: 881.153 ops/s
# Warmup Iteration  15: 878.167 ops/s
# Warmup Iteration  16: 567.014 ops/s
# Warmup Iteration  17: 876.167 ops/s
# Warmup Iteration  18: 907.460 ops/s
# Warmup Iteration  19: 918.573 ops/s
# Warmup Iteration  20: 919.591 ops/s
# Warmup Iteration  21: 912.470 ops/s
# Warmup Iteration  22: 910.772 ops/s
# Warmup Iteration  23: 904.991 ops/s
# Warmup Iteration  24: 915.786 ops/s
# Warmup Iteration  25: 914.035 ops/s
# Warmup Iteration  26: 914.981 ops/s
# Warmup Iteration  27: 908.063 ops/s
# Warmup Iteration  28: 909.657 ops/s
# Warmup Iteration  29: 917.503 ops/s
# Warmup Iteration  30: 910.488 ops/s
Iteration   1: 904.714 ops/s
Iteration   2: 909.880 ops/s
Iteration   3: 908.940 ops/s
Iteration   4: 907.302 ops/s
Iteration   5: 914.662 ops/s
Iteration   6: 907.372 ops/s
Iteration   7: 919.309 ops/s
Iteration   8: 912.310 ops/s
Iteration   9: 904.458 ops/s
Iteration  10: 911.664 ops/s
Iteration  11: 910.750 ops/s
Iteration  12: 916.028 ops/s
Iteration  13: 893.262 ops/s
Iteration  14: 893.727 ops/s
Iteration  15: 888.308 ops/s
Iteration  16: 898.229 ops/s
Iteration  17: 904.478 ops/s
Iteration  18: 898.597 ops/s
Iteration  19: 896.024 ops/s
Iteration  20: 892.614 ops/s
Iteration  21: 896.006 ops/s
Iteration  22: 903.097 ops/s
Iteration  23: 891.561 ops/s
Iteration  24: 894.908 ops/s
Iteration  25: 892.529 ops/s
Iteration  26: 895.630 ops/s
Iteration  27: 906.837 ops/s
Iteration  28: 902.968 ops/s
Iteration  29: 896.591 ops/s
Iteration  30: 888.770 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_mergesWhenMissingEndpoints":
  902.051 ±(99.9%) 5.762 ops/s [Average]
  (min, avg, max) = (888.308, 902.051, 919.309), stdev = 8.624
  CI (99.9%): [896.289, 907.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt    Score   Error  Units
TraceTest._Benchmark.benchmark_mergesWhenMissingEndpoints  thrpt   30  902.051 ± 5.762  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_putsRandomDataOnFirstSpanWithEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_putsRandomDataOnFirstSpanWithEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 303.248 ops/s
# Warmup Iteration   2: 391.732 ops/s
# Warmup Iteration   3: 401.995 ops/s
# Warmup Iteration   4: 530.257 ops/s
# Warmup Iteration   5: 649.883 ops/s
# Warmup Iteration   6: 642.028 ops/s
# Warmup Iteration   7: 667.552 ops/s
# Warmup Iteration   8: 662.530 ops/s
# Warmup Iteration   9: 659.198 ops/s
# Warmup Iteration  10: 665.264 ops/s
# Warmup Iteration  11: 665.014 ops/s
# Warmup Iteration  12: 647.959 ops/s
# Warmup Iteration  13: 643.540 ops/s
# Warmup Iteration  14: 646.586 ops/s
# Warmup Iteration  15: 647.330 ops/s
# Warmup Iteration  16: 462.307 ops/s
# Warmup Iteration  17: 611.634 ops/s
# Warmup Iteration  18: 679.428 ops/s
# Warmup Iteration  19: 681.961 ops/s
# Warmup Iteration  20: 674.685 ops/s
# Warmup Iteration  21: 673.879 ops/s
# Warmup Iteration  22: 679.657 ops/s
# Warmup Iteration  23: 680.199 ops/s
# Warmup Iteration  24: 679.205 ops/s
# Warmup Iteration  25: 675.014 ops/s
# Warmup Iteration  26: 683.979 ops/s
# Warmup Iteration  27: 683.115 ops/s
# Warmup Iteration  28: 683.998 ops/s
# Warmup Iteration  29: 679.861 ops/s
# Warmup Iteration  30: 675.844 ops/s
Iteration   1: 680.331 ops/s
Iteration   2: 671.125 ops/s
Iteration   3: 673.156 ops/s
Iteration   4: 670.049 ops/s
Iteration   5: 668.420 ops/s
Iteration   6: 675.615 ops/s
Iteration   7: 678.540 ops/s
Iteration   8: 681.458 ops/s
Iteration   9: 675.971 ops/s
Iteration  10: 677.367 ops/s
Iteration  11: 678.425 ops/s
Iteration  12: 673.719 ops/s
Iteration  13: 670.998 ops/s
Iteration  14: 663.979 ops/s
Iteration  15: 669.225 ops/s
Iteration  16: 675.753 ops/s
Iteration  17: 676.698 ops/s
Iteration  18: 672.733 ops/s
Iteration  19: 673.815 ops/s
Iteration  20: 680.061 ops/s
Iteration  21: 680.131 ops/s
Iteration  22: 678.741 ops/s
Iteration  23: 679.197 ops/s
Iteration  24: 677.065 ops/s
Iteration  25: 679.151 ops/s
Iteration  26: 685.856 ops/s
Iteration  27: 681.888 ops/s
Iteration  28: 672.192 ops/s
Iteration  29: 667.574 ops/s
Iteration  30: 671.232 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_putsRandomDataOnFirstSpanWithEndpoint":
  675.349 ±(99.9%) 3.315 ops/s [Average]
  (min, avg, max) = (663.979, 675.349, 685.856), stdev = 4.962
  CI (99.9%): [672.034, 678.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt    Score   Error  Units
TraceTest._Benchmark.benchmark_putsRandomDataOnFirstSpanWithEndpoint  thrpt   30  675.349 ± 3.315  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_worksWhenMissingParentSpan$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.TraceTest._Benchmark.benchmark_worksWhenMissingParentSpan

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154391.271 ops/s
# Warmup Iteration   2: 206825.099 ops/s
# Warmup Iteration   3: 461310.375 ops/s
# Warmup Iteration   4: 456676.387 ops/s
# Warmup Iteration   5: 461482.918 ops/s
# Warmup Iteration   6: 458697.874 ops/s
# Warmup Iteration   7: 374490.418 ops/s
# Warmup Iteration   8: 398503.113 ops/s
# Warmup Iteration   9: 457183.773 ops/s
# Warmup Iteration  10: 457861.110 ops/s
# Warmup Iteration  11: 456565.338 ops/s
# Warmup Iteration  12: 457114.155 ops/s
# Warmup Iteration  13: 461959.502 ops/s
# Warmup Iteration  14: 456951.991 ops/s
# Warmup Iteration  15: 456686.720 ops/s
# Warmup Iteration  16: 458399.791 ops/s
# Warmup Iteration  17: 457363.010 ops/s
# Warmup Iteration  18: 461335.421 ops/s
# Warmup Iteration  19: 460873.904 ops/s
# Warmup Iteration  20: 459754.991 ops/s
# Warmup Iteration  21: 459956.019 ops/s
# Warmup Iteration  22: 456469.865 ops/s
# Warmup Iteration  23: 462603.568 ops/s
# Warmup Iteration  24: 460101.846 ops/s
# Warmup Iteration  25: 457999.288 ops/s
# Warmup Iteration  26: 457651.566 ops/s
# Warmup Iteration  27: 459490.897 ops/s
# Warmup Iteration  28: 460160.392 ops/s
# Warmup Iteration  29: 457924.394 ops/s
# Warmup Iteration  30: 460810.742 ops/s
Iteration   1: 462663.775 ops/s
Iteration   2: 463957.934 ops/s
Iteration   3: 459310.653 ops/s
Iteration   4: 459523.362 ops/s
Iteration   5: 461130.003 ops/s
Iteration   6: 464708.264 ops/s
Iteration   7: 462200.044 ops/s
Iteration   8: 461775.155 ops/s
Iteration   9: 461527.823 ops/s
Iteration  10: 460361.995 ops/s
Iteration  11: 456420.850 ops/s
Iteration  12: 460127.880 ops/s
Iteration  13: 459438.365 ops/s
Iteration  14: 458238.187 ops/s
Iteration  15: 455916.085 ops/s
Iteration  16: 463249.423 ops/s
Iteration  17: 460154.976 ops/s
Iteration  18: 457652.299 ops/s
Iteration  19: 459448.078 ops/s
Iteration  20: 461029.361 ops/s
Iteration  21: 458028.633 ops/s
Iteration  22: 457035.336 ops/s
Iteration  23: 452706.837 ops/s
Iteration  24: 455825.033 ops/s
Iteration  25: 460828.240 ops/s
Iteration  26: 464904.822 ops/s
Iteration  27: 456273.515 ops/s
Iteration  28: 457580.389 ops/s
Iteration  29: 456056.505 ops/s
Iteration  30: 459215.707 ops/s


Result "zipkin2.internal.TraceTest._Benchmark.benchmark_worksWhenMissingParentSpan":
  459576.318 ±(99.9%) 1947.114 ops/s [Average]
  (min, avg, max) = (452706.837, 459576.318, 464904.822), stdev = 2914.348
  CI (99.9%): [457629.204, 461523.431] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
TraceTest._Benchmark.benchmark_worksWhenMissingParentSpan  thrpt   30  459576.318 ± 1947.114  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64314.919 ops/s
# Warmup Iteration   2: 91486.255 ops/s
# Warmup Iteration   3: 164363.031 ops/s
# Warmup Iteration   4: 174280.666 ops/s
# Warmup Iteration   5: 171858.138 ops/s
# Warmup Iteration   6: 173625.833 ops/s
# Warmup Iteration   7: 171557.961 ops/s
# Warmup Iteration   8: 174426.049 ops/s
# Warmup Iteration   9: 134046.984 ops/s
# Warmup Iteration  10: 177017.893 ops/s
# Warmup Iteration  11: 174941.962 ops/s
# Warmup Iteration  12: 174546.363 ops/s
# Warmup Iteration  13: 176890.490 ops/s
# Warmup Iteration  14: 175273.036 ops/s
# Warmup Iteration  15: 175394.396 ops/s
# Warmup Iteration  16: 175392.886 ops/s
# Warmup Iteration  17: 176244.984 ops/s
# Warmup Iteration  18: 176553.002 ops/s
# Warmup Iteration  19: 175968.467 ops/s
# Warmup Iteration  20: 176068.181 ops/s
# Warmup Iteration  21: 174872.598 ops/s
# Warmup Iteration  22: 175647.922 ops/s
# Warmup Iteration  23: 177561.154 ops/s
# Warmup Iteration  24: 176982.845 ops/s
# Warmup Iteration  25: 176399.933 ops/s
# Warmup Iteration  26: 175850.929 ops/s
# Warmup Iteration  27: 174389.845 ops/s
# Warmup Iteration  28: 176814.460 ops/s
# Warmup Iteration  29: 175152.814 ops/s
# Warmup Iteration  30: 176162.613 ops/s
Iteration   1: 175848.161 ops/s
Iteration   2: 177444.904 ops/s
Iteration   3: 174910.434 ops/s
Iteration   4: 175328.211 ops/s
Iteration   5: 176099.241 ops/s
Iteration   6: 174882.469 ops/s
Iteration   7: 177624.118 ops/s
Iteration   8: 175385.375 ops/s
Iteration   9: 174589.172 ops/s
Iteration  10: 174722.399 ops/s
Iteration  11: 174896.202 ops/s
Iteration  12: 174915.266 ops/s
Iteration  13: 175392.983 ops/s
Iteration  14: 174557.466 ops/s
Iteration  15: 177338.235 ops/s
Iteration  16: 176411.630 ops/s
Iteration  17: 175668.067 ops/s
Iteration  18: 176015.692 ops/s
Iteration  19: 175675.076 ops/s
Iteration  20: 175841.142 ops/s
Iteration  21: 176653.084 ops/s
Iteration  22: 177039.083 ops/s
Iteration  23: 178193.953 ops/s
Iteration  24: 176047.144 ops/s
Iteration  25: 177811.440 ops/s
Iteration  26: 177975.986 ops/s
Iteration  27: 176796.951 ops/s
Iteration  28: 177145.316 ops/s
Iteration  29: 176853.837 ops/s
Iteration  30: 177654.428 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints":
  176190.582 ±(99.9%) 749.783 ops/s [Average]
  (min, avg, max) = (174557.466, 176190.582, 178193.953), stdev = 1122.240
  CI (99.9%): [175440.799, 176940.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints  thrpt   30  176190.582 ± 749.783  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95874.729 ops/s
# Warmup Iteration   2: 135483.503 ops/s
# Warmup Iteration   3: 195526.307 ops/s
# Warmup Iteration   4: 242453.435 ops/s
# Warmup Iteration   5: 243928.629 ops/s
# Warmup Iteration   6: 244513.446 ops/s
# Warmup Iteration   7: 241556.854 ops/s
# Warmup Iteration   8: 244712.475 ops/s
# Warmup Iteration   9: 241754.631 ops/s
# Warmup Iteration  10: 211888.408 ops/s
# Warmup Iteration  11: 210580.247 ops/s
# Warmup Iteration  12: 245516.598 ops/s
# Warmup Iteration  13: 246294.005 ops/s
# Warmup Iteration  14: 245231.087 ops/s
# Warmup Iteration  15: 246325.987 ops/s
# Warmup Iteration  16: 245004.411 ops/s
# Warmup Iteration  17: 242594.538 ops/s
# Warmup Iteration  18: 244464.628 ops/s
# Warmup Iteration  19: 242726.249 ops/s
# Warmup Iteration  20: 242757.799 ops/s
# Warmup Iteration  21: 242705.148 ops/s
# Warmup Iteration  22: 243693.480 ops/s
# Warmup Iteration  23: 243813.285 ops/s
# Warmup Iteration  24: 244997.944 ops/s
# Warmup Iteration  25: 244964.506 ops/s
# Warmup Iteration  26: 244336.805 ops/s
# Warmup Iteration  27: 243993.170 ops/s
# Warmup Iteration  28: 244720.787 ops/s
# Warmup Iteration  29: 244212.175 ops/s
# Warmup Iteration  30: 242124.256 ops/s
Iteration   1: 243550.782 ops/s
Iteration   2: 242964.922 ops/s
Iteration   3: 244960.316 ops/s
Iteration   4: 245583.785 ops/s
Iteration   5: 245563.564 ops/s
Iteration   6: 244418.962 ops/s
Iteration   7: 242680.890 ops/s
Iteration   8: 243860.867 ops/s
Iteration   9: 244519.974 ops/s
Iteration  10: 244916.720 ops/s
Iteration  11: 243115.923 ops/s
Iteration  12: 242572.439 ops/s
Iteration  13: 244592.689 ops/s
Iteration  14: 243042.930 ops/s
Iteration  15: 245689.053 ops/s
Iteration  16: 242230.073 ops/s
Iteration  17: 243260.762 ops/s
Iteration  18: 242174.326 ops/s
Iteration  19: 243681.226 ops/s
Iteration  20: 244548.608 ops/s
Iteration  21: 242245.609 ops/s
Iteration  22: 243981.016 ops/s
Iteration  23: 243825.469 ops/s
Iteration  24: 244663.738 ops/s
Iteration  25: 245524.452 ops/s
Iteration  26: 242848.755 ops/s
Iteration  27: 242893.975 ops/s
Iteration  28: 244723.543 ops/s
Iteration  29: 244323.791 ops/s
Iteration  30: 244162.794 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_sizeInBytes":
  243904.065 ±(99.9%) 716.463 ops/s [Average]
  (min, avg, max) = (242174.326, 243904.065, 245689.053), stdev = 1072.369
  CI (99.9%): [243187.602, 244620.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_sizeInBytes  thrpt   30  243904.065 ± 716.463  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_skipsTimestampAndDuration_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_skipsTimestampAndDuration_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42109.833 ops/s
# Warmup Iteration   2: 74369.063 ops/s
# Warmup Iteration   3: 120738.860 ops/s
# Warmup Iteration   4: 143927.491 ops/s
# Warmup Iteration   5: 143821.092 ops/s
# Warmup Iteration   6: 144130.553 ops/s
# Warmup Iteration   7: 145547.269 ops/s
# Warmup Iteration   8: 144065.110 ops/s
# Warmup Iteration   9: 107880.465 ops/s
# Warmup Iteration  10: 145128.404 ops/s
# Warmup Iteration  11: 144832.069 ops/s
# Warmup Iteration  12: 146711.923 ops/s
# Warmup Iteration  13: 145293.773 ops/s
# Warmup Iteration  14: 145101.040 ops/s
# Warmup Iteration  15: 145618.644 ops/s
# Warmup Iteration  16: 146505.066 ops/s
# Warmup Iteration  17: 146929.771 ops/s
# Warmup Iteration  18: 146129.268 ops/s
# Warmup Iteration  19: 145207.205 ops/s
# Warmup Iteration  20: 145885.904 ops/s
# Warmup Iteration  21: 146144.263 ops/s
# Warmup Iteration  22: 145619.610 ops/s
# Warmup Iteration  23: 145519.953 ops/s
# Warmup Iteration  24: 144866.245 ops/s
# Warmup Iteration  25: 144537.335 ops/s
# Warmup Iteration  26: 144138.679 ops/s
# Warmup Iteration  27: 144528.222 ops/s
# Warmup Iteration  28: 144053.251 ops/s
# Warmup Iteration  29: 144586.925 ops/s
# Warmup Iteration  30: 145866.857 ops/s
Iteration   1: 145895.495 ops/s
Iteration   2: 145446.348 ops/s
Iteration   3: 146302.886 ops/s
Iteration   4: 144908.305 ops/s
Iteration   5: 146023.441 ops/s
Iteration   6: 144965.199 ops/s
Iteration   7: 144246.231 ops/s
Iteration   8: 145813.159 ops/s
Iteration   9: 146065.179 ops/s
Iteration  10: 146333.299 ops/s
Iteration  11: 145217.151 ops/s
Iteration  12: 143945.305 ops/s
Iteration  13: 144801.739 ops/s
Iteration  14: 145906.634 ops/s
Iteration  15: 145832.339 ops/s
Iteration  16: 145297.326 ops/s
Iteration  17: 146108.684 ops/s
Iteration  18: 144580.660 ops/s
Iteration  19: 145454.272 ops/s
Iteration  20: 146591.812 ops/s
Iteration  21: 146410.459 ops/s
Iteration  22: 146090.975 ops/s
Iteration  23: 145385.303 ops/s
Iteration  24: 146872.488 ops/s
Iteration  25: 147766.513 ops/s
Iteration  26: 146877.050 ops/s
Iteration  27: 145102.605 ops/s
Iteration  28: 146036.166 ops/s
Iteration  29: 146574.938 ops/s
Iteration  30: 145640.253 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_skipsTimestampAndDuration_shared":
  145749.740 ±(99.9%) 554.380 ops/s [Average]
  (min, avg, max) = (143945.305, 145749.740, 147766.513), stdev = 829.771
  CI (99.9%): [145195.360, 146304.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_skipsTimestampAndDuration_shared  thrpt   30  145749.740 ± 554.380  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62913.315 ops/s
# Warmup Iteration   2: 92455.956 ops/s
# Warmup Iteration   3: 158744.160 ops/s
# Warmup Iteration   4: 170513.979 ops/s
# Warmup Iteration   5: 170048.525 ops/s
# Warmup Iteration   6: 170167.976 ops/s
# Warmup Iteration   7: 170166.383 ops/s
# Warmup Iteration   8: 170452.425 ops/s
# Warmup Iteration   9: 126666.503 ops/s
# Warmup Iteration  10: 171626.202 ops/s
# Warmup Iteration  11: 171151.663 ops/s
# Warmup Iteration  12: 171737.201 ops/s
# Warmup Iteration  13: 171418.438 ops/s
# Warmup Iteration  14: 171967.718 ops/s
# Warmup Iteration  15: 170444.658 ops/s
# Warmup Iteration  16: 171102.926 ops/s
# Warmup Iteration  17: 172974.735 ops/s
# Warmup Iteration  18: 173394.623 ops/s
# Warmup Iteration  19: 172637.705 ops/s
# Warmup Iteration  20: 172853.450 ops/s
# Warmup Iteration  21: 173117.090 ops/s
# Warmup Iteration  22: 174108.841 ops/s
# Warmup Iteration  23: 172639.880 ops/s
# Warmup Iteration  24: 172549.866 ops/s
# Warmup Iteration  25: 171488.134 ops/s
# Warmup Iteration  26: 173220.832 ops/s
# Warmup Iteration  27: 175077.323 ops/s
# Warmup Iteration  28: 173168.577 ops/s
# Warmup Iteration  29: 173113.199 ops/s
# Warmup Iteration  30: 172683.369 ops/s
Iteration   1: 173850.335 ops/s
Iteration   2: 172615.607 ops/s
Iteration   3: 173146.980 ops/s
Iteration   4: 173888.235 ops/s
Iteration   5: 171130.875 ops/s
Iteration   6: 172513.461 ops/s
Iteration   7: 172733.260 ops/s
Iteration   8: 174409.481 ops/s
Iteration   9: 172171.616 ops/s
Iteration  10: 171191.891 ops/s
Iteration  11: 172609.360 ops/s
Iteration  12: 172376.292 ops/s
Iteration  13: 171879.651 ops/s
Iteration  14: 173882.481 ops/s
Iteration  15: 171480.541 ops/s
Iteration  16: 172055.274 ops/s
Iteration  17: 173474.789 ops/s
Iteration  18: 172909.558 ops/s
Iteration  19: 172615.468 ops/s
Iteration  20: 171108.160 ops/s
Iteration  21: 172735.784 ops/s
Iteration  22: 173004.038 ops/s
Iteration  23: 173081.654 ops/s
Iteration  24: 174205.653 ops/s
Iteration  25: 172585.271 ops/s
Iteration  26: 171816.913 ops/s
Iteration  27: 172364.781 ops/s
Iteration  28: 170880.178 ops/s
Iteration  29: 171023.872 ops/s
Iteration  30: 173282.985 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations":
  172567.482 ±(99.9%) 651.010 ops/s [Average]
  (min, avg, max) = (170880.178, 172567.482, 174409.481), stdev = 974.401
  CI (99.9%): [171916.471, 173218.492] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations  thrpt   30  172567.482 ± 651.010  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writes128BitTraceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writes128BitTraceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70708.348 ops/s
# Warmup Iteration   2: 95940.015 ops/s
# Warmup Iteration   3: 175294.686 ops/s
# Warmup Iteration   4: 179609.865 ops/s
# Warmup Iteration   5: 181215.163 ops/s
# Warmup Iteration   6: 180166.686 ops/s
# Warmup Iteration   7: 180959.421 ops/s
# Warmup Iteration   8: 171063.829 ops/s
# Warmup Iteration   9: 148243.107 ops/s
# Warmup Iteration  10: 183131.775 ops/s
# Warmup Iteration  11: 183113.302 ops/s
# Warmup Iteration  12: 184440.487 ops/s
# Warmup Iteration  13: 182178.782 ops/s
# Warmup Iteration  14: 183085.338 ops/s
# Warmup Iteration  15: 182991.661 ops/s
# Warmup Iteration  16: 183614.688 ops/s
# Warmup Iteration  17: 183286.355 ops/s
# Warmup Iteration  18: 183627.885 ops/s
# Warmup Iteration  19: 183249.510 ops/s
# Warmup Iteration  20: 182696.250 ops/s
# Warmup Iteration  21: 181015.276 ops/s
# Warmup Iteration  22: 181748.156 ops/s
# Warmup Iteration  23: 182912.061 ops/s
# Warmup Iteration  24: 183607.304 ops/s
# Warmup Iteration  25: 182764.844 ops/s
# Warmup Iteration  26: 183715.837 ops/s
# Warmup Iteration  27: 183785.728 ops/s
# Warmup Iteration  28: 182007.217 ops/s
# Warmup Iteration  29: 183579.534 ops/s
# Warmup Iteration  30: 182249.470 ops/s
Iteration   1: 181737.763 ops/s
Iteration   2: 182038.749 ops/s
Iteration   3: 182340.103 ops/s
Iteration   4: 181023.093 ops/s
Iteration   5: 182300.605 ops/s
Iteration   6: 181583.415 ops/s
Iteration   7: 183271.678 ops/s
Iteration   8: 180664.124 ops/s
Iteration   9: 181521.820 ops/s
Iteration  10: 181983.700 ops/s
Iteration  11: 182972.282 ops/s
Iteration  12: 181434.622 ops/s
Iteration  13: 182988.434 ops/s
Iteration  14: 181817.435 ops/s
Iteration  15: 183185.006 ops/s
Iteration  16: 181230.942 ops/s
Iteration  17: 181710.415 ops/s
Iteration  18: 181739.144 ops/s
Iteration  19: 183298.334 ops/s
Iteration  20: 183483.488 ops/s
Iteration  21: 183893.332 ops/s
Iteration  22: 184335.672 ops/s
Iteration  23: 183409.846 ops/s
Iteration  24: 184732.035 ops/s
Iteration  25: 184275.955 ops/s
Iteration  26: 183107.438 ops/s
Iteration  27: 183900.630 ops/s
Iteration  28: 181734.815 ops/s
Iteration  29: 182870.919 ops/s
Iteration  30: 182190.787 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writes128BitTraceId":
  182559.219 ±(99.9%) 716.344 ops/s [Average]
  (min, avg, max) = (180664.124, 182559.219, 184732.035), stdev = 1072.190
  CI (99.9%): [181842.876, 183275.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writes128BitTraceId  thrpt   30  182559.219 ± 716.344  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49737.879 ops/s
# Warmup Iteration   2: 87036.802 ops/s
# Warmup Iteration   3: 150904.333 ops/s
# Warmup Iteration   4: 163083.292 ops/s
# Warmup Iteration   5: 162096.474 ops/s
# Warmup Iteration   6: 164811.075 ops/s
# Warmup Iteration   7: 163043.751 ops/s
# Warmup Iteration   8: 152253.931 ops/s
# Warmup Iteration   9: 132842.717 ops/s
# Warmup Iteration  10: 166036.631 ops/s
# Warmup Iteration  11: 166220.775 ops/s
# Warmup Iteration  12: 166105.894 ops/s
# Warmup Iteration  13: 163970.467 ops/s
# Warmup Iteration  14: 166066.074 ops/s
# Warmup Iteration  15: 165670.867 ops/s
# Warmup Iteration  16: 164138.925 ops/s
# Warmup Iteration  17: 165552.155 ops/s
# Warmup Iteration  18: 165026.283 ops/s
# Warmup Iteration  19: 163878.415 ops/s
# Warmup Iteration  20: 165405.209 ops/s
# Warmup Iteration  21: 165921.616 ops/s
# Warmup Iteration  22: 165616.833 ops/s
# Warmup Iteration  23: 165157.731 ops/s
# Warmup Iteration  24: 165089.704 ops/s
# Warmup Iteration  25: 165733.737 ops/s
# Warmup Iteration  26: 165766.739 ops/s
# Warmup Iteration  27: 165069.210 ops/s
# Warmup Iteration  28: 165057.180 ops/s
# Warmup Iteration  29: 165007.923 ops/s
# Warmup Iteration  30: 166804.490 ops/s
Iteration   1: 165755.331 ops/s
Iteration   2: 164909.767 ops/s
Iteration   3: 165570.519 ops/s
Iteration   4: 164754.649 ops/s
Iteration   5: 163560.975 ops/s
Iteration   6: 165054.555 ops/s
Iteration   7: 162755.695 ops/s
Iteration   8: 164042.054 ops/s
Iteration   9: 164371.190 ops/s
Iteration  10: 164937.421 ops/s
Iteration  11: 165787.737 ops/s
Iteration  12: 163975.326 ops/s
Iteration  13: 164403.152 ops/s
Iteration  14: 163592.706 ops/s
Iteration  15: 165755.572 ops/s
Iteration  16: 165755.856 ops/s
Iteration  17: 165172.582 ops/s
Iteration  18: 164728.383 ops/s
Iteration  19: 163763.813 ops/s
Iteration  20: 165997.570 ops/s
Iteration  21: 165471.874 ops/s
Iteration  22: 165264.935 ops/s
Iteration  23: 166602.567 ops/s
Iteration  24: 165174.716 ops/s
Iteration  25: 162741.738 ops/s
Iteration  26: 164682.600 ops/s
Iteration  27: 163674.303 ops/s
Iteration  28: 165869.430 ops/s
Iteration  29: 165202.372 ops/s
Iteration  30: 164929.300 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client":
  164808.623 ±(99.9%) 641.323 ops/s [Average]
  (min, avg, max) = (162741.738, 164808.623, 166602.567), stdev = 959.902
  CI (99.9%): [164167.300, 165449.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client  thrpt   30  164808.623 ± 641.323  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52200.918 ops/s
# Warmup Iteration   2: 88157.595 ops/s
# Warmup Iteration   3: 149614.347 ops/s
# Warmup Iteration   4: 161692.850 ops/s
# Warmup Iteration   5: 160844.679 ops/s
# Warmup Iteration   6: 162304.600 ops/s
# Warmup Iteration   7: 160933.114 ops/s
# Warmup Iteration   8: 162269.563 ops/s
# Warmup Iteration   9: 124600.241 ops/s
# Warmup Iteration  10: 162530.347 ops/s
# Warmup Iteration  11: 163431.873 ops/s
# Warmup Iteration  12: 162652.542 ops/s
# Warmup Iteration  13: 164180.273 ops/s
# Warmup Iteration  14: 162813.758 ops/s
# Warmup Iteration  15: 163485.304 ops/s
# Warmup Iteration  16: 163634.974 ops/s
# Warmup Iteration  17: 162114.181 ops/s
# Warmup Iteration  18: 163159.851 ops/s
# Warmup Iteration  19: 164667.890 ops/s
# Warmup Iteration  20: 162814.972 ops/s
# Warmup Iteration  21: 163086.242 ops/s
# Warmup Iteration  22: 162293.092 ops/s
# Warmup Iteration  23: 162281.738 ops/s
# Warmup Iteration  24: 162578.238 ops/s
# Warmup Iteration  25: 162057.011 ops/s
# Warmup Iteration  26: 163458.012 ops/s
# Warmup Iteration  27: 162544.749 ops/s
# Warmup Iteration  28: 162199.426 ops/s
# Warmup Iteration  29: 162395.013 ops/s
# Warmup Iteration  30: 162473.614 ops/s
Iteration   1: 162876.954 ops/s
Iteration   2: 164019.631 ops/s
Iteration   3: 163068.376 ops/s
Iteration   4: 162770.071 ops/s
Iteration   5: 162562.313 ops/s
Iteration   6: 162947.609 ops/s
Iteration   7: 163569.681 ops/s
Iteration   8: 162292.775 ops/s
Iteration   9: 164142.769 ops/s
Iteration  10: 162624.519 ops/s
Iteration  11: 162744.351 ops/s
Iteration  12: 165236.781 ops/s
Iteration  13: 164152.861 ops/s
Iteration  14: 162401.733 ops/s
Iteration  15: 161150.678 ops/s
Iteration  16: 163207.410 ops/s
Iteration  17: 162749.388 ops/s
Iteration  18: 162734.624 ops/s
Iteration  19: 162421.015 ops/s
Iteration  20: 163367.686 ops/s
Iteration  21: 163316.751 ops/s
Iteration  22: 165567.768 ops/s
Iteration  23: 164200.649 ops/s
Iteration  24: 163330.312 ops/s
Iteration  25: 164821.252 ops/s
Iteration  26: 164330.787 ops/s
Iteration  27: 164261.565 ops/s
Iteration  28: 165160.803 ops/s
Iteration  29: 163569.367 ops/s
Iteration  30: 162542.503 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer":
  163404.766 ±(99.9%) 675.124 ops/s [Average]
  (min, avg, max) = (161150.678, 163404.766, 165567.768), stdev = 1010.495
  CI (99.9%): [162729.641, 164079.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer  thrpt   30  163404.766 ± 675.124  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51733.281 ops/s
# Warmup Iteration   2: 88983.380 ops/s
# Warmup Iteration   3: 150247.085 ops/s
# Warmup Iteration   4: 164787.244 ops/s
# Warmup Iteration   5: 164511.118 ops/s
# Warmup Iteration   6: 166403.552 ops/s
# Warmup Iteration   7: 165187.632 ops/s
# Warmup Iteration   8: 159986.208 ops/s
# Warmup Iteration   9: 134163.175 ops/s
# Warmup Iteration  10: 166233.642 ops/s
# Warmup Iteration  11: 168202.118 ops/s
# Warmup Iteration  12: 167223.056 ops/s
# Warmup Iteration  13: 165290.265 ops/s
# Warmup Iteration  14: 165816.820 ops/s
# Warmup Iteration  15: 165824.106 ops/s
# Warmup Iteration  16: 167044.151 ops/s
# Warmup Iteration  17: 166603.260 ops/s
# Warmup Iteration  18: 164933.511 ops/s
# Warmup Iteration  19: 166910.328 ops/s
# Warmup Iteration  20: 165732.555 ops/s
# Warmup Iteration  21: 166098.661 ops/s
# Warmup Iteration  22: 166212.889 ops/s
# Warmup Iteration  23: 165046.757 ops/s
# Warmup Iteration  24: 166073.571 ops/s
# Warmup Iteration  25: 165631.085 ops/s
# Warmup Iteration  26: 166190.028 ops/s
# Warmup Iteration  27: 164660.507 ops/s
# Warmup Iteration  28: 164805.294 ops/s
# Warmup Iteration  29: 164913.829 ops/s
# Warmup Iteration  30: 165317.053 ops/s
Iteration   1: 165447.618 ops/s
Iteration   2: 167470.128 ops/s
Iteration   3: 164491.904 ops/s
Iteration   4: 165610.864 ops/s
Iteration   5: 166566.403 ops/s
Iteration   6: 166304.953 ops/s
Iteration   7: 166116.524 ops/s
Iteration   8: 165596.792 ops/s
Iteration   9: 166605.737 ops/s
Iteration  10: 166979.109 ops/s
Iteration  11: 167452.456 ops/s
Iteration  12: 166170.592 ops/s
Iteration  13: 165399.179 ops/s
Iteration  14: 166243.875 ops/s
Iteration  15: 166400.339 ops/s
Iteration  16: 167263.103 ops/s
Iteration  17: 167790.467 ops/s
Iteration  18: 165903.318 ops/s
Iteration  19: 164340.322 ops/s
Iteration  20: 164333.494 ops/s
Iteration  21: 165900.699 ops/s
Iteration  22: 166392.574 ops/s
Iteration  23: 164354.422 ops/s
Iteration  24: 166132.980 ops/s
Iteration  25: 165714.990 ops/s
Iteration  26: 165848.441 ops/s
Iteration  27: 165132.286 ops/s
Iteration  28: 165472.170 ops/s
Iteration  29: 166404.078 ops/s
Iteration  30: 165491.903 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer":
  165977.724 ±(99.9%) 611.598 ops/s [Average]
  (min, avg, max) = (164333.494, 165977.724, 167790.467), stdev = 915.412
  CI (99.9%): [165366.126, 166589.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer  thrpt   30  165977.724 ± 611.598  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54583.723 ops/s
# Warmup Iteration   2: 86604.505 ops/s
# Warmup Iteration   3: 151286.935 ops/s
# Warmup Iteration   4: 158435.999 ops/s
# Warmup Iteration   5: 160623.535 ops/s
# Warmup Iteration   6: 160988.254 ops/s
# Warmup Iteration   7: 159539.888 ops/s
# Warmup Iteration   8: 148118.119 ops/s
# Warmup Iteration   9: 133274.477 ops/s
# Warmup Iteration  10: 162270.313 ops/s
# Warmup Iteration  11: 163127.738 ops/s
# Warmup Iteration  12: 163361.615 ops/s
# Warmup Iteration  13: 163464.501 ops/s
# Warmup Iteration  14: 161983.956 ops/s
# Warmup Iteration  15: 162277.060 ops/s
# Warmup Iteration  16: 163175.234 ops/s
# Warmup Iteration  17: 162499.757 ops/s
# Warmup Iteration  18: 160446.426 ops/s
# Warmup Iteration  19: 160900.693 ops/s
# Warmup Iteration  20: 161811.855 ops/s
# Warmup Iteration  21: 162730.230 ops/s
# Warmup Iteration  22: 161641.008 ops/s
# Warmup Iteration  23: 160487.648 ops/s
# Warmup Iteration  24: 161491.228 ops/s
# Warmup Iteration  25: 163597.201 ops/s
# Warmup Iteration  26: 163161.903 ops/s
# Warmup Iteration  27: 162169.134 ops/s
# Warmup Iteration  28: 161874.320 ops/s
# Warmup Iteration  29: 162039.022 ops/s
# Warmup Iteration  30: 161899.372 ops/s
Iteration   1: 162534.355 ops/s
Iteration   2: 162847.804 ops/s
Iteration   3: 162876.263 ops/s
Iteration   4: 161248.541 ops/s
Iteration   5: 161815.744 ops/s
Iteration   6: 162180.211 ops/s
Iteration   7: 162023.938 ops/s
Iteration   8: 160387.717 ops/s
Iteration   9: 161551.840 ops/s
Iteration  10: 162587.230 ops/s
Iteration  11: 163814.215 ops/s
Iteration  12: 161879.083 ops/s
Iteration  13: 162218.296 ops/s
Iteration  14: 162080.464 ops/s
Iteration  15: 161384.844 ops/s
Iteration  16: 162432.120 ops/s
Iteration  17: 161413.857 ops/s
Iteration  18: 162910.860 ops/s
Iteration  19: 162984.904 ops/s
Iteration  20: 163792.167 ops/s
Iteration  21: 163667.915 ops/s
Iteration  22: 162263.143 ops/s
Iteration  23: 162393.879 ops/s
Iteration  24: 159477.619 ops/s
Iteration  25: 162798.690 ops/s
Iteration  26: 163071.124 ops/s
Iteration  27: 160790.882 ops/s
Iteration  28: 161442.303 ops/s
Iteration  29: 161189.000 ops/s
Iteration  30: 161275.862 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server":
  162111.162 ±(99.9%) 663.114 ops/s [Average]
  (min, avg, max) = (159477.619, 162111.162, 163814.215), stdev = 992.518
  CI (99.9%): [161448.048, 162774.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server  thrpt   30  162111.162 ± 663.114  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52145.547 ops/s
# Warmup Iteration   2: 82396.880 ops/s
# Warmup Iteration   3: 146115.854 ops/s
# Warmup Iteration   4: 153886.992 ops/s
# Warmup Iteration   5: 156697.503 ops/s
# Warmup Iteration   6: 156974.360 ops/s
# Warmup Iteration   7: 156567.067 ops/s
# Warmup Iteration   8: 135717.960 ops/s
# Warmup Iteration   9: 138432.942 ops/s
# Warmup Iteration  10: 159615.396 ops/s
# Warmup Iteration  11: 158423.444 ops/s
# Warmup Iteration  12: 158779.457 ops/s
# Warmup Iteration  13: 157453.686 ops/s
# Warmup Iteration  14: 158292.143 ops/s
# Warmup Iteration  15: 158707.554 ops/s
# Warmup Iteration  16: 158496.552 ops/s
# Warmup Iteration  17: 158045.050 ops/s
# Warmup Iteration  18: 158400.051 ops/s
# Warmup Iteration  19: 158691.145 ops/s
# Warmup Iteration  20: 159124.537 ops/s
# Warmup Iteration  21: 159584.849 ops/s
# Warmup Iteration  22: 157562.297 ops/s
# Warmup Iteration  23: 159094.366 ops/s
# Warmup Iteration  24: 158979.028 ops/s
# Warmup Iteration  25: 158842.677 ops/s
# Warmup Iteration  26: 158438.089 ops/s
# Warmup Iteration  27: 159068.292 ops/s
# Warmup Iteration  28: 158514.808 ops/s
# Warmup Iteration  29: 159055.461 ops/s
# Warmup Iteration  30: 158831.529 ops/s
Iteration   1: 159271.302 ops/s
Iteration   2: 158277.676 ops/s
Iteration   3: 157530.677 ops/s
Iteration   4: 158477.416 ops/s
Iteration   5: 158565.182 ops/s
Iteration   6: 157181.442 ops/s
Iteration   7: 157916.971 ops/s
Iteration   8: 157869.127 ops/s
Iteration   9: 158239.815 ops/s
Iteration  10: 158805.915 ops/s
Iteration  11: 158413.088 ops/s
Iteration  12: 157997.541 ops/s
Iteration  13: 155985.515 ops/s
Iteration  14: 156952.858 ops/s
Iteration  15: 156368.277 ops/s
Iteration  16: 158020.018 ops/s
Iteration  17: 157141.696 ops/s
Iteration  18: 157064.180 ops/s
Iteration  19: 157387.939 ops/s
Iteration  20: 157666.250 ops/s
Iteration  21: 158805.996 ops/s
Iteration  22: 157325.884 ops/s
Iteration  23: 157179.707 ops/s
Iteration  24: 156932.789 ops/s
Iteration  25: 157072.651 ops/s
Iteration  26: 158098.336 ops/s
Iteration  27: 158836.939 ops/s
Iteration  28: 158465.575 ops/s
Iteration  29: 158104.431 ops/s
Iteration  30: 158751.181 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client":
  157823.546 ±(99.9%) 530.625 ops/s [Average]
  (min, avg, max) = (155985.515, 157823.546, 159271.302), stdev = 794.215
  CI (99.9%): [157292.921, 158354.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client  thrpt   30  157823.546 ± 530.625  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39960.076 ops/s
# Warmup Iteration   2: 77178.861 ops/s
# Warmup Iteration   3: 132087.894 ops/s
# Warmup Iteration   4: 152462.759 ops/s
# Warmup Iteration   5: 151231.470 ops/s
# Warmup Iteration   6: 153597.009 ops/s
# Warmup Iteration   7: 152633.199 ops/s
# Warmup Iteration   8: 138185.988 ops/s
# Warmup Iteration   9: 131384.084 ops/s
# Warmup Iteration  10: 156086.940 ops/s
# Warmup Iteration  11: 156000.301 ops/s
# Warmup Iteration  12: 155467.066 ops/s
# Warmup Iteration  13: 155709.688 ops/s
# Warmup Iteration  14: 155041.826 ops/s
# Warmup Iteration  15: 155868.943 ops/s
# Warmup Iteration  16: 154759.111 ops/s
# Warmup Iteration  17: 153386.227 ops/s
# Warmup Iteration  18: 151970.509 ops/s
# Warmup Iteration  19: 152046.646 ops/s
# Warmup Iteration  20: 153996.343 ops/s
# Warmup Iteration  21: 152278.208 ops/s
# Warmup Iteration  22: 153111.424 ops/s
# Warmup Iteration  23: 152856.120 ops/s
# Warmup Iteration  24: 151753.289 ops/s
# Warmup Iteration  25: 152832.113 ops/s
# Warmup Iteration  26: 153097.623 ops/s
# Warmup Iteration  27: 153728.942 ops/s
# Warmup Iteration  28: 153893.157 ops/s
# Warmup Iteration  29: 154562.246 ops/s
# Warmup Iteration  30: 153389.576 ops/s
Iteration   1: 154260.610 ops/s
Iteration   2: 151548.233 ops/s
Iteration   3: 152814.860 ops/s
Iteration   4: 152212.803 ops/s
Iteration   5: 152319.613 ops/s
Iteration   6: 153071.311 ops/s
Iteration   7: 152855.076 ops/s
Iteration   8: 152763.637 ops/s
Iteration   9: 152734.778 ops/s
Iteration  10: 152211.845 ops/s
Iteration  11: 152482.100 ops/s
Iteration  12: 151897.664 ops/s
Iteration  13: 151633.003 ops/s
Iteration  14: 154068.893 ops/s
Iteration  15: 153820.674 ops/s
Iteration  16: 154368.945 ops/s
Iteration  17: 153705.488 ops/s
Iteration  18: 152599.176 ops/s
Iteration  19: 154124.132 ops/s
Iteration  20: 154472.293 ops/s
Iteration  21: 154505.360 ops/s
Iteration  22: 152495.990 ops/s
Iteration  23: 152585.135 ops/s
Iteration  24: 152975.370 ops/s
Iteration  25: 152756.971 ops/s
Iteration  26: 153185.693 ops/s
Iteration  27: 153853.237 ops/s
Iteration  28: 152914.025 ops/s
Iteration  29: 152625.847 ops/s
Iteration  30: 153312.748 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer":
  153039.184 ±(99.9%) 560.804 ops/s [Average]
  (min, avg, max) = (151548.233, 153039.184, 154505.360), stdev = 839.385
  CI (99.9%): [152478.380, 153599.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer  thrpt   30  153039.184 ± 560.804  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46391.118 ops/s
# Warmup Iteration   2: 80530.764 ops/s
# Warmup Iteration   3: 141925.344 ops/s
# Warmup Iteration   4: 151492.075 ops/s
# Warmup Iteration   5: 150736.503 ops/s
# Warmup Iteration   6: 149954.991 ops/s
# Warmup Iteration   7: 150880.327 ops/s
# Warmup Iteration   8: 133859.857 ops/s
# Warmup Iteration   9: 133296.447 ops/s
# Warmup Iteration  10: 154852.664 ops/s
# Warmup Iteration  11: 154391.227 ops/s
# Warmup Iteration  12: 153544.671 ops/s
# Warmup Iteration  13: 154359.679 ops/s
# Warmup Iteration  14: 154294.583 ops/s
# Warmup Iteration  15: 155264.928 ops/s
# Warmup Iteration  16: 154380.547 ops/s
# Warmup Iteration  17: 155016.074 ops/s
# Warmup Iteration  18: 155887.531 ops/s
# Warmup Iteration  19: 155737.763 ops/s
# Warmup Iteration  20: 155635.500 ops/s
# Warmup Iteration  21: 155896.476 ops/s
# Warmup Iteration  22: 155929.585 ops/s
# Warmup Iteration  23: 155740.424 ops/s
# Warmup Iteration  24: 156036.139 ops/s
# Warmup Iteration  25: 155758.722 ops/s
# Warmup Iteration  26: 154906.446 ops/s
# Warmup Iteration  27: 155246.921 ops/s
# Warmup Iteration  28: 152836.266 ops/s
# Warmup Iteration  29: 155280.526 ops/s
# Warmup Iteration  30: 155335.994 ops/s
Iteration   1: 154805.941 ops/s
Iteration   2: 153849.986 ops/s
Iteration   3: 154358.124 ops/s
Iteration   4: 155035.056 ops/s
Iteration   5: 153218.006 ops/s
Iteration   6: 155411.481 ops/s
Iteration   7: 154954.815 ops/s
Iteration   8: 156218.058 ops/s
Iteration   9: 154599.393 ops/s
Iteration  10: 155337.017 ops/s
Iteration  11: 154025.978 ops/s
Iteration  12: 154218.180 ops/s
Iteration  13: 154263.583 ops/s
Iteration  14: 154745.030 ops/s
Iteration  15: 154333.177 ops/s
Iteration  16: 154390.105 ops/s
Iteration  17: 154603.822 ops/s
Iteration  18: 154566.353 ops/s
Iteration  19: 154845.136 ops/s
Iteration  20: 155099.313 ops/s
Iteration  21: 154322.173 ops/s
Iteration  22: 155128.001 ops/s
Iteration  23: 155019.241 ops/s
Iteration  24: 153730.077 ops/s
Iteration  25: 153959.247 ops/s
Iteration  26: 154742.631 ops/s
Iteration  27: 154369.027 ops/s
Iteration  28: 153096.176 ops/s
Iteration  29: 155251.795 ops/s
Iteration  30: 156965.373 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer":
  154648.743 ±(99.9%) 522.350 ops/s [Average]
  (min, avg, max) = (153096.176, 154648.743, 156965.373), stdev = 781.828
  CI (99.9%): [154126.393, 155171.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer  thrpt   30  154648.743 ± 522.350  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42917.484 ops/s
# Warmup Iteration   2: 59866.361 ops/s
# Warmup Iteration   3: 99436.302 ops/s
# Warmup Iteration   4: 142669.846 ops/s
# Warmup Iteration   5: 134981.564 ops/s
# Warmup Iteration   6: 138463.626 ops/s
# Warmup Iteration   7: 139043.655 ops/s
# Warmup Iteration   8: 139444.930 ops/s
# Warmup Iteration   9: 108098.239 ops/s
# Warmup Iteration  10: 138514.739 ops/s
# Warmup Iteration  11: 145446.778 ops/s
# Warmup Iteration  12: 145272.567 ops/s
# Warmup Iteration  13: 144729.827 ops/s
# Warmup Iteration  14: 144564.860 ops/s
# Warmup Iteration  15: 144636.113 ops/s
# Warmup Iteration  16: 143842.029 ops/s
# Warmup Iteration  17: 145672.501 ops/s
# Warmup Iteration  18: 145330.897 ops/s
# Warmup Iteration  19: 145743.524 ops/s
# Warmup Iteration  20: 146388.120 ops/s
# Warmup Iteration  21: 145160.794 ops/s
# Warmup Iteration  22: 145530.072 ops/s
# Warmup Iteration  23: 145787.842 ops/s
# Warmup Iteration  24: 143927.745 ops/s
# Warmup Iteration  25: 144229.018 ops/s
# Warmup Iteration  26: 144051.310 ops/s
# Warmup Iteration  27: 144544.559 ops/s
# Warmup Iteration  28: 144174.038 ops/s
# Warmup Iteration  29: 145326.562 ops/s
# Warmup Iteration  30: 145501.515 ops/s
Iteration   1: 144188.641 ops/s
Iteration   2: 144308.242 ops/s
Iteration   3: 145185.918 ops/s
Iteration   4: 144236.274 ops/s
Iteration   5: 145234.575 ops/s
Iteration   6: 143897.954 ops/s
Iteration   7: 142863.612 ops/s
Iteration   8: 144614.775 ops/s
Iteration   9: 144882.185 ops/s
Iteration  10: 144170.836 ops/s
Iteration  11: 143958.271 ops/s
Iteration  12: 145052.250 ops/s
Iteration  13: 147073.948 ops/s
Iteration  14: 143006.310 ops/s
Iteration  15: 145187.437 ops/s
Iteration  16: 145967.201 ops/s
Iteration  17: 143405.935 ops/s
Iteration  18: 145896.052 ops/s
Iteration  19: 145641.410 ops/s
Iteration  20: 145306.954 ops/s
Iteration  21: 145485.775 ops/s
Iteration  22: 143747.880 ops/s
Iteration  23: 143808.697 ops/s
Iteration  24: 143050.133 ops/s
Iteration  25: 145583.491 ops/s
Iteration  26: 145536.496 ops/s
Iteration  27: 143803.712 ops/s
Iteration  28: 145070.683 ops/s
Iteration  29: 147251.030 ops/s
Iteration  30: 145399.570 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server":
  144760.542 ±(99.9%) 736.266 ops/s [Average]
  (min, avg, max) = (142863.612, 144760.542, 147251.030), stdev = 1102.009
  CI (99.9%): [144024.275, 145496.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server  thrpt   30  144760.542 ± 736.266  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_client$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_client

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48551.356 ops/s
# Warmup Iteration   2: 80103.738 ops/s
# Warmup Iteration   3: 144179.910 ops/s
# Warmup Iteration   4: 159323.923 ops/s
# Warmup Iteration   5: 156906.120 ops/s
# Warmup Iteration   6: 158275.130 ops/s
# Warmup Iteration   7: 158699.600 ops/s
# Warmup Iteration   8: 142983.295 ops/s
# Warmup Iteration   9: 132010.557 ops/s
# Warmup Iteration  10: 157646.069 ops/s
# Warmup Iteration  11: 156275.559 ops/s
# Warmup Iteration  12: 157362.844 ops/s
# Warmup Iteration  13: 156244.817 ops/s
# Warmup Iteration  14: 158042.935 ops/s
# Warmup Iteration  15: 157536.473 ops/s
# Warmup Iteration  16: 158798.616 ops/s
# Warmup Iteration  17: 160646.908 ops/s
# Warmup Iteration  18: 160310.837 ops/s
# Warmup Iteration  19: 160593.508 ops/s
# Warmup Iteration  20: 162734.856 ops/s
# Warmup Iteration  21: 162309.085 ops/s
# Warmup Iteration  22: 160402.012 ops/s
# Warmup Iteration  23: 163328.000 ops/s
# Warmup Iteration  24: 162258.032 ops/s
# Warmup Iteration  25: 161026.314 ops/s
# Warmup Iteration  26: 162486.256 ops/s
# Warmup Iteration  27: 161538.337 ops/s
# Warmup Iteration  28: 161892.814 ops/s
# Warmup Iteration  29: 162611.343 ops/s
# Warmup Iteration  30: 162919.793 ops/s
Iteration   1: 162380.271 ops/s
Iteration   2: 162506.989 ops/s
Iteration   3: 161769.508 ops/s
Iteration   4: 162190.327 ops/s
Iteration   5: 162367.921 ops/s
Iteration   6: 162727.608 ops/s
Iteration   7: 161868.486 ops/s
Iteration   8: 161986.213 ops/s
Iteration   9: 162432.438 ops/s
Iteration  10: 161958.689 ops/s
Iteration  11: 161163.585 ops/s
Iteration  12: 162585.091 ops/s
Iteration  13: 161212.107 ops/s
Iteration  14: 161474.710 ops/s
Iteration  15: 161416.775 ops/s
Iteration  16: 160227.458 ops/s
Iteration  17: 162284.928 ops/s
Iteration  18: 162348.847 ops/s
Iteration  19: 162359.662 ops/s
Iteration  20: 158265.224 ops/s
Iteration  21: 159061.636 ops/s
Iteration  22: 160939.268 ops/s
Iteration  23: 161845.596 ops/s
Iteration  24: 162617.170 ops/s
Iteration  25: 161014.632 ops/s
Iteration  26: 161859.483 ops/s
Iteration  27: 162397.637 ops/s
Iteration  28: 161961.645 ops/s
Iteration  29: 163343.421 ops/s
Iteration  30: 161880.145 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_client":
  161748.249 ±(99.9%) 705.052 ops/s [Average]
  (min, avg, max) = (158265.224, 161748.249, 163343.421), stdev = 1055.289
  CI (99.9%): [161043.197, 162453.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_client  thrpt   30  161748.249 ± 705.052  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_consumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_consumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45485.236 ops/s
# Warmup Iteration   2: 76435.080 ops/s
# Warmup Iteration   3: 120586.908 ops/s
# Warmup Iteration   4: 160213.781 ops/s
# Warmup Iteration   5: 165255.973 ops/s
# Warmup Iteration   6: 165125.279 ops/s
# Warmup Iteration   7: 165402.968 ops/s
# Warmup Iteration   8: 151084.875 ops/s
# Warmup Iteration   9: 138066.418 ops/s
# Warmup Iteration  10: 166420.757 ops/s
# Warmup Iteration  11: 166224.389 ops/s
# Warmup Iteration  12: 166275.354 ops/s
# Warmup Iteration  13: 166693.459 ops/s
# Warmup Iteration  14: 166132.001 ops/s
# Warmup Iteration  15: 165012.651 ops/s
# Warmup Iteration  16: 165766.668 ops/s
# Warmup Iteration  17: 164583.235 ops/s
# Warmup Iteration  18: 165984.613 ops/s
# Warmup Iteration  19: 165912.946 ops/s
# Warmup Iteration  20: 166164.373 ops/s
# Warmup Iteration  21: 164904.712 ops/s
# Warmup Iteration  22: 165512.011 ops/s
# Warmup Iteration  23: 166675.113 ops/s
# Warmup Iteration  24: 167037.462 ops/s
# Warmup Iteration  25: 167046.318 ops/s
# Warmup Iteration  26: 166664.633 ops/s
# Warmup Iteration  27: 165995.285 ops/s
# Warmup Iteration  28: 166579.202 ops/s
# Warmup Iteration  29: 167004.372 ops/s
# Warmup Iteration  30: 167067.362 ops/s
Iteration   1: 168485.931 ops/s
Iteration   2: 164647.015 ops/s
Iteration   3: 166064.497 ops/s
Iteration   4: 166590.962 ops/s
Iteration   5: 166194.216 ops/s
Iteration   6: 167253.761 ops/s
Iteration   7: 166536.649 ops/s
Iteration   8: 167454.265 ops/s
Iteration   9: 163854.753 ops/s
Iteration  10: 165052.328 ops/s
Iteration  11: 165061.318 ops/s
Iteration  12: 164706.461 ops/s
Iteration  13: 165369.638 ops/s
Iteration  14: 166312.973 ops/s
Iteration  15: 167519.513 ops/s
Iteration  16: 164303.789 ops/s
Iteration  17: 166725.545 ops/s
Iteration  18: 166447.933 ops/s
Iteration  19: 167000.261 ops/s
Iteration  20: 166997.124 ops/s
Iteration  21: 165948.269 ops/s
Iteration  22: 166498.805 ops/s
Iteration  23: 166117.299 ops/s
Iteration  24: 167216.192 ops/s
Iteration  25: 166420.567 ops/s
Iteration  26: 166293.223 ops/s
Iteration  27: 165925.796 ops/s
Iteration  28: 166911.273 ops/s
Iteration  29: 165877.573 ops/s
Iteration  30: 165441.732 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_consumer":
  166174.322 ±(99.9%) 691.794 ops/s [Average]
  (min, avg, max) = (163854.753, 166174.322, 168485.931), stdev = 1035.444
  CI (99.9%): [165482.528, 166866.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_consumer  thrpt   30  166174.322 ± 691.794  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_producer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_producer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47400.057 ops/s
# Warmup Iteration   2: 68716.133 ops/s
# Warmup Iteration   3: 95003.290 ops/s
# Warmup Iteration   4: 152506.264 ops/s
# Warmup Iteration   5: 161667.879 ops/s
# Warmup Iteration   6: 162348.977 ops/s
# Warmup Iteration   7: 161021.848 ops/s
# Warmup Iteration   8: 161844.763 ops/s
# Warmup Iteration   9: 123403.902 ops/s
# Warmup Iteration  10: 165177.162 ops/s
# Warmup Iteration  11: 164898.830 ops/s
# Warmup Iteration  12: 165656.725 ops/s
# Warmup Iteration  13: 165395.532 ops/s
# Warmup Iteration  14: 165684.448 ops/s
# Warmup Iteration  15: 165280.391 ops/s
# Warmup Iteration  16: 165987.038 ops/s
# Warmup Iteration  17: 164124.885 ops/s
# Warmup Iteration  18: 165066.228 ops/s
# Warmup Iteration  19: 165969.708 ops/s
# Warmup Iteration  20: 164035.707 ops/s
# Warmup Iteration  21: 163165.255 ops/s
# Warmup Iteration  22: 163780.132 ops/s
# Warmup Iteration  23: 164735.409 ops/s
# Warmup Iteration  24: 165293.126 ops/s
# Warmup Iteration  25: 165215.572 ops/s
# Warmup Iteration  26: 163916.325 ops/s
# Warmup Iteration  27: 163772.423 ops/s
# Warmup Iteration  28: 162299.073 ops/s
# Warmup Iteration  29: 163422.156 ops/s
# Warmup Iteration  30: 163038.812 ops/s
Iteration   1: 165179.217 ops/s
Iteration   2: 162644.103 ops/s
Iteration   3: 161306.498 ops/s
Iteration   4: 162609.120 ops/s
Iteration   5: 163205.444 ops/s
Iteration   6: 163482.507 ops/s
Iteration   7: 164725.039 ops/s
Iteration   8: 165786.394 ops/s
Iteration   9: 165310.618 ops/s
Iteration  10: 164823.496 ops/s
Iteration  11: 166478.946 ops/s
Iteration  12: 166132.625 ops/s
Iteration  13: 165926.735 ops/s
Iteration  14: 166767.206 ops/s
Iteration  15: 166029.683 ops/s
Iteration  16: 164060.121 ops/s
Iteration  17: 163466.661 ops/s
Iteration  18: 165576.325 ops/s
Iteration  19: 165515.171 ops/s
Iteration  20: 164444.414 ops/s
Iteration  21: 163575.180 ops/s
Iteration  22: 165121.471 ops/s
Iteration  23: 164304.764 ops/s
Iteration  24: 163670.398 ops/s
Iteration  25: 165067.198 ops/s
Iteration  26: 164358.777 ops/s
Iteration  27: 163271.426 ops/s
Iteration  28: 165270.852 ops/s
Iteration  29: 163922.192 ops/s
Iteration  30: 163679.547 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_producer":
  164523.738 ±(99.9%) 857.866 ops/s [Average]
  (min, avg, max) = (161306.498, 164523.738, 166767.206), stdev = 1284.013
  CI (99.9%): [163665.872, 165381.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_producer  thrpt   30  164523.738 ± 857.866  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_server$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_server

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51754.747 ops/s
# Warmup Iteration   2: 83530.739 ops/s
# Warmup Iteration   3: 153553.915 ops/s
# Warmup Iteration   4: 164840.462 ops/s
# Warmup Iteration   5: 166062.867 ops/s
# Warmup Iteration   6: 165963.356 ops/s
# Warmup Iteration   7: 165097.581 ops/s
# Warmup Iteration   8: 123092.436 ops/s
# Warmup Iteration   9: 167916.887 ops/s
# Warmup Iteration  10: 167097.664 ops/s
# Warmup Iteration  11: 166745.632 ops/s
# Warmup Iteration  12: 166638.917 ops/s
# Warmup Iteration  13: 166946.899 ops/s
# Warmup Iteration  14: 166424.598 ops/s
# Warmup Iteration  15: 165287.563 ops/s
# Warmup Iteration  16: 166197.641 ops/s
# Warmup Iteration  17: 161350.731 ops/s
# Warmup Iteration  18: 160627.992 ops/s
# Warmup Iteration  19: 162874.658 ops/s
# Warmup Iteration  20: 163281.955 ops/s
# Warmup Iteration  21: 163262.355 ops/s
# Warmup Iteration  22: 161521.286 ops/s
# Warmup Iteration  23: 164152.791 ops/s
# Warmup Iteration  24: 163536.895 ops/s
# Warmup Iteration  25: 161595.874 ops/s
# Warmup Iteration  26: 163561.110 ops/s
# Warmup Iteration  27: 164296.496 ops/s
# Warmup Iteration  28: 162643.997 ops/s
# Warmup Iteration  29: 164255.244 ops/s
# Warmup Iteration  30: 164642.638 ops/s
Iteration   1: 163466.281 ops/s
Iteration   2: 162903.607 ops/s
Iteration   3: 164205.788 ops/s
Iteration   4: 162877.010 ops/s
Iteration   5: 164105.216 ops/s
Iteration   6: 164125.795 ops/s
Iteration   7: 164785.908 ops/s
Iteration   8: 165381.335 ops/s
Iteration   9: 162980.689 ops/s
Iteration  10: 166002.818 ops/s
Iteration  11: 163694.068 ops/s
Iteration  12: 164940.602 ops/s
Iteration  13: 164471.705 ops/s
Iteration  14: 164187.119 ops/s
Iteration  15: 163614.830 ops/s
Iteration  16: 163902.206 ops/s
Iteration  17: 165053.820 ops/s
Iteration  18: 163472.094 ops/s
Iteration  19: 163293.020 ops/s
Iteration  20: 162091.066 ops/s
Iteration  21: 162458.283 ops/s
Iteration  22: 162177.414 ops/s
Iteration  23: 161850.750 ops/s
Iteration  24: 162597.754 ops/s
Iteration  25: 162380.894 ops/s
Iteration  26: 162902.262 ops/s
Iteration  27: 162904.177 ops/s
Iteration  28: 162824.336 ops/s
Iteration  29: 162259.495 ops/s
Iteration  30: 162693.646 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_server":
  163486.800 ±(99.9%) 711.065 ops/s [Average]
  (min, avg, max) = (161850.750, 163486.800, 166002.818), stdev = 1064.289
  CI (99.9%): [162775.734, 164197.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesCoreSendAnnotations_server  thrpt   30  163486.800 ± 711.065  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44953.752 ops/s
# Warmup Iteration   2: 70686.108 ops/s
# Warmup Iteration   3: 125801.303 ops/s
# Warmup Iteration   4: 164708.300 ops/s
# Warmup Iteration   5: 162871.738 ops/s
# Warmup Iteration   6: 164652.601 ops/s
# Warmup Iteration   7: 165681.192 ops/s
# Warmup Iteration   8: 164876.105 ops/s
# Warmup Iteration   9: 124594.538 ops/s
# Warmup Iteration  10: 166145.501 ops/s
# Warmup Iteration  11: 167342.987 ops/s
# Warmup Iteration  12: 166766.069 ops/s
# Warmup Iteration  13: 165685.236 ops/s
# Warmup Iteration  14: 166526.029 ops/s
# Warmup Iteration  15: 167053.890 ops/s
# Warmup Iteration  16: 166687.121 ops/s
# Warmup Iteration  17: 165668.772 ops/s
# Warmup Iteration  18: 166200.543 ops/s
# Warmup Iteration  19: 166676.350 ops/s
# Warmup Iteration  20: 165110.323 ops/s
# Warmup Iteration  21: 164898.661 ops/s
# Warmup Iteration  22: 165658.784 ops/s
# Warmup Iteration  23: 166810.669 ops/s
# Warmup Iteration  24: 166059.410 ops/s
# Warmup Iteration  25: 164998.313 ops/s
# Warmup Iteration  26: 166123.291 ops/s
# Warmup Iteration  27: 166375.480 ops/s
# Warmup Iteration  28: 165714.374 ops/s
# Warmup Iteration  29: 165825.637 ops/s
# Warmup Iteration  30: 164553.016 ops/s
Iteration   1: 165924.102 ops/s
Iteration   2: 165563.489 ops/s
Iteration   3: 166031.607 ops/s
Iteration   4: 165565.890 ops/s
Iteration   5: 166779.910 ops/s
Iteration   6: 165925.471 ops/s
Iteration   7: 166725.545 ops/s
Iteration   8: 166415.287 ops/s
Iteration   9: 165161.659 ops/s
Iteration  10: 165953.656 ops/s
Iteration  11: 165776.268 ops/s
Iteration  12: 164097.604 ops/s
Iteration  13: 166445.356 ops/s
Iteration  14: 164586.377 ops/s
Iteration  15: 165544.757 ops/s
Iteration  16: 165213.862 ops/s
Iteration  17: 164862.595 ops/s
Iteration  18: 164349.251 ops/s
Iteration  19: 164967.595 ops/s
Iteration  20: 165544.184 ops/s
Iteration  21: 165210.618 ops/s
Iteration  22: 164859.862 ops/s
Iteration  23: 165589.889 ops/s
Iteration  24: 165331.607 ops/s
Iteration  25: 164694.287 ops/s
Iteration  26: 165199.281 ops/s
Iteration  27: 165653.565 ops/s
Iteration  28: 165680.369 ops/s
Iteration  29: 165351.981 ops/s
Iteration  30: 164263.352 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName":
  165442.309 ±(99.9%) 457.502 ops/s [Average]
  (min, avg, max) = (164097.604, 165442.309, 166779.910), stdev = 684.768
  CI (99.9%): [164984.807, 165899.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName  thrpt   30  165442.309 ± 457.502  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptySpanName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptySpanName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 91929.685 ops/s
# Warmup Iteration   2: 145896.056 ops/s
# Warmup Iteration   3: 241415.388 ops/s
# Warmup Iteration   4: 238944.678 ops/s
# Warmup Iteration   5: 239480.210 ops/s
# Warmup Iteration   6: 238416.397 ops/s
# Warmup Iteration   7: 177826.020 ops/s
# Warmup Iteration   8: 242194.371 ops/s
# Warmup Iteration   9: 241910.563 ops/s
# Warmup Iteration  10: 242575.607 ops/s
# Warmup Iteration  11: 242240.450 ops/s
# Warmup Iteration  12: 240374.319 ops/s
# Warmup Iteration  13: 243373.987 ops/s
# Warmup Iteration  14: 243359.235 ops/s
# Warmup Iteration  15: 243243.818 ops/s
# Warmup Iteration  16: 242038.727 ops/s
# Warmup Iteration  17: 239580.903 ops/s
# Warmup Iteration  18: 240128.997 ops/s
# Warmup Iteration  19: 241167.262 ops/s
# Warmup Iteration  20: 243116.943 ops/s
# Warmup Iteration  21: 241940.314 ops/s
# Warmup Iteration  22: 242283.059 ops/s
# Warmup Iteration  23: 241203.271 ops/s
# Warmup Iteration  24: 240112.653 ops/s
# Warmup Iteration  25: 241293.063 ops/s
# Warmup Iteration  26: 242199.485 ops/s
# Warmup Iteration  27: 242326.714 ops/s
# Warmup Iteration  28: 243461.129 ops/s
# Warmup Iteration  29: 242527.948 ops/s
# Warmup Iteration  30: 242636.689 ops/s
Iteration   1: 241481.949 ops/s
Iteration   2: 242803.103 ops/s
Iteration   3: 241943.951 ops/s
Iteration   4: 242894.482 ops/s
Iteration   5: 242156.308 ops/s
Iteration   6: 243593.095 ops/s
Iteration   7: 243392.634 ops/s
Iteration   8: 241366.462 ops/s
Iteration   9: 238536.809 ops/s
Iteration  10: 238718.276 ops/s
Iteration  11: 238353.754 ops/s
Iteration  12: 242982.924 ops/s
Iteration  13: 241467.711 ops/s
Iteration  14: 241159.763 ops/s
Iteration  15: 238604.183 ops/s
Iteration  16: 243082.793 ops/s
Iteration  17: 242550.866 ops/s
Iteration  18: 242298.258 ops/s
Iteration  19: 241535.168 ops/s
Iteration  20: 238936.418 ops/s
Iteration  21: 240626.331 ops/s
Iteration  22: 241851.208 ops/s
Iteration  23: 240349.900 ops/s
Iteration  24: 240790.918 ops/s
Iteration  25: 240946.448 ops/s
Iteration  26: 242712.552 ops/s
Iteration  27: 241797.988 ops/s
Iteration  28: 241866.300 ops/s
Iteration  29: 242174.352 ops/s
Iteration  30: 238938.664 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptySpanName":
  241330.452 ±(99.9%) 1045.801 ops/s [Average]
  (min, avg, max) = (238353.754, 241330.452, 243593.095), stdev = 1565.306
  CI (99.9%): [240284.651, 242376.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesEmptySpanName  thrpt   30  241330.452 ± 1045.801  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57513.695 ops/s
# Warmup Iteration   2: 90905.131 ops/s
# Warmup Iteration   3: 160816.682 ops/s
# Warmup Iteration   4: 168708.861 ops/s
# Warmup Iteration   5: 168043.309 ops/s
# Warmup Iteration   6: 167714.993 ops/s
# Warmup Iteration   7: 166650.779 ops/s
# Warmup Iteration   8: 152250.870 ops/s
# Warmup Iteration   9: 145954.127 ops/s
# Warmup Iteration  10: 169927.111 ops/s
# Warmup Iteration  11: 169089.335 ops/s
# Warmup Iteration  12: 167631.253 ops/s
# Warmup Iteration  13: 170525.075 ops/s
# Warmup Iteration  14: 169617.983 ops/s
# Warmup Iteration  15: 169266.860 ops/s
# Warmup Iteration  16: 168457.446 ops/s
# Warmup Iteration  17: 168544.887 ops/s
# Warmup Iteration  18: 168897.799 ops/s
# Warmup Iteration  19: 168515.278 ops/s
# Warmup Iteration  20: 169474.011 ops/s
# Warmup Iteration  21: 168650.888 ops/s
# Warmup Iteration  22: 166926.193 ops/s
# Warmup Iteration  23: 169743.946 ops/s
# Warmup Iteration  24: 169406.174 ops/s
# Warmup Iteration  25: 169080.972 ops/s
# Warmup Iteration  26: 167953.503 ops/s
# Warmup Iteration  27: 168720.305 ops/s
# Warmup Iteration  28: 169880.928 ops/s
# Warmup Iteration  29: 168395.173 ops/s
# Warmup Iteration  30: 167748.920 ops/s
Iteration   1: 167707.039 ops/s
Iteration   2: 166036.934 ops/s
Iteration   3: 169096.049 ops/s
Iteration   4: 167794.568 ops/s
Iteration   5: 168968.887 ops/s
Iteration   6: 170636.884 ops/s
Iteration   7: 167941.249 ops/s
Iteration   8: 168786.100 ops/s
Iteration   9: 169350.706 ops/s
Iteration  10: 168311.418 ops/s
Iteration  11: 168558.858 ops/s
Iteration  12: 167928.129 ops/s
Iteration  13: 168770.636 ops/s
Iteration  14: 169024.072 ops/s
Iteration  15: 166509.718 ops/s
Iteration  16: 166488.124 ops/s
Iteration  17: 167026.011 ops/s
Iteration  18: 167458.167 ops/s
Iteration  19: 169263.277 ops/s
Iteration  20: 169230.648 ops/s
Iteration  21: 169183.270 ops/s
Iteration  22: 169736.429 ops/s
Iteration  23: 169462.301 ops/s
Iteration  24: 169413.995 ops/s
Iteration  25: 168075.631 ops/s
Iteration  26: 168812.167 ops/s
Iteration  27: 166929.329 ops/s
Iteration  28: 168692.212 ops/s
Iteration  29: 168409.741 ops/s
Iteration  30: 167721.279 ops/s


Result "zipkin2.internal.V1JsonSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration":
  168377.461 ±(99.9%) 715.420 ops/s [Average]
  (min, avg, max) = (166036.934, 168377.461, 170636.884), stdev = 1070.807
  CI (99.9%): [167662.041, 169092.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
V1JsonSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration  thrpt   30  168377.461 ± 715.420  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18160.139 ops/s
# Warmup Iteration   2: 20574.497 ops/s
# Warmup Iteration   3: 20556.958 ops/s
# Warmup Iteration   4: 20713.649 ops/s
# Warmup Iteration   5: 20620.711 ops/s
# Warmup Iteration   6: 20652.520 ops/s
# Warmup Iteration   7: 24442.674 ops/s
# Warmup Iteration   8: 24664.670 ops/s
# Warmup Iteration   9: 24575.057 ops/s
# Warmup Iteration  10: 24544.470 ops/s
# Warmup Iteration  11: 24453.853 ops/s
# Warmup Iteration  12: 24594.313 ops/s
# Warmup Iteration  13: 24710.012 ops/s
# Warmup Iteration  14: 24617.773 ops/s
# Warmup Iteration  15: 24742.227 ops/s
# Warmup Iteration  16: 24336.717 ops/s
# Warmup Iteration  17: 24508.016 ops/s
# Warmup Iteration  18: 24703.424 ops/s
# Warmup Iteration  19: 24612.636 ops/s
# Warmup Iteration  20: 24557.028 ops/s
# Warmup Iteration  21: 24478.212 ops/s
# Warmup Iteration  22: 24660.162 ops/s
# Warmup Iteration  23: 24707.690 ops/s
# Warmup Iteration  24: 24492.300 ops/s
# Warmup Iteration  25: 24558.264 ops/s
# Warmup Iteration  26: 24558.709 ops/s
# Warmup Iteration  27: 24708.402 ops/s
# Warmup Iteration  28: 24692.410 ops/s
# Warmup Iteration  29: 24649.115 ops/s
# Warmup Iteration  30: 24640.668 ops/s
Iteration   1: 24552.296 ops/s
Iteration   2: 24548.336 ops/s
Iteration   3: 24594.377 ops/s
Iteration   4: 24664.261 ops/s
Iteration   5: 24767.670 ops/s
Iteration   6: 24513.870 ops/s
Iteration   7: 24646.714 ops/s
Iteration   8: 24559.660 ops/s
Iteration   9: 24503.815 ops/s
Iteration  10: 24570.620 ops/s
Iteration  11: 24537.024 ops/s
Iteration  12: 22879.712 ops/s
Iteration  13: 20768.507 ops/s
Iteration  14: 20800.136 ops/s
Iteration  15: 20939.928 ops/s
Iteration  16: 22962.064 ops/s
Iteration  17: 24585.015 ops/s
Iteration  18: 24554.199 ops/s
Iteration  19: 24591.650 ops/s
Iteration  20: 24666.271 ops/s
Iteration  21: 24716.571 ops/s
Iteration  22: 24532.761 ops/s
Iteration  23: 24408.348 ops/s
Iteration  24: 24637.466 ops/s
Iteration  25: 24728.230 ops/s
Iteration  26: 24550.600 ops/s
Iteration  27: 24264.803 ops/s
Iteration  28: 24613.523 ops/s
Iteration  29: 24524.808 ops/s
Iteration  30: 24606.754 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints":
  24093.000 ±(99.9%) 791.581 ops/s [Average]
  (min, avg, max) = (20768.507, 24093.000, 24767.670), stdev = 1184.801
  CI (99.9%): [23301.419, 24884.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_annotationsHaveEndpoints  thrpt   30  24093.000 ± 791.581  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_doesntWriteAnnotationsWhenMissingTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_doesntWriteAnnotationsWhenMissingTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119692.875 ops/s
# Warmup Iteration   2: 173613.873 ops/s
# Warmup Iteration   3: 300885.461 ops/s
# Warmup Iteration   4: 297515.712 ops/s
# Warmup Iteration   5: 302874.427 ops/s
# Warmup Iteration   6: 300577.905 ops/s
# Warmup Iteration   7: 222065.175 ops/s
# Warmup Iteration   8: 296388.018 ops/s
# Warmup Iteration   9: 299386.962 ops/s
# Warmup Iteration  10: 298911.763 ops/s
# Warmup Iteration  11: 299707.184 ops/s
# Warmup Iteration  12: 300872.462 ops/s
# Warmup Iteration  13: 298078.272 ops/s
# Warmup Iteration  14: 298736.320 ops/s
# Warmup Iteration  15: 300250.423 ops/s
# Warmup Iteration  16: 299679.630 ops/s
# Warmup Iteration  17: 297497.239 ops/s
# Warmup Iteration  18: 300435.491 ops/s
# Warmup Iteration  19: 299014.275 ops/s
# Warmup Iteration  20: 300604.712 ops/s
# Warmup Iteration  21: 300257.298 ops/s
# Warmup Iteration  22: 300642.744 ops/s
# Warmup Iteration  23: 301119.130 ops/s
# Warmup Iteration  24: 300385.996 ops/s
# Warmup Iteration  25: 300483.431 ops/s
# Warmup Iteration  26: 301502.961 ops/s
# Warmup Iteration  27: 300882.966 ops/s
# Warmup Iteration  28: 298164.355 ops/s
# Warmup Iteration  29: 298355.421 ops/s
# Warmup Iteration  30: 297624.216 ops/s
Iteration   1: 300188.071 ops/s
Iteration   2: 297345.445 ops/s
Iteration   3: 298102.195 ops/s
Iteration   4: 300096.402 ops/s
Iteration   5: 296888.014 ops/s
Iteration   6: 301892.394 ops/s
Iteration   7: 299338.535 ops/s
Iteration   8: 294613.101 ops/s
Iteration   9: 299683.875 ops/s
Iteration  10: 296001.602 ops/s
Iteration  11: 296020.370 ops/s
Iteration  12: 296645.252 ops/s
Iteration  13: 294532.883 ops/s
Iteration  14: 296067.210 ops/s
Iteration  15: 300556.113 ops/s
Iteration  16: 300493.685 ops/s
Iteration  17: 298182.885 ops/s
Iteration  18: 294628.746 ops/s
Iteration  19: 297153.945 ops/s
Iteration  20: 296944.295 ops/s
Iteration  21: 295649.759 ops/s
Iteration  22: 296749.052 ops/s
Iteration  23: 298254.245 ops/s
Iteration  24: 298528.272 ops/s
Iteration  25: 301093.437 ops/s
Iteration  26: 300824.819 ops/s
Iteration  27: 301287.546 ops/s
Iteration  28: 301066.339 ops/s
Iteration  29: 303272.132 ops/s
Iteration  30: 300125.119 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_doesntWriteAnnotationsWhenMissingTimestamp":
  298407.525 ±(99.9%) 1599.017 ops/s [Average]
  (min, avg, max) = (294532.883, 298407.525, 303272.132), stdev = 2393.334
  CI (99.9%): [296808.507, 300006.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_doesntWriteAnnotationsWhenMissingTimestamp  thrpt   30  298407.525 ± 1599.017  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_endpoint_highPort$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_endpoint_highPort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 91365.055 ops/s
# Warmup Iteration   2: 118885.698 ops/s
# Warmup Iteration   3: 146791.897 ops/s
# Warmup Iteration   4: 189371.831 ops/s
# Warmup Iteration   5: 188943.406 ops/s
# Warmup Iteration   6: 189223.283 ops/s
# Warmup Iteration   7: 189298.649 ops/s
# Warmup Iteration   8: 188831.812 ops/s
# Warmup Iteration   9: 187780.093 ops/s
# Warmup Iteration  10: 186244.165 ops/s
# Warmup Iteration  11: 187375.831 ops/s
# Warmup Iteration  12: 155869.986 ops/s
# Warmup Iteration  13: 165166.543 ops/s
# Warmup Iteration  14: 188761.065 ops/s
# Warmup Iteration  15: 188288.907 ops/s
# Warmup Iteration  16: 188984.478 ops/s
# Warmup Iteration  17: 188583.124 ops/s
# Warmup Iteration  18: 187381.398 ops/s
# Warmup Iteration  19: 188262.272 ops/s
# Warmup Iteration  20: 186880.068 ops/s
# Warmup Iteration  21: 186672.877 ops/s
# Warmup Iteration  22: 187856.464 ops/s
# Warmup Iteration  23: 188410.704 ops/s
# Warmup Iteration  24: 187456.378 ops/s
# Warmup Iteration  25: 186682.024 ops/s
# Warmup Iteration  26: 186631.825 ops/s
# Warmup Iteration  27: 187801.852 ops/s
# Warmup Iteration  28: 186810.547 ops/s
# Warmup Iteration  29: 187387.539 ops/s
# Warmup Iteration  30: 187684.222 ops/s
Iteration   1: 187099.732 ops/s
Iteration   2: 187128.074 ops/s
Iteration   3: 187977.218 ops/s
Iteration   4: 187794.783 ops/s
Iteration   5: 187494.025 ops/s
Iteration   6: 187352.344 ops/s
Iteration   7: 187654.412 ops/s
Iteration   8: 188232.156 ops/s
Iteration   9: 187361.269 ops/s
Iteration  10: 187380.772 ops/s
Iteration  11: 187263.362 ops/s
Iteration  12: 187622.417 ops/s
Iteration  13: 186986.272 ops/s
Iteration  14: 189322.476 ops/s
Iteration  15: 187423.953 ops/s
Iteration  16: 186785.401 ops/s
Iteration  17: 186980.814 ops/s
Iteration  18: 187125.791 ops/s
Iteration  19: 187114.158 ops/s
Iteration  20: 187251.499 ops/s
Iteration  21: 187078.519 ops/s
Iteration  22: 187503.985 ops/s
Iteration  23: 188115.322 ops/s
Iteration  24: 188590.689 ops/s
Iteration  25: 187339.349 ops/s
Iteration  26: 185851.701 ops/s
Iteration  27: 186523.278 ops/s
Iteration  28: 187306.496 ops/s
Iteration  29: 186304.506 ops/s
Iteration  30: 185691.289 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_endpoint_highPort":
  187321.869 ±(99.9%) 484.492 ops/s [Average]
  (min, avg, max) = (185691.289, 187321.869, 189322.476), stdev = 725.165
  CI (99.9%): [186837.377, 187806.361] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_endpoint_highPort  thrpt   30  187321.869 ± 484.492  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17733.684 ops/s
# Warmup Iteration   2: 20127.048 ops/s
# Warmup Iteration   3: 20018.586 ops/s
# Warmup Iteration   4: 20174.718 ops/s
# Warmup Iteration   5: 20091.907 ops/s
# Warmup Iteration   6: 20453.564 ops/s
# Warmup Iteration   7: 24282.151 ops/s
# Warmup Iteration   8: 24177.426 ops/s
# Warmup Iteration   9: 24240.678 ops/s
# Warmup Iteration  10: 24255.786 ops/s
# Warmup Iteration  11: 24456.654 ops/s
# Warmup Iteration  12: 24260.613 ops/s
# Warmup Iteration  13: 24282.171 ops/s
# Warmup Iteration  14: 24236.983 ops/s
# Warmup Iteration  15: 24149.573 ops/s
# Warmup Iteration  16: 23731.263 ops/s
# Warmup Iteration  17: 24237.761 ops/s
# Warmup Iteration  18: 24196.060 ops/s
# Warmup Iteration  19: 24063.582 ops/s
# Warmup Iteration  20: 24190.318 ops/s
# Warmup Iteration  21: 24261.911 ops/s
# Warmup Iteration  22: 24287.511 ops/s
# Warmup Iteration  23: 24121.420 ops/s
# Warmup Iteration  24: 24128.464 ops/s
# Warmup Iteration  25: 24034.097 ops/s
# Warmup Iteration  26: 24073.646 ops/s
# Warmup Iteration  27: 24254.037 ops/s
# Warmup Iteration  28: 24372.272 ops/s
# Warmup Iteration  29: 24400.909 ops/s
# Warmup Iteration  30: 24158.313 ops/s
Iteration   1: 24137.652 ops/s
Iteration   2: 24208.424 ops/s
Iteration   3: 24390.678 ops/s
Iteration   4: 24189.998 ops/s
Iteration   5: 24116.911 ops/s
Iteration   6: 24110.732 ops/s
Iteration   7: 24240.236 ops/s
Iteration   8: 23890.182 ops/s
Iteration   9: 23997.529 ops/s
Iteration  10: 24132.822 ops/s
Iteration  11: 24462.152 ops/s
Iteration  12: 22140.601 ops/s
Iteration  13: 20449.013 ops/s
Iteration  14: 20526.098 ops/s
Iteration  15: 20213.839 ops/s
Iteration  16: 22785.343 ops/s
Iteration  17: 24378.370 ops/s
Iteration  18: 24238.027 ops/s
Iteration  19: 24080.290 ops/s
Iteration  20: 24230.280 ops/s
Iteration  21: 24196.100 ops/s
Iteration  22: 24146.127 ops/s
Iteration  23: 24339.981 ops/s
Iteration  24: 24381.616 ops/s
Iteration  25: 24382.751 ops/s
Iteration  26: 24316.894 ops/s
Iteration  27: 24343.103 ops/s
Iteration  28: 24258.873 ops/s
Iteration  29: 24200.594 ops/s
Iteration  30: 24224.141 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations":
  23723.645 ±(99.9%) 816.711 ops/s [Average]
  (min, avg, max) = (20213.839, 23723.645, 24462.152), stdev = 1222.415
  CI (99.9%): [22906.934, 24540.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_tagsAreBinaryAnnotations  thrpt   30  23723.645 ± 816.711  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_empty$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 193175.261 ops/s
# Warmup Iteration   2: 326723.312 ops/s
# Warmup Iteration   3: 531350.003 ops/s
# Warmup Iteration   4: 535441.838 ops/s
# Warmup Iteration   5: 537357.305 ops/s
# Warmup Iteration   6: 416352.674 ops/s
# Warmup Iteration   7: 502275.848 ops/s
# Warmup Iteration   8: 537794.836 ops/s
# Warmup Iteration   9: 531343.848 ops/s
# Warmup Iteration  10: 531701.581 ops/s
# Warmup Iteration  11: 537649.563 ops/s
# Warmup Iteration  12: 535789.198 ops/s
# Warmup Iteration  13: 536857.476 ops/s
# Warmup Iteration  14: 536197.212 ops/s
# Warmup Iteration  15: 537922.537 ops/s
# Warmup Iteration  16: 533281.586 ops/s
# Warmup Iteration  17: 534641.460 ops/s
# Warmup Iteration  18: 527363.345 ops/s
# Warmup Iteration  19: 528977.688 ops/s
# Warmup Iteration  20: 530589.397 ops/s
# Warmup Iteration  21: 530297.478 ops/s
# Warmup Iteration  22: 531994.743 ops/s
# Warmup Iteration  23: 532431.409 ops/s
# Warmup Iteration  24: 526753.653 ops/s
# Warmup Iteration  25: 529412.881 ops/s
# Warmup Iteration  26: 535242.254 ops/s
# Warmup Iteration  27: 534879.163 ops/s
# Warmup Iteration  28: 535612.787 ops/s
# Warmup Iteration  29: 529102.061 ops/s
# Warmup Iteration  30: 530158.931 ops/s
Iteration   1: 530030.290 ops/s
Iteration   2: 534846.831 ops/s
Iteration   3: 536526.645 ops/s
Iteration   4: 530741.092 ops/s
Iteration   5: 534489.368 ops/s
Iteration   6: 530063.205 ops/s
Iteration   7: 532137.286 ops/s
Iteration   8: 532210.199 ops/s
Iteration   9: 524147.487 ops/s
Iteration  10: 526734.856 ops/s
Iteration  11: 531105.117 ops/s
Iteration  12: 534770.024 ops/s
Iteration  13: 533767.388 ops/s
Iteration  14: 534679.996 ops/s
Iteration  15: 531506.109 ops/s
Iteration  16: 534898.677 ops/s
Iteration  17: 530473.982 ops/s
Iteration  18: 529684.982 ops/s
Iteration  19: 531683.803 ops/s
Iteration  20: 532930.515 ops/s
Iteration  21: 532419.532 ops/s
Iteration  22: 533285.739 ops/s
Iteration  23: 537828.175 ops/s
Iteration  24: 538564.238 ops/s
Iteration  25: 537569.187 ops/s
Iteration  26: 535556.156 ops/s
Iteration  27: 529393.052 ops/s
Iteration  28: 532975.950 ops/s
Iteration  29: 532323.611 ops/s
Iteration  30: 533257.065 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_empty":
  532686.685 ±(99.9%) 2103.156 ops/s [Average]
  (min, avg, max) = (524147.487, 532686.685, 538564.238), stdev = 3147.906
  CI (99.9%): [530583.529, 534789.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_empty  thrpt   30  532686.685 ± 2103.156  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithListPrefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithListPrefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139139.582 ops/s
# Warmup Iteration   2: 162906.258 ops/s
# Warmup Iteration   3: 304621.891 ops/s
# Warmup Iteration   4: 303959.486 ops/s
# Warmup Iteration   5: 304272.903 ops/s
# Warmup Iteration   6: 304064.502 ops/s
# Warmup Iteration   7: 306181.248 ops/s
# Warmup Iteration   8: 301447.571 ops/s
# Warmup Iteration   9: 221585.545 ops/s
# Warmup Iteration  10: 305195.954 ops/s
# Warmup Iteration  11: 306713.288 ops/s
# Warmup Iteration  12: 305453.649 ops/s
# Warmup Iteration  13: 304564.501 ops/s
# Warmup Iteration  14: 304838.772 ops/s
# Warmup Iteration  15: 305199.757 ops/s
# Warmup Iteration  16: 305473.027 ops/s
# Warmup Iteration  17: 300915.195 ops/s
# Warmup Iteration  18: 302554.479 ops/s
# Warmup Iteration  19: 302449.989 ops/s
# Warmup Iteration  20: 302805.982 ops/s
# Warmup Iteration  21: 302437.096 ops/s
# Warmup Iteration  22: 302828.319 ops/s
# Warmup Iteration  23: 304421.107 ops/s
# Warmup Iteration  24: 301983.624 ops/s
# Warmup Iteration  25: 302736.955 ops/s
# Warmup Iteration  26: 303144.952 ops/s
# Warmup Iteration  27: 303581.649 ops/s
# Warmup Iteration  28: 302164.322 ops/s
# Warmup Iteration  29: 303096.924 ops/s
# Warmup Iteration  30: 302862.341 ops/s
Iteration   1: 303593.522 ops/s
Iteration   2: 306043.482 ops/s
Iteration   3: 300749.743 ops/s
Iteration   4: 303906.268 ops/s
Iteration   5: 301951.730 ops/s
Iteration   6: 301321.733 ops/s
Iteration   7: 303400.748 ops/s
Iteration   8: 304329.573 ops/s
Iteration   9: 302570.372 ops/s
Iteration  10: 300520.501 ops/s
Iteration  11: 304769.884 ops/s
Iteration  12: 304413.981 ops/s
Iteration  13: 301497.589 ops/s
Iteration  14: 303325.597 ops/s
Iteration  15: 302428.271 ops/s
Iteration  16: 304064.943 ops/s
Iteration  17: 303009.159 ops/s
Iteration  18: 301688.730 ops/s
Iteration  19: 303939.961 ops/s
Iteration  20: 302987.717 ops/s
Iteration  21: 303612.110 ops/s
Iteration  22: 304544.194 ops/s
Iteration  23: 304815.791 ops/s
Iteration  24: 304689.781 ops/s
Iteration  25: 302912.533 ops/s
Iteration  26: 301207.721 ops/s
Iteration  27: 301688.690 ops/s
Iteration  28: 303214.645 ops/s
Iteration  29: 305494.782 ops/s
Iteration  30: 303695.443 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithListPrefix":
  303212.973 ±(99.9%) 948.753 ops/s [Average]
  (min, avg, max) = (300520.501, 303212.973, 306043.482), stdev = 1420.049
  CI (99.9%): [302264.220, 304161.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_offset_startsWithListPrefix  thrpt   30  303212.973 ± 948.753  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132061.248 ops/s
# Warmup Iteration   2: 161699.886 ops/s
# Warmup Iteration   3: 300861.016 ops/s
# Warmup Iteration   4: 306494.389 ops/s
# Warmup Iteration   5: 310228.988 ops/s
# Warmup Iteration   6: 314145.826 ops/s
# Warmup Iteration   7: 314114.594 ops/s
# Warmup Iteration   8: 282590.642 ops/s
# Warmup Iteration   9: 249315.806 ops/s
# Warmup Iteration  10: 314080.337 ops/s
# Warmup Iteration  11: 315289.291 ops/s
# Warmup Iteration  12: 313175.381 ops/s
# Warmup Iteration  13: 310459.765 ops/s
# Warmup Iteration  14: 312722.010 ops/s
# Warmup Iteration  15: 312204.672 ops/s
# Warmup Iteration  16: 314512.084 ops/s
# Warmup Iteration  17: 312643.560 ops/s
# Warmup Iteration  18: 309558.400 ops/s
# Warmup Iteration  19: 309409.106 ops/s
# Warmup Iteration  20: 310302.801 ops/s
# Warmup Iteration  21: 312398.053 ops/s
# Warmup Iteration  22: 313891.982 ops/s
# Warmup Iteration  23: 312828.327 ops/s
# Warmup Iteration  24: 315325.458 ops/s
# Warmup Iteration  25: 317637.686 ops/s
# Warmup Iteration  26: 317758.482 ops/s
# Warmup Iteration  27: 314596.648 ops/s
# Warmup Iteration  28: 314919.244 ops/s
# Warmup Iteration  29: 313243.479 ops/s
# Warmup Iteration  30: 313792.671 ops/s
Iteration   1: 314446.250 ops/s
Iteration   2: 317095.599 ops/s
Iteration   3: 314507.540 ops/s
Iteration   4: 311539.177 ops/s
Iteration   5: 313631.068 ops/s
Iteration   6: 311780.599 ops/s
Iteration   7: 309684.501 ops/s
Iteration   8: 315260.520 ops/s
Iteration   9: 311597.451 ops/s
Iteration  10: 313579.788 ops/s
Iteration  11: 315767.096 ops/s
Iteration  12: 314982.806 ops/s
Iteration  13: 313550.962 ops/s
Iteration  14: 313321.911 ops/s
Iteration  15: 314039.650 ops/s
Iteration  16: 313988.232 ops/s
Iteration  17: 313876.852 ops/s
Iteration  18: 313948.628 ops/s
Iteration  19: 314019.679 ops/s
Iteration  20: 313700.249 ops/s
Iteration  21: 315406.864 ops/s
Iteration  22: 315486.773 ops/s
Iteration  23: 311899.316 ops/s
Iteration  24: 312027.038 ops/s
Iteration  25: 312705.592 ops/s
Iteration  26: 311793.679 ops/s
Iteration  27: 311894.483 ops/s
Iteration  28: 311781.726 ops/s
Iteration  29: 310895.094 ops/s
Iteration  30: 313537.954 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix":
  313391.569 ±(99.9%) 1104.940 ops/s [Average]
  (min, avg, max) = (309684.501, 313391.569, 317095.599), stdev = 1653.823
  CI (99.9%): [312286.629, 314496.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix  thrpt   30  313391.569 ± 1104.940  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix_multiple$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix_multiple

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 127145.748 ops/s
# Warmup Iteration   2: 153742.962 ops/s
# Warmup Iteration   3: 277584.054 ops/s
# Warmup Iteration   4: 294553.754 ops/s
# Warmup Iteration   5: 294408.243 ops/s
# Warmup Iteration   6: 297382.275 ops/s
# Warmup Iteration   7: 296662.963 ops/s
# Warmup Iteration   8: 294023.397 ops/s
# Warmup Iteration   9: 205945.572 ops/s
# Warmup Iteration  10: 294144.266 ops/s
# Warmup Iteration  11: 293946.006 ops/s
# Warmup Iteration  12: 292609.026 ops/s
# Warmup Iteration  13: 292654.289 ops/s
# Warmup Iteration  14: 292703.491 ops/s
# Warmup Iteration  15: 294002.795 ops/s
# Warmup Iteration  16: 294945.944 ops/s
# Warmup Iteration  17: 291573.859 ops/s
# Warmup Iteration  18: 292376.890 ops/s
# Warmup Iteration  19: 292535.097 ops/s
# Warmup Iteration  20: 292898.121 ops/s
# Warmup Iteration  21: 295472.574 ops/s
# Warmup Iteration  22: 293134.633 ops/s
# Warmup Iteration  23: 293011.749 ops/s
# Warmup Iteration  24: 293949.249 ops/s
# Warmup Iteration  25: 293822.013 ops/s
# Warmup Iteration  26: 294887.479 ops/s
# Warmup Iteration  27: 294928.842 ops/s
# Warmup Iteration  28: 293790.428 ops/s
# Warmup Iteration  29: 294235.656 ops/s
# Warmup Iteration  30: 294255.141 ops/s
Iteration   1: 294093.536 ops/s
Iteration   2: 294984.368 ops/s
Iteration   3: 294859.454 ops/s
Iteration   4: 294316.937 ops/s
Iteration   5: 295192.113 ops/s
Iteration   6: 294802.219 ops/s
Iteration   7: 293527.838 ops/s
Iteration   8: 292898.028 ops/s
Iteration   9: 293296.518 ops/s
Iteration  10: 295050.436 ops/s
Iteration  11: 295404.581 ops/s
Iteration  12: 295255.169 ops/s
Iteration  13: 295956.630 ops/s
Iteration  14: 294045.411 ops/s
Iteration  15: 292618.763 ops/s
Iteration  16: 291963.190 ops/s
Iteration  17: 291431.985 ops/s
Iteration  18: 293259.483 ops/s
Iteration  19: 293615.201 ops/s
Iteration  20: 292068.906 ops/s
Iteration  21: 294575.478 ops/s
Iteration  22: 294000.101 ops/s
Iteration  23: 293337.437 ops/s
Iteration  24: 293040.327 ops/s
Iteration  25: 293263.711 ops/s
Iteration  26: 293561.449 ops/s
Iteration  27: 296172.237 ops/s
Iteration  28: 293039.440 ops/s
Iteration  29: 293712.689 ops/s
Iteration  30: 292595.159 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix_multiple":
  293864.626 ±(99.9%) 793.881 ops/s [Average]
  (min, avg, max) = (291431.985, 293864.626, 296172.237), stdev = 1188.244
  CI (99.9%): [293070.746, 294658.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writeList_startsWithListPrefix_multiple  thrpt   30  293864.626 ± 793.881  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_write_startsWithI64Prefix$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_write_startsWithI64Prefix

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151137.474 ops/s
# Warmup Iteration   2: 193678.518 ops/s
# Warmup Iteration   3: 368331.777 ops/s
# Warmup Iteration   4: 364112.656 ops/s
# Warmup Iteration   5: 369069.180 ops/s
# Warmup Iteration   6: 366256.827 ops/s
# Warmup Iteration   7: 365247.741 ops/s
# Warmup Iteration   8: 262043.668 ops/s
# Warmup Iteration   9: 369596.168 ops/s
# Warmup Iteration  10: 366821.801 ops/s
# Warmup Iteration  11: 368777.700 ops/s
# Warmup Iteration  12: 366404.501 ops/s
# Warmup Iteration  13: 367881.297 ops/s
# Warmup Iteration  14: 367171.052 ops/s
# Warmup Iteration  15: 369277.938 ops/s
# Warmup Iteration  16: 367160.608 ops/s
# Warmup Iteration  17: 366626.658 ops/s
# Warmup Iteration  18: 363865.455 ops/s
# Warmup Iteration  19: 363941.104 ops/s
# Warmup Iteration  20: 368764.395 ops/s
# Warmup Iteration  21: 368502.616 ops/s
# Warmup Iteration  22: 366132.732 ops/s
# Warmup Iteration  23: 366123.224 ops/s
# Warmup Iteration  24: 366881.390 ops/s
# Warmup Iteration  25: 367193.373 ops/s
# Warmup Iteration  26: 367021.800 ops/s
# Warmup Iteration  27: 367196.782 ops/s
# Warmup Iteration  28: 367790.530 ops/s
# Warmup Iteration  29: 365800.895 ops/s
# Warmup Iteration  30: 367785.923 ops/s
Iteration   1: 368723.915 ops/s
Iteration   2: 365767.432 ops/s
Iteration   3: 362361.275 ops/s
Iteration   4: 365165.492 ops/s
Iteration   5: 362697.188 ops/s
Iteration   6: 363619.102 ops/s
Iteration   7: 365938.622 ops/s
Iteration   8: 365540.318 ops/s
Iteration   9: 366005.682 ops/s
Iteration  10: 367683.953 ops/s
Iteration  11: 368756.820 ops/s
Iteration  12: 366482.471 ops/s
Iteration  13: 365684.988 ops/s
Iteration  14: 365943.727 ops/s
Iteration  15: 365484.492 ops/s
Iteration  16: 367232.223 ops/s
Iteration  17: 363038.974 ops/s
Iteration  18: 366470.827 ops/s
Iteration  19: 364614.392 ops/s
Iteration  20: 362440.580 ops/s
Iteration  21: 368197.094 ops/s
Iteration  22: 365910.708 ops/s
Iteration  23: 364549.582 ops/s
Iteration  24: 367602.165 ops/s
Iteration  25: 365390.534 ops/s
Iteration  26: 366931.895 ops/s
Iteration  27: 366517.895 ops/s
Iteration  28: 367327.943 ops/s
Iteration  29: 365726.811 ops/s
Iteration  30: 366473.232 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_write_startsWithI64Prefix":
  365809.344 ±(99.9%) 1152.688 ops/s [Average]
  (min, avg, max) = (362361.275, 365809.344, 368756.820), stdev = 1725.290
  CI (99.9%): [364656.656, 366962.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_write_startsWithI64Prefix  thrpt   30  365809.344 ± 1152.688  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13354.344 ops/s
# Warmup Iteration   2: 14761.091 ops/s
# Warmup Iteration   3: 15040.776 ops/s
# Warmup Iteration   4: 15024.988 ops/s
# Warmup Iteration   5: 15055.434 ops/s
# Warmup Iteration   6: 15003.818 ops/s
# Warmup Iteration   7: 16037.123 ops/s
# Warmup Iteration   8: 17524.126 ops/s
# Warmup Iteration   9: 17526.562 ops/s
# Warmup Iteration  10: 17578.562 ops/s
# Warmup Iteration  11: 17538.505 ops/s
# Warmup Iteration  12: 17449.511 ops/s
# Warmup Iteration  13: 17470.328 ops/s
# Warmup Iteration  14: 17455.796 ops/s
# Warmup Iteration  15: 17557.185 ops/s
# Warmup Iteration  16: 17501.169 ops/s
# Warmup Iteration  17: 17485.561 ops/s
# Warmup Iteration  18: 17337.311 ops/s
# Warmup Iteration  19: 17512.503 ops/s
# Warmup Iteration  20: 17620.584 ops/s
# Warmup Iteration  21: 17602.989 ops/s
# Warmup Iteration  22: 17608.273 ops/s
# Warmup Iteration  23: 17643.937 ops/s
# Warmup Iteration  24: 17618.373 ops/s
# Warmup Iteration  25: 17611.536 ops/s
# Warmup Iteration  26: 17595.730 ops/s
# Warmup Iteration  27: 17629.567 ops/s
# Warmup Iteration  28: 17557.008 ops/s
# Warmup Iteration  29: 17378.681 ops/s
# Warmup Iteration  30: 17507.804 ops/s
Iteration   1: 17516.349 ops/s
Iteration   2: 17461.561 ops/s
Iteration   3: 17549.904 ops/s
Iteration   4: 17602.581 ops/s
Iteration   5: 17635.405 ops/s
Iteration   6: 17611.091 ops/s
Iteration   7: 17555.408 ops/s
Iteration   8: 17365.659 ops/s
Iteration   9: 17480.756 ops/s
Iteration  10: 17625.244 ops/s
Iteration  11: 17617.138 ops/s
Iteration  12: 17562.242 ops/s
Iteration  13: 17603.947 ops/s
Iteration  14: 17579.886 ops/s
Iteration  15: 17602.525 ops/s
Iteration  16: 17607.194 ops/s
Iteration  17: 17660.873 ops/s
Iteration  18: 17583.838 ops/s
Iteration  19: 17503.456 ops/s
Iteration  20: 16046.814 ops/s
Iteration  21: 15157.582 ops/s
Iteration  22: 15123.885 ops/s
Iteration  23: 15019.901 ops/s
Iteration  24: 15632.968 ops/s
Iteration  25: 17528.840 ops/s
Iteration  26: 17516.859 ops/s
Iteration  27: 17604.494 ops/s
Iteration  28: 17650.627 ops/s
Iteration  29: 17676.694 ops/s
Iteration  30: 17611.452 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client":
  17209.839 ±(99.9%) 563.183 ops/s [Average]
  (min, avg, max) = (15019.901, 17209.839, 17676.694), stdev = 842.946
  CI (99.9%): [16646.656, 17773.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_client  thrpt   30  17209.839 ± 563.183  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13547.965 ops/s
# Warmup Iteration   2: 15261.388 ops/s
# Warmup Iteration   3: 15297.632 ops/s
# Warmup Iteration   4: 15248.809 ops/s
# Warmup Iteration   5: 15409.284 ops/s
# Warmup Iteration   6: 15376.628 ops/s
# Warmup Iteration   7: 16816.640 ops/s
# Warmup Iteration   8: 17849.573 ops/s
# Warmup Iteration   9: 17884.668 ops/s
# Warmup Iteration  10: 18005.965 ops/s
# Warmup Iteration  11: 17945.563 ops/s
# Warmup Iteration  12: 17896.860 ops/s
# Warmup Iteration  13: 17930.978 ops/s
# Warmup Iteration  14: 17905.815 ops/s
# Warmup Iteration  15: 17977.008 ops/s
# Warmup Iteration  16: 17889.627 ops/s
# Warmup Iteration  17: 17937.245 ops/s
# Warmup Iteration  18: 17932.073 ops/s
# Warmup Iteration  19: 17887.880 ops/s
# Warmup Iteration  20: 17953.198 ops/s
# Warmup Iteration  21: 17966.549 ops/s
# Warmup Iteration  22: 17918.819 ops/s
# Warmup Iteration  23: 17846.524 ops/s
# Warmup Iteration  24: 17987.163 ops/s
# Warmup Iteration  25: 17993.669 ops/s
# Warmup Iteration  26: 17920.460 ops/s
# Warmup Iteration  27: 17956.466 ops/s
# Warmup Iteration  28: 17818.264 ops/s
# Warmup Iteration  29: 17881.052 ops/s
# Warmup Iteration  30: 17947.230 ops/s
Iteration   1: 17809.497 ops/s
Iteration   2: 17853.883 ops/s
Iteration   3: 17922.111 ops/s
Iteration   4: 17893.587 ops/s
Iteration   5: 17721.288 ops/s
Iteration   6: 17795.977 ops/s
Iteration   7: 17782.677 ops/s
Iteration   8: 17801.403 ops/s
Iteration   9: 17887.898 ops/s
Iteration  10: 17943.749 ops/s
Iteration  11: 17890.429 ops/s
Iteration  12: 17819.977 ops/s
Iteration  13: 17795.536 ops/s
Iteration  14: 17889.793 ops/s
Iteration  15: 17756.095 ops/s
Iteration  16: 17824.183 ops/s
Iteration  17: 17945.767 ops/s
Iteration  18: 17040.928 ops/s
Iteration  19: 15399.515 ops/s
Iteration  20: 15349.117 ops/s
Iteration  21: 15244.620 ops/s
Iteration  22: 15301.940 ops/s
Iteration  23: 17824.747 ops/s
Iteration  24: 17847.299 ops/s
Iteration  25: 17814.299 ops/s
Iteration  26: 17740.447 ops/s
Iteration  27: 17840.625 ops/s
Iteration  28: 17733.344 ops/s
Iteration  29: 17835.154 ops/s
Iteration  30: 17997.174 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer":
  17476.769 ±(99.9%) 583.715 ops/s [Average]
  (min, avg, max) = (15244.620, 17476.769, 17997.174), stdev = 873.677
  CI (99.9%): [16893.053, 18060.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_consumer  thrpt   30  17476.769 ± 583.715  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13982.981 ops/s
# Warmup Iteration   2: 15567.410 ops/s
# Warmup Iteration   3: 15509.367 ops/s
# Warmup Iteration   4: 15421.476 ops/s
# Warmup Iteration   5: 15567.121 ops/s
# Warmup Iteration   6: 15565.937 ops/s
# Warmup Iteration   7: 17427.274 ops/s
# Warmup Iteration   8: 18277.190 ops/s
# Warmup Iteration   9: 18272.192 ops/s
# Warmup Iteration  10: 18311.152 ops/s
# Warmup Iteration  11: 18213.539 ops/s
# Warmup Iteration  12: 18261.532 ops/s
# Warmup Iteration  13: 18220.974 ops/s
# Warmup Iteration  14: 18248.219 ops/s
# Warmup Iteration  15: 18338.274 ops/s
# Warmup Iteration  16: 18369.901 ops/s
# Warmup Iteration  17: 17993.659 ops/s
# Warmup Iteration  18: 18226.985 ops/s
# Warmup Iteration  19: 18212.914 ops/s
# Warmup Iteration  20: 18301.022 ops/s
# Warmup Iteration  21: 18159.393 ops/s
# Warmup Iteration  22: 18301.870 ops/s
# Warmup Iteration  23: 18201.497 ops/s
# Warmup Iteration  24: 18196.780 ops/s
# Warmup Iteration  25: 18243.583 ops/s
# Warmup Iteration  26: 18141.281 ops/s
# Warmup Iteration  27: 18244.462 ops/s
# Warmup Iteration  28: 18230.086 ops/s
# Warmup Iteration  29: 18327.215 ops/s
# Warmup Iteration  30: 18237.055 ops/s
Iteration   1: 18168.084 ops/s
Iteration   2: 18396.143 ops/s
Iteration   3: 18445.140 ops/s
Iteration   4: 18402.781 ops/s
Iteration   5: 18447.718 ops/s
Iteration   6: 18323.660 ops/s
Iteration   7: 18219.108 ops/s
Iteration   8: 18399.511 ops/s
Iteration   9: 18376.045 ops/s
Iteration  10: 18389.487 ops/s
Iteration  11: 18258.788 ops/s
Iteration  12: 18210.126 ops/s
Iteration  13: 18302.862 ops/s
Iteration  14: 18207.005 ops/s
Iteration  15: 18220.391 ops/s
Iteration  16: 18259.154 ops/s
Iteration  17: 16005.933 ops/s
Iteration  18: 15604.524 ops/s
Iteration  19: 15705.915 ops/s
Iteration  20: 15665.119 ops/s
Iteration  21: 17579.687 ops/s
Iteration  22: 18350.824 ops/s
Iteration  23: 18369.550 ops/s
Iteration  24: 18224.629 ops/s
Iteration  25: 18253.714 ops/s
Iteration  26: 18345.031 ops/s
Iteration  27: 18364.258 ops/s
Iteration  28: 18281.595 ops/s
Iteration  29: 18429.897 ops/s
Iteration  30: 18335.990 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer":
  17951.422 ±(99.9%) 598.236 ops/s [Average]
  (min, avg, max) = (15604.524, 17951.422, 18447.718), stdev = 895.412
  CI (99.9%): [17353.186, 18549.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_producer  thrpt   30  17951.422 ± 598.236  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13787.706 ops/s
# Warmup Iteration   2: 15473.889 ops/s
# Warmup Iteration   3: 15459.018 ops/s
# Warmup Iteration   4: 15536.065 ops/s
# Warmup Iteration   5: 15518.813 ops/s
# Warmup Iteration   6: 15510.774 ops/s
# Warmup Iteration   7: 17074.210 ops/s
# Warmup Iteration   8: 17987.045 ops/s
# Warmup Iteration   9: 18151.855 ops/s
# Warmup Iteration  10: 18081.778 ops/s
# Warmup Iteration  11: 18106.594 ops/s
# Warmup Iteration  12: 17905.562 ops/s
# Warmup Iteration  13: 17949.783 ops/s
# Warmup Iteration  14: 18129.739 ops/s
# Warmup Iteration  15: 17998.846 ops/s
# Warmup Iteration  16: 18199.409 ops/s
# Warmup Iteration  17: 18015.527 ops/s
# Warmup Iteration  18: 18062.435 ops/s
# Warmup Iteration  19: 18137.007 ops/s
# Warmup Iteration  20: 18152.439 ops/s
# Warmup Iteration  21: 18197.570 ops/s
# Warmup Iteration  22: 18123.414 ops/s
# Warmup Iteration  23: 18083.183 ops/s
# Warmup Iteration  24: 18132.817 ops/s
# Warmup Iteration  25: 18039.435 ops/s
# Warmup Iteration  26: 18128.237 ops/s
# Warmup Iteration  27: 18109.525 ops/s
# Warmup Iteration  28: 18070.222 ops/s
# Warmup Iteration  29: 18184.548 ops/s
# Warmup Iteration  30: 18085.732 ops/s
Iteration   1: 18049.076 ops/s
Iteration   2: 18133.805 ops/s
Iteration   3: 18126.873 ops/s
Iteration   4: 18045.210 ops/s
Iteration   5: 18144.209 ops/s
Iteration   6: 18063.794 ops/s
Iteration   7: 18011.005 ops/s
Iteration   8: 18160.800 ops/s
Iteration   9: 17946.315 ops/s
Iteration  10: 17942.907 ops/s
Iteration  11: 17903.027 ops/s
Iteration  12: 18042.066 ops/s
Iteration  13: 18074.387 ops/s
Iteration  14: 18065.067 ops/s
Iteration  15: 18050.823 ops/s
Iteration  16: 17959.490 ops/s
Iteration  17: 18045.027 ops/s
Iteration  18: 15593.674 ops/s
Iteration  19: 15487.135 ops/s
Iteration  20: 15367.709 ops/s
Iteration  21: 15493.912 ops/s
Iteration  22: 17499.873 ops/s
Iteration  23: 17997.323 ops/s
Iteration  24: 18090.839 ops/s
Iteration  25: 18076.671 ops/s
Iteration  26: 18114.015 ops/s
Iteration  27: 18008.455 ops/s
Iteration  28: 18135.509 ops/s
Iteration  29: 18202.816 ops/s
Iteration  30: 18181.677 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server":
  17700.450 ±(99.9%) 596.481 ops/s [Average]
  (min, avg, max) = (15367.709, 17700.450, 18202.816), stdev = 892.785
  CI (99.9%): [17103.969, 18296.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesAddressBinaryAnnotation_server  thrpt   30  17700.450 ± 596.481  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_client_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_client_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27635.110 ops/s
# Warmup Iteration   2: 31403.725 ops/s
# Warmup Iteration   3: 31044.996 ops/s
# Warmup Iteration   4: 31690.153 ops/s
# Warmup Iteration   5: 31516.194 ops/s
# Warmup Iteration   6: 37272.269 ops/s
# Warmup Iteration   7: 38340.085 ops/s
# Warmup Iteration   8: 38315.503 ops/s
# Warmup Iteration   9: 38600.279 ops/s
# Warmup Iteration  10: 38112.394 ops/s
# Warmup Iteration  11: 38308.234 ops/s
# Warmup Iteration  12: 38217.955 ops/s
# Warmup Iteration  13: 38517.273 ops/s
# Warmup Iteration  14: 38106.832 ops/s
# Warmup Iteration  15: 38526.006 ops/s
# Warmup Iteration  16: 38544.771 ops/s
# Warmup Iteration  17: 38254.325 ops/s
# Warmup Iteration  18: 38121.831 ops/s
# Warmup Iteration  19: 38439.059 ops/s
# Warmup Iteration  20: 38203.445 ops/s
# Warmup Iteration  21: 38237.831 ops/s
# Warmup Iteration  22: 38139.474 ops/s
# Warmup Iteration  23: 38187.159 ops/s
# Warmup Iteration  24: 38368.855 ops/s
# Warmup Iteration  25: 38355.760 ops/s
# Warmup Iteration  26: 38237.097 ops/s
# Warmup Iteration  27: 38391.918 ops/s
# Warmup Iteration  28: 38403.638 ops/s
# Warmup Iteration  29: 38401.738 ops/s
# Warmup Iteration  30: 37593.833 ops/s
Iteration   1: 31800.168 ops/s
Iteration   2: 31789.542 ops/s
Iteration   3: 31680.395 ops/s
Iteration   4: 37511.552 ops/s
Iteration   5: 38389.766 ops/s
Iteration   6: 38376.417 ops/s
Iteration   7: 38477.451 ops/s
Iteration   8: 38394.201 ops/s
Iteration   9: 38369.789 ops/s
Iteration  10: 38462.857 ops/s
Iteration  11: 38498.871 ops/s
Iteration  12: 38376.022 ops/s
Iteration  13: 38237.159 ops/s
Iteration  14: 38417.757 ops/s
Iteration  15: 38392.739 ops/s
Iteration  16: 38478.040 ops/s
Iteration  17: 38547.262 ops/s
Iteration  18: 38280.339 ops/s
Iteration  19: 38239.988 ops/s
Iteration  20: 38100.282 ops/s
Iteration  21: 38354.763 ops/s
Iteration  22: 38193.675 ops/s
Iteration  23: 38246.967 ops/s
Iteration  24: 37974.704 ops/s
Iteration  25: 38226.378 ops/s
Iteration  26: 38337.100 ops/s
Iteration  27: 38340.420 ops/s
Iteration  28: 38512.623 ops/s
Iteration  29: 38245.262 ops/s
Iteration  30: 38394.886 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_client_noEndpoint":
  37654.912 ±(99.9%) 1342.393 ops/s [Average]
  (min, avg, max) = (31680.395, 37654.912, 38547.262), stdev = 2009.231
  CI (99.9%): [36312.519, 38997.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_client_noEndpoint  thrpt   30  37654.912 ± 1342.393  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_consumer_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_consumer_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26966.415 ops/s
# Warmup Iteration   2: 30814.034 ops/s
# Warmup Iteration   3: 30959.705 ops/s
# Warmup Iteration   4: 31290.426 ops/s
# Warmup Iteration   5: 31282.544 ops/s
# Warmup Iteration   6: 35876.848 ops/s
# Warmup Iteration   7: 38053.366 ops/s
# Warmup Iteration   8: 38096.362 ops/s
# Warmup Iteration   9: 38172.259 ops/s
# Warmup Iteration  10: 38006.753 ops/s
# Warmup Iteration  11: 38185.178 ops/s
# Warmup Iteration  12: 37896.190 ops/s
# Warmup Iteration  13: 38079.985 ops/s
# Warmup Iteration  14: 37995.377 ops/s
# Warmup Iteration  15: 38179.301 ops/s
# Warmup Iteration  16: 38346.853 ops/s
# Warmup Iteration  17: 38030.720 ops/s
# Warmup Iteration  18: 38169.339 ops/s
# Warmup Iteration  19: 38201.673 ops/s
# Warmup Iteration  20: 38159.205 ops/s
# Warmup Iteration  21: 38194.944 ops/s
# Warmup Iteration  22: 38103.295 ops/s
# Warmup Iteration  23: 38162.681 ops/s
# Warmup Iteration  24: 38144.488 ops/s
# Warmup Iteration  25: 38092.374 ops/s
# Warmup Iteration  26: 37858.678 ops/s
# Warmup Iteration  27: 38114.060 ops/s
# Warmup Iteration  28: 38000.191 ops/s
# Warmup Iteration  29: 38139.337 ops/s
# Warmup Iteration  30: 38067.590 ops/s
Iteration   1: 33842.323 ops/s
Iteration   2: 31347.594 ops/s
Iteration   3: 31251.697 ops/s
Iteration   4: 32832.891 ops/s
Iteration   5: 37869.719 ops/s
Iteration   6: 38136.400 ops/s
Iteration   7: 37911.557 ops/s
Iteration   8: 37903.744 ops/s
Iteration   9: 37831.688 ops/s
Iteration  10: 38041.203 ops/s
Iteration  11: 37859.631 ops/s
Iteration  12: 37799.003 ops/s
Iteration  13: 37839.698 ops/s
Iteration  14: 38076.855 ops/s
Iteration  15: 37987.385 ops/s
Iteration  16: 38020.146 ops/s
Iteration  17: 38190.616 ops/s
Iteration  18: 37765.830 ops/s
Iteration  19: 38083.006 ops/s
Iteration  20: 38008.688 ops/s
Iteration  21: 38114.039 ops/s
Iteration  22: 38052.620 ops/s
Iteration  23: 37871.988 ops/s
Iteration  24: 38000.980 ops/s
Iteration  25: 38192.361 ops/s
Iteration  26: 38062.545 ops/s
Iteration  27: 38151.022 ops/s
Iteration  28: 37955.259 ops/s
Iteration  29: 38004.024 ops/s
Iteration  30: 38238.646 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_consumer_noEndpoint":
  37241.439 ±(99.9%) 1341.657 ops/s [Average]
  (min, avg, max) = (31251.697, 37241.439, 38238.646), stdev = 2008.129
  CI (99.9%): [35899.782, 38583.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_consumer_noEndpoint  thrpt   30  37241.439 ± 1341.657  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_producer_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_producer_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26523.870 ops/s
# Warmup Iteration   2: 30239.444 ops/s
# Warmup Iteration   3: 30515.941 ops/s
# Warmup Iteration   4: 30631.320 ops/s
# Warmup Iteration   5: 30475.827 ops/s
# Warmup Iteration   6: 34682.363 ops/s
# Warmup Iteration   7: 36555.423 ops/s
# Warmup Iteration   8: 36747.166 ops/s
# Warmup Iteration   9: 36408.105 ops/s
# Warmup Iteration  10: 36400.215 ops/s
# Warmup Iteration  11: 36510.205 ops/s
# Warmup Iteration  12: 36654.734 ops/s
# Warmup Iteration  13: 36601.623 ops/s
# Warmup Iteration  14: 36175.165 ops/s
# Warmup Iteration  15: 36515.588 ops/s
# Warmup Iteration  16: 36355.637 ops/s
# Warmup Iteration  17: 36501.777 ops/s
# Warmup Iteration  18: 36528.703 ops/s
# Warmup Iteration  19: 36375.089 ops/s
# Warmup Iteration  20: 36490.724 ops/s
# Warmup Iteration  21: 36360.857 ops/s
# Warmup Iteration  22: 36288.419 ops/s
# Warmup Iteration  23: 36539.521 ops/s
# Warmup Iteration  24: 36455.914 ops/s
# Warmup Iteration  25: 36490.544 ops/s
# Warmup Iteration  26: 36339.316 ops/s
# Warmup Iteration  27: 36397.499 ops/s
# Warmup Iteration  28: 36565.918 ops/s
# Warmup Iteration  29: 36396.824 ops/s
# Warmup Iteration  30: 36568.026 ops/s
Iteration   1: 36601.220 ops/s
Iteration   2: 36572.040 ops/s
Iteration   3: 34363.037 ops/s
Iteration   4: 30631.973 ops/s
Iteration   5: 30532.910 ops/s
Iteration   6: 30717.992 ops/s
Iteration   7: 35930.782 ops/s
Iteration   8: 36375.000 ops/s
Iteration   9: 36643.058 ops/s
Iteration  10: 36503.388 ops/s
Iteration  11: 36358.544 ops/s
Iteration  12: 36606.472 ops/s
Iteration  13: 36478.503 ops/s
Iteration  14: 36537.800 ops/s
Iteration  15: 36439.374 ops/s
Iteration  16: 36687.692 ops/s
Iteration  17: 36280.345 ops/s
Iteration  18: 36317.304 ops/s
Iteration  19: 36581.304 ops/s
Iteration  20: 36293.954 ops/s
Iteration  21: 36239.352 ops/s
Iteration  22: 36223.197 ops/s
Iteration  23: 36600.392 ops/s
Iteration  24: 36360.026 ops/s
Iteration  25: 36633.151 ops/s
Iteration  26: 36689.808 ops/s
Iteration  27: 36262.491 ops/s
Iteration  28: 36392.380 ops/s
Iteration  29: 36558.487 ops/s
Iteration  30: 36332.185 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_producer_noEndpoint":
  35791.472 ±(99.9%) 1202.115 ops/s [Average]
  (min, avg, max) = (30532.910, 35791.472, 36689.808), stdev = 1799.269
  CI (99.9%): [34589.357, 36993.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_producer_noEndpoint  thrpt   30  35791.472 ± 1202.115  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_server_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_server_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26730.368 ops/s
# Warmup Iteration   2: 30227.992 ops/s
# Warmup Iteration   3: 30049.859 ops/s
# Warmup Iteration   4: 30328.725 ops/s
# Warmup Iteration   5: 30493.400 ops/s
# Warmup Iteration   6: 34860.189 ops/s
# Warmup Iteration   7: 37100.707 ops/s
# Warmup Iteration   8: 37174.528 ops/s
# Warmup Iteration   9: 37102.000 ops/s
# Warmup Iteration  10: 37026.111 ops/s
# Warmup Iteration  11: 36871.106 ops/s
# Warmup Iteration  12: 36935.855 ops/s
# Warmup Iteration  13: 37190.097 ops/s
# Warmup Iteration  14: 36901.421 ops/s
# Warmup Iteration  15: 37316.082 ops/s
# Warmup Iteration  16: 37169.522 ops/s
# Warmup Iteration  17: 37176.294 ops/s
# Warmup Iteration  18: 37252.421 ops/s
# Warmup Iteration  19: 37268.268 ops/s
# Warmup Iteration  20: 37194.243 ops/s
# Warmup Iteration  21: 37154.174 ops/s
# Warmup Iteration  22: 37116.960 ops/s
# Warmup Iteration  23: 37212.839 ops/s
# Warmup Iteration  24: 37206.029 ops/s
# Warmup Iteration  25: 37014.085 ops/s
# Warmup Iteration  26: 37168.578 ops/s
# Warmup Iteration  27: 37309.167 ops/s
# Warmup Iteration  28: 37388.788 ops/s
# Warmup Iteration  29: 37334.480 ops/s
# Warmup Iteration  30: 37292.852 ops/s
Iteration   1: 37326.526 ops/s
Iteration   2: 32470.797 ops/s
Iteration   3: 30770.539 ops/s
Iteration   4: 30769.276 ops/s
Iteration   5: 32684.537 ops/s
Iteration   6: 37272.382 ops/s
Iteration   7: 37235.515 ops/s
Iteration   8: 37264.288 ops/s
Iteration   9: 37145.961 ops/s
Iteration  10: 37089.076 ops/s
Iteration  11: 37141.744 ops/s
Iteration  12: 37233.159 ops/s
Iteration  13: 37163.607 ops/s
Iteration  14: 37102.205 ops/s
Iteration  15: 37287.046 ops/s
Iteration  16: 37061.302 ops/s
Iteration  17: 37123.630 ops/s
Iteration  18: 37130.980 ops/s
Iteration  19: 36949.660 ops/s
Iteration  20: 36968.184 ops/s
Iteration  21: 37162.058 ops/s
Iteration  22: 36987.873 ops/s
Iteration  23: 37150.021 ops/s
Iteration  24: 37080.516 ops/s
Iteration  25: 37233.584 ops/s
Iteration  26: 36988.917 ops/s
Iteration  27: 37102.677 ops/s
Iteration  28: 37065.511 ops/s
Iteration  29: 37100.181 ops/s
Iteration  30: 37084.945 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_server_noEndpoint":
  36404.890 ±(99.9%) 1282.453 ops/s [Average]
  (min, avg, max) = (30769.276, 36404.890, 37326.526), stdev = 1919.516
  CI (99.9%): [35122.437, 37687.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score      Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesBeginAnnotation_server_noEndpoint  thrpt   30  36404.890 ± 1282.453  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13716.448 ops/s
# Warmup Iteration   2: 15450.436 ops/s
# Warmup Iteration   3: 15403.361 ops/s
# Warmup Iteration   4: 15350.191 ops/s
# Warmup Iteration   5: 15507.544 ops/s
# Warmup Iteration   6: 15525.046 ops/s
# Warmup Iteration   7: 16667.547 ops/s
# Warmup Iteration   8: 17927.295 ops/s
# Warmup Iteration   9: 17947.705 ops/s
# Warmup Iteration  10: 17974.217 ops/s
# Warmup Iteration  11: 17964.994 ops/s
# Warmup Iteration  12: 17993.741 ops/s
# Warmup Iteration  13: 17952.365 ops/s
# Warmup Iteration  14: 18006.162 ops/s
# Warmup Iteration  15: 17860.648 ops/s
# Warmup Iteration  16: 17958.859 ops/s
# Warmup Iteration  17: 18027.484 ops/s
# Warmup Iteration  18: 17746.496 ops/s
# Warmup Iteration  19: 18019.606 ops/s
# Warmup Iteration  20: 17973.853 ops/s
# Warmup Iteration  21: 18028.501 ops/s
# Warmup Iteration  22: 18069.981 ops/s
# Warmup Iteration  23: 18086.303 ops/s
# Warmup Iteration  24: 18120.704 ops/s
# Warmup Iteration  25: 18074.332 ops/s
# Warmup Iteration  26: 18100.302 ops/s
# Warmup Iteration  27: 18136.914 ops/s
# Warmup Iteration  28: 18011.524 ops/s
# Warmup Iteration  29: 18104.008 ops/s
# Warmup Iteration  30: 18088.108 ops/s
Iteration   1: 18013.245 ops/s
Iteration   2: 18063.268 ops/s
Iteration   3: 17988.103 ops/s
Iteration   4: 18136.335 ops/s
Iteration   5: 18045.558 ops/s
Iteration   6: 17942.518 ops/s
Iteration   7: 18075.653 ops/s
Iteration   8: 17986.687 ops/s
Iteration   9: 17999.048 ops/s
Iteration  10: 18005.474 ops/s
Iteration  11: 17945.721 ops/s
Iteration  12: 17963.803 ops/s
Iteration  13: 17975.888 ops/s
Iteration  14: 18075.590 ops/s
Iteration  15: 18028.665 ops/s
Iteration  16: 18060.642 ops/s
Iteration  17: 17980.436 ops/s
Iteration  18: 17942.831 ops/s
Iteration  19: 17822.995 ops/s
Iteration  20: 15384.775 ops/s
Iteration  21: 15481.798 ops/s
Iteration  22: 15446.600 ops/s
Iteration  23: 15448.243 ops/s
Iteration  24: 17439.200 ops/s
Iteration  25: 18151.111 ops/s
Iteration  26: 18097.592 ops/s
Iteration  27: 17933.631 ops/s
Iteration  28: 18029.127 ops/s
Iteration  29: 17933.224 ops/s
Iteration  30: 17932.548 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client_noEndpoint":
  17644.344 ±(99.9%) 593.218 ops/s [Average]
  (min, avg, max) = (15384.775, 17644.344, 18151.111), stdev = 887.901
  CI (99.9%): [17051.125, 18237.562] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_client_noEndpoint  thrpt   30  17644.344 ± 593.218  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14013.410 ops/s
# Warmup Iteration   2: 15596.959 ops/s
# Warmup Iteration   3: 15565.983 ops/s
# Warmup Iteration   4: 15611.821 ops/s
# Warmup Iteration   5: 15510.485 ops/s
# Warmup Iteration   6: 15642.837 ops/s
# Warmup Iteration   7: 17112.082 ops/s
# Warmup Iteration   8: 18419.137 ops/s
# Warmup Iteration   9: 18382.163 ops/s
# Warmup Iteration  10: 18327.932 ops/s
# Warmup Iteration  11: 18372.644 ops/s
# Warmup Iteration  12: 18492.440 ops/s
# Warmup Iteration  13: 18533.139 ops/s
# Warmup Iteration  14: 18563.071 ops/s
# Warmup Iteration  15: 18468.259 ops/s
# Warmup Iteration  16: 18460.881 ops/s
# Warmup Iteration  17: 18490.025 ops/s
# Warmup Iteration  18: 18303.388 ops/s
# Warmup Iteration  19: 18400.057 ops/s
# Warmup Iteration  20: 18450.922 ops/s
# Warmup Iteration  21: 18447.856 ops/s
# Warmup Iteration  22: 18490.130 ops/s
# Warmup Iteration  23: 18451.239 ops/s
# Warmup Iteration  24: 18539.303 ops/s
# Warmup Iteration  25: 18474.455 ops/s
# Warmup Iteration  26: 18506.554 ops/s
# Warmup Iteration  27: 18520.630 ops/s
# Warmup Iteration  28: 18474.670 ops/s
# Warmup Iteration  29: 18441.958 ops/s
# Warmup Iteration  30: 18486.210 ops/s
Iteration   1: 18496.129 ops/s
Iteration   2: 18489.426 ops/s
Iteration   3: 18547.464 ops/s
Iteration   4: 18527.465 ops/s
Iteration   5: 18504.973 ops/s
Iteration   6: 18467.113 ops/s
Iteration   7: 18416.260 ops/s
Iteration   8: 18487.989 ops/s
Iteration   9: 18475.275 ops/s
Iteration  10: 18470.814 ops/s
Iteration  11: 18338.771 ops/s
Iteration  12: 18324.298 ops/s
Iteration  13: 18471.522 ops/s
Iteration  14: 18445.933 ops/s
Iteration  15: 18511.809 ops/s
Iteration  16: 18401.971 ops/s
Iteration  17: 18327.776 ops/s
Iteration  18: 16620.035 ops/s
Iteration  19: 15603.080 ops/s
Iteration  20: 15725.186 ops/s
Iteration  21: 15649.062 ops/s
Iteration  22: 16768.374 ops/s
Iteration  23: 18483.057 ops/s
Iteration  24: 18378.618 ops/s
Iteration  25: 18547.996 ops/s
Iteration  26: 18550.448 ops/s
Iteration  27: 18548.876 ops/s
Iteration  28: 18511.310 ops/s
Iteration  29: 18519.317 ops/s
Iteration  30: 18448.425 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer_noEndpoint":
  18068.626 ±(99.9%) 624.139 ops/s [Average]
  (min, avg, max) = (15603.080, 18068.626, 18550.448), stdev = 934.182
  CI (99.9%): [17444.487, 18692.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_consumer_noEndpoint  thrpt   30  18068.626 ± 624.139  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13596.706 ops/s
# Warmup Iteration   2: 15331.450 ops/s
# Warmup Iteration   3: 15289.243 ops/s
# Warmup Iteration   4: 15196.607 ops/s
# Warmup Iteration   5: 15298.063 ops/s
# Warmup Iteration   6: 15264.315 ops/s
# Warmup Iteration   7: 16250.236 ops/s
# Warmup Iteration   8: 17627.445 ops/s
# Warmup Iteration   9: 17691.354 ops/s
# Warmup Iteration  10: 17810.330 ops/s
# Warmup Iteration  11: 17810.904 ops/s
# Warmup Iteration  12: 17785.535 ops/s
# Warmup Iteration  13: 17744.176 ops/s
# Warmup Iteration  14: 17682.721 ops/s
# Warmup Iteration  15: 17740.923 ops/s
# Warmup Iteration  16: 17790.627 ops/s
# Warmup Iteration  17: 17747.232 ops/s
# Warmup Iteration  18: 17640.850 ops/s
# Warmup Iteration  19: 17780.839 ops/s
# Warmup Iteration  20: 17748.396 ops/s
# Warmup Iteration  21: 17735.845 ops/s
# Warmup Iteration  22: 17749.473 ops/s
# Warmup Iteration  23: 17757.951 ops/s
# Warmup Iteration  24: 17638.837 ops/s
# Warmup Iteration  25: 17613.148 ops/s
# Warmup Iteration  26: 17720.527 ops/s
# Warmup Iteration  27: 17739.026 ops/s
# Warmup Iteration  28: 17794.386 ops/s
# Warmup Iteration  29: 17779.996 ops/s
# Warmup Iteration  30: 17786.045 ops/s
Iteration   1: 17655.278 ops/s
Iteration   2: 17759.087 ops/s
Iteration   3: 17873.772 ops/s
Iteration   4: 17700.554 ops/s
Iteration   5: 17784.317 ops/s
Iteration   6: 17809.633 ops/s
Iteration   7: 17786.614 ops/s
Iteration   8: 17652.753 ops/s
Iteration   9: 17777.181 ops/s
Iteration  10: 17658.871 ops/s
Iteration  11: 17608.347 ops/s
Iteration  12: 17809.246 ops/s
Iteration  13: 17801.833 ops/s
Iteration  14: 17898.676 ops/s
Iteration  15: 17898.549 ops/s
Iteration  16: 17901.228 ops/s
Iteration  17: 17898.292 ops/s
Iteration  18: 17915.837 ops/s
Iteration  19: 17795.762 ops/s
Iteration  20: 16727.453 ops/s
Iteration  21: 15065.114 ops/s
Iteration  22: 15184.972 ops/s
Iteration  23: 15318.479 ops/s
Iteration  24: 15266.322 ops/s
Iteration  25: 17769.098 ops/s
Iteration  26: 17691.703 ops/s
Iteration  27: 17698.166 ops/s
Iteration  28: 17676.009 ops/s
Iteration  29: 17660.857 ops/s
Iteration  30: 17725.835 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer_noEndpoint":
  17392.328 ±(99.9%) 598.780 ops/s [Average]
  (min, avg, max) = (15065.114, 17392.328, 17915.837), stdev = 896.226
  CI (99.9%): [16793.548, 17991.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_producer_noEndpoint  thrpt   30  17392.328 ± 598.780  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server_noEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server_noEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14160.826 ops/s
# Warmup Iteration   2: 15783.056 ops/s
# Warmup Iteration   3: 15744.228 ops/s
# Warmup Iteration   4: 15751.781 ops/s
# Warmup Iteration   5: 15833.771 ops/s
# Warmup Iteration   6: 15788.356 ops/s
# Warmup Iteration   7: 17427.444 ops/s
# Warmup Iteration   8: 18403.520 ops/s
# Warmup Iteration   9: 18499.916 ops/s
# Warmup Iteration  10: 18523.707 ops/s
# Warmup Iteration  11: 18593.273 ops/s
# Warmup Iteration  12: 18605.644 ops/s
# Warmup Iteration  13: 18646.085 ops/s
# Warmup Iteration  14: 18568.384 ops/s
# Warmup Iteration  15: 18535.577 ops/s
# Warmup Iteration  16: 18615.757 ops/s
# Warmup Iteration  17: 18365.224 ops/s
# Warmup Iteration  18: 18533.457 ops/s
# Warmup Iteration  19: 18557.563 ops/s
# Warmup Iteration  20: 18577.086 ops/s
# Warmup Iteration  21: 18578.623 ops/s
# Warmup Iteration  22: 18502.657 ops/s
# Warmup Iteration  23: 18351.853 ops/s
# Warmup Iteration  24: 18428.761 ops/s
# Warmup Iteration  25: 18455.772 ops/s
# Warmup Iteration  26: 18520.910 ops/s
# Warmup Iteration  27: 18556.852 ops/s
# Warmup Iteration  28: 18462.221 ops/s
# Warmup Iteration  29: 18462.848 ops/s
# Warmup Iteration  30: 18453.955 ops/s
Iteration   1: 18397.821 ops/s
Iteration   2: 18600.813 ops/s
Iteration   3: 18481.830 ops/s
Iteration   4: 18534.592 ops/s
Iteration   5: 18490.271 ops/s
Iteration   6: 18431.076 ops/s
Iteration   7: 18422.019 ops/s
Iteration   8: 18416.093 ops/s
Iteration   9: 18521.227 ops/s
Iteration  10: 18389.396 ops/s
Iteration  11: 18528.306 ops/s
Iteration  12: 18578.513 ops/s
Iteration  13: 18477.703 ops/s
Iteration  14: 18481.569 ops/s
Iteration  15: 18422.781 ops/s
Iteration  16: 18512.906 ops/s
Iteration  17: 17853.186 ops/s
Iteration  18: 15720.929 ops/s
Iteration  19: 15822.137 ops/s
Iteration  20: 15824.460 ops/s
Iteration  21: 15729.257 ops/s
Iteration  22: 18523.864 ops/s
Iteration  23: 18590.236 ops/s
Iteration  24: 18575.354 ops/s
Iteration  25: 18580.662 ops/s
Iteration  26: 18610.161 ops/s
Iteration  27: 18535.659 ops/s
Iteration  28: 18464.602 ops/s
Iteration  29: 18474.649 ops/s
Iteration  30: 18365.494 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server_noEndpoint":
  18111.919 ±(99.9%) 629.574 ops/s [Average]
  (min, avg, max) = (15720.929, 18111.919, 18610.161), stdev = 942.317
  CI (99.9%): [17482.345, 18741.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesCoreAnnotations_server_noEndpoint  thrpt   30  18111.919 ± 629.574  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesDebugFalse$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesDebugFalse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65064.194 ops/s
# Warmup Iteration   2: 78207.379 ops/s
# Warmup Iteration   3: 78518.610 ops/s
# Warmup Iteration   4: 93519.733 ops/s
# Warmup Iteration   5: 107352.012 ops/s
# Warmup Iteration   6: 107377.718 ops/s
# Warmup Iteration   7: 106542.275 ops/s
# Warmup Iteration   8: 106488.120 ops/s
# Warmup Iteration   9: 105977.184 ops/s
# Warmup Iteration  10: 107297.184 ops/s
# Warmup Iteration  11: 107372.932 ops/s
# Warmup Iteration  12: 106701.396 ops/s
# Warmup Iteration  13: 106823.166 ops/s
# Warmup Iteration  14: 107296.596 ops/s
# Warmup Iteration  15: 107226.727 ops/s
# Warmup Iteration  16: 107479.539 ops/s
# Warmup Iteration  17: 107454.388 ops/s
# Warmup Iteration  18: 107355.177 ops/s
# Warmup Iteration  19: 80014.670 ops/s
# Warmup Iteration  20: 102791.977 ops/s
# Warmup Iteration  21: 107997.670 ops/s
# Warmup Iteration  22: 107021.441 ops/s
# Warmup Iteration  23: 107479.106 ops/s
# Warmup Iteration  24: 107278.919 ops/s
# Warmup Iteration  25: 107439.583 ops/s
# Warmup Iteration  26: 107765.646 ops/s
# Warmup Iteration  27: 107415.080 ops/s
# Warmup Iteration  28: 107699.202 ops/s
# Warmup Iteration  29: 107137.710 ops/s
# Warmup Iteration  30: 107225.053 ops/s
Iteration   1: 108089.311 ops/s
Iteration   2: 107339.986 ops/s
Iteration   3: 107830.129 ops/s
Iteration   4: 107117.223 ops/s
Iteration   5: 107352.909 ops/s
Iteration   6: 107412.309 ops/s
Iteration   7: 107512.338 ops/s
Iteration   8: 107545.635 ops/s
Iteration   9: 107495.911 ops/s
Iteration  10: 107390.047 ops/s
Iteration  11: 108294.081 ops/s
Iteration  12: 107525.853 ops/s
Iteration  13: 107014.750 ops/s
Iteration  14: 107085.701 ops/s
Iteration  15: 106863.723 ops/s
Iteration  16: 106674.355 ops/s
Iteration  17: 107112.258 ops/s
Iteration  18: 107781.353 ops/s
Iteration  19: 107576.340 ops/s
Iteration  20: 106510.019 ops/s
Iteration  21: 108186.495 ops/s
Iteration  22: 106870.153 ops/s
Iteration  23: 107037.462 ops/s
Iteration  24: 106856.122 ops/s
Iteration  25: 107178.648 ops/s
Iteration  26: 107073.329 ops/s
Iteration  27: 107116.744 ops/s
Iteration  28: 107519.183 ops/s
Iteration  29: 107392.310 ops/s
Iteration  30: 106651.223 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesDebugFalse":
  107313.530 ±(99.9%) 294.386 ops/s [Average]
  (min, avg, max) = (106510.019, 107313.530, 108294.081), stdev = 440.622
  CI (99.9%): [107019.144, 107607.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesDebugFalse  thrpt   30  107313.530 ± 294.386  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyAnnotationAndBinaryAnnotations$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyAnnotationAndBinaryAnnotations

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 43968.727 ops/s
# Warmup Iteration   2: 50454.041 ops/s
# Warmup Iteration   3: 50656.876 ops/s
# Warmup Iteration   4: 50429.095 ops/s
# Warmup Iteration   5: 61476.215 ops/s
# Warmup Iteration   6: 65010.530 ops/s
# Warmup Iteration   7: 65006.593 ops/s
# Warmup Iteration   8: 64791.417 ops/s
# Warmup Iteration   9: 64891.185 ops/s
# Warmup Iteration  10: 64989.401 ops/s
# Warmup Iteration  11: 64062.927 ops/s
# Warmup Iteration  12: 64721.962 ops/s
# Warmup Iteration  13: 64708.155 ops/s
# Warmup Iteration  14: 64478.431 ops/s
# Warmup Iteration  15: 64607.909 ops/s
# Warmup Iteration  16: 64485.089 ops/s
# Warmup Iteration  17: 64370.924 ops/s
# Warmup Iteration  18: 64188.550 ops/s
# Warmup Iteration  19: 64166.457 ops/s
# Warmup Iteration  20: 64364.275 ops/s
# Warmup Iteration  21: 64473.366 ops/s
# Warmup Iteration  22: 64070.976 ops/s
# Warmup Iteration  23: 64159.561 ops/s
# Warmup Iteration  24: 53905.130 ops/s
# Warmup Iteration  25: 55726.228 ops/s
# Warmup Iteration  26: 64660.742 ops/s
# Warmup Iteration  27: 64118.622 ops/s
# Warmup Iteration  28: 64468.487 ops/s
# Warmup Iteration  29: 64369.861 ops/s
# Warmup Iteration  30: 64353.723 ops/s
Iteration   1: 64554.048 ops/s
Iteration   2: 64526.013 ops/s
Iteration   3: 64142.434 ops/s
Iteration   4: 64590.802 ops/s
Iteration   5: 64350.382 ops/s
Iteration   6: 64551.773 ops/s
Iteration   7: 64320.173 ops/s
Iteration   8: 64370.518 ops/s
Iteration   9: 64280.785 ops/s
Iteration  10: 64717.677 ops/s
Iteration  11: 64554.062 ops/s
Iteration  12: 64892.482 ops/s
Iteration  13: 63938.116 ops/s
Iteration  14: 64376.874 ops/s
Iteration  15: 63998.090 ops/s
Iteration  16: 64198.538 ops/s
Iteration  17: 64402.275 ops/s
Iteration  18: 64359.167 ops/s
Iteration  19: 64436.906 ops/s
Iteration  20: 64855.057 ops/s
Iteration  21: 64974.777 ops/s
Iteration  22: 64831.639 ops/s
Iteration  23: 64660.572 ops/s
Iteration  24: 64448.519 ops/s
Iteration  25: 64545.041 ops/s
Iteration  26: 64550.468 ops/s
Iteration  27: 64275.458 ops/s
Iteration  28: 64171.257 ops/s
Iteration  29: 64278.600 ops/s
Iteration  30: 64804.207 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyAnnotationAndBinaryAnnotations":
  64465.224 ±(99.9%) 172.426 ops/s [Average]
  (min, avg, max) = (63938.116, 64465.224, 64974.777), stdev = 258.079
  CI (99.9%): [64292.798, 64637.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyAnnotationAndBinaryAnnotations  thrpt   30  64465.224 ± 172.426  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyLocalComponentWhenNoAnnotationsOrTags$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyLocalComponentWhenNoAnnotationsOrTags

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13069.241 ops/s
# Warmup Iteration   2: 14704.522 ops/s
# Warmup Iteration   3: 14710.316 ops/s
# Warmup Iteration   4: 14674.058 ops/s
# Warmup Iteration   5: 14745.804 ops/s
# Warmup Iteration   6: 14712.766 ops/s
# Warmup Iteration   7: 15328.191 ops/s
# Warmup Iteration   8: 17142.401 ops/s
# Warmup Iteration   9: 17099.456 ops/s
# Warmup Iteration  10: 17170.541 ops/s
# Warmup Iteration  11: 17094.695 ops/s
# Warmup Iteration  12: 17080.880 ops/s
# Warmup Iteration  13: 17087.720 ops/s
# Warmup Iteration  14: 17116.404 ops/s
# Warmup Iteration  15: 17248.731 ops/s
# Warmup Iteration  16: 17170.304 ops/s
# Warmup Iteration  17: 17070.172 ops/s
# Warmup Iteration  18: 17097.444 ops/s
# Warmup Iteration  19: 17114.729 ops/s
# Warmup Iteration  20: 17244.272 ops/s
# Warmup Iteration  21: 17035.253 ops/s
# Warmup Iteration  22: 17021.370 ops/s
# Warmup Iteration  23: 17056.916 ops/s
# Warmup Iteration  24: 17047.325 ops/s
# Warmup Iteration  25: 17214.174 ops/s
# Warmup Iteration  26: 17211.636 ops/s
# Warmup Iteration  27: 17170.379 ops/s
# Warmup Iteration  28: 17155.126 ops/s
# Warmup Iteration  29: 17063.308 ops/s
# Warmup Iteration  30: 17159.591 ops/s
Iteration   1: 17138.605 ops/s
Iteration   2: 17049.432 ops/s
Iteration   3: 17151.721 ops/s
Iteration   4: 17199.339 ops/s
Iteration   5: 17191.479 ops/s
Iteration   6: 17188.051 ops/s
Iteration   7: 17156.617 ops/s
Iteration   8: 17131.016 ops/s
Iteration   9: 17112.823 ops/s
Iteration  10: 17193.969 ops/s
Iteration  11: 17086.059 ops/s
Iteration  12: 17038.197 ops/s
Iteration  13: 17049.524 ops/s
Iteration  14: 17210.615 ops/s
Iteration  15: 17106.363 ops/s
Iteration  16: 17149.434 ops/s
Iteration  17: 17095.820 ops/s
Iteration  18: 17117.706 ops/s
Iteration  19: 17231.210 ops/s
Iteration  20: 17211.182 ops/s
Iteration  21: 16759.672 ops/s
Iteration  22: 14740.211 ops/s
Iteration  23: 14748.585 ops/s
Iteration  24: 14713.131 ops/s
Iteration  25: 14691.723 ops/s
Iteration  26: 16631.566 ops/s
Iteration  27: 17117.016 ops/s
Iteration  28: 17209.455 ops/s
Iteration  29: 17049.189 ops/s
Iteration  30: 17209.365 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyLocalComponentWhenNoAnnotationsOrTags":
  16789.302 ±(99.9%) 557.023 ops/s [Average]
  (min, avg, max) = (14691.723, 16789.302, 17231.210), stdev = 833.725
  CI (99.9%): [16232.280, 17346.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyLocalComponentWhenNoAnnotationsOrTags  thrpt   30  16789.302 ± 557.023  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36559.299 ops/s
# Warmup Iteration   2: 43231.927 ops/s
# Warmup Iteration   3: 43457.870 ops/s
# Warmup Iteration   4: 43437.893 ops/s
# Warmup Iteration   5: 47782.377 ops/s
# Warmup Iteration   6: 54535.829 ops/s
# Warmup Iteration   7: 54550.666 ops/s
# Warmup Iteration   8: 54570.901 ops/s
# Warmup Iteration   9: 54741.085 ops/s
# Warmup Iteration  10: 54689.539 ops/s
# Warmup Iteration  11: 54307.533 ops/s
# Warmup Iteration  12: 53600.644 ops/s
# Warmup Iteration  13: 54214.628 ops/s
# Warmup Iteration  14: 54276.721 ops/s
# Warmup Iteration  15: 54499.455 ops/s
# Warmup Iteration  16: 54152.266 ops/s
# Warmup Iteration  17: 54118.050 ops/s
# Warmup Iteration  18: 54490.097 ops/s
# Warmup Iteration  19: 54304.523 ops/s
# Warmup Iteration  20: 54512.213 ops/s
# Warmup Iteration  21: 54128.496 ops/s
# Warmup Iteration  22: 54097.451 ops/s
# Warmup Iteration  23: 54201.997 ops/s
# Warmup Iteration  24: 54135.673 ops/s
# Warmup Iteration  25: 54623.830 ops/s
# Warmup Iteration  26: 52959.540 ops/s
# Warmup Iteration  27: 43419.883 ops/s
# Warmup Iteration  28: 50097.320 ops/s
# Warmup Iteration  29: 54041.215 ops/s
# Warmup Iteration  30: 54439.361 ops/s
Iteration   1: 54071.811 ops/s
Iteration   2: 54165.142 ops/s
Iteration   3: 54208.192 ops/s
Iteration   4: 54536.373 ops/s
Iteration   5: 54415.568 ops/s
Iteration   6: 54076.748 ops/s
Iteration   7: 54592.280 ops/s
Iteration   8: 54811.569 ops/s
Iteration   9: 54623.240 ops/s
Iteration  10: 54526.887 ops/s
Iteration  11: 54748.571 ops/s
Iteration  12: 54547.353 ops/s
Iteration  13: 54238.194 ops/s
Iteration  14: 54048.767 ops/s
Iteration  15: 54514.067 ops/s
Iteration  16: 54581.047 ops/s
Iteration  17: 54536.018 ops/s
Iteration  18: 54546.436 ops/s
Iteration  19: 54684.783 ops/s
Iteration  20: 54557.003 ops/s
Iteration  21: 54719.060 ops/s
Iteration  22: 54493.926 ops/s
Iteration  23: 54537.123 ops/s
Iteration  24: 54389.687 ops/s
Iteration  25: 54154.596 ops/s
Iteration  26: 54246.679 ops/s
Iteration  27: 54344.359 ops/s
Iteration  28: 54495.275 ops/s
Iteration  29: 54714.186 ops/s
Iteration  30: 54498.825 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName":
  54454.125 ±(99.9%) 142.840 ops/s [Average]
  (min, avg, max) = (54048.767, 54454.125, 54811.569), stdev = 213.796
  CI (99.9%): [54311.285, 54596.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptyServiceName  thrpt   30  54454.125 ± 142.840  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptySpanName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptySpanName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99873.041 ops/s
# Warmup Iteration   2: 119765.974 ops/s
# Warmup Iteration   3: 153016.561 ops/s
# Warmup Iteration   4: 197015.070 ops/s
# Warmup Iteration   5: 196495.586 ops/s
# Warmup Iteration   6: 194293.316 ops/s
# Warmup Iteration   7: 197217.892 ops/s
# Warmup Iteration   8: 197299.665 ops/s
# Warmup Iteration   9: 197525.865 ops/s
# Warmup Iteration  10: 196729.669 ops/s
# Warmup Iteration  11: 196167.271 ops/s
# Warmup Iteration  12: 154158.479 ops/s
# Warmup Iteration  13: 178804.207 ops/s
# Warmup Iteration  14: 196951.011 ops/s
# Warmup Iteration  15: 197332.502 ops/s
# Warmup Iteration  16: 196839.078 ops/s
# Warmup Iteration  17: 195600.764 ops/s
# Warmup Iteration  18: 195826.744 ops/s
# Warmup Iteration  19: 196544.915 ops/s
# Warmup Iteration  20: 195793.074 ops/s
# Warmup Iteration  21: 195396.773 ops/s
# Warmup Iteration  22: 195866.870 ops/s
# Warmup Iteration  23: 196523.320 ops/s
# Warmup Iteration  24: 195907.977 ops/s
# Warmup Iteration  25: 195711.855 ops/s
# Warmup Iteration  26: 194487.834 ops/s
# Warmup Iteration  27: 194522.662 ops/s
# Warmup Iteration  28: 194999.586 ops/s
# Warmup Iteration  29: 195634.825 ops/s
# Warmup Iteration  30: 196037.992 ops/s
Iteration   1: 195815.500 ops/s
Iteration   2: 195955.211 ops/s
Iteration   3: 196659.983 ops/s
Iteration   4: 196435.021 ops/s
Iteration   5: 195319.835 ops/s
Iteration   6: 196494.469 ops/s
Iteration   7: 195948.508 ops/s
Iteration   8: 196624.806 ops/s
Iteration   9: 195573.675 ops/s
Iteration  10: 196409.727 ops/s
Iteration  11: 196788.314 ops/s
Iteration  12: 196272.734 ops/s
Iteration  13: 195777.338 ops/s
Iteration  14: 196735.946 ops/s
Iteration  15: 195872.551 ops/s
Iteration  16: 197167.237 ops/s
Iteration  17: 195947.466 ops/s
Iteration  18: 196184.929 ops/s
Iteration  19: 196110.144 ops/s
Iteration  20: 194978.830 ops/s
Iteration  21: 194731.658 ops/s
Iteration  22: 194659.220 ops/s
Iteration  23: 195001.722 ops/s
Iteration  24: 196258.123 ops/s
Iteration  25: 195028.795 ops/s
Iteration  26: 195223.662 ops/s
Iteration  27: 196337.545 ops/s
Iteration  28: 197650.847 ops/s
Iteration  29: 196272.312 ops/s
Iteration  30: 194435.512 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptySpanName":
  195955.721 ±(99.9%) 514.325 ops/s [Average]
  (min, avg, max) = (194435.512, 195955.721, 197650.847), stdev = 769.817
  CI (99.9%): [195441.396, 196470.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesEmptySpanName  thrpt   30  195955.721 ± 514.325  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesParentAnd128BitTraceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesParentAnd128BitTraceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31807.963 ops/s
# Warmup Iteration   2: 35774.247 ops/s
# Warmup Iteration   3: 35791.187 ops/s
# Warmup Iteration   4: 36054.619 ops/s
# Warmup Iteration   5: 36376.822 ops/s
# Warmup Iteration   6: 44352.743 ops/s
# Warmup Iteration   7: 44251.345 ops/s
# Warmup Iteration   8: 44211.022 ops/s
# Warmup Iteration   9: 44298.105 ops/s
# Warmup Iteration  10: 44329.148 ops/s
# Warmup Iteration  11: 43969.226 ops/s
# Warmup Iteration  12: 44013.777 ops/s
# Warmup Iteration  13: 44275.267 ops/s
# Warmup Iteration  14: 44266.936 ops/s
# Warmup Iteration  15: 43917.865 ops/s
# Warmup Iteration  16: 44103.095 ops/s
# Warmup Iteration  17: 44299.812 ops/s
# Warmup Iteration  18: 44181.747 ops/s
# Warmup Iteration  19: 44366.635 ops/s
# Warmup Iteration  20: 44130.853 ops/s
# Warmup Iteration  21: 44205.640 ops/s
# Warmup Iteration  22: 44203.246 ops/s
# Warmup Iteration  23: 44602.583 ops/s
# Warmup Iteration  24: 44617.673 ops/s
# Warmup Iteration  25: 44224.785 ops/s
# Warmup Iteration  26: 44277.642 ops/s
# Warmup Iteration  27: 44553.330 ops/s
# Warmup Iteration  28: 44604.065 ops/s
# Warmup Iteration  29: 38387.641 ops/s
# Warmup Iteration  30: 37766.574 ops/s
Iteration   1: 44230.936 ops/s
Iteration   2: 44097.467 ops/s
Iteration   3: 44497.328 ops/s
Iteration   4: 44551.243 ops/s
Iteration   5: 44352.444 ops/s
Iteration   6: 44197.901 ops/s
Iteration   7: 44441.952 ops/s
Iteration   8: 44410.995 ops/s
Iteration   9: 44248.399 ops/s
Iteration  10: 44395.941 ops/s
Iteration  11: 44204.690 ops/s
Iteration  12: 44481.255 ops/s
Iteration  13: 44519.478 ops/s
Iteration  14: 44338.697 ops/s
Iteration  15: 44340.934 ops/s
Iteration  16: 44305.430 ops/s
Iteration  17: 44472.380 ops/s
Iteration  18: 44481.276 ops/s
Iteration  19: 44422.125 ops/s
Iteration  20: 44309.838 ops/s
Iteration  21: 43889.896 ops/s
Iteration  22: 44093.786 ops/s
Iteration  23: 44321.920 ops/s
Iteration  24: 44294.492 ops/s
Iteration  25: 44251.171 ops/s
Iteration  26: 44232.418 ops/s
Iteration  27: 44286.211 ops/s
Iteration  28: 44467.591 ops/s
Iteration  29: 44107.725 ops/s
Iteration  30: 44192.340 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesParentAnd128BitTraceId":
  44314.609 ±(99.9%) 101.162 ops/s [Average]
  (min, avg, max) = (43889.896, 44314.609, 44551.243), stdev = 151.415
  CI (99.9%): [44213.447, 44415.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesParentAnd128BitTraceId  thrpt   30  44314.609 ± 101.162  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31430.828 ops/s
# Warmup Iteration   2: 35674.427 ops/s
# Warmup Iteration   3: 35768.213 ops/s
# Warmup Iteration   4: 35562.287 ops/s
# Warmup Iteration   5: 35710.898 ops/s
# Warmup Iteration   6: 43798.189 ops/s
# Warmup Iteration   7: 43849.658 ops/s
# Warmup Iteration   8: 43907.792 ops/s
# Warmup Iteration   9: 44063.010 ops/s
# Warmup Iteration  10: 43944.905 ops/s
# Warmup Iteration  11: 44071.070 ops/s
# Warmup Iteration  12: 43995.631 ops/s
# Warmup Iteration  13: 43503.978 ops/s
# Warmup Iteration  14: 43932.901 ops/s
# Warmup Iteration  15: 43915.630 ops/s
# Warmup Iteration  16: 43662.609 ops/s
# Warmup Iteration  17: 43739.823 ops/s
# Warmup Iteration  18: 43969.606 ops/s
# Warmup Iteration  19: 43815.788 ops/s
# Warmup Iteration  20: 43635.964 ops/s
# Warmup Iteration  21: 44134.495 ops/s
# Warmup Iteration  22: 43931.954 ops/s
# Warmup Iteration  23: 44115.848 ops/s
# Warmup Iteration  24: 44262.967 ops/s
# Warmup Iteration  25: 43918.829 ops/s
# Warmup Iteration  26: 43840.829 ops/s
# Warmup Iteration  27: 43570.344 ops/s
# Warmup Iteration  28: 43998.512 ops/s
# Warmup Iteration  29: 42601.546 ops/s
# Warmup Iteration  30: 35777.627 ops/s
Iteration   1: 36270.337 ops/s
Iteration   2: 43813.131 ops/s
Iteration   3: 43838.356 ops/s
Iteration   4: 43719.904 ops/s
Iteration   5: 44008.271 ops/s
Iteration   6: 44016.029 ops/s
Iteration   7: 44249.436 ops/s
Iteration   8: 43549.380 ops/s
Iteration   9: 43901.337 ops/s
Iteration  10: 43910.729 ops/s
Iteration  11: 43886.127 ops/s
Iteration  12: 43868.139 ops/s
Iteration  13: 43592.814 ops/s
Iteration  14: 43875.212 ops/s
Iteration  15: 43882.307 ops/s
Iteration  16: 43965.815 ops/s
Iteration  17: 44230.701 ops/s
Iteration  18: 43568.490 ops/s
Iteration  19: 44077.802 ops/s
Iteration  20: 43573.935 ops/s
Iteration  21: 43626.961 ops/s
Iteration  22: 43845.061 ops/s
Iteration  23: 43436.672 ops/s
Iteration  24: 43720.332 ops/s
Iteration  25: 43385.323 ops/s
Iteration  26: 43658.399 ops/s
Iteration  27: 44223.997 ops/s
Iteration  28: 43656.475 ops/s
Iteration  29: 43895.165 ops/s
Iteration  30: 43584.835 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration":
  43561.049 ±(99.9%) 932.133 ops/s [Average]
  (min, avg, max) = (36270.337, 43561.049, 44249.436), stdev = 1395.173
  CI (99.9%): [42628.916, 44493.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt      Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesTimestampAndDuration  thrpt   30  43561.049 ± 932.133  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesTraceAndSpanIds$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesTraceAndSpanIds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 71219.604 ops/s
# Warmup Iteration   2: 81332.222 ops/s
# Warmup Iteration   3: 83395.251 ops/s
# Warmup Iteration   4: 104926.281 ops/s
# Warmup Iteration   5: 116610.996 ops/s
# Warmup Iteration   6: 116527.547 ops/s
# Warmup Iteration   7: 116559.976 ops/s
# Warmup Iteration   8: 115894.713 ops/s
# Warmup Iteration   9: 116231.574 ops/s
# Warmup Iteration  10: 115842.479 ops/s
# Warmup Iteration  11: 115546.866 ops/s
# Warmup Iteration  12: 115911.510 ops/s
# Warmup Iteration  13: 116519.196 ops/s
# Warmup Iteration  14: 116287.711 ops/s
# Warmup Iteration  15: 115796.407 ops/s
# Warmup Iteration  16: 115573.230 ops/s
# Warmup Iteration  17: 115420.203 ops/s
# Warmup Iteration  18: 85220.153 ops/s
# Warmup Iteration  19: 112641.634 ops/s
# Warmup Iteration  20: 115273.968 ops/s
# Warmup Iteration  21: 115115.316 ops/s
# Warmup Iteration  22: 115782.606 ops/s
# Warmup Iteration  23: 115960.865 ops/s
# Warmup Iteration  24: 115771.407 ops/s
# Warmup Iteration  25: 115157.594 ops/s
# Warmup Iteration  26: 115036.190 ops/s
# Warmup Iteration  27: 114195.008 ops/s
# Warmup Iteration  28: 115494.620 ops/s
# Warmup Iteration  29: 114522.588 ops/s
# Warmup Iteration  30: 115348.280 ops/s
Iteration   1: 115110.999 ops/s
Iteration   2: 114698.985 ops/s
Iteration   3: 115511.015 ops/s
Iteration   4: 114745.430 ops/s
Iteration   5: 115600.389 ops/s
Iteration   6: 116014.136 ops/s
Iteration   7: 114775.692 ops/s
Iteration   8: 115072.728 ops/s
Iteration   9: 115528.154 ops/s
Iteration  10: 115868.894 ops/s
Iteration  11: 115545.543 ops/s
Iteration  12: 113983.965 ops/s
Iteration  13: 115376.320 ops/s
Iteration  14: 115036.459 ops/s
Iteration  15: 115828.524 ops/s
Iteration  16: 116011.134 ops/s
Iteration  17: 115848.546 ops/s
Iteration  18: 116196.989 ops/s
Iteration  19: 115314.399 ops/s
Iteration  20: 114603.871 ops/s
Iteration  21: 115179.249 ops/s
Iteration  22: 114352.081 ops/s
Iteration  23: 115612.933 ops/s
Iteration  24: 115264.433 ops/s
Iteration  25: 115253.762 ops/s
Iteration  26: 116473.590 ops/s
Iteration  27: 115541.735 ops/s
Iteration  28: 115755.204 ops/s
Iteration  29: 115827.896 ops/s
Iteration  30: 115104.591 ops/s


Result "zipkin2.internal.V1ThriftSpanWriterTest._Benchmark.benchmark_writesTraceAndSpanIds":
  115367.922 ±(99.9%) 374.879 ops/s [Average]
  (min, avg, max) = (113983.965, 115367.922, 116473.590), stdev = 561.102
  CI (99.9%): [114993.042, 115742.801] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
V1ThriftSpanWriterTest._Benchmark.benchmark_writesTraceAndSpanIds  thrpt   30  115367.922 ± 374.879  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_omitsEmptyServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_omitsEmptyServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48087.561 ops/s
# Warmup Iteration   2: 87156.358 ops/s
# Warmup Iteration   3: 159802.009 ops/s
# Warmup Iteration   4: 194293.075 ops/s
# Warmup Iteration   5: 191007.743 ops/s
# Warmup Iteration   6: 195644.450 ops/s
# Warmup Iteration   7: 196176.877 ops/s
# Warmup Iteration   8: 168603.885 ops/s
# Warmup Iteration   9: 179230.476 ops/s
# Warmup Iteration  10: 197084.676 ops/s
# Warmup Iteration  11: 196634.613 ops/s
# Warmup Iteration  12: 198046.274 ops/s
# Warmup Iteration  13: 198922.723 ops/s
# Warmup Iteration  14: 196637.792 ops/s
# Warmup Iteration  15: 195564.368 ops/s
# Warmup Iteration  16: 194294.214 ops/s
# Warmup Iteration  17: 193358.741 ops/s
# Warmup Iteration  18: 193564.144 ops/s
# Warmup Iteration  19: 192612.322 ops/s
# Warmup Iteration  20: 193731.781 ops/s
# Warmup Iteration  21: 191885.851 ops/s
# Warmup Iteration  22: 194714.689 ops/s
# Warmup Iteration  23: 194137.970 ops/s
# Warmup Iteration  24: 193336.622 ops/s
# Warmup Iteration  25: 196336.481 ops/s
# Warmup Iteration  26: 194560.977 ops/s
# Warmup Iteration  27: 194897.260 ops/s
# Warmup Iteration  28: 196236.507 ops/s
# Warmup Iteration  29: 194846.367 ops/s
# Warmup Iteration  30: 193877.586 ops/s
Iteration   1: 193396.765 ops/s
Iteration   2: 192983.700 ops/s
Iteration   3: 195225.404 ops/s
Iteration   4: 193612.554 ops/s
Iteration   5: 196959.457 ops/s
Iteration   6: 195607.031 ops/s
Iteration   7: 193286.547 ops/s
Iteration   8: 193971.654 ops/s
Iteration   9: 196717.781 ops/s
Iteration  10: 197233.530 ops/s
Iteration  11: 194291.731 ops/s
Iteration  12: 195477.467 ops/s
Iteration  13: 195382.828 ops/s
Iteration  14: 194476.484 ops/s
Iteration  15: 197909.596 ops/s
Iteration  16: 194662.091 ops/s
Iteration  17: 193341.552 ops/s
Iteration  18: 192949.396 ops/s
Iteration  19: 196861.863 ops/s
Iteration  20: 195536.035 ops/s
Iteration  21: 194435.923 ops/s
Iteration  22: 194793.684 ops/s
Iteration  23: 193631.753 ops/s
Iteration  24: 195134.139 ops/s
Iteration  25: 194810.879 ops/s
Iteration  26: 197628.953 ops/s
Iteration  27: 193960.788 ops/s
Iteration  28: 194967.551 ops/s
Iteration  29: 195806.624 ops/s
Iteration  30: 196733.253 ops/s


Result "zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_omitsEmptyServiceName":
  195059.567 ±(99.9%) 953.121 ops/s [Average]
  (min, avg, max) = (192949.396, 195059.567, 197909.596), stdev = 1426.586
  CI (99.9%): [194106.446, 196012.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
V2SpanWriterTest._Benchmark.benchmark_omitsEmptyServiceName  thrpt   30  195059.567 ± 953.121  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_omitsEmptySpanName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_omitsEmptySpanName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 92990.860 ops/s
# Warmup Iteration   2: 134984.086 ops/s
# Warmup Iteration   3: 223521.741 ops/s
# Warmup Iteration   4: 221064.485 ops/s
# Warmup Iteration   5: 221171.486 ops/s
# Warmup Iteration   6: 221121.954 ops/s
# Warmup Iteration   7: 204477.628 ops/s
# Warmup Iteration   8: 180935.710 ops/s
# Warmup Iteration   9: 221256.015 ops/s
# Warmup Iteration  10: 221951.105 ops/s
# Warmup Iteration  11: 220066.973 ops/s
# Warmup Iteration  12: 222112.504 ops/s
# Warmup Iteration  13: 223161.411 ops/s
# Warmup Iteration  14: 222509.098 ops/s
# Warmup Iteration  15: 221588.245 ops/s
# Warmup Iteration  16: 222843.666 ops/s
# Warmup Iteration  17: 221315.029 ops/s
# Warmup Iteration  18: 221112.104 ops/s
# Warmup Iteration  19: 221328.981 ops/s
# Warmup Iteration  20: 222048.146 ops/s
# Warmup Iteration  21: 221893.227 ops/s
# Warmup Iteration  22: 222207.780 ops/s
# Warmup Iteration  23: 222362.605 ops/s
# Warmup Iteration  24: 221838.420 ops/s
# Warmup Iteration  25: 222676.954 ops/s
# Warmup Iteration  26: 222642.242 ops/s
# Warmup Iteration  27: 224261.982 ops/s
# Warmup Iteration  28: 223085.687 ops/s
# Warmup Iteration  29: 223542.064 ops/s
# Warmup Iteration  30: 221062.041 ops/s
Iteration   1: 221152.518 ops/s
Iteration   2: 222219.660 ops/s
Iteration   3: 224369.826 ops/s
Iteration   4: 224448.497 ops/s
Iteration   5: 223627.419 ops/s
Iteration   6: 222021.741 ops/s
Iteration   7: 221605.015 ops/s
Iteration   8: 221746.825 ops/s
Iteration   9: 221134.097 ops/s
Iteration  10: 224195.084 ops/s
Iteration  11: 222878.752 ops/s
Iteration  12: 221817.439 ops/s
Iteration  13: 219924.147 ops/s
Iteration  14: 220785.701 ops/s
Iteration  15: 223411.512 ops/s
Iteration  16: 223015.496 ops/s
Iteration  17: 221818.246 ops/s
Iteration  18: 221643.823 ops/s
Iteration  19: 221193.033 ops/s
Iteration  20: 222633.480 ops/s
Iteration  21: 222244.277 ops/s
Iteration  22: 223743.123 ops/s
Iteration  23: 222758.754 ops/s
Iteration  24: 222519.775 ops/s
Iteration  25: 223078.936 ops/s
Iteration  26: 220428.139 ops/s
Iteration  27: 219735.618 ops/s
Iteration  28: 221235.049 ops/s
Iteration  29: 222296.138 ops/s
Iteration  30: 222089.406 ops/s


Result "zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_omitsEmptySpanName":
  222192.384 ±(99.9%) 822.180 ops/s [Average]
  (min, avg, max) = (219735.618, 222192.384, 224448.497), stdev = 1230.600
  CI (99.9%): [221370.204, 223014.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
V2SpanWriterTest._Benchmark.benchmark_omitsEmptySpanName  thrpt   30  222192.384 ± 822.180  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_sizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_sizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 138749.482 ops/s
# Warmup Iteration   2: 183862.567 ops/s
# Warmup Iteration   3: 292601.760 ops/s
# Warmup Iteration   4: 354821.543 ops/s
# Warmup Iteration   5: 347729.170 ops/s
# Warmup Iteration   6: 351110.473 ops/s
# Warmup Iteration   7: 359158.896 ops/s
# Warmup Iteration   8: 358410.106 ops/s
# Warmup Iteration   9: 342026.939 ops/s
# Warmup Iteration  10: 276721.252 ops/s
# Warmup Iteration  11: 354434.177 ops/s
# Warmup Iteration  12: 355181.130 ops/s
# Warmup Iteration  13: 357637.527 ops/s
# Warmup Iteration  14: 355155.220 ops/s
# Warmup Iteration  15: 353379.593 ops/s
# Warmup Iteration  16: 351105.811 ops/s
# Warmup Iteration  17: 356134.749 ops/s
# Warmup Iteration  18: 352412.388 ops/s
# Warmup Iteration  19: 351937.860 ops/s
# Warmup Iteration  20: 349940.443 ops/s
# Warmup Iteration  21: 352519.861 ops/s
# Warmup Iteration  22: 352523.466 ops/s
# Warmup Iteration  23: 351038.601 ops/s
# Warmup Iteration  24: 352855.461 ops/s
# Warmup Iteration  25: 345794.574 ops/s
# Warmup Iteration  26: 353942.525 ops/s
# Warmup Iteration  27: 354140.565 ops/s
# Warmup Iteration  28: 351988.265 ops/s
# Warmup Iteration  29: 351859.811 ops/s
# Warmup Iteration  30: 353347.234 ops/s
Iteration   1: 351010.709 ops/s
Iteration   2: 352228.321 ops/s
Iteration   3: 349205.222 ops/s
Iteration   4: 352425.118 ops/s
Iteration   5: 351890.062 ops/s
Iteration   6: 352886.073 ops/s
Iteration   7: 351879.128 ops/s
Iteration   8: 355528.580 ops/s
Iteration   9: 353204.050 ops/s
Iteration  10: 348006.667 ops/s
Iteration  11: 351030.958 ops/s
Iteration  12: 355363.834 ops/s
Iteration  13: 347312.986 ops/s
Iteration  14: 352564.485 ops/s
Iteration  15: 356887.339 ops/s
Iteration  16: 344453.802 ops/s
Iteration  17: 352992.653 ops/s
Iteration  18: 347249.315 ops/s
Iteration  19: 352013.751 ops/s
Iteration  20: 346953.653 ops/s
Iteration  21: 354302.096 ops/s
Iteration  22: 354437.641 ops/s
Iteration  23: 350288.057 ops/s
Iteration  24: 351248.514 ops/s
Iteration  25: 353567.710 ops/s
Iteration  26: 355795.018 ops/s
Iteration  27: 354649.983 ops/s
Iteration  28: 353656.855 ops/s
Iteration  29: 351293.660 ops/s
Iteration  30: 349967.573 ops/s


Result "zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_sizeInBytes":
  351809.794 ±(99.9%) 1957.653 ops/s [Average]
  (min, avg, max) = (344453.802, 351809.794, 356887.339), stdev = 2930.123
  CI (99.9%): [349852.141, 353767.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
V2SpanWriterTest._Benchmark.benchmark_sizeInBytes  thrpt   30  351809.794 ± 1957.653  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_tagsAreAMap$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_tagsAreAMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76460.888 ops/s
# Warmup Iteration   2: 103102.618 ops/s
# Warmup Iteration   3: 193124.470 ops/s
# Warmup Iteration   4: 203712.047 ops/s
# Warmup Iteration   5: 205359.995 ops/s
# Warmup Iteration   6: 203047.233 ops/s
# Warmup Iteration   7: 203346.981 ops/s
# Warmup Iteration   8: 162469.589 ops/s
# Warmup Iteration   9: 199802.607 ops/s
# Warmup Iteration  10: 207796.530 ops/s
# Warmup Iteration  11: 207460.784 ops/s
# Warmup Iteration  12: 207696.300 ops/s
# Warmup Iteration  13: 206350.944 ops/s
# Warmup Iteration  14: 207631.934 ops/s
# Warmup Iteration  15: 206006.318 ops/s
# Warmup Iteration  16: 204672.842 ops/s
# Warmup Iteration  17: 207492.468 ops/s
# Warmup Iteration  18: 205208.450 ops/s
# Warmup Iteration  19: 204053.603 ops/s
# Warmup Iteration  20: 204230.716 ops/s
# Warmup Iteration  21: 204297.106 ops/s
# Warmup Iteration  22: 205066.923 ops/s
# Warmup Iteration  23: 204371.878 ops/s
# Warmup Iteration  24: 206850.185 ops/s
# Warmup Iteration  25: 207034.608 ops/s
# Warmup Iteration  26: 206355.113 ops/s
# Warmup Iteration  27: 206933.498 ops/s
# Warmup Iteration  28: 206383.214 ops/s
# Warmup Iteration  29: 206102.067 ops/s
# Warmup Iteration  30: 206281.512 ops/s
Iteration   1: 207757.432 ops/s
Iteration   2: 207683.285 ops/s
Iteration   3: 207862.945 ops/s
Iteration   4: 206640.012 ops/s
Iteration   5: 206358.907 ops/s
Iteration   6: 205987.543 ops/s
Iteration   7: 205268.396 ops/s
Iteration   8: 206525.957 ops/s
Iteration   9: 204721.732 ops/s
Iteration  10: 206914.673 ops/s
Iteration  11: 206065.511 ops/s
Iteration  12: 206545.831 ops/s
Iteration  13: 204625.048 ops/s
Iteration  14: 207714.250 ops/s
Iteration  15: 207613.907 ops/s
Iteration  16: 206927.970 ops/s
Iteration  17: 207714.651 ops/s
Iteration  18: 207400.314 ops/s
Iteration  19: 203956.343 ops/s
Iteration  20: 206628.609 ops/s
Iteration  21: 206094.850 ops/s
Iteration  22: 205933.401 ops/s
Iteration  23: 205031.106 ops/s
Iteration  24: 207811.875 ops/s
Iteration  25: 205261.509 ops/s
Iteration  26: 207777.592 ops/s
Iteration  27: 207251.894 ops/s
Iteration  28: 207343.231 ops/s
Iteration  29: 207833.119 ops/s
Iteration  30: 207168.198 ops/s


Result "zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_tagsAreAMap":
  206614.003 ±(99.9%) 744.498 ops/s [Average]
  (min, avg, max) = (203956.343, 206614.003, 207862.945), stdev = 1114.330
  CI (99.9%): [205869.505, 207358.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
V2SpanWriterTest._Benchmark.benchmark_tagsAreAMap  thrpt   30  206614.003 ± 744.498  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_writes128BitTraceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_writes128BitTraceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 85820.064 ops/s
# Warmup Iteration   2: 108931.847 ops/s
# Warmup Iteration   3: 207683.281 ops/s
# Warmup Iteration   4: 215658.465 ops/s
# Warmup Iteration   5: 215886.815 ops/s
# Warmup Iteration   6: 215206.549 ops/s
# Warmup Iteration   7: 216072.197 ops/s
# Warmup Iteration   8: 163778.357 ops/s
# Warmup Iteration   9: 213994.643 ops/s
# Warmup Iteration  10: 215269.190 ops/s
# Warmup Iteration  11: 216400.338 ops/s
# Warmup Iteration  12: 217593.498 ops/s
# Warmup Iteration  13: 217215.752 ops/s
# Warmup Iteration  14: 216902.479 ops/s
# Warmup Iteration  15: 217715.220 ops/s
# Warmup Iteration  16: 217942.812 ops/s
# Warmup Iteration  17: 218601.514 ops/s
# Warmup Iteration  18: 216686.652 ops/s
# Warmup Iteration  19: 215469.878 ops/s
# Warmup Iteration  20: 216361.655 ops/s
# Warmup Iteration  21: 215741.215 ops/s
# Warmup Iteration  22: 216001.579 ops/s
# Warmup Iteration  23: 215608.892 ops/s
# Warmup Iteration  24: 217986.286 ops/s
# Warmup Iteration  25: 216416.682 ops/s
# Warmup Iteration  26: 218253.118 ops/s
# Warmup Iteration  27: 217125.992 ops/s
# Warmup Iteration  28: 217451.129 ops/s
# Warmup Iteration  29: 216239.958 ops/s
# Warmup Iteration  30: 216129.203 ops/s
Iteration   1: 217384.502 ops/s
Iteration   2: 216312.346 ops/s
Iteration   3: 215472.648 ops/s
Iteration   4: 217065.349 ops/s
Iteration   5: 217778.026 ops/s
Iteration   6: 216214.913 ops/s
Iteration   7: 216624.446 ops/s
Iteration   8: 215647.399 ops/s
Iteration   9: 215367.730 ops/s
Iteration  10: 216779.850 ops/s
Iteration  11: 215605.221 ops/s
Iteration  12: 217805.076 ops/s
Iteration  13: 217960.784 ops/s
Iteration  14: 217779.016 ops/s
Iteration  15: 216196.455 ops/s
Iteration  16: 215745.078 ops/s
Iteration  17: 213648.384 ops/s
Iteration  18: 215168.476 ops/s
Iteration  19: 217170.751 ops/s
Iteration  20: 215193.241 ops/s
Iteration  21: 215403.045 ops/s
Iteration  22: 215275.823 ops/s
Iteration  23: 217506.161 ops/s
Iteration  24: 217514.041 ops/s
Iteration  25: 215761.269 ops/s
Iteration  26: 215758.714 ops/s
Iteration  27: 215456.360 ops/s
Iteration  28: 216347.926 ops/s
Iteration  29: 214249.063 ops/s
Iteration  30: 215943.876 ops/s


Result "zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_writes128BitTraceId":
  216204.532 ±(99.9%) 730.986 ops/s [Average]
  (min, avg, max) = (213648.384, 216204.532, 217960.784), stdev = 1094.106
  CI (99.9%): [215473.546, 216935.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
V2SpanWriterTest._Benchmark.benchmark_writes128BitTraceId  thrpt   30  216204.532 ± 730.986  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_writesAnnotationWithoutEndpoint$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_writesAnnotationWithoutEndpoint

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 73267.903 ops/s
# Warmup Iteration   2: 104763.454 ops/s
# Warmup Iteration   3: 201161.167 ops/s
# Warmup Iteration   4: 201581.549 ops/s
# Warmup Iteration   5: 201867.811 ops/s
# Warmup Iteration   6: 204455.108 ops/s
# Warmup Iteration   7: 204492.332 ops/s
# Warmup Iteration   8: 154669.176 ops/s
# Warmup Iteration   9: 205572.118 ops/s
# Warmup Iteration  10: 206417.497 ops/s
# Warmup Iteration  11: 205192.341 ops/s
# Warmup Iteration  12: 207174.706 ops/s
# Warmup Iteration  13: 204542.293 ops/s
# Warmup Iteration  14: 206213.690 ops/s
# Warmup Iteration  15: 206106.080 ops/s
# Warmup Iteration  16: 204749.405 ops/s
# Warmup Iteration  17: 205264.896 ops/s
# Warmup Iteration  18: 203745.079 ops/s
# Warmup Iteration  19: 203427.970 ops/s
# Warmup Iteration  20: 205490.975 ops/s
# Warmup Iteration  21: 206400.940 ops/s
# Warmup Iteration  22: 206290.967 ops/s
# Warmup Iteration  23: 205268.364 ops/s
# Warmup Iteration  24: 205089.547 ops/s
# Warmup Iteration  25: 205953.170 ops/s
# Warmup Iteration  26: 206011.300 ops/s
# Warmup Iteration  27: 207484.632 ops/s
# Warmup Iteration  28: 204977.789 ops/s
# Warmup Iteration  29: 205142.297 ops/s
# Warmup Iteration  30: 206069.115 ops/s
Iteration   1: 205709.114 ops/s
Iteration   2: 206757.797 ops/s
Iteration   3: 208407.192 ops/s
Iteration   4: 206951.738 ops/s
Iteration   5: 206048.957 ops/s
Iteration   6: 205584.783 ops/s
Iteration   7: 206178.444 ops/s
Iteration   8: 205786.027 ops/s
Iteration   9: 205024.124 ops/s
Iteration  10: 204664.139 ops/s
Iteration  11: 203469.189 ops/s
Iteration  12: 205194.331 ops/s
Iteration  13: 206728.574 ops/s
Iteration  14: 204555.844 ops/s
Iteration  15: 203448.067 ops/s
Iteration  16: 205630.229 ops/s
Iteration  17: 206076.024 ops/s
Iteration  18: 205714.682 ops/s
Iteration  19: 202779.323 ops/s
Iteration  20: 203611.050 ops/s
Iteration  21: 203934.487 ops/s
Iteration  22: 205135.805 ops/s
Iteration  23: 207311.223 ops/s
Iteration  24: 205871.831 ops/s
Iteration  25: 205435.328 ops/s
Iteration  26: 204457.001 ops/s
Iteration  27: 205388.263 ops/s
Iteration  28: 205828.956 ops/s
Iteration  29: 205873.815 ops/s
Iteration  30: 203755.219 ops/s


Result "zipkin2.internal.V2SpanWriterTest._Benchmark.benchmark_writesAnnotationWithoutEndpoint":
  205377.052 ±(99.9%) 842.370 ops/s [Average]
  (min, avg, max) = (202779.323, 205377.052, 208407.192), stdev = 1260.819
  CI (99.9%): [204534.682, 206219.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
V2SpanWriterTest._Benchmark.benchmark_writesAnnotationWithoutEndpoint  thrpt   30  205377.052 ± 842.370  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_emoji$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_emoji

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 335722.259 ops/s
# Warmup Iteration   2: 387898.415 ops/s
# Warmup Iteration   3: 774412.749 ops/s
# Warmup Iteration   4: 806777.078 ops/s
# Warmup Iteration   5: 815253.369 ops/s
# Warmup Iteration   6: 818435.382 ops/s
# Warmup Iteration   7: 816498.586 ops/s
# Warmup Iteration   8: 683278.296 ops/s
# Warmup Iteration   9: 667607.467 ops/s
# Warmup Iteration  10: 814621.633 ops/s
# Warmup Iteration  11: 814295.349 ops/s
# Warmup Iteration  12: 811283.070 ops/s
# Warmup Iteration  13: 812418.677 ops/s
# Warmup Iteration  14: 816902.903 ops/s
# Warmup Iteration  15: 812944.618 ops/s
# Warmup Iteration  16: 813510.931 ops/s
# Warmup Iteration  17: 815370.666 ops/s
# Warmup Iteration  18: 813122.942 ops/s
# Warmup Iteration  19: 815668.922 ops/s
# Warmup Iteration  20: 817909.351 ops/s
# Warmup Iteration  21: 816820.012 ops/s
# Warmup Iteration  22: 814410.902 ops/s
# Warmup Iteration  23: 813654.252 ops/s
# Warmup Iteration  24: 815840.541 ops/s
# Warmup Iteration  25: 813059.218 ops/s
# Warmup Iteration  26: 816692.975 ops/s
# Warmup Iteration  27: 815724.192 ops/s
# Warmup Iteration  28: 814245.716 ops/s
# Warmup Iteration  29: 817064.011 ops/s
# Warmup Iteration  30: 814511.226 ops/s
Iteration   1: 816192.325 ops/s
Iteration   2: 815652.243 ops/s
Iteration   3: 817983.867 ops/s
Iteration   4: 814837.611 ops/s
Iteration   5: 810099.890 ops/s
Iteration   6: 816702.930 ops/s
Iteration   7: 816583.798 ops/s
Iteration   8: 819103.389 ops/s
Iteration   9: 814889.503 ops/s
Iteration  10: 810303.161 ops/s
Iteration  11: 813252.648 ops/s
Iteration  12: 817831.062 ops/s
Iteration  13: 817423.732 ops/s
Iteration  14: 815272.354 ops/s
Iteration  15: 807903.404 ops/s
Iteration  16: 814688.837 ops/s
Iteration  17: 816933.343 ops/s
Iteration  18: 816095.353 ops/s
Iteration  19: 813223.034 ops/s
Iteration  20: 810840.024 ops/s
Iteration  21: 810554.127 ops/s
Iteration  22: 816448.669 ops/s
Iteration  23: 814308.127 ops/s
Iteration  24: 812471.601 ops/s
Iteration  25: 811262.305 ops/s
Iteration  26: 814707.820 ops/s
Iteration  27: 813616.792 ops/s
Iteration  28: 816315.631 ops/s
Iteration  29: 814097.051 ops/s
Iteration  30: 815849.955 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_emoji":
  814514.820 ±(99.9%) 1810.226 ops/s [Average]
  (min, avg, max) = (807903.404, 814514.820, 819103.389), stdev = 2709.461
  CI (99.9%): [812704.594, 816325.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_emoji  thrpt   30  814514.820 ± 1810.226  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_32_largest$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_32_largest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394426.109 ops/s
# Warmup Iteration   2: 439510.597 ops/s
# Warmup Iteration   3: 849815.957 ops/s
# Warmup Iteration   4: 904945.455 ops/s
# Warmup Iteration   5: 902098.850 ops/s
# Warmup Iteration   6: 906417.683 ops/s
# Warmup Iteration   7: 909841.980 ops/s
# Warmup Iteration   8: 851461.985 ops/s
# Warmup Iteration   9: 669214.927 ops/s
# Warmup Iteration  10: 902268.874 ops/s
# Warmup Iteration  11: 906093.934 ops/s
# Warmup Iteration  12: 905307.882 ops/s
# Warmup Iteration  13: 902577.058 ops/s
# Warmup Iteration  14: 905144.049 ops/s
# Warmup Iteration  15: 901555.789 ops/s
# Warmup Iteration  16: 907047.292 ops/s
# Warmup Iteration  17: 903040.179 ops/s
# Warmup Iteration  18: 904294.318 ops/s
# Warmup Iteration  19: 903368.312 ops/s
# Warmup Iteration  20: 904692.010 ops/s
# Warmup Iteration  21: 905164.576 ops/s
# Warmup Iteration  22: 901680.278 ops/s
# Warmup Iteration  23: 897768.655 ops/s
# Warmup Iteration  24: 902276.550 ops/s
# Warmup Iteration  25: 901136.563 ops/s
# Warmup Iteration  26: 901883.137 ops/s
# Warmup Iteration  27: 904009.515 ops/s
# Warmup Iteration  28: 894736.281 ops/s
# Warmup Iteration  29: 903375.700 ops/s
# Warmup Iteration  30: 900767.231 ops/s
Iteration   1: 902272.678 ops/s
Iteration   2: 904677.464 ops/s
Iteration   3: 896939.797 ops/s
Iteration   4: 892281.791 ops/s
Iteration   5: 892439.116 ops/s
Iteration   6: 899380.402 ops/s
Iteration   7: 899044.302 ops/s
Iteration   8: 899559.910 ops/s
Iteration   9: 904549.740 ops/s
Iteration  10: 898470.781 ops/s
Iteration  11: 902221.730 ops/s
Iteration  12: 904009.165 ops/s
Iteration  13: 900069.799 ops/s
Iteration  14: 894016.049 ops/s
Iteration  15: 900473.704 ops/s
Iteration  16: 896726.067 ops/s
Iteration  17: 897344.127 ops/s
Iteration  18: 895201.933 ops/s
Iteration  19: 896848.584 ops/s
Iteration  20: 899745.621 ops/s
Iteration  21: 904679.612 ops/s
Iteration  22: 906279.218 ops/s
Iteration  23: 902638.977 ops/s
Iteration  24: 900254.005 ops/s
Iteration  25: 898345.924 ops/s
Iteration  26: 896698.199 ops/s
Iteration  27: 902980.034 ops/s
Iteration  28: 897679.890 ops/s
Iteration  29: 904806.418 ops/s
Iteration  30: 893501.461 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_32_largest":
  899471.217 ±(99.9%) 2598.613 ops/s [Average]
  (min, avg, max) = (892281.791, 899471.217, 906279.218), stdev = 3889.481
  CI (99.9%): [896872.604, 902069.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_32_largest  thrpt   30  899471.217 ± 2598.613  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_64_largest$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_64_largest

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 403701.832 ops/s
# Warmup Iteration   2: 451125.476 ops/s
# Warmup Iteration   3: 857934.085 ops/s
# Warmup Iteration   4: 905905.540 ops/s
# Warmup Iteration   5: 899661.305 ops/s
# Warmup Iteration   6: 915201.538 ops/s
# Warmup Iteration   7: 906457.820 ops/s
# Warmup Iteration   8: 846316.900 ops/s
# Warmup Iteration   9: 669485.055 ops/s
# Warmup Iteration  10: 912861.793 ops/s
# Warmup Iteration  11: 919372.399 ops/s
# Warmup Iteration  12: 913117.418 ops/s
# Warmup Iteration  13: 920932.466 ops/s
# Warmup Iteration  14: 913526.331 ops/s
# Warmup Iteration  15: 911041.867 ops/s
# Warmup Iteration  16: 921241.643 ops/s
# Warmup Iteration  17: 907425.281 ops/s
# Warmup Iteration  18: 917332.198 ops/s
# Warmup Iteration  19: 916596.854 ops/s
# Warmup Iteration  20: 908007.906 ops/s
# Warmup Iteration  21: 913622.087 ops/s
# Warmup Iteration  22: 904197.709 ops/s
# Warmup Iteration  23: 912723.218 ops/s
# Warmup Iteration  24: 912312.285 ops/s
# Warmup Iteration  25: 913170.822 ops/s
# Warmup Iteration  26: 915579.191 ops/s
# Warmup Iteration  27: 905951.948 ops/s
# Warmup Iteration  28: 918029.853 ops/s
# Warmup Iteration  29: 910005.818 ops/s
# Warmup Iteration  30: 913029.046 ops/s
Iteration   1: 916679.111 ops/s
Iteration   2: 916880.574 ops/s
Iteration   3: 914287.719 ops/s
Iteration   4: 905594.040 ops/s
Iteration   5: 906223.963 ops/s
Iteration   6: 916260.960 ops/s
Iteration   7: 910554.026 ops/s
Iteration   8: 908551.355 ops/s
Iteration   9: 906644.872 ops/s
Iteration  10: 907291.898 ops/s
Iteration  11: 915626.597 ops/s
Iteration  12: 915599.883 ops/s
Iteration  13: 914712.562 ops/s
Iteration  14: 910661.692 ops/s
Iteration  15: 915270.952 ops/s
Iteration  16: 912894.128 ops/s
Iteration  17: 908649.358 ops/s
Iteration  18: 912167.863 ops/s
Iteration  19: 911962.254 ops/s
Iteration  20: 912436.682 ops/s
Iteration  21: 916836.684 ops/s
Iteration  22: 910806.572 ops/s
Iteration  23: 915468.627 ops/s
Iteration  24: 911722.717 ops/s
Iteration  25: 914427.089 ops/s
Iteration  26: 916311.762 ops/s
Iteration  27: 904874.826 ops/s
Iteration  28: 908468.534 ops/s
Iteration  29: 905424.693 ops/s
Iteration  30: 903727.815 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_64_largest":
  911567.327 ±(99.9%) 2766.496 ops/s [Average]
  (min, avg, max) = (903727.815, 911567.327, 916880.574), stdev = 4140.761
  CI (99.9%): [908800.831, 914333.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_unsignedVarintSize_64_largest  thrpt   30  911567.327 ± 2766.496  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8SizeInBytes$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8SizeInBytes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15.036 ops/s
# Warmup Iteration   2: 21.983 ops/s
# Warmup Iteration   3: 37.705 ops/s
# Warmup Iteration   4: 37.526 ops/s
# Warmup Iteration   5: 37.472 ops/s
# Warmup Iteration   6: 35.488 ops/s
# Warmup Iteration   7: 28.153 ops/s
# Warmup Iteration   8: 37.154 ops/s
# Warmup Iteration   9: 37.223 ops/s
# Warmup Iteration  10: 37.519 ops/s
# Warmup Iteration  11: 37.326 ops/s
# Warmup Iteration  12: 37.181 ops/s
# Warmup Iteration  13: 37.551 ops/s
# Warmup Iteration  14: 37.106 ops/s
# Warmup Iteration  15: 37.276 ops/s
# Warmup Iteration  16: 37.351 ops/s
# Warmup Iteration  17: 37.519 ops/s
# Warmup Iteration  18: 37.451 ops/s
# Warmup Iteration  19: 37.206 ops/s
# Warmup Iteration  20: 37.557 ops/s
# Warmup Iteration  21: 37.531 ops/s
# Warmup Iteration  22: 37.261 ops/s
# Warmup Iteration  23: 37.196 ops/s
# Warmup Iteration  24: 37.448 ops/s
# Warmup Iteration  25: 37.679 ops/s
# Warmup Iteration  26: 37.677 ops/s
# Warmup Iteration  27: 37.369 ops/s
# Warmup Iteration  28: 37.344 ops/s
# Warmup Iteration  29: 37.343 ops/s
# Warmup Iteration  30: 37.373 ops/s
Iteration   1: 37.453 ops/s
Iteration   2: 37.235 ops/s
Iteration   3: 37.310 ops/s
Iteration   4: 37.666 ops/s
Iteration   5: 37.746 ops/s
Iteration   6: 37.601 ops/s
Iteration   7: 37.578 ops/s
Iteration   8: 37.180 ops/s
Iteration   9: 37.405 ops/s
Iteration  10: 37.615 ops/s
Iteration  11: 37.271 ops/s
Iteration  12: 37.166 ops/s
Iteration  13: 37.269 ops/s
Iteration  14: 37.453 ops/s
Iteration  15: 37.443 ops/s
Iteration  16: 37.444 ops/s
Iteration  17: 37.754 ops/s
Iteration  18: 37.398 ops/s
Iteration  19: 37.479 ops/s
Iteration  20: 37.753 ops/s
Iteration  21: 37.650 ops/s
Iteration  22: 37.656 ops/s
Iteration  23: 37.565 ops/s
Iteration  24: 37.823 ops/s
Iteration  25: 37.341 ops/s
Iteration  26: 37.130 ops/s
Iteration  27: 37.251 ops/s
Iteration  28: 37.258 ops/s
Iteration  29: 37.269 ops/s
Iteration  30: 37.789 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8SizeInBytes":
  37.465 ±(99.9%) 0.138 ops/s [Average]
  (min, avg, max) = (37.130, 37.465, 37.823), stdev = 0.207
  CI (99.9%): [37.327, 37.603] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt   Score   Error  Units
WriteBufferTest._Benchmark.benchmark_utf8SizeInBytes  thrpt   30  37.465 ± 0.138  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_21Bit_brokenLowSurrogate$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_21Bit_brokenLowSurrogate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 328044.703 ops/s
# Warmup Iteration   2: 373885.971 ops/s
# Warmup Iteration   3: 711811.502 ops/s
# Warmup Iteration   4: 756071.487 ops/s
# Warmup Iteration   5: 757507.864 ops/s
# Warmup Iteration   6: 753754.994 ops/s
# Warmup Iteration   7: 753072.697 ops/s
# Warmup Iteration   8: 700213.994 ops/s
# Warmup Iteration   9: 569116.777 ops/s
# Warmup Iteration  10: 762663.914 ops/s
# Warmup Iteration  11: 760682.172 ops/s
# Warmup Iteration  12: 756904.699 ops/s
# Warmup Iteration  13: 753901.060 ops/s
# Warmup Iteration  14: 754821.043 ops/s
# Warmup Iteration  15: 762230.810 ops/s
# Warmup Iteration  16: 756338.374 ops/s
# Warmup Iteration  17: 763690.836 ops/s
# Warmup Iteration  18: 764618.712 ops/s
# Warmup Iteration  19: 761171.895 ops/s
# Warmup Iteration  20: 759391.597 ops/s
# Warmup Iteration  21: 763293.262 ops/s
# Warmup Iteration  22: 759813.889 ops/s
# Warmup Iteration  23: 755886.677 ops/s
# Warmup Iteration  24: 755537.582 ops/s
# Warmup Iteration  25: 762956.839 ops/s
# Warmup Iteration  26: 763584.502 ops/s
# Warmup Iteration  27: 763095.590 ops/s
# Warmup Iteration  28: 754225.843 ops/s
# Warmup Iteration  29: 759226.758 ops/s
# Warmup Iteration  30: 765361.341 ops/s
Iteration   1: 760068.220 ops/s
Iteration   2: 758954.317 ops/s
Iteration   3: 764602.336 ops/s
Iteration   4: 761197.773 ops/s
Iteration   5: 763413.954 ops/s
Iteration   6: 752908.363 ops/s
Iteration   7: 751139.412 ops/s
Iteration   8: 760122.842 ops/s
Iteration   9: 759085.445 ops/s
Iteration  10: 757656.274 ops/s
Iteration  11: 754064.757 ops/s
Iteration  12: 760310.428 ops/s
Iteration  13: 759357.666 ops/s
Iteration  14: 753428.200 ops/s
Iteration  15: 755691.258 ops/s
Iteration  16: 756804.811 ops/s
Iteration  17: 762782.625 ops/s
Iteration  18: 756809.108 ops/s
Iteration  19: 766514.388 ops/s
Iteration  20: 764225.886 ops/s
Iteration  21: 759683.516 ops/s
Iteration  22: 754414.159 ops/s
Iteration  23: 762041.793 ops/s
Iteration  24: 757018.322 ops/s
Iteration  25: 751312.438 ops/s
Iteration  26: 753129.243 ops/s
Iteration  27: 754363.805 ops/s
Iteration  28: 753766.057 ops/s
Iteration  29: 761655.292 ops/s
Iteration  30: 759943.697 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_21Bit_brokenLowSurrogate":
  758215.546 ±(99.9%) 2777.848 ops/s [Average]
  (min, avg, max) = (751139.412, 758215.546, 766514.388), stdev = 4157.753
  CI (99.9%): [755437.698, 760993.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_utf8_21Bit_brokenLowSurrogate  thrpt   30  758215.546 ± 2777.848  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_21Bit_truncated$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_21Bit_truncated

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 329164.836 ops/s
# Warmup Iteration   2: 378535.867 ops/s
# Warmup Iteration   3: 748271.100 ops/s
# Warmup Iteration   4: 747778.907 ops/s
# Warmup Iteration   5: 772403.241 ops/s
# Warmup Iteration   6: 774492.486 ops/s
# Warmup Iteration   7: 776198.834 ops/s
# Warmup Iteration   8: 662642.060 ops/s
# Warmup Iteration   9: 618777.753 ops/s
# Warmup Iteration  10: 773613.841 ops/s
# Warmup Iteration  11: 774097.756 ops/s
# Warmup Iteration  12: 778405.795 ops/s
# Warmup Iteration  13: 774161.894 ops/s
# Warmup Iteration  14: 776880.418 ops/s
# Warmup Iteration  15: 777774.834 ops/s
# Warmup Iteration  16: 775584.737 ops/s
# Warmup Iteration  17: 770037.415 ops/s
# Warmup Iteration  18: 768682.533 ops/s
# Warmup Iteration  19: 767117.221 ops/s
# Warmup Iteration  20: 768326.722 ops/s
# Warmup Iteration  21: 767425.789 ops/s
# Warmup Iteration  22: 762122.404 ops/s
# Warmup Iteration  23: 765141.090 ops/s
# Warmup Iteration  24: 767533.761 ops/s
# Warmup Iteration  25: 770682.023 ops/s
# Warmup Iteration  26: 766552.186 ops/s
# Warmup Iteration  27: 759712.117 ops/s
# Warmup Iteration  28: 765804.072 ops/s
# Warmup Iteration  29: 765282.091 ops/s
# Warmup Iteration  30: 766304.995 ops/s
Iteration   1: 764389.514 ops/s
Iteration   2: 774898.007 ops/s
Iteration   3: 773180.283 ops/s
Iteration   4: 773869.421 ops/s
Iteration   5: 769999.368 ops/s
Iteration   6: 758608.302 ops/s
Iteration   7: 762000.902 ops/s
Iteration   8: 768228.814 ops/s
Iteration   9: 773610.896 ops/s
Iteration  10: 767442.400 ops/s
Iteration  11: 764606.740 ops/s
Iteration  12: 766238.758 ops/s
Iteration  13: 765170.125 ops/s
Iteration  14: 760823.343 ops/s
Iteration  15: 767083.536 ops/s
Iteration  16: 762478.694 ops/s
Iteration  17: 768709.124 ops/s
Iteration  18: 771663.645 ops/s
Iteration  19: 771043.545 ops/s
Iteration  20: 766081.468 ops/s
Iteration  21: 766397.258 ops/s
Iteration  22: 766491.797 ops/s
Iteration  23: 766291.499 ops/s
Iteration  24: 764573.652 ops/s
Iteration  25: 758054.038 ops/s
Iteration  26: 764322.577 ops/s
Iteration  27: 764165.092 ops/s
Iteration  28: 764887.953 ops/s
Iteration  29: 771062.511 ops/s
Iteration  30: 767833.318 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_21Bit_truncated":
  766806.886 ±(99.9%) 2875.811 ops/s [Average]
  (min, avg, max) = (758054.038, 766806.886, 774898.007), stdev = 4304.379
  CI (99.9%): [763931.075, 769682.697] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_utf8_21Bit_truncated  thrpt   30  766806.886 ± 2875.811  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_malformed$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_malformed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 67088.179 ops/s
# Warmup Iteration   2: 76596.418 ops/s
# Warmup Iteration   3: 112307.579 ops/s
# Warmup Iteration   4: 140016.896 ops/s
# Warmup Iteration   5: 137621.619 ops/s
# Warmup Iteration   6: 139138.199 ops/s
# Warmup Iteration   7: 139039.222 ops/s
# Warmup Iteration   8: 140042.981 ops/s
# Warmup Iteration   9: 140265.979 ops/s
# Warmup Iteration  10: 138991.412 ops/s
# Warmup Iteration  11: 92412.273 ops/s
# Warmup Iteration  12: 138851.680 ops/s
# Warmup Iteration  13: 139234.487 ops/s
# Warmup Iteration  14: 139853.315 ops/s
# Warmup Iteration  15: 139668.330 ops/s
# Warmup Iteration  16: 140397.697 ops/s
# Warmup Iteration  17: 140700.057 ops/s
# Warmup Iteration  18: 139302.123 ops/s
# Warmup Iteration  19: 139826.510 ops/s
# Warmup Iteration  20: 140136.845 ops/s
# Warmup Iteration  21: 139582.396 ops/s
# Warmup Iteration  22: 139474.614 ops/s
# Warmup Iteration  23: 139083.952 ops/s
# Warmup Iteration  24: 139723.898 ops/s
# Warmup Iteration  25: 138994.098 ops/s
# Warmup Iteration  26: 139491.250 ops/s
# Warmup Iteration  27: 139196.329 ops/s
# Warmup Iteration  28: 139500.516 ops/s
# Warmup Iteration  29: 140266.656 ops/s
# Warmup Iteration  30: 139614.566 ops/s
Iteration   1: 139605.299 ops/s
Iteration   2: 139542.080 ops/s
Iteration   3: 138528.870 ops/s
Iteration   4: 139531.842 ops/s
Iteration   5: 139349.740 ops/s
Iteration   6: 139518.623 ops/s
Iteration   7: 139432.414 ops/s
Iteration   8: 140408.593 ops/s
Iteration   9: 139925.340 ops/s
Iteration  10: 139147.201 ops/s
Iteration  11: 140288.727 ops/s
Iteration  12: 140002.445 ops/s
Iteration  13: 139297.153 ops/s
Iteration  14: 139615.773 ops/s
Iteration  15: 139730.699 ops/s
Iteration  16: 139195.492 ops/s
Iteration  17: 140602.816 ops/s
Iteration  18: 140548.352 ops/s
Iteration  19: 139477.381 ops/s
Iteration  20: 139400.761 ops/s
Iteration  21: 139214.301 ops/s
Iteration  22: 139451.263 ops/s
Iteration  23: 139277.461 ops/s
Iteration  24: 138627.989 ops/s
Iteration  25: 139593.910 ops/s
Iteration  26: 139396.977 ops/s
Iteration  27: 138957.345 ops/s
Iteration  28: 140689.601 ops/s
Iteration  29: 139766.618 ops/s
Iteration  30: 139868.430 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_malformed":
  139599.783 ±(99.9%) 351.942 ops/s [Average]
  (min, avg, max) = (138528.870, 139599.783, 140689.601), stdev = 526.771
  CI (99.9%): [139247.841, 139951.726] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
WriteBufferTest._Benchmark.benchmark_utf8_malformed  thrpt   30  139599.783 ± 351.942  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_matchesAscii$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_matchesAscii

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 279978.318 ops/s
# Warmup Iteration   2: 322307.747 ops/s
# Warmup Iteration   3: 592639.489 ops/s
# Warmup Iteration   4: 662676.493 ops/s
# Warmup Iteration   5: 660317.187 ops/s
# Warmup Iteration   6: 664732.120 ops/s
# Warmup Iteration   7: 656831.292 ops/s
# Warmup Iteration   8: 657374.635 ops/s
# Warmup Iteration   9: 434422.985 ops/s
# Warmup Iteration  10: 661736.385 ops/s
# Warmup Iteration  11: 660065.257 ops/s
# Warmup Iteration  12: 657635.470 ops/s
# Warmup Iteration  13: 661512.930 ops/s
# Warmup Iteration  14: 659975.333 ops/s
# Warmup Iteration  15: 660679.513 ops/s
# Warmup Iteration  16: 658755.404 ops/s
# Warmup Iteration  17: 660783.910 ops/s
# Warmup Iteration  18: 665380.147 ops/s
# Warmup Iteration  19: 661639.035 ops/s
# Warmup Iteration  20: 661500.008 ops/s
# Warmup Iteration  21: 659020.916 ops/s
# Warmup Iteration  22: 665559.245 ops/s
# Warmup Iteration  23: 665054.911 ops/s
# Warmup Iteration  24: 663610.032 ops/s
# Warmup Iteration  25: 664522.858 ops/s
# Warmup Iteration  26: 654955.718 ops/s
# Warmup Iteration  27: 662252.885 ops/s
# Warmup Iteration  28: 658642.575 ops/s
# Warmup Iteration  29: 664683.859 ops/s
# Warmup Iteration  30: 662004.296 ops/s
Iteration   1: 666505.370 ops/s
Iteration   2: 664931.954 ops/s
Iteration   3: 660317.322 ops/s
Iteration   4: 664905.139 ops/s
Iteration   5: 665332.726 ops/s
Iteration   6: 665377.730 ops/s
Iteration   7: 667927.900 ops/s
Iteration   8: 664951.264 ops/s
Iteration   9: 667756.663 ops/s
Iteration  10: 667149.286 ops/s
Iteration  11: 663674.039 ops/s
Iteration  12: 662398.468 ops/s
Iteration  13: 665450.287 ops/s
Iteration  14: 668173.469 ops/s
Iteration  15: 667328.033 ops/s
Iteration  16: 662577.058 ops/s
Iteration  17: 661160.604 ops/s
Iteration  18: 668967.320 ops/s
Iteration  19: 664678.610 ops/s
Iteration  20: 663928.973 ops/s
Iteration  21: 658652.072 ops/s
Iteration  22: 661085.922 ops/s
Iteration  23: 660617.958 ops/s
Iteration  24: 663024.812 ops/s
Iteration  25: 659692.059 ops/s
Iteration  26: 662578.872 ops/s
Iteration  27: 656426.686 ops/s
Iteration  28: 664777.833 ops/s
Iteration  29: 660429.199 ops/s
Iteration  30: 664328.249 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_matchesAscii":
  663836.863 ±(99.9%) 2054.170 ops/s [Average]
  (min, avg, max) = (656426.686, 663836.863, 668967.320), stdev = 3074.586
  CI (99.9%): [661782.692, 665891.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_utf8_matchesAscii  thrpt   30  663836.863 ± 2054.170  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_matchesJRE$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_matchesJRE

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164614.786 ops/s
# Warmup Iteration   2: 187225.070 ops/s
# Warmup Iteration   3: 369010.466 ops/s
# Warmup Iteration   4: 369033.266 ops/s
# Warmup Iteration   5: 376428.570 ops/s
# Warmup Iteration   6: 376024.726 ops/s
# Warmup Iteration   7: 375928.391 ops/s
# Warmup Iteration   8: 333782.890 ops/s
# Warmup Iteration   9: 298736.360 ops/s
# Warmup Iteration  10: 374812.074 ops/s
# Warmup Iteration  11: 373842.803 ops/s
# Warmup Iteration  12: 375749.350 ops/s
# Warmup Iteration  13: 372803.177 ops/s
# Warmup Iteration  14: 376178.103 ops/s
# Warmup Iteration  15: 378700.897 ops/s
# Warmup Iteration  16: 377467.646 ops/s
# Warmup Iteration  17: 376230.670 ops/s
# Warmup Iteration  18: 374649.455 ops/s
# Warmup Iteration  19: 377026.079 ops/s
# Warmup Iteration  20: 377259.186 ops/s
# Warmup Iteration  21: 375490.261 ops/s
# Warmup Iteration  22: 377054.550 ops/s
# Warmup Iteration  23: 378088.252 ops/s
# Warmup Iteration  24: 377068.446 ops/s
# Warmup Iteration  25: 375435.731 ops/s
# Warmup Iteration  26: 374195.532 ops/s
# Warmup Iteration  27: 376565.328 ops/s
# Warmup Iteration  28: 377598.669 ops/s
# Warmup Iteration  29: 378374.627 ops/s
# Warmup Iteration  30: 375684.117 ops/s
Iteration   1: 374636.629 ops/s
Iteration   2: 375972.488 ops/s
Iteration   3: 375658.678 ops/s
Iteration   4: 377039.381 ops/s
Iteration   5: 373883.699 ops/s
Iteration   6: 375667.888 ops/s
Iteration   7: 378367.613 ops/s
Iteration   8: 376688.497 ops/s
Iteration   9: 373397.324 ops/s
Iteration  10: 374068.657 ops/s
Iteration  11: 376461.286 ops/s
Iteration  12: 376043.030 ops/s
Iteration  13: 377731.318 ops/s
Iteration  14: 375634.125 ops/s
Iteration  15: 376218.372 ops/s
Iteration  16: 376060.754 ops/s
Iteration  17: 377697.003 ops/s
Iteration  18: 377431.325 ops/s
Iteration  19: 373925.640 ops/s
Iteration  20: 375049.336 ops/s
Iteration  21: 373667.603 ops/s
Iteration  22: 376103.966 ops/s
Iteration  23: 373518.272 ops/s
Iteration  24: 374351.030 ops/s
Iteration  25: 376902.156 ops/s
Iteration  26: 375260.280 ops/s
Iteration  27: 379406.003 ops/s
Iteration  28: 377137.919 ops/s
Iteration  29: 378425.573 ops/s
Iteration  30: 377865.093 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_utf8_matchesJRE":
  376009.031 ±(99.9%) 1079.490 ops/s [Average]
  (min, avg, max) = (373397.324, 376009.031, 379406.003), stdev = 1615.729
  CI (99.9%): [374929.542, 377088.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_utf8_matchesJRE  thrpt   30  376009.031 ± 1079.490  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeAscii_long$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeAscii_long

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242860.985 ops/s
# Warmup Iteration   2: 289455.739 ops/s
# Warmup Iteration   3: 558929.170 ops/s
# Warmup Iteration   4: 610413.378 ops/s
# Warmup Iteration   5: 605457.766 ops/s
# Warmup Iteration   6: 608536.340 ops/s
# Warmup Iteration   7: 604145.964 ops/s
# Warmup Iteration   8: 533255.336 ops/s
# Warmup Iteration   9: 475939.964 ops/s
# Warmup Iteration  10: 600007.058 ops/s
# Warmup Iteration  11: 600725.218 ops/s
# Warmup Iteration  12: 599697.881 ops/s
# Warmup Iteration  13: 598126.739 ops/s
# Warmup Iteration  14: 602469.031 ops/s
# Warmup Iteration  15: 598965.895 ops/s
# Warmup Iteration  16: 598945.783 ops/s
# Warmup Iteration  17: 604248.431 ops/s
# Warmup Iteration  18: 600396.165 ops/s
# Warmup Iteration  19: 606009.387 ops/s
# Warmup Iteration  20: 607957.948 ops/s
# Warmup Iteration  21: 603647.736 ops/s
# Warmup Iteration  22: 604999.536 ops/s
# Warmup Iteration  23: 603295.056 ops/s
# Warmup Iteration  24: 605380.502 ops/s
# Warmup Iteration  25: 603914.195 ops/s
# Warmup Iteration  26: 599440.634 ops/s
# Warmup Iteration  27: 599254.924 ops/s
# Warmup Iteration  28: 603243.601 ops/s
# Warmup Iteration  29: 607483.218 ops/s
# Warmup Iteration  30: 606508.260 ops/s
Iteration   1: 602110.120 ops/s
Iteration   2: 598617.844 ops/s
Iteration   3: 600337.355 ops/s
Iteration   4: 603557.805 ops/s
Iteration   5: 606901.215 ops/s
Iteration   6: 603156.777 ops/s
Iteration   7: 609403.882 ops/s
Iteration   8: 598706.956 ops/s
Iteration   9: 599350.405 ops/s
Iteration  10: 602223.359 ops/s
Iteration  11: 597755.425 ops/s
Iteration  12: 603272.992 ops/s
Iteration  13: 600549.612 ops/s
Iteration  14: 604563.477 ops/s
Iteration  15: 601253.218 ops/s
Iteration  16: 604004.071 ops/s
Iteration  17: 606567.584 ops/s
Iteration  18: 605207.731 ops/s
Iteration  19: 603092.528 ops/s
Iteration  20: 600479.198 ops/s
Iteration  21: 605503.006 ops/s
Iteration  22: 602365.798 ops/s
Iteration  23: 604298.164 ops/s
Iteration  24: 605381.898 ops/s
Iteration  25: 604151.741 ops/s
Iteration  26: 604234.946 ops/s
Iteration  27: 605509.711 ops/s
Iteration  28: 603790.574 ops/s
Iteration  29: 597858.173 ops/s
Iteration  30: 600063.595 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeAscii_long":
  602808.972 ±(99.9%) 1913.277 ops/s [Average]
  (min, avg, max) = (597755.425, 602808.972, 609403.882), stdev = 2863.703
  CI (99.9%): [600895.695, 604722.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_writeAscii_long  thrpt   30  602808.972 ± 1913.277  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeLongLe_matchesByteBuffer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeLongLe_matchesByteBuffer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 337102.425 ops/s
# Warmup Iteration   2: 375968.193 ops/s
# Warmup Iteration   3: 803747.264 ops/s
# Warmup Iteration   4: 801148.672 ops/s
# Warmup Iteration   5: 806411.193 ops/s
# Warmup Iteration   6: 803991.652 ops/s
# Warmup Iteration   7: 801279.206 ops/s
# Warmup Iteration   8: 544506.075 ops/s
# Warmup Iteration   9: 804586.926 ops/s
# Warmup Iteration  10: 797243.369 ops/s
# Warmup Iteration  11: 804550.410 ops/s
# Warmup Iteration  12: 800501.026 ops/s
# Warmup Iteration  13: 806017.071 ops/s
# Warmup Iteration  14: 807888.153 ops/s
# Warmup Iteration  15: 807840.114 ops/s
# Warmup Iteration  16: 799885.314 ops/s
# Warmup Iteration  17: 804158.485 ops/s
# Warmup Iteration  18: 806045.486 ops/s
# Warmup Iteration  19: 810837.737 ops/s
# Warmup Iteration  20: 805772.345 ops/s
# Warmup Iteration  21: 803049.058 ops/s
# Warmup Iteration  22: 806441.433 ops/s
# Warmup Iteration  23: 809701.128 ops/s
# Warmup Iteration  24: 803791.674 ops/s
# Warmup Iteration  25: 807311.929 ops/s
# Warmup Iteration  26: 805999.658 ops/s
# Warmup Iteration  27: 807035.590 ops/s
# Warmup Iteration  28: 806446.946 ops/s
# Warmup Iteration  29: 812569.464 ops/s
# Warmup Iteration  30: 804332.023 ops/s
Iteration   1: 800825.836 ops/s
Iteration   2: 806082.641 ops/s
Iteration   3: 803888.343 ops/s
Iteration   4: 800033.027 ops/s
Iteration   5: 801225.638 ops/s
Iteration   6: 812638.736 ops/s
Iteration   7: 813753.949 ops/s
Iteration   8: 807300.997 ops/s
Iteration   9: 806513.755 ops/s
Iteration  10: 808521.446 ops/s
Iteration  11: 807427.526 ops/s
Iteration  12: 805346.360 ops/s
Iteration  13: 802763.534 ops/s
Iteration  14: 804442.004 ops/s
Iteration  15: 810046.657 ops/s
Iteration  16: 813130.052 ops/s
Iteration  17: 811243.363 ops/s
Iteration  18: 809278.506 ops/s
Iteration  19: 801917.538 ops/s
Iteration  20: 804560.892 ops/s
Iteration  21: 801299.204 ops/s
Iteration  22: 809311.552 ops/s
Iteration  23: 801166.045 ops/s
Iteration  24: 800054.842 ops/s
Iteration  25: 806289.992 ops/s
Iteration  26: 815008.390 ops/s
Iteration  27: 817026.341 ops/s
Iteration  28: 812419.317 ops/s
Iteration  29: 813200.803 ops/s
Iteration  30: 810772.515 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeLongLe_matchesByteBuffer":
  807249.660 ±(99.9%) 3294.831 ops/s [Average]
  (min, avg, max) = (800033.027, 807249.660, 817026.341), stdev = 4931.549
  CI (99.9%): [803954.829, 810544.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_writeLongLe_matchesByteBuffer  thrpt   30  807249.660 ± 3294.831  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeString$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 580.051 ops/s
# Warmup Iteration   2: 621.107 ops/s
# Warmup Iteration   3: 797.519 ops/s
# Warmup Iteration   4: 910.568 ops/s
# Warmup Iteration   5: 903.683 ops/s
# Warmup Iteration   6: 953.610 ops/s
# Warmup Iteration   7: 959.332 ops/s
# Warmup Iteration   8: 965.191 ops/s
# Warmup Iteration   9: 961.017 ops/s
# Warmup Iteration  10: 968.792 ops/s
# Warmup Iteration  11: 963.521 ops/s
# Warmup Iteration  12: 841.864 ops/s
# Warmup Iteration  13: 870.348 ops/s
# Warmup Iteration  14: 968.403 ops/s
# Warmup Iteration  15: 964.788 ops/s
# Warmup Iteration  16: 962.266 ops/s
# Warmup Iteration  17: 965.798 ops/s
# Warmup Iteration  18: 968.783 ops/s
# Warmup Iteration  19: 968.242 ops/s
# Warmup Iteration  20: 965.262 ops/s
# Warmup Iteration  21: 968.955 ops/s
# Warmup Iteration  22: 968.425 ops/s
# Warmup Iteration  23: 965.374 ops/s
# Warmup Iteration  24: 952.635 ops/s
# Warmup Iteration  25: 962.794 ops/s
# Warmup Iteration  26: 967.318 ops/s
# Warmup Iteration  27: 965.709 ops/s
# Warmup Iteration  28: 966.924 ops/s
# Warmup Iteration  29: 968.334 ops/s
# Warmup Iteration  30: 961.755 ops/s
Iteration   1: 969.138 ops/s
Iteration   2: 961.770 ops/s
Iteration   3: 968.754 ops/s
Iteration   4: 970.043 ops/s
Iteration   5: 975.538 ops/s
Iteration   6: 972.273 ops/s
Iteration   7: 966.860 ops/s
Iteration   8: 961.351 ops/s
Iteration   9: 962.873 ops/s
Iteration  10: 961.785 ops/s
Iteration  11: 965.568 ops/s
Iteration  12: 970.919 ops/s
Iteration  13: 969.306 ops/s
Iteration  14: 970.883 ops/s
Iteration  15: 974.614 ops/s
Iteration  16: 970.366 ops/s
Iteration  17: 958.419 ops/s
Iteration  18: 964.686 ops/s
Iteration  19: 963.459 ops/s
Iteration  20: 968.046 ops/s
Iteration  21: 961.034 ops/s
Iteration  22: 963.332 ops/s
Iteration  23: 962.054 ops/s
Iteration  24: 962.450 ops/s
Iteration  25: 967.024 ops/s
Iteration  26: 967.233 ops/s
Iteration  27: 966.979 ops/s
Iteration  28: 957.687 ops/s
Iteration  29: 970.406 ops/s
Iteration  30: 972.304 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeString":
  966.572 ±(99.9%) 3.129 ops/s [Average]
  (min, avg, max) = (957.687, 966.572, 975.538), stdev = 4.683
  CI (99.9%): [963.443, 969.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt    Score   Error  Units
WriteBufferTest._Benchmark.benchmark_writeString  thrpt   30  966.572 ± 3.129  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_32$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_32

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 191607.583 ops/s
# Warmup Iteration   2: 225616.225 ops/s
# Warmup Iteration   3: 359683.851 ops/s
# Warmup Iteration   4: 418098.609 ops/s
# Warmup Iteration   5: 414290.599 ops/s
# Warmup Iteration   6: 417419.033 ops/s
# Warmup Iteration   7: 419388.935 ops/s
# Warmup Iteration   8: 422136.531 ops/s
# Warmup Iteration   9: 416571.715 ops/s
# Warmup Iteration  10: 280385.677 ops/s
# Warmup Iteration  11: 418816.332 ops/s
# Warmup Iteration  12: 416729.143 ops/s
# Warmup Iteration  13: 421129.972 ops/s
# Warmup Iteration  14: 420267.262 ops/s
# Warmup Iteration  15: 418068.505 ops/s
# Warmup Iteration  16: 417588.991 ops/s
# Warmup Iteration  17: 419581.936 ops/s
# Warmup Iteration  18: 419621.222 ops/s
# Warmup Iteration  19: 417626.218 ops/s
# Warmup Iteration  20: 420325.247 ops/s
# Warmup Iteration  21: 415213.230 ops/s
# Warmup Iteration  22: 417994.870 ops/s
# Warmup Iteration  23: 420012.921 ops/s
# Warmup Iteration  24: 419092.500 ops/s
# Warmup Iteration  25: 416944.689 ops/s
# Warmup Iteration  26: 418217.443 ops/s
# Warmup Iteration  27: 418327.219 ops/s
# Warmup Iteration  28: 419537.012 ops/s
# Warmup Iteration  29: 417963.559 ops/s
# Warmup Iteration  30: 416616.390 ops/s
Iteration   1: 416653.112 ops/s
Iteration   2: 416912.387 ops/s
Iteration   3: 418922.349 ops/s
Iteration   4: 419654.887 ops/s
Iteration   5: 422449.703 ops/s
Iteration   6: 420481.441 ops/s
Iteration   7: 418231.043 ops/s
Iteration   8: 416716.752 ops/s
Iteration   9: 417343.524 ops/s
Iteration  10: 417837.616 ops/s
Iteration  11: 417411.141 ops/s
Iteration  12: 416212.869 ops/s
Iteration  13: 416683.768 ops/s
Iteration  14: 415671.973 ops/s
Iteration  15: 422158.487 ops/s
Iteration  16: 420098.555 ops/s
Iteration  17: 413321.042 ops/s
Iteration  18: 421532.813 ops/s
Iteration  19: 421802.590 ops/s
Iteration  20: 419977.729 ops/s
Iteration  21: 420489.803 ops/s
Iteration  22: 420597.829 ops/s
Iteration  23: 418804.799 ops/s
Iteration  24: 422087.995 ops/s
Iteration  25: 421853.008 ops/s
Iteration  26: 421205.163 ops/s
Iteration  27: 421425.323 ops/s
Iteration  28: 417601.636 ops/s
Iteration  29: 418631.399 ops/s
Iteration  30: 415961.183 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_32":
  418957.731 ±(99.9%) 1589.738 ops/s [Average]
  (min, avg, max) = (413321.042, 418957.731, 422449.703), stdev = 2379.445
  CI (99.9%): [417367.993, 420547.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_writeVarint_32  thrpt   30  418957.731 ± 1589.738  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_64$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_64

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 185696.156 ops/s
# Warmup Iteration   2: 223208.337 ops/s
# Warmup Iteration   3: 344391.669 ops/s
# Warmup Iteration   4: 411076.939 ops/s
# Warmup Iteration   5: 407212.535 ops/s
# Warmup Iteration   6: 414626.555 ops/s
# Warmup Iteration   7: 419503.787 ops/s
# Warmup Iteration   8: 418041.748 ops/s
# Warmup Iteration   9: 415390.627 ops/s
# Warmup Iteration  10: 285216.161 ops/s
# Warmup Iteration  11: 402698.992 ops/s
# Warmup Iteration  12: 420856.799 ops/s
# Warmup Iteration  13: 420534.027 ops/s
# Warmup Iteration  14: 419565.242 ops/s
# Warmup Iteration  15: 420451.874 ops/s
# Warmup Iteration  16: 418410.882 ops/s
# Warmup Iteration  17: 420986.509 ops/s
# Warmup Iteration  18: 419141.882 ops/s
# Warmup Iteration  19: 416499.906 ops/s
# Warmup Iteration  20: 418624.035 ops/s
# Warmup Iteration  21: 419007.375 ops/s
# Warmup Iteration  22: 423480.265 ops/s
# Warmup Iteration  23: 423506.766 ops/s
# Warmup Iteration  24: 422341.343 ops/s
# Warmup Iteration  25: 422495.078 ops/s
# Warmup Iteration  26: 416397.563 ops/s
# Warmup Iteration  27: 422955.586 ops/s
# Warmup Iteration  28: 421183.763 ops/s
# Warmup Iteration  29: 419679.767 ops/s
# Warmup Iteration  30: 418724.371 ops/s
Iteration   1: 415571.304 ops/s
Iteration   2: 415818.325 ops/s
Iteration   3: 418691.483 ops/s
Iteration   4: 422149.513 ops/s
Iteration   5: 420700.424 ops/s
Iteration   6: 416494.696 ops/s
Iteration   7: 417933.622 ops/s
Iteration   8: 419014.503 ops/s
Iteration   9: 420113.396 ops/s
Iteration  10: 417372.747 ops/s
Iteration  11: 418200.226 ops/s
Iteration  12: 419641.078 ops/s
Iteration  13: 418922.392 ops/s
Iteration  14: 422071.976 ops/s
Iteration  15: 421908.301 ops/s
Iteration  16: 417652.314 ops/s
Iteration  17: 417645.856 ops/s
Iteration  18: 418382.037 ops/s
Iteration  19: 418183.410 ops/s
Iteration  20: 419407.148 ops/s
Iteration  21: 419315.245 ops/s
Iteration  22: 419609.439 ops/s
Iteration  23: 420131.202 ops/s
Iteration  24: 421208.143 ops/s
Iteration  25: 421164.056 ops/s
Iteration  26: 419224.810 ops/s
Iteration  27: 417819.342 ops/s
Iteration  28: 418151.328 ops/s
Iteration  29: 422260.282 ops/s
Iteration  30: 416402.948 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_64":
  419038.718 ±(99.9%) 1245.028 ops/s [Average]
  (min, avg, max) = (415571.304, 419038.718, 422260.282), stdev = 1863.499
  CI (99.9%): [417793.690, 420283.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
WriteBufferTest._Benchmark.benchmark_writeVarint_64  thrpt   30  419038.718 ± 1245.028  ops/s
----------------------------------------
=== Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_ports$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_ports

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 66362.733 ops/s
# Warmup Iteration   2: 76038.100 ops/s
# Warmup Iteration   3: 110888.184 ops/s
# Warmup Iteration   4: 131992.195 ops/s
# Warmup Iteration   5: 130650.953 ops/s
# Warmup Iteration   6: 132178.393 ops/s
# Warmup Iteration   7: 132904.171 ops/s
# Warmup Iteration   8: 131694.237 ops/s
# Warmup Iteration   9: 132161.068 ops/s
# Warmup Iteration  10: 132349.685 ops/s
# Warmup Iteration  11: 89795.657 ops/s
# Warmup Iteration  12: 133524.116 ops/s
# Warmup Iteration  13: 132938.633 ops/s
# Warmup Iteration  14: 133212.930 ops/s
# Warmup Iteration  15: 133098.450 ops/s
# Warmup Iteration  16: 132584.893 ops/s
# Warmup Iteration  17: 133481.591 ops/s
# Warmup Iteration  18: 132378.678 ops/s
# Warmup Iteration  19: 132149.636 ops/s
# Warmup Iteration  20: 131983.955 ops/s
# Warmup Iteration  21: 132647.489 ops/s
# Warmup Iteration  22: 133401.218 ops/s
# Warmup Iteration  23: 132884.798 ops/s
# Warmup Iteration  24: 132573.247 ops/s
# Warmup Iteration  25: 132710.054 ops/s
# Warmup Iteration  26: 132041.771 ops/s
# Warmup Iteration  27: 133107.346 ops/s
# Warmup Iteration  28: 132194.813 ops/s
# Warmup Iteration  29: 131865.142 ops/s
# Warmup Iteration  30: 132336.845 ops/s
Iteration   1: 133305.727 ops/s
Iteration   2: 132993.539 ops/s
Iteration   3: 133221.315 ops/s
Iteration   4: 133621.057 ops/s
Iteration   5: 132115.577 ops/s
Iteration   6: 132918.324 ops/s
Iteration   7: 132187.291 ops/s
Iteration   8: 132402.779 ops/s
Iteration   9: 133840.017 ops/s
Iteration  10: 132478.947 ops/s
Iteration  11: 132279.426 ops/s
Iteration  12: 133226.930 ops/s
Iteration  13: 133171.369 ops/s
Iteration  14: 133880.848 ops/s
Iteration  15: 132115.814 ops/s
Iteration  16: 132339.828 ops/s
Iteration  17: 132336.421 ops/s
Iteration  18: 132667.502 ops/s
Iteration  19: 132041.389 ops/s
Iteration  20: 132902.940 ops/s
Iteration  21: 131579.138 ops/s
Iteration  22: 132875.900 ops/s
Iteration  23: 133219.320 ops/s
Iteration  24: 133767.423 ops/s
Iteration  25: 133232.061 ops/s
Iteration  26: 131791.141 ops/s
Iteration  27: 131908.510 ops/s
Iteration  28: 132863.183 ops/s
Iteration  29: 131830.886 ops/s
Iteration  30: 132272.479 ops/s


Result "zipkin2.internal.WriteBufferTest._Benchmark.benchmark_writeVarint_ports":
  132712.903 ±(99.9%) 433.415 ops/s [Average]
  (min, avg, max) = (131579.138, 132712.903, 133880.848), stdev = 648.716
  CI (99.9%): [132279.487, 133146.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
WriteBufferTest._Benchmark.benchmark_writeVarint_ports  thrpt   30  132712.903 ± 433.415  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_declaresAllMethodsToForward$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_declaresAllMethodsToForward

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41931.209 ops/s
# Warmup Iteration   2: 85542.122 ops/s
# Warmup Iteration   3: 125858.830 ops/s
# Warmup Iteration   4: 192932.526 ops/s
# Warmup Iteration   5: 192499.044 ops/s
# Warmup Iteration   6: 193749.298 ops/s
# Warmup Iteration   7: 192301.434 ops/s
# Warmup Iteration   8: 189358.496 ops/s
# Warmup Iteration   9: 127857.813 ops/s
# Warmup Iteration  10: 192908.577 ops/s
# Warmup Iteration  11: 192044.628 ops/s
# Warmup Iteration  12: 192795.352 ops/s
# Warmup Iteration  13: 191816.959 ops/s
# Warmup Iteration  14: 192175.598 ops/s
# Warmup Iteration  15: 190661.279 ops/s
# Warmup Iteration  16: 193325.662 ops/s
# Warmup Iteration  17: 194971.631 ops/s
# Warmup Iteration  18: 195509.855 ops/s
# Warmup Iteration  19: 194990.148 ops/s
# Warmup Iteration  20: 195080.530 ops/s
# Warmup Iteration  21: 193757.340 ops/s
# Warmup Iteration  22: 193942.635 ops/s
# Warmup Iteration  23: 192680.888 ops/s
# Warmup Iteration  24: 192422.636 ops/s
# Warmup Iteration  25: 193481.205 ops/s
# Warmup Iteration  26: 195001.249 ops/s
# Warmup Iteration  27: 194010.196 ops/s
# Warmup Iteration  28: 192609.280 ops/s
# Warmup Iteration  29: 193027.947 ops/s
# Warmup Iteration  30: 194118.528 ops/s
Iteration   1: 193298.296 ops/s
Iteration   2: 192857.374 ops/s
Iteration   3: 194330.569 ops/s
Iteration   4: 193769.931 ops/s
Iteration   5: 193091.478 ops/s
Iteration   6: 193002.355 ops/s
Iteration   7: 193109.516 ops/s
Iteration   8: 195061.668 ops/s
Iteration   9: 193620.229 ops/s
Iteration  10: 195250.054 ops/s
Iteration  11: 194677.753 ops/s
Iteration  12: 194953.207 ops/s
Iteration  13: 195871.836 ops/s
Iteration  14: 195146.629 ops/s
Iteration  15: 195118.021 ops/s
Iteration  16: 194170.411 ops/s
Iteration  17: 195583.758 ops/s
Iteration  18: 195238.940 ops/s
Iteration  19: 194208.439 ops/s
Iteration  20: 193260.530 ops/s
Iteration  21: 190959.119 ops/s
Iteration  22: 192619.174 ops/s
Iteration  23: 192867.380 ops/s
Iteration  24: 194480.252 ops/s
Iteration  25: 192875.380 ops/s
Iteration  26: 190475.262 ops/s
Iteration  27: 194156.395 ops/s
Iteration  28: 192926.051 ops/s
Iteration  29: 193562.985 ops/s
Iteration  30: 194645.267 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_declaresAllMethodsToForward":
  193839.609 ±(99.9%) 849.427 ops/s [Average]
  (min, avg, max) = (190475.262, 193839.609, 195871.836), stdev = 1271.382
  CI (99.9%): [192990.182, 194689.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_declaresAllMethodsToForward  thrpt   30  193839.609 ± 849.427  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesAutocompleteTags$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesAutocompleteTags

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7209.683 ops/s
# Warmup Iteration   2: 13015.705 ops/s
# Warmup Iteration   3: 16835.352 ops/s
# Warmup Iteration   4: 16961.131 ops/s
# Warmup Iteration   5: 16941.674 ops/s
# Warmup Iteration   6: 22860.353 ops/s
# Warmup Iteration   7: 23078.835 ops/s
# Warmup Iteration   8: 23085.532 ops/s
# Warmup Iteration   9: 22762.471 ops/s
# Warmup Iteration  10: 23089.630 ops/s
# Warmup Iteration  11: 23038.808 ops/s
# Warmup Iteration  12: 22966.288 ops/s
# Warmup Iteration  13: 22734.469 ops/s
# Warmup Iteration  14: 22623.629 ops/s
# Warmup Iteration  15: 23043.909 ops/s
# Warmup Iteration  16: 23209.948 ops/s
# Warmup Iteration  17: 23196.745 ops/s
# Warmup Iteration  18: 23020.601 ops/s
# Warmup Iteration  19: 23350.610 ops/s
# Warmup Iteration  20: 23314.937 ops/s
# Warmup Iteration  21: 22935.798 ops/s
# Warmup Iteration  22: 23326.804 ops/s
# Warmup Iteration  23: 23299.616 ops/s
# Warmup Iteration  24: 20928.401 ops/s
# Warmup Iteration  25: 17376.877 ops/s
# Warmup Iteration  26: 23273.692 ops/s
# Warmup Iteration  27: 23316.049 ops/s
# Warmup Iteration  28: 23251.128 ops/s
# Warmup Iteration  29: 23330.418 ops/s
# Warmup Iteration  30: 23050.759 ops/s
Iteration   1: 23087.938 ops/s
Iteration   2: 23155.928 ops/s
Iteration   3: 23160.397 ops/s
Iteration   4: 23041.353 ops/s
Iteration   5: 23079.611 ops/s
Iteration   6: 23180.448 ops/s
Iteration   7: 23106.460 ops/s
Iteration   8: 23194.281 ops/s
Iteration   9: 23060.536 ops/s
Iteration  10: 23178.928 ops/s
Iteration  11: 23321.946 ops/s
Iteration  12: 23331.822 ops/s
Iteration  13: 23301.597 ops/s
Iteration  14: 23130.652 ops/s
Iteration  15: 22704.642 ops/s
Iteration  16: 22867.822 ops/s
Iteration  17: 22704.667 ops/s
Iteration  18: 22701.041 ops/s
Iteration  19: 22808.672 ops/s
Iteration  20: 23038.734 ops/s
Iteration  21: 23277.770 ops/s
Iteration  22: 23304.613 ops/s
Iteration  23: 23051.728 ops/s
Iteration  24: 23109.240 ops/s
Iteration  25: 23272.168 ops/s
Iteration  26: 23291.083 ops/s
Iteration  27: 23301.844 ops/s
Iteration  28: 23316.610 ops/s
Iteration  29: 23371.269 ops/s
Iteration  30: 23354.628 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesAutocompleteTags":
  23126.948 ±(99.9%) 132.418 ops/s [Average]
  (min, avg, max) = (22701.041, 23126.948, 23371.269), stdev = 198.197
  CI (99.9%): [22994.529, 23259.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesAutocompleteTags  thrpt   30  23126.948 ± 132.418  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesCheck$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesCheck

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8071.909 ops/s
# Warmup Iteration   2: 13980.563 ops/s
# Warmup Iteration   3: 16833.086 ops/s
# Warmup Iteration   4: 16928.693 ops/s
# Warmup Iteration   5: 17088.279 ops/s
# Warmup Iteration   6: 20000.039 ops/s
# Warmup Iteration   7: 21924.909 ops/s
# Warmup Iteration   8: 22095.103 ops/s
# Warmup Iteration   9: 22427.350 ops/s
# Warmup Iteration  10: 22104.383 ops/s
# Warmup Iteration  11: 22174.046 ops/s
# Warmup Iteration  12: 21986.348 ops/s
# Warmup Iteration  13: 22311.257 ops/s
# Warmup Iteration  14: 22316.615 ops/s
# Warmup Iteration  15: 22235.470 ops/s
# Warmup Iteration  16: 22292.185 ops/s
# Warmup Iteration  17: 22422.081 ops/s
# Warmup Iteration  18: 23001.988 ops/s
# Warmup Iteration  19: 22762.086 ops/s
# Warmup Iteration  20: 22705.977 ops/s
# Warmup Iteration  21: 22709.616 ops/s
# Warmup Iteration  22: 22503.238 ops/s
# Warmup Iteration  23: 22626.783 ops/s
# Warmup Iteration  24: 22433.098 ops/s
# Warmup Iteration  25: 22658.825 ops/s
# Warmup Iteration  26: 22817.900 ops/s
# Warmup Iteration  27: 20627.742 ops/s
# Warmup Iteration  28: 16955.983 ops/s
# Warmup Iteration  29: 21570.700 ops/s
# Warmup Iteration  30: 22816.862 ops/s
Iteration   1: 22901.238 ops/s
Iteration   2: 23123.428 ops/s
Iteration   3: 22847.479 ops/s
Iteration   4: 22892.254 ops/s
Iteration   5: 22890.074 ops/s
Iteration   6: 22886.605 ops/s
Iteration   7: 22934.221 ops/s
Iteration   8: 22855.195 ops/s
Iteration   9: 22917.504 ops/s
Iteration  10: 22956.461 ops/s
Iteration  11: 22845.421 ops/s
Iteration  12: 23083.298 ops/s
Iteration  13: 23051.227 ops/s
Iteration  14: 22907.262 ops/s
Iteration  15: 22879.220 ops/s
Iteration  16: 22927.834 ops/s
Iteration  17: 23027.018 ops/s
Iteration  18: 22793.826 ops/s
Iteration  19: 22844.846 ops/s
Iteration  20: 23006.933 ops/s
Iteration  21: 22866.183 ops/s
Iteration  22: 23101.776 ops/s
Iteration  23: 22916.699 ops/s
Iteration  24: 22954.496 ops/s
Iteration  25: 23008.939 ops/s
Iteration  26: 23016.186 ops/s
Iteration  27: 23020.115 ops/s
Iteration  28: 23017.832 ops/s
Iteration  29: 22930.917 ops/s
Iteration  30: 22897.714 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesCheck":
  22943.407 ±(99.9%) 56.242 ops/s [Average]
  (min, avg, max) = (22793.826, 22943.407, 23123.428), stdev = 84.180
  CI (99.9%): [22887.165, 22999.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score    Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesCheck  thrpt   30  22943.407 ± 56.242  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesClose$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesClose

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8818.178 ops/s
# Warmup Iteration   2: 14197.054 ops/s
# Warmup Iteration   3: 16826.775 ops/s
# Warmup Iteration   4: 17034.376 ops/s
# Warmup Iteration   5: 17041.858 ops/s
# Warmup Iteration   6: 19796.500 ops/s
# Warmup Iteration   7: 22599.163 ops/s
# Warmup Iteration   8: 22391.281 ops/s
# Warmup Iteration   9: 22907.411 ops/s
# Warmup Iteration  10: 23206.429 ops/s
# Warmup Iteration  11: 23119.044 ops/s
# Warmup Iteration  12: 22914.166 ops/s
# Warmup Iteration  13: 22387.642 ops/s
# Warmup Iteration  14: 22837.821 ops/s
# Warmup Iteration  15: 22841.929 ops/s
# Warmup Iteration  16: 22922.334 ops/s
# Warmup Iteration  17: 23095.914 ops/s
# Warmup Iteration  18: 23197.043 ops/s
# Warmup Iteration  19: 23298.874 ops/s
# Warmup Iteration  20: 23322.732 ops/s
# Warmup Iteration  21: 23346.642 ops/s
# Warmup Iteration  22: 23324.919 ops/s
# Warmup Iteration  23: 23283.013 ops/s
# Warmup Iteration  24: 23067.770 ops/s
# Warmup Iteration  25: 23163.181 ops/s
# Warmup Iteration  26: 23360.440 ops/s
# Warmup Iteration  27: 22967.656 ops/s
# Warmup Iteration  28: 17576.363 ops/s
# Warmup Iteration  29: 20204.789 ops/s
# Warmup Iteration  30: 23507.975 ops/s
Iteration   1: 23623.099 ops/s
Iteration   2: 23531.335 ops/s
Iteration   3: 23413.679 ops/s
Iteration   4: 23398.682 ops/s
Iteration   5: 23584.346 ops/s
Iteration   6: 23453.572 ops/s
Iteration   7: 23321.854 ops/s
Iteration   8: 23632.633 ops/s
Iteration   9: 23489.315 ops/s
Iteration  10: 23337.149 ops/s
Iteration  11: 23655.306 ops/s
Iteration  12: 23482.969 ops/s
Iteration  13: 23483.936 ops/s
Iteration  14: 23267.619 ops/s
Iteration  15: 22893.323 ops/s
Iteration  16: 23553.126 ops/s
Iteration  17: 23037.846 ops/s
Iteration  18: 23146.718 ops/s
Iteration  19: 23336.154 ops/s
Iteration  20: 23319.786 ops/s
Iteration  21: 23483.382 ops/s
Iteration  22: 23348.844 ops/s
Iteration  23: 23224.761 ops/s
Iteration  24: 23092.727 ops/s
Iteration  25: 23056.607 ops/s
Iteration  26: 23015.353 ops/s
Iteration  27: 23040.052 ops/s
Iteration  28: 23273.624 ops/s
Iteration  29: 23191.325 ops/s
Iteration  30: 23270.899 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesClose":
  23332.001 ±(99.9%) 137.396 ops/s [Average]
  (min, avg, max) = (22893.323, 23332.001, 23655.306), stdev = 205.647
  CI (99.9%): [23194.605, 23469.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesClose  thrpt   30  23332.001 ± 137.396  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesIsOverCapacity$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesIsOverCapacity

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7487.239 ops/s
# Warmup Iteration   2: 13226.177 ops/s
# Warmup Iteration   3: 15339.740 ops/s
# Warmup Iteration   4: 14986.174 ops/s
# Warmup Iteration   5: 15981.022 ops/s
# Warmup Iteration   6: 21316.864 ops/s
# Warmup Iteration   7: 21403.866 ops/s
# Warmup Iteration   8: 21181.847 ops/s
# Warmup Iteration   9: 21242.834 ops/s
# Warmup Iteration  10: 21309.439 ops/s
# Warmup Iteration  11: 21164.335 ops/s
# Warmup Iteration  12: 21422.922 ops/s
# Warmup Iteration  13: 21240.009 ops/s
# Warmup Iteration  14: 20927.767 ops/s
# Warmup Iteration  15: 21233.052 ops/s
# Warmup Iteration  16: 21563.093 ops/s
# Warmup Iteration  17: 21620.173 ops/s
# Warmup Iteration  18: 21531.100 ops/s
# Warmup Iteration  19: 21635.841 ops/s
# Warmup Iteration  20: 21567.804 ops/s
# Warmup Iteration  21: 21470.453 ops/s
# Warmup Iteration  22: 21787.212 ops/s
# Warmup Iteration  23: 21120.940 ops/s
# Warmup Iteration  24: 15989.781 ops/s
# Warmup Iteration  25: 20072.789 ops/s
# Warmup Iteration  26: 21552.243 ops/s
# Warmup Iteration  27: 21519.400 ops/s
# Warmup Iteration  28: 21294.279 ops/s
# Warmup Iteration  29: 21624.021 ops/s
# Warmup Iteration  30: 21733.702 ops/s
Iteration   1: 21804.828 ops/s
Iteration   2: 21453.060 ops/s
Iteration   3: 21385.041 ops/s
Iteration   4: 21791.330 ops/s
Iteration   5: 21740.954 ops/s
Iteration   6: 21899.572 ops/s
Iteration   7: 21474.965 ops/s
Iteration   8: 21279.758 ops/s
Iteration   9: 21916.518 ops/s
Iteration  10: 21960.792 ops/s
Iteration  11: 21884.477 ops/s
Iteration  12: 21566.545 ops/s
Iteration  13: 21656.477 ops/s
Iteration  14: 21557.349 ops/s
Iteration  15: 21401.477 ops/s
Iteration  16: 21458.584 ops/s
Iteration  17: 21709.943 ops/s
Iteration  18: 21679.476 ops/s
Iteration  19: 21711.419 ops/s
Iteration  20: 21879.500 ops/s
Iteration  21: 21716.623 ops/s
Iteration  22: 21714.176 ops/s
Iteration  23: 21766.926 ops/s
Iteration  24: 21759.568 ops/s
Iteration  25: 21490.339 ops/s
Iteration  26: 21331.676 ops/s
Iteration  27: 21298.879 ops/s
Iteration  28: 21228.565 ops/s
Iteration  29: 21182.306 ops/s
Iteration  30: 21357.830 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesIsOverCapacity":
  21601.965 ±(99.9%) 151.214 ops/s [Average]
  (min, avg, max) = (21182.306, 21601.965, 21960.792), stdev = 226.331
  CI (99.9%): [21450.751, 21753.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesIsOverCapacity  thrpt   30  21601.965 ± 151.214  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesServiceAndSpanNames$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesServiceAndSpanNames

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7535.651 ops/s
# Warmup Iteration   2: 12613.588 ops/s
# Warmup Iteration   3: 16582.696 ops/s
# Warmup Iteration   4: 16493.392 ops/s
# Warmup Iteration   5: 16682.386 ops/s
# Warmup Iteration   6: 22971.822 ops/s
# Warmup Iteration   7: 22924.924 ops/s
# Warmup Iteration   8: 22817.460 ops/s
# Warmup Iteration   9: 22925.458 ops/s
# Warmup Iteration  10: 23267.583 ops/s
# Warmup Iteration  11: 22943.295 ops/s
# Warmup Iteration  12: 22573.491 ops/s
# Warmup Iteration  13: 22776.406 ops/s
# Warmup Iteration  14: 22743.548 ops/s
# Warmup Iteration  15: 22923.648 ops/s
# Warmup Iteration  16: 22810.956 ops/s
# Warmup Iteration  17: 22981.383 ops/s
# Warmup Iteration  18: 23265.330 ops/s
# Warmup Iteration  19: 23216.491 ops/s
# Warmup Iteration  20: 23248.206 ops/s
# Warmup Iteration  21: 23052.152 ops/s
# Warmup Iteration  22: 23155.943 ops/s
# Warmup Iteration  23: 22977.907 ops/s
# Warmup Iteration  24: 19617.625 ops/s
# Warmup Iteration  25: 17737.072 ops/s
# Warmup Iteration  26: 23061.275 ops/s
# Warmup Iteration  27: 22679.931 ops/s
# Warmup Iteration  28: 22728.715 ops/s
# Warmup Iteration  29: 22670.927 ops/s
# Warmup Iteration  30: 23026.896 ops/s
Iteration   1: 22948.558 ops/s
Iteration   2: 22923.872 ops/s
Iteration   3: 22884.729 ops/s
Iteration   4: 22603.639 ops/s
Iteration   5: 22639.156 ops/s
Iteration   6: 22711.899 ops/s
Iteration   7: 22847.265 ops/s
Iteration   8: 22815.038 ops/s
Iteration   9: 22890.622 ops/s
Iteration  10: 23001.411 ops/s
Iteration  11: 22993.667 ops/s
Iteration  12: 23183.615 ops/s
Iteration  13: 23237.285 ops/s
Iteration  14: 23255.560 ops/s
Iteration  15: 23034.811 ops/s
Iteration  16: 22966.383 ops/s
Iteration  17: 22961.148 ops/s
Iteration  18: 22812.252 ops/s
Iteration  19: 22990.068 ops/s
Iteration  20: 23096.548 ops/s
Iteration  21: 22809.029 ops/s
Iteration  22: 22803.996 ops/s
Iteration  23: 22811.823 ops/s
Iteration  24: 23248.818 ops/s
Iteration  25: 22962.608 ops/s
Iteration  26: 22878.340 ops/s
Iteration  27: 23064.284 ops/s
Iteration  28: 23078.723 ops/s
Iteration  29: 23131.936 ops/s
Iteration  30: 23157.850 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesServiceAndSpanNames":
  22958.164 ±(99.9%) 114.651 ops/s [Average]
  (min, avg, max) = (22603.639, 22958.164, 23255.560), stdev = 171.604
  CI (99.9%): [22843.513, 23072.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesServiceAndSpanNames  thrpt   30  22958.164 ± 114.651  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanConsumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanConsumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7773.695 ops/s
# Warmup Iteration   2: 13253.941 ops/s
# Warmup Iteration   3: 16993.764 ops/s
# Warmup Iteration   4: 16876.641 ops/s
# Warmup Iteration   5: 16767.005 ops/s
# Warmup Iteration   6: 22235.736 ops/s
# Warmup Iteration   7: 22576.664 ops/s
# Warmup Iteration   8: 22624.903 ops/s
# Warmup Iteration   9: 22884.160 ops/s
# Warmup Iteration  10: 22874.567 ops/s
# Warmup Iteration  11: 23121.511 ops/s
# Warmup Iteration  12: 22821.377 ops/s
# Warmup Iteration  13: 22733.272 ops/s
# Warmup Iteration  14: 22812.404 ops/s
# Warmup Iteration  15: 22803.984 ops/s
# Warmup Iteration  16: 22852.251 ops/s
# Warmup Iteration  17: 23280.749 ops/s
# Warmup Iteration  18: 23447.283 ops/s
# Warmup Iteration  19: 23464.923 ops/s
# Warmup Iteration  20: 23569.235 ops/s
# Warmup Iteration  21: 23175.654 ops/s
# Warmup Iteration  22: 23062.474 ops/s
# Warmup Iteration  23: 23247.945 ops/s
# Warmup Iteration  24: 23614.374 ops/s
# Warmup Iteration  25: 18204.124 ops/s
# Warmup Iteration  26: 20746.877 ops/s
# Warmup Iteration  27: 23612.673 ops/s
# Warmup Iteration  28: 23362.941 ops/s
# Warmup Iteration  29: 23573.096 ops/s
# Warmup Iteration  30: 23522.283 ops/s
Iteration   1: 23623.208 ops/s
Iteration   2: 23094.416 ops/s
Iteration   3: 23194.838 ops/s
Iteration   4: 23141.565 ops/s
Iteration   5: 23387.348 ops/s
Iteration   6: 23369.754 ops/s
Iteration   7: 23100.482 ops/s
Iteration   8: 23253.719 ops/s
Iteration   9: 23424.875 ops/s
Iteration  10: 23220.121 ops/s
Iteration  11: 23262.859 ops/s
Iteration  12: 23279.225 ops/s
Iteration  13: 23283.213 ops/s
Iteration  14: 23254.520 ops/s
Iteration  15: 23352.938 ops/s
Iteration  16: 23134.958 ops/s
Iteration  17: 23324.126 ops/s
Iteration  18: 23193.281 ops/s
Iteration  19: 23426.461 ops/s
Iteration  20: 23421.732 ops/s
Iteration  21: 23480.760 ops/s
Iteration  22: 23468.832 ops/s
Iteration  23: 23450.866 ops/s
Iteration  24: 23483.046 ops/s
Iteration  25: 23344.347 ops/s
Iteration  26: 23588.670 ops/s
Iteration  27: 23422.946 ops/s
Iteration  28: 23519.410 ops/s
Iteration  29: 23734.853 ops/s
Iteration  30: 23552.648 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanConsumer":
  23359.667 ±(99.9%) 107.330 ops/s [Average]
  (min, avg, max) = (23094.416, 23359.667, 23734.853), stdev = 160.647
  CI (99.9%): [23252.337, 23466.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanConsumer  thrpt   30  23359.667 ± 107.330  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanStore$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanStore

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7379.434 ops/s
# Warmup Iteration   2: 13324.114 ops/s
# Warmup Iteration   3: 16794.397 ops/s
# Warmup Iteration   4: 16528.779 ops/s
# Warmup Iteration   5: 16466.778 ops/s
# Warmup Iteration   6: 21676.112 ops/s
# Warmup Iteration   7: 22849.220 ops/s
# Warmup Iteration   8: 22919.750 ops/s
# Warmup Iteration   9: 23027.411 ops/s
# Warmup Iteration  10: 23284.418 ops/s
# Warmup Iteration  11: 23106.127 ops/s
# Warmup Iteration  12: 22625.515 ops/s
# Warmup Iteration  13: 22731.094 ops/s
# Warmup Iteration  14: 22704.937 ops/s
# Warmup Iteration  15: 22863.820 ops/s
# Warmup Iteration  16: 23050.695 ops/s
# Warmup Iteration  17: 23075.944 ops/s
# Warmup Iteration  18: 23122.581 ops/s
# Warmup Iteration  19: 23078.480 ops/s
# Warmup Iteration  20: 22876.016 ops/s
# Warmup Iteration  21: 23139.548 ops/s
# Warmup Iteration  22: 23289.563 ops/s
# Warmup Iteration  23: 23367.026 ops/s
# Warmup Iteration  24: 23400.606 ops/s
# Warmup Iteration  25: 19502.347 ops/s
# Warmup Iteration  26: 18137.096 ops/s
# Warmup Iteration  27: 23333.877 ops/s
# Warmup Iteration  28: 23335.306 ops/s
# Warmup Iteration  29: 23482.819 ops/s
# Warmup Iteration  30: 23266.915 ops/s
Iteration   1: 22760.076 ops/s
Iteration   2: 23247.762 ops/s
Iteration   3: 23098.949 ops/s
Iteration   4: 23231.467 ops/s
Iteration   5: 23289.636 ops/s
Iteration   6: 23207.149 ops/s
Iteration   7: 23350.683 ops/s
Iteration   8: 23489.883 ops/s
Iteration   9: 23106.857 ops/s
Iteration  10: 23181.087 ops/s
Iteration  11: 23044.151 ops/s
Iteration  12: 23174.986 ops/s
Iteration  13: 23196.597 ops/s
Iteration  14: 23456.885 ops/s
Iteration  15: 23223.691 ops/s
Iteration  16: 23323.233 ops/s
Iteration  17: 23331.762 ops/s
Iteration  18: 23179.174 ops/s
Iteration  19: 23099.576 ops/s
Iteration  20: 22869.037 ops/s
Iteration  21: 22967.043 ops/s
Iteration  22: 22832.502 ops/s
Iteration  23: 22922.601 ops/s
Iteration  24: 23333.650 ops/s
Iteration  25: 23264.587 ops/s
Iteration  26: 23316.834 ops/s
Iteration  27: 23067.136 ops/s
Iteration  28: 23176.807 ops/s
Iteration  29: 22993.798 ops/s
Iteration  30: 22842.326 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanStore":
  23152.664 ±(99.9%) 123.962 ops/s [Average]
  (min, avg, max) = (22760.076, 23152.664, 23489.883), stdev = 185.540
  CI (99.9%): [23028.702, 23276.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesSpanStore  thrpt   30  23152.664 ± 123.962  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesToString$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19339.670 ops/s
# Warmup Iteration   2: 35398.901 ops/s
# Warmup Iteration   3: 37419.819 ops/s
# Warmup Iteration   4: 37263.927 ops/s
# Warmup Iteration   5: 41544.653 ops/s
# Warmup Iteration   6: 51991.877 ops/s
# Warmup Iteration   7: 52088.689 ops/s
# Warmup Iteration   8: 52802.169 ops/s
# Warmup Iteration   9: 53034.625 ops/s
# Warmup Iteration  10: 52912.937 ops/s
# Warmup Iteration  11: 52341.170 ops/s
# Warmup Iteration  12: 52723.604 ops/s
# Warmup Iteration  13: 53133.959 ops/s
# Warmup Iteration  14: 53769.241 ops/s
# Warmup Iteration  15: 53643.054 ops/s
# Warmup Iteration  16: 53718.916 ops/s
# Warmup Iteration  17: 53635.399 ops/s
# Warmup Iteration  18: 53911.459 ops/s
# Warmup Iteration  19: 54101.021 ops/s
# Warmup Iteration  20: 53402.233 ops/s
# Warmup Iteration  21: 53725.821 ops/s
# Warmup Iteration  22: 54511.882 ops/s
# Warmup Iteration  23: 41954.978 ops/s
# Warmup Iteration  24: 46020.944 ops/s
# Warmup Iteration  25: 54211.702 ops/s
# Warmup Iteration  26: 54039.949 ops/s
# Warmup Iteration  27: 53806.822 ops/s
# Warmup Iteration  28: 53311.972 ops/s
# Warmup Iteration  29: 54063.368 ops/s
# Warmup Iteration  30: 53826.318 ops/s
Iteration   1: 53851.746 ops/s
Iteration   2: 54244.614 ops/s
Iteration   3: 54231.443 ops/s
Iteration   4: 54199.295 ops/s
Iteration   5: 54166.698 ops/s
Iteration   6: 54426.950 ops/s
Iteration   7: 53834.398 ops/s
Iteration   8: 54205.892 ops/s
Iteration   9: 53859.845 ops/s
Iteration  10: 54015.682 ops/s
Iteration  11: 54062.751 ops/s
Iteration  12: 53351.049 ops/s
Iteration  13: 53921.778 ops/s
Iteration  14: 54464.638 ops/s
Iteration  15: 54551.096 ops/s
Iteration  16: 53632.419 ops/s
Iteration  17: 55066.667 ops/s
Iteration  18: 54881.218 ops/s
Iteration  19: 54598.582 ops/s
Iteration  20: 54356.991 ops/s
Iteration  21: 54237.807 ops/s
Iteration  22: 54092.172 ops/s
Iteration  23: 54237.859 ops/s
Iteration  24: 54017.156 ops/s
Iteration  25: 54059.896 ops/s
Iteration  26: 53924.227 ops/s
Iteration  27: 54220.214 ops/s
Iteration  28: 54121.246 ops/s
Iteration  29: 54476.028 ops/s
Iteration  30: 54098.506 ops/s


Result "zipkin2.storage.ForwardingStorageComponentTest._Benchmark.benchmark_delegatesToString":
  54180.295 ±(99.9%) 229.317 ops/s [Average]
  (min, avg, max) = (53351.049, 54180.295, 55066.667), stdev = 343.230
  CI (99.9%): [53950.979, 54409.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
ForwardingStorageComponentTest._Benchmark.benchmark_delegatesToString  thrpt   30  54180.295 ± 229.317  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_groupsByTraceIdHighWheStrict$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_groupsByTraceIdHighWheStrict

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 110835.188 ops/s
# Warmup Iteration   2: 146556.445 ops/s
# Warmup Iteration   3: 295751.737 ops/s
# Warmup Iteration   4: 305106.151 ops/s
# Warmup Iteration   5: 306376.897 ops/s
# Warmup Iteration   6: 308853.476 ops/s
# Warmup Iteration   7: 308284.042 ops/s
# Warmup Iteration   8: 212021.445 ops/s
# Warmup Iteration   9: 309536.347 ops/s
# Warmup Iteration  10: 309887.713 ops/s
# Warmup Iteration  11: 310639.339 ops/s
# Warmup Iteration  12: 309293.145 ops/s
# Warmup Iteration  13: 310430.317 ops/s
# Warmup Iteration  14: 309052.131 ops/s
# Warmup Iteration  15: 307182.351 ops/s
# Warmup Iteration  16: 307658.366 ops/s
# Warmup Iteration  17: 309194.438 ops/s
# Warmup Iteration  18: 309985.293 ops/s
# Warmup Iteration  19: 311255.554 ops/s
# Warmup Iteration  20: 311885.181 ops/s
# Warmup Iteration  21: 311416.078 ops/s
# Warmup Iteration  22: 311198.083 ops/s
# Warmup Iteration  23: 311964.752 ops/s
# Warmup Iteration  24: 311190.531 ops/s
# Warmup Iteration  25: 308495.016 ops/s
# Warmup Iteration  26: 309286.069 ops/s
# Warmup Iteration  27: 307727.330 ops/s
# Warmup Iteration  28: 311185.062 ops/s
# Warmup Iteration  29: 311189.800 ops/s
# Warmup Iteration  30: 307635.076 ops/s
Iteration   1: 312476.776 ops/s
Iteration   2: 310240.996 ops/s
Iteration   3: 308792.440 ops/s
Iteration   4: 309765.277 ops/s
Iteration   5: 309737.280 ops/s
Iteration   6: 310600.829 ops/s
Iteration   7: 311215.409 ops/s
Iteration   8: 308895.056 ops/s
Iteration   9: 309318.580 ops/s
Iteration  10: 309424.990 ops/s
Iteration  11: 309600.619 ops/s
Iteration  12: 309894.670 ops/s
Iteration  13: 309924.606 ops/s
Iteration  14: 309259.787 ops/s
Iteration  15: 309870.273 ops/s
Iteration  16: 309291.132 ops/s
Iteration  17: 311532.826 ops/s
Iteration  18: 308093.640 ops/s
Iteration  19: 309014.418 ops/s
Iteration  20: 309222.317 ops/s
Iteration  21: 308285.208 ops/s
Iteration  22: 308690.163 ops/s
Iteration  23: 310231.008 ops/s
Iteration  24: 309693.519 ops/s
Iteration  25: 310432.574 ops/s
Iteration  26: 310718.000 ops/s
Iteration  27: 311682.554 ops/s
Iteration  28: 310986.826 ops/s
Iteration  29: 311329.500 ops/s
Iteration  30: 309906.498 ops/s


Result "zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_groupsByTraceIdHighWheStrict":
  309937.592 ±(99.9%) 695.240 ops/s [Average]
  (min, avg, max) = (308093.640, 309937.592, 312476.776), stdev = 1040.603
  CI (99.9%): [309242.352, 310632.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
GroupByTraceIdTest._Benchmark.benchmark_map_groupsByTraceIdHighWheStrict  thrpt   30  309937.592 ± 695.240  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_groupsEverythingWhenNotStrict$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_groupsEverythingWhenNotStrict

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145525.230 ops/s
# Warmup Iteration   2: 180851.727 ops/s
# Warmup Iteration   3: 391270.173 ops/s
# Warmup Iteration   4: 387638.498 ops/s
# Warmup Iteration   5: 387913.650 ops/s
# Warmup Iteration   6: 393137.290 ops/s
# Warmup Iteration   7: 379465.819 ops/s
# Warmup Iteration   8: 280165.927 ops/s
# Warmup Iteration   9: 390434.912 ops/s
# Warmup Iteration  10: 388935.958 ops/s
# Warmup Iteration  11: 390683.627 ops/s
# Warmup Iteration  12: 391266.872 ops/s
# Warmup Iteration  13: 392035.829 ops/s
# Warmup Iteration  14: 389900.949 ops/s
# Warmup Iteration  15: 390319.026 ops/s
# Warmup Iteration  16: 388129.420 ops/s
# Warmup Iteration  17: 389696.045 ops/s
# Warmup Iteration  18: 393094.582 ops/s
# Warmup Iteration  19: 388816.443 ops/s
# Warmup Iteration  20: 391756.286 ops/s
# Warmup Iteration  21: 393381.320 ops/s
# Warmup Iteration  22: 392030.259 ops/s
# Warmup Iteration  23: 391652.832 ops/s
# Warmup Iteration  24: 391695.497 ops/s
# Warmup Iteration  25: 393754.001 ops/s
# Warmup Iteration  26: 391784.827 ops/s
# Warmup Iteration  27: 392062.263 ops/s
# Warmup Iteration  28: 392470.674 ops/s
# Warmup Iteration  29: 390835.299 ops/s
# Warmup Iteration  30: 390155.723 ops/s
Iteration   1: 393187.813 ops/s
Iteration   2: 392791.227 ops/s
Iteration   3: 392282.573 ops/s
Iteration   4: 393644.813 ops/s
Iteration   5: 393555.556 ops/s
Iteration   6: 394483.111 ops/s
Iteration   7: 391598.337 ops/s
Iteration   8: 393579.402 ops/s
Iteration   9: 393672.865 ops/s
Iteration  10: 393741.880 ops/s
Iteration  11: 393928.168 ops/s
Iteration  12: 392635.223 ops/s
Iteration  13: 393550.792 ops/s
Iteration  14: 392541.666 ops/s
Iteration  15: 391818.522 ops/s
Iteration  16: 394434.973 ops/s
Iteration  17: 393531.972 ops/s
Iteration  18: 393477.003 ops/s
Iteration  19: 393238.595 ops/s
Iteration  20: 392946.950 ops/s
Iteration  21: 392449.824 ops/s
Iteration  22: 390526.712 ops/s
Iteration  23: 392334.622 ops/s
Iteration  24: 393094.410 ops/s
Iteration  25: 392121.341 ops/s
Iteration  26: 392395.902 ops/s
Iteration  27: 391513.999 ops/s
Iteration  28: 390600.456 ops/s
Iteration  29: 390606.397 ops/s
Iteration  30: 390083.455 ops/s


Result "zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_groupsEverythingWhenNotStrict":
  392678.952 ±(99.9%) 779.466 ops/s [Average]
  (min, avg, max) = (390083.455, 392678.952, 394483.111), stdev = 1166.668
  CI (99.9%): [391899.486, 393458.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
GroupByTraceIdTest._Benchmark.benchmark_map_groupsEverythingWhenNotStrict  thrpt   30  392678.952 ± 779.466  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_modifiable$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_modifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115198.361 ops/s
# Warmup Iteration   2: 168400.175 ops/s
# Warmup Iteration   3: 356179.339 ops/s
# Warmup Iteration   4: 374940.796 ops/s
# Warmup Iteration   5: 380862.776 ops/s
# Warmup Iteration   6: 381288.817 ops/s
# Warmup Iteration   7: 357818.193 ops/s
# Warmup Iteration   8: 281220.013 ops/s
# Warmup Iteration   9: 378585.193 ops/s
# Warmup Iteration  10: 379822.163 ops/s
# Warmup Iteration  11: 382912.714 ops/s
# Warmup Iteration  12: 379220.693 ops/s
# Warmup Iteration  13: 382421.667 ops/s
# Warmup Iteration  14: 378277.405 ops/s
# Warmup Iteration  15: 379673.456 ops/s
# Warmup Iteration  16: 381147.914 ops/s
# Warmup Iteration  17: 379209.912 ops/s
# Warmup Iteration  18: 381314.686 ops/s
# Warmup Iteration  19: 382673.027 ops/s
# Warmup Iteration  20: 382512.418 ops/s
# Warmup Iteration  21: 382991.724 ops/s
# Warmup Iteration  22: 383895.133 ops/s
# Warmup Iteration  23: 383616.828 ops/s
# Warmup Iteration  24: 379271.277 ops/s
# Warmup Iteration  25: 378331.254 ops/s
# Warmup Iteration  26: 377527.167 ops/s
# Warmup Iteration  27: 380724.798 ops/s
# Warmup Iteration  28: 380451.175 ops/s
# Warmup Iteration  29: 378153.126 ops/s
# Warmup Iteration  30: 380878.888 ops/s
Iteration   1: 375667.082 ops/s
Iteration   2: 379264.600 ops/s
Iteration   3: 377670.935 ops/s
Iteration   4: 379282.039 ops/s
Iteration   5: 378688.663 ops/s
Iteration   6: 380201.970 ops/s
Iteration   7: 376836.269 ops/s
Iteration   8: 380018.989 ops/s
Iteration   9: 377298.468 ops/s
Iteration  10: 379512.735 ops/s
Iteration  11: 381956.179 ops/s
Iteration  12: 380930.981 ops/s
Iteration  13: 382400.019 ops/s
Iteration  14: 377298.531 ops/s
Iteration  15: 379737.942 ops/s
Iteration  16: 379832.221 ops/s
Iteration  17: 377227.793 ops/s
Iteration  18: 376932.190 ops/s
Iteration  19: 378492.171 ops/s
Iteration  20: 379165.411 ops/s
Iteration  21: 380175.587 ops/s
Iteration  22: 378512.014 ops/s
Iteration  23: 377689.061 ops/s
Iteration  24: 378096.697 ops/s
Iteration  25: 381183.472 ops/s
Iteration  26: 381946.917 ops/s
Iteration  27: 378496.394 ops/s
Iteration  28: 377316.589 ops/s
Iteration  29: 380774.233 ops/s
Iteration  30: 380226.607 ops/s


Result "zipkin2.storage.GroupByTraceIdTest._Benchmark.benchmark_map_modifiable":
  379094.425 ±(99.9%) 1139.681 ops/s [Average]
  (min, avg, max) = (375667.082, 379094.425, 382400.019), stdev = 1705.821
  CI (99.9%): [377954.744, 380234.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
GroupByTraceIdTest._Benchmark.benchmark_map_modifiable  thrpt   30  379094.425 ± 1139.681  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_differentiatesOnTraceIdWhenTimestampEqual$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_differentiatesOnTraceIdWhenTimestampEqual

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10751.123 ops/s
# Warmup Iteration   2: 18929.405 ops/s
# Warmup Iteration   3: 23540.090 ops/s
# Warmup Iteration   4: 39187.375 ops/s
# Warmup Iteration   5: 44618.504 ops/s
# Warmup Iteration   6: 45142.227 ops/s
# Warmup Iteration   7: 45533.359 ops/s
# Warmup Iteration   8: 45454.501 ops/s
# Warmup Iteration   9: 44686.101 ops/s
# Warmup Iteration  10: 44707.709 ops/s
# Warmup Iteration  11: 45478.574 ops/s
# Warmup Iteration  12: 31489.866 ops/s
# Warmup Iteration  13: 44123.577 ops/s
# Warmup Iteration  14: 45910.984 ops/s
# Warmup Iteration  15: 45839.838 ops/s
# Warmup Iteration  16: 45056.283 ops/s
# Warmup Iteration  17: 45953.307 ops/s
# Warmup Iteration  18: 46380.121 ops/s
# Warmup Iteration  19: 45810.621 ops/s
# Warmup Iteration  20: 46269.733 ops/s
# Warmup Iteration  21: 45914.060 ops/s
# Warmup Iteration  22: 45453.918 ops/s
# Warmup Iteration  23: 45946.883 ops/s
# Warmup Iteration  24: 45359.731 ops/s
# Warmup Iteration  25: 45960.006 ops/s
# Warmup Iteration  26: 46358.050 ops/s
# Warmup Iteration  27: 46171.599 ops/s
# Warmup Iteration  28: 46576.593 ops/s
# Warmup Iteration  29: 46176.376 ops/s
# Warmup Iteration  30: 46040.754 ops/s
Iteration   1: 45841.570 ops/s
Iteration   2: 46896.345 ops/s
Iteration   3: 46870.754 ops/s
Iteration   4: 46680.856 ops/s
Iteration   5: 45462.918 ops/s
Iteration   6: 45639.789 ops/s
Iteration   7: 46154.586 ops/s
Iteration   8: 45812.509 ops/s
Iteration   9: 46618.529 ops/s
Iteration  10: 46458.375 ops/s
Iteration  11: 46062.557 ops/s
Iteration  12: 46229.812 ops/s
Iteration  13: 45911.780 ops/s
Iteration  14: 45567.753 ops/s
Iteration  15: 45899.148 ops/s
Iteration  16: 46925.375 ops/s
Iteration  17: 45864.685 ops/s
Iteration  18: 46149.616 ops/s
Iteration  19: 46755.543 ops/s
Iteration  20: 45947.800 ops/s
Iteration  21: 46476.016 ops/s
Iteration  22: 46362.242 ops/s
Iteration  23: 46192.566 ops/s
Iteration  24: 46246.619 ops/s
Iteration  25: 45888.874 ops/s
Iteration  26: 45777.876 ops/s
Iteration  27: 45249.658 ops/s
Iteration  28: 45581.265 ops/s
Iteration  29: 45664.833 ops/s
Iteration  30: 45659.154 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_differentiatesOnTraceIdWhenTimestampEqual":
  46094.980 ±(99.9%) 305.564 ops/s [Average]
  (min, avg, max) = (45249.658, 46094.980, 46925.375), stdev = 457.353
  CI (99.9%): [45789.417, 46400.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt      Score     Error  Units
InMemoryStorageTest._Benchmark.benchmark_differentiatesOnTraceIdWhenTimestampEqual  thrpt   30  46094.980 ± 305.564  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getSpanNames_skipsNullSpanName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getSpanNames_skipsNullSpanName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70877.261 ops/s
# Warmup Iteration   2: 159398.458 ops/s
# Warmup Iteration   3: 314199.416 ops/s
# Warmup Iteration   4: 385578.894 ops/s
# Warmup Iteration   5: 390674.971 ops/s
# Warmup Iteration   6: 391722.979 ops/s
# Warmup Iteration   7: 381874.694 ops/s
# Warmup Iteration   8: 283527.802 ops/s
# Warmup Iteration   9: 393436.538 ops/s
# Warmup Iteration  10: 397025.744 ops/s
# Warmup Iteration  11: 395663.720 ops/s
# Warmup Iteration  12: 396555.279 ops/s
# Warmup Iteration  13: 394283.414 ops/s
# Warmup Iteration  14: 393550.914 ops/s
# Warmup Iteration  15: 389217.214 ops/s
# Warmup Iteration  16: 393301.800 ops/s
# Warmup Iteration  17: 393092.945 ops/s
# Warmup Iteration  18: 397406.266 ops/s
# Warmup Iteration  19: 396023.924 ops/s
# Warmup Iteration  20: 395676.375 ops/s
# Warmup Iteration  21: 395628.365 ops/s
# Warmup Iteration  22: 394363.326 ops/s
# Warmup Iteration  23: 392102.936 ops/s
# Warmup Iteration  24: 391908.077 ops/s
# Warmup Iteration  25: 388903.755 ops/s
# Warmup Iteration  26: 388629.899 ops/s
# Warmup Iteration  27: 387688.683 ops/s
# Warmup Iteration  28: 388644.905 ops/s
# Warmup Iteration  29: 392480.531 ops/s
# Warmup Iteration  30: 389698.839 ops/s
Iteration   1: 390489.987 ops/s
Iteration   2: 390120.293 ops/s
Iteration   3: 388325.517 ops/s
Iteration   4: 388833.255 ops/s
Iteration   5: 393753.875 ops/s
Iteration   6: 387269.741 ops/s
Iteration   7: 390071.166 ops/s
Iteration   8: 393519.261 ops/s
Iteration   9: 394591.373 ops/s
Iteration  10: 393378.474 ops/s
Iteration  11: 391174.990 ops/s
Iteration  12: 387512.246 ops/s
Iteration  13: 391304.931 ops/s
Iteration  14: 393672.528 ops/s
Iteration  15: 393998.017 ops/s
Iteration  16: 394524.902 ops/s
Iteration  17: 394499.090 ops/s
Iteration  18: 394504.297 ops/s
Iteration  19: 393157.271 ops/s
Iteration  20: 393580.804 ops/s
Iteration  21: 392188.144 ops/s
Iteration  22: 392789.183 ops/s
Iteration  23: 393584.153 ops/s
Iteration  24: 394007.977 ops/s
Iteration  25: 395694.991 ops/s
Iteration  26: 390689.572 ops/s
Iteration  27: 391400.150 ops/s
Iteration  28: 392558.311 ops/s
Iteration  29: 392060.618 ops/s
Iteration  30: 388650.995 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getSpanNames_skipsNullSpanName":
  392063.537 ±(99.9%) 1542.619 ops/s [Average]
  (min, avg, max) = (387269.741, 392063.537, 395694.991), stdev = 2308.919
  CI (99.9%): [390520.918, 393606.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
InMemoryStorageTest._Benchmark.benchmark_getSpanNames_skipsNullSpanName  thrpt   30  392063.537 ± 1542.619  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTagsAndThenValues$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTagsAndThenValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 67771.257 ops/s
# Warmup Iteration   2: 95170.822 ops/s
# Warmup Iteration   3: 216594.451 ops/s
# Warmup Iteration   4: 217108.210 ops/s
# Warmup Iteration   5: 219216.938 ops/s
# Warmup Iteration   6: 216761.053 ops/s
# Warmup Iteration   7: 189764.401 ops/s
# Warmup Iteration   8: 188416.703 ops/s
# Warmup Iteration   9: 221756.045 ops/s
# Warmup Iteration  10: 220943.194 ops/s
# Warmup Iteration  11: 221632.589 ops/s
# Warmup Iteration  12: 223098.722 ops/s
# Warmup Iteration  13: 222586.215 ops/s
# Warmup Iteration  14: 222184.742 ops/s
# Warmup Iteration  15: 221991.572 ops/s
# Warmup Iteration  16: 222350.509 ops/s
# Warmup Iteration  17: 223904.984 ops/s
# Warmup Iteration  18: 223138.108 ops/s
# Warmup Iteration  19: 225238.869 ops/s
# Warmup Iteration  20: 224549.023 ops/s
# Warmup Iteration  21: 222027.755 ops/s
# Warmup Iteration  22: 222688.529 ops/s
# Warmup Iteration  23: 222634.613 ops/s
# Warmup Iteration  24: 223156.475 ops/s
# Warmup Iteration  25: 223118.428 ops/s
# Warmup Iteration  26: 222154.491 ops/s
# Warmup Iteration  27: 222255.584 ops/s
# Warmup Iteration  28: 222994.363 ops/s
# Warmup Iteration  29: 222156.713 ops/s
# Warmup Iteration  30: 222937.767 ops/s
Iteration   1: 222282.063 ops/s
Iteration   2: 223729.823 ops/s
Iteration   3: 224791.289 ops/s
Iteration   4: 224409.015 ops/s
Iteration   5: 222664.648 ops/s
Iteration   6: 223550.456 ops/s
Iteration   7: 225474.695 ops/s
Iteration   8: 221412.669 ops/s
Iteration   9: 223757.243 ops/s
Iteration  10: 224296.100 ops/s
Iteration  11: 224634.000 ops/s
Iteration  12: 224133.658 ops/s
Iteration  13: 225106.092 ops/s
Iteration  14: 222859.286 ops/s
Iteration  15: 224026.042 ops/s
Iteration  16: 222302.927 ops/s
Iteration  17: 223060.921 ops/s
Iteration  18: 223563.528 ops/s
Iteration  19: 222970.787 ops/s
Iteration  20: 222382.801 ops/s
Iteration  21: 222604.121 ops/s
Iteration  22: 221113.072 ops/s
Iteration  23: 220994.672 ops/s
Iteration  24: 223934.649 ops/s
Iteration  25: 224075.059 ops/s
Iteration  26: 222408.423 ops/s
Iteration  27: 222748.062 ops/s
Iteration  28: 221017.289 ops/s
Iteration  29: 221096.357 ops/s
Iteration  30: 220925.539 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTagsAndThenValues":
  223077.510 ±(99.9%) 877.857 ops/s [Average]
  (min, avg, max) = (220925.539, 223077.510, 225474.695), stdev = 1313.936
  CI (99.9%): [222199.652, 223955.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
InMemoryStorageTest._Benchmark.benchmark_getTagsAndThenValues  thrpt   30  223077.510 ± 877.857  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTraces_byTraceIds$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTraces_byTraceIds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54817.810 ops/s
# Warmup Iteration   2: 93451.903 ops/s
# Warmup Iteration   3: 176596.141 ops/s
# Warmup Iteration   4: 196629.082 ops/s
# Warmup Iteration   5: 199325.866 ops/s
# Warmup Iteration   6: 199909.077 ops/s
# Warmup Iteration   7: 200207.110 ops/s
# Warmup Iteration   8: 141125.441 ops/s
# Warmup Iteration   9: 201529.880 ops/s
# Warmup Iteration  10: 200629.047 ops/s
# Warmup Iteration  11: 200258.762 ops/s
# Warmup Iteration  12: 201486.969 ops/s
# Warmup Iteration  13: 201107.490 ops/s
# Warmup Iteration  14: 200990.144 ops/s
# Warmup Iteration  15: 200203.646 ops/s
# Warmup Iteration  16: 201218.574 ops/s
# Warmup Iteration  17: 201996.258 ops/s
# Warmup Iteration  18: 200974.669 ops/s
# Warmup Iteration  19: 201319.284 ops/s
# Warmup Iteration  20: 201423.888 ops/s
# Warmup Iteration  21: 200010.654 ops/s
# Warmup Iteration  22: 201135.705 ops/s
# Warmup Iteration  23: 199963.181 ops/s
# Warmup Iteration  24: 197775.597 ops/s
# Warmup Iteration  25: 197623.659 ops/s
# Warmup Iteration  26: 198160.491 ops/s
# Warmup Iteration  27: 200088.182 ops/s
# Warmup Iteration  28: 199597.468 ops/s
# Warmup Iteration  29: 198172.977 ops/s
# Warmup Iteration  30: 199577.520 ops/s
Iteration   1: 199327.301 ops/s
Iteration   2: 198083.314 ops/s
Iteration   3: 199315.870 ops/s
Iteration   4: 200749.689 ops/s
Iteration   5: 199651.200 ops/s
Iteration   6: 199783.870 ops/s
Iteration   7: 201789.052 ops/s
Iteration   8: 201225.898 ops/s
Iteration   9: 199653.979 ops/s
Iteration  10: 198404.619 ops/s
Iteration  11: 198970.569 ops/s
Iteration  12: 199884.639 ops/s
Iteration  13: 198779.920 ops/s
Iteration  14: 201168.333 ops/s
Iteration  15: 198478.434 ops/s
Iteration  16: 199172.353 ops/s
Iteration  17: 200439.898 ops/s
Iteration  18: 199145.845 ops/s
Iteration  19: 200555.635 ops/s
Iteration  20: 198667.850 ops/s
Iteration  21: 201114.514 ops/s
Iteration  22: 198805.864 ops/s
Iteration  23: 199968.222 ops/s
Iteration  24: 201041.296 ops/s
Iteration  25: 196565.949 ops/s
Iteration  26: 199554.416 ops/s
Iteration  27: 197954.690 ops/s
Iteration  28: 198386.959 ops/s
Iteration  29: 198577.520 ops/s
Iteration  30: 201258.788 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTraces_byTraceIds":
  199549.216 ±(99.9%) 810.405 ops/s [Average]
  (min, avg, max) = (196565.949, 199549.216, 201789.052), stdev = 1212.977
  CI (99.9%): [198738.811, 200359.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
InMemoryStorageTest._Benchmark.benchmark_getTraces_byTraceIds  thrpt   30  199549.216 ± 810.405  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTraces_filteringMatchesMostRecentTraces$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTraces_filteringMatchesMostRecentTraces

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7245.475 ops/s
# Warmup Iteration   2: 9954.465 ops/s
# Warmup Iteration   3: 18011.128 ops/s
# Warmup Iteration   4: 19926.292 ops/s
# Warmup Iteration   5: 19801.532 ops/s
# Warmup Iteration   6: 20036.671 ops/s
# Warmup Iteration   7: 20065.557 ops/s
# Warmup Iteration   8: 19891.387 ops/s
# Warmup Iteration   9: 14364.788 ops/s
# Warmup Iteration  10: 20233.020 ops/s
# Warmup Iteration  11: 20222.548 ops/s
# Warmup Iteration  12: 20285.597 ops/s
# Warmup Iteration  13: 20211.917 ops/s
# Warmup Iteration  14: 20186.343 ops/s
# Warmup Iteration  15: 20112.227 ops/s
# Warmup Iteration  16: 20133.282 ops/s
# Warmup Iteration  17: 20326.925 ops/s
# Warmup Iteration  18: 20356.946 ops/s
# Warmup Iteration  19: 20181.547 ops/s
# Warmup Iteration  20: 20096.436 ops/s
# Warmup Iteration  21: 20123.574 ops/s
# Warmup Iteration  22: 20146.245 ops/s
# Warmup Iteration  23: 20277.904 ops/s
# Warmup Iteration  24: 20233.244 ops/s
# Warmup Iteration  25: 20146.029 ops/s
# Warmup Iteration  26: 20216.061 ops/s
# Warmup Iteration  27: 20303.850 ops/s
# Warmup Iteration  28: 20230.229 ops/s
# Warmup Iteration  29: 20301.040 ops/s
# Warmup Iteration  30: 20327.544 ops/s
Iteration   1: 20288.784 ops/s
Iteration   2: 20206.618 ops/s
Iteration   3: 20168.739 ops/s
Iteration   4: 20111.083 ops/s
Iteration   5: 20076.083 ops/s
Iteration   6: 20030.938 ops/s
Iteration   7: 20109.161 ops/s
Iteration   8: 19910.676 ops/s
Iteration   9: 20169.487 ops/s
Iteration  10: 20260.228 ops/s
Iteration  11: 20082.229 ops/s
Iteration  12: 20160.517 ops/s
Iteration  13: 20298.003 ops/s
Iteration  14: 19685.712 ops/s
Iteration  15: 20233.823 ops/s
Iteration  16: 20132.861 ops/s
Iteration  17: 20074.996 ops/s
Iteration  18: 20097.808 ops/s
Iteration  19: 19811.459 ops/s
Iteration  20: 19888.633 ops/s
Iteration  21: 19955.309 ops/s
Iteration  22: 19948.714 ops/s
Iteration  23: 20203.468 ops/s
Iteration  24: 20020.344 ops/s
Iteration  25: 20110.001 ops/s
Iteration  26: 20060.532 ops/s
Iteration  27: 19958.877 ops/s
Iteration  28: 20036.799 ops/s
Iteration  29: 19857.610 ops/s
Iteration  30: 19992.397 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_getTraces_filteringMatchesMostRecentTraces":
  20064.730 ±(99.9%) 96.536 ops/s [Average]
  (min, avg, max) = (19685.712, 20064.730, 20298.003), stdev = 144.490
  CI (99.9%): [19968.194, 20161.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score    Error  Units
InMemoryStorageTest._Benchmark.benchmark_getTraces_filteringMatchesMostRecentTraces  thrpt   30  20064.730 ± 96.536  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_replayOverwrites$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_replayOverwrites

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47046.258 ops/s
# Warmup Iteration   2: 125196.221 ops/s
# Warmup Iteration   3: 242584.693 ops/s
# Warmup Iteration   4: 328241.153 ops/s
# Warmup Iteration   5: 333885.375 ops/s
# Warmup Iteration   6: 337886.806 ops/s
# Warmup Iteration   7: 326965.214 ops/s
# Warmup Iteration   8: 242760.524 ops/s
# Warmup Iteration   9: 342495.796 ops/s
# Warmup Iteration  10: 339327.938 ops/s
# Warmup Iteration  11: 338390.459 ops/s
# Warmup Iteration  12: 343055.665 ops/s
# Warmup Iteration  13: 340613.431 ops/s
# Warmup Iteration  14: 339782.655 ops/s
# Warmup Iteration  15: 341341.934 ops/s
# Warmup Iteration  16: 343190.654 ops/s
# Warmup Iteration  17: 342827.126 ops/s
# Warmup Iteration  18: 342587.384 ops/s
# Warmup Iteration  19: 341944.639 ops/s
# Warmup Iteration  20: 339559.361 ops/s
# Warmup Iteration  21: 338190.275 ops/s
# Warmup Iteration  22: 341687.860 ops/s
# Warmup Iteration  23: 340554.598 ops/s
# Warmup Iteration  24: 336623.115 ops/s
# Warmup Iteration  25: 338387.558 ops/s
# Warmup Iteration  26: 336105.924 ops/s
# Warmup Iteration  27: 339513.057 ops/s
# Warmup Iteration  28: 336707.055 ops/s
# Warmup Iteration  29: 337545.830 ops/s
# Warmup Iteration  30: 337737.488 ops/s
Iteration   1: 338982.224 ops/s
Iteration   2: 335404.544 ops/s
Iteration   3: 342556.863 ops/s
Iteration   4: 340043.810 ops/s
Iteration   5: 341953.884 ops/s
Iteration   6: 339471.963 ops/s
Iteration   7: 342399.717 ops/s
Iteration   8: 341525.626 ops/s
Iteration   9: 342025.168 ops/s
Iteration  10: 339247.970 ops/s
Iteration  11: 339140.176 ops/s
Iteration  12: 340612.664 ops/s
Iteration  13: 343321.014 ops/s
Iteration  14: 340682.460 ops/s
Iteration  15: 338825.005 ops/s
Iteration  16: 340151.879 ops/s
Iteration  17: 340729.687 ops/s
Iteration  18: 338505.267 ops/s
Iteration  19: 340464.016 ops/s
Iteration  20: 340674.298 ops/s
Iteration  21: 340568.954 ops/s
Iteration  22: 340271.325 ops/s
Iteration  23: 342399.619 ops/s
Iteration  24: 338581.162 ops/s
Iteration  25: 339836.145 ops/s
Iteration  26: 338551.220 ops/s
Iteration  27: 338275.566 ops/s
Iteration  28: 340054.948 ops/s
Iteration  29: 339605.095 ops/s
Iteration  30: 339576.660 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_replayOverwrites":
  340147.964 ±(99.9%) 1081.168 ops/s [Average]
  (min, avg, max) = (335404.544, 340147.964, 343321.014), stdev = 1618.241
  CI (99.9%): [339066.796, 341229.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
InMemoryStorageTest._Benchmark.benchmark_replayOverwrites  thrpt   30  340147.964 ± 1081.168  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_toStringContainsOnlySummaryInformation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_toStringContainsOnlySummaryInformation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 262059.693 ops/s
# Warmup Iteration   2: 394886.392 ops/s
# Warmup Iteration   3: 741509.007 ops/s
# Warmup Iteration   4: 728111.299 ops/s
# Warmup Iteration   5: 734810.233 ops/s
# Warmup Iteration   6: 611141.551 ops/s
# Warmup Iteration   7: 619243.847 ops/s
# Warmup Iteration   8: 731913.280 ops/s
# Warmup Iteration   9: 734546.220 ops/s
# Warmup Iteration  10: 736989.397 ops/s
# Warmup Iteration  11: 740783.996 ops/s
# Warmup Iteration  12: 740955.847 ops/s
# Warmup Iteration  13: 740770.736 ops/s
# Warmup Iteration  14: 738562.520 ops/s
# Warmup Iteration  15: 735514.028 ops/s
# Warmup Iteration  16: 737973.247 ops/s
# Warmup Iteration  17: 734841.200 ops/s
# Warmup Iteration  18: 738404.042 ops/s
# Warmup Iteration  19: 738999.183 ops/s
# Warmup Iteration  20: 732321.300 ops/s
# Warmup Iteration  21: 734047.163 ops/s
# Warmup Iteration  22: 735075.183 ops/s
# Warmup Iteration  23: 733926.548 ops/s
# Warmup Iteration  24: 733667.206 ops/s
# Warmup Iteration  25: 732459.935 ops/s
# Warmup Iteration  26: 738469.927 ops/s
# Warmup Iteration  27: 737055.930 ops/s
# Warmup Iteration  28: 731730.070 ops/s
# Warmup Iteration  29: 736243.857 ops/s
# Warmup Iteration  30: 736994.673 ops/s
Iteration   1: 734995.379 ops/s
Iteration   2: 740196.855 ops/s
Iteration   3: 740102.468 ops/s
Iteration   4: 734539.778 ops/s
Iteration   5: 734489.875 ops/s
Iteration   6: 730401.769 ops/s
Iteration   7: 734914.242 ops/s
Iteration   8: 732453.179 ops/s
Iteration   9: 738057.759 ops/s
Iteration  10: 733408.838 ops/s
Iteration  11: 732968.596 ops/s
Iteration  12: 740601.862 ops/s
Iteration  13: 738470.625 ops/s
Iteration  14: 738048.012 ops/s
Iteration  15: 730704.961 ops/s
Iteration  16: 731851.349 ops/s
Iteration  17: 734346.531 ops/s
Iteration  18: 735996.916 ops/s
Iteration  19: 740036.227 ops/s
Iteration  20: 733283.529 ops/s
Iteration  21: 737347.032 ops/s
Iteration  22: 740546.543 ops/s
Iteration  23: 742293.645 ops/s
Iteration  24: 738761.121 ops/s
Iteration  25: 741217.131 ops/s
Iteration  26: 737880.702 ops/s
Iteration  27: 739445.763 ops/s
Iteration  28: 741912.098 ops/s
Iteration  29: 733315.623 ops/s
Iteration  30: 738209.810 ops/s


Result "zipkin2.storage.InMemoryStorageTest._Benchmark.benchmark_toStringContainsOnlySummaryInformation":
  736693.274 ±(99.9%) 2331.647 ops/s [Average]
  (min, avg, max) = (730401.769, 736693.274, 742293.645), stdev = 3489.899
  CI (99.9%): [734361.627, 739024.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
InMemoryStorageTest._Benchmark.benchmark_toStringContainsOnlySummaryInformation  thrpt   30  736693.274 ± 2331.647  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryParameterSpecificity$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryParameterSpecificity

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 41337.323 ops/s
# Warmup Iteration   2: 59031.647 ops/s
# Warmup Iteration   3: 151692.618 ops/s
# Warmup Iteration   4: 149861.939 ops/s
# Warmup Iteration   5: 152934.614 ops/s
# Warmup Iteration   6: 151797.241 ops/s
# Warmup Iteration   7: 107946.339 ops/s
# Warmup Iteration   8: 152593.894 ops/s
# Warmup Iteration   9: 153577.037 ops/s
# Warmup Iteration  10: 152883.542 ops/s
# Warmup Iteration  11: 152747.050 ops/s
# Warmup Iteration  12: 151517.271 ops/s
# Warmup Iteration  13: 152731.538 ops/s
# Warmup Iteration  14: 152914.747 ops/s
# Warmup Iteration  15: 153924.704 ops/s
# Warmup Iteration  16: 154062.691 ops/s
# Warmup Iteration  17: 154065.138 ops/s
# Warmup Iteration  18: 153463.998 ops/s
# Warmup Iteration  19: 153608.523 ops/s
# Warmup Iteration  20: 152366.222 ops/s
# Warmup Iteration  21: 153710.818 ops/s
# Warmup Iteration  22: 154496.614 ops/s
# Warmup Iteration  23: 151714.607 ops/s
# Warmup Iteration  24: 152970.383 ops/s
# Warmup Iteration  25: 152511.530 ops/s
# Warmup Iteration  26: 153848.235 ops/s
# Warmup Iteration  27: 152123.652 ops/s
# Warmup Iteration  28: 151613.237 ops/s
# Warmup Iteration  29: 152790.253 ops/s
# Warmup Iteration  30: 152094.711 ops/s
Iteration   1: 153503.296 ops/s
Iteration   2: 153729.580 ops/s
Iteration   3: 153693.196 ops/s
Iteration   4: 154354.331 ops/s
Iteration   5: 152180.859 ops/s
Iteration   6: 152258.829 ops/s
Iteration   7: 153044.585 ops/s
Iteration   8: 152899.643 ops/s
Iteration   9: 153468.701 ops/s
Iteration  10: 152406.024 ops/s
Iteration  11: 153237.150 ops/s
Iteration  12: 154882.219 ops/s
Iteration  13: 152892.106 ops/s
Iteration  14: 151953.397 ops/s
Iteration  15: 153299.294 ops/s
Iteration  16: 153929.207 ops/s
Iteration  17: 154008.134 ops/s
Iteration  18: 153609.966 ops/s
Iteration  19: 154109.200 ops/s
Iteration  20: 152055.145 ops/s
Iteration  21: 154127.490 ops/s
Iteration  22: 154172.751 ops/s
Iteration  23: 152316.165 ops/s
Iteration  24: 153016.052 ops/s
Iteration  25: 154279.382 ops/s
Iteration  26: 153342.300 ops/s
Iteration  27: 152394.168 ops/s
Iteration  28: 152372.285 ops/s
Iteration  29: 154316.258 ops/s
Iteration  30: 152516.104 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryParameterSpecificity":
  153278.927 ±(99.9%) 545.576 ops/s [Average]
  (min, avg, max) = (151953.397, 153278.927, 154882.219), stdev = 816.592
  CI (99.9%): [152733.351, 153824.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_annotationQueryParameterSpecificity  thrpt   30  153278.927 ± 545.576  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuerySkipsEmptyKeys$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuerySkipsEmptyKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140275.167 ops/s
# Warmup Iteration   2: 203490.016 ops/s
# Warmup Iteration   3: 473550.967 ops/s
# Warmup Iteration   4: 476765.915 ops/s
# Warmup Iteration   5: 470448.996 ops/s
# Warmup Iteration   6: 475171.127 ops/s
# Warmup Iteration   7: 336731.939 ops/s
# Warmup Iteration   8: 473853.711 ops/s
# Warmup Iteration   9: 473992.317 ops/s
# Warmup Iteration  10: 476110.357 ops/s
# Warmup Iteration  11: 475631.264 ops/s
# Warmup Iteration  12: 472584.365 ops/s
# Warmup Iteration  13: 475517.484 ops/s
# Warmup Iteration  14: 473742.254 ops/s
# Warmup Iteration  15: 475744.018 ops/s
# Warmup Iteration  16: 477907.159 ops/s
# Warmup Iteration  17: 477450.918 ops/s
# Warmup Iteration  18: 478029.842 ops/s
# Warmup Iteration  19: 476041.204 ops/s
# Warmup Iteration  20: 477247.529 ops/s
# Warmup Iteration  21: 479313.387 ops/s
# Warmup Iteration  22: 476700.575 ops/s
# Warmup Iteration  23: 476823.101 ops/s
# Warmup Iteration  24: 474092.593 ops/s
# Warmup Iteration  25: 479381.079 ops/s
# Warmup Iteration  26: 474679.424 ops/s
# Warmup Iteration  27: 475973.665 ops/s
# Warmup Iteration  28: 476256.007 ops/s
# Warmup Iteration  29: 474463.396 ops/s
# Warmup Iteration  30: 478507.002 ops/s
Iteration   1: 481684.886 ops/s
Iteration   2: 475021.071 ops/s
Iteration   3: 471631.663 ops/s
Iteration   4: 476496.421 ops/s
Iteration   5: 477346.140 ops/s
Iteration   6: 474638.586 ops/s
Iteration   7: 476929.679 ops/s
Iteration   8: 476919.028 ops/s
Iteration   9: 475137.079 ops/s
Iteration  10: 477598.808 ops/s
Iteration  11: 481318.942 ops/s
Iteration  12: 475680.172 ops/s
Iteration  13: 472466.893 ops/s
Iteration  14: 477368.514 ops/s
Iteration  15: 476376.216 ops/s
Iteration  16: 476745.113 ops/s
Iteration  17: 474519.405 ops/s
Iteration  18: 474352.146 ops/s
Iteration  19: 475121.132 ops/s
Iteration  20: 474266.835 ops/s
Iteration  21: 480143.029 ops/s
Iteration  22: 475166.258 ops/s
Iteration  23: 471553.814 ops/s
Iteration  24: 473000.040 ops/s
Iteration  25: 474643.121 ops/s
Iteration  26: 477164.777 ops/s
Iteration  27: 470973.974 ops/s
Iteration  28: 473936.518 ops/s
Iteration  29: 473040.135 ops/s
Iteration  30: 477512.932 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuerySkipsEmptyKeys":
  475625.111 ±(99.9%) 1752.744 ops/s [Average]
  (min, avg, max) = (470973.974, 475625.111, 481684.886), stdev = 2623.425
  CI (99.9%): [473872.367, 477377.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_annotationQuerySkipsEmptyKeys  thrpt   30  475625.111 ± 1752.744  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryTrimsSpaces$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryTrimsSpaces

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34254.665 ops/s
# Warmup Iteration   2: 48982.713 ops/s
# Warmup Iteration   3: 106020.046 ops/s
# Warmup Iteration   4: 105223.062 ops/s
# Warmup Iteration   5: 106525.324 ops/s
# Warmup Iteration   6: 106497.581 ops/s
# Warmup Iteration   7: 74536.853 ops/s
# Warmup Iteration   8: 107784.748 ops/s
# Warmup Iteration   9: 107790.710 ops/s
# Warmup Iteration  10: 107310.740 ops/s
# Warmup Iteration  11: 107895.763 ops/s
# Warmup Iteration  12: 106865.991 ops/s
# Warmup Iteration  13: 106455.963 ops/s
# Warmup Iteration  14: 107115.233 ops/s
# Warmup Iteration  15: 107741.007 ops/s
# Warmup Iteration  16: 107787.837 ops/s
# Warmup Iteration  17: 106985.475 ops/s
# Warmup Iteration  18: 106761.578 ops/s
# Warmup Iteration  19: 106494.463 ops/s
# Warmup Iteration  20: 107587.163 ops/s
# Warmup Iteration  21: 107409.723 ops/s
# Warmup Iteration  22: 106160.117 ops/s
# Warmup Iteration  23: 107140.599 ops/s
# Warmup Iteration  24: 107199.387 ops/s
# Warmup Iteration  25: 107442.375 ops/s
# Warmup Iteration  26: 106639.467 ops/s
# Warmup Iteration  27: 106491.984 ops/s
# Warmup Iteration  28: 107349.611 ops/s
# Warmup Iteration  29: 106984.588 ops/s
# Warmup Iteration  30: 107867.296 ops/s
Iteration   1: 107240.517 ops/s
Iteration   2: 107262.347 ops/s
Iteration   3: 107714.894 ops/s
Iteration   4: 106936.653 ops/s
Iteration   5: 106315.354 ops/s
Iteration   6: 107895.728 ops/s
Iteration   7: 107417.143 ops/s
Iteration   8: 107139.210 ops/s
Iteration   9: 106964.923 ops/s
Iteration  10: 106868.666 ops/s
Iteration  11: 107256.747 ops/s
Iteration  12: 107827.068 ops/s
Iteration  13: 108252.638 ops/s
Iteration  14: 107108.509 ops/s
Iteration  15: 107517.275 ops/s
Iteration  16: 106850.287 ops/s
Iteration  17: 107052.686 ops/s
Iteration  18: 107169.199 ops/s
Iteration  19: 107800.594 ops/s
Iteration  20: 108014.352 ops/s
Iteration  21: 108447.338 ops/s
Iteration  22: 108024.317 ops/s
Iteration  23: 106969.378 ops/s
Iteration  24: 107498.637 ops/s
Iteration  25: 106993.732 ops/s
Iteration  26: 106632.399 ops/s
Iteration  27: 107202.664 ops/s
Iteration  28: 107343.854 ops/s
Iteration  29: 106934.597 ops/s
Iteration  30: 106871.915 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryTrimsSpaces":
  107317.454 ±(99.9%) 331.332 ops/s [Average]
  (min, avg, max) = (106315.354, 107317.454, 108447.338), stdev = 495.922
  CI (99.9%): [106986.122, 107648.786] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_annotationQueryTrimsSpaces  thrpt   30  107317.454 ± 331.332  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryWhenNoInputIsEmpty$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryWhenNoInputIsEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148865.094 ops/s
# Warmup Iteration   2: 201844.411 ops/s
# Warmup Iteration   3: 490395.100 ops/s
# Warmup Iteration   4: 483431.335 ops/s
# Warmup Iteration   5: 490045.592 ops/s
# Warmup Iteration   6: 485354.532 ops/s
# Warmup Iteration   7: 339939.664 ops/s
# Warmup Iteration   8: 490019.947 ops/s
# Warmup Iteration   9: 490383.736 ops/s
# Warmup Iteration  10: 494921.582 ops/s
# Warmup Iteration  11: 493217.689 ops/s
# Warmup Iteration  12: 490630.009 ops/s
# Warmup Iteration  13: 488244.537 ops/s
# Warmup Iteration  14: 492419.383 ops/s
# Warmup Iteration  15: 494523.750 ops/s
# Warmup Iteration  16: 493848.327 ops/s
# Warmup Iteration  17: 494989.816 ops/s
# Warmup Iteration  18: 492847.696 ops/s
# Warmup Iteration  19: 493024.069 ops/s
# Warmup Iteration  20: 496146.152 ops/s
# Warmup Iteration  21: 491963.611 ops/s
# Warmup Iteration  22: 495999.123 ops/s
# Warmup Iteration  23: 496470.397 ops/s
# Warmup Iteration  24: 496024.526 ops/s
# Warmup Iteration  25: 499095.649 ops/s
# Warmup Iteration  26: 495369.969 ops/s
# Warmup Iteration  27: 497287.144 ops/s
# Warmup Iteration  28: 493912.832 ops/s
# Warmup Iteration  29: 495725.649 ops/s
# Warmup Iteration  30: 497490.089 ops/s
Iteration   1: 497587.715 ops/s
Iteration   2: 497792.407 ops/s
Iteration   3: 494102.175 ops/s
Iteration   4: 496817.950 ops/s
Iteration   5: 499525.016 ops/s
Iteration   6: 497806.248 ops/s
Iteration   7: 497581.785 ops/s
Iteration   8: 496580.404 ops/s
Iteration   9: 496319.583 ops/s
Iteration  10: 497036.295 ops/s
Iteration  11: 495106.594 ops/s
Iteration  12: 490027.143 ops/s
Iteration  13: 493075.266 ops/s
Iteration  14: 493459.384 ops/s
Iteration  15: 495788.549 ops/s
Iteration  16: 490398.358 ops/s
Iteration  17: 490168.744 ops/s
Iteration  18: 487482.379 ops/s
Iteration  19: 495896.917 ops/s
Iteration  20: 495092.709 ops/s
Iteration  21: 492708.455 ops/s
Iteration  22: 491081.761 ops/s
Iteration  23: 489904.497 ops/s
Iteration  24: 495100.124 ops/s
Iteration  25: 494959.586 ops/s
Iteration  26: 496574.409 ops/s
Iteration  27: 495044.996 ops/s
Iteration  28: 496656.529 ops/s
Iteration  29: 497983.374 ops/s
Iteration  30: 497289.749 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQueryWhenNoInputIsEmpty":
  494831.637 ±(99.9%) 2001.990 ops/s [Average]
  (min, avg, max) = (487482.379, 494831.637, 499525.016), stdev = 2996.485
  CI (99.9%): [492829.647, 496833.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_annotationQueryWhenNoInputIsEmpty  thrpt   30  494831.637 ± 2001.990  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuery_missingValue$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuery_missingValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101480.876 ops/s
# Warmup Iteration   2: 150770.783 ops/s
# Warmup Iteration   3: 369552.252 ops/s
# Warmup Iteration   4: 364203.797 ops/s
# Warmup Iteration   5: 371024.690 ops/s
# Warmup Iteration   6: 369701.523 ops/s
# Warmup Iteration   7: 262288.993 ops/s
# Warmup Iteration   8: 373114.741 ops/s
# Warmup Iteration   9: 368876.225 ops/s
# Warmup Iteration  10: 373639.232 ops/s
# Warmup Iteration  11: 373291.292 ops/s
# Warmup Iteration  12: 373360.046 ops/s
# Warmup Iteration  13: 370254.115 ops/s
# Warmup Iteration  14: 373279.185 ops/s
# Warmup Iteration  15: 373306.792 ops/s
# Warmup Iteration  16: 373793.083 ops/s
# Warmup Iteration  17: 372725.921 ops/s
# Warmup Iteration  18: 372986.104 ops/s
# Warmup Iteration  19: 373559.831 ops/s
# Warmup Iteration  20: 373301.320 ops/s
# Warmup Iteration  21: 371528.709 ops/s
# Warmup Iteration  22: 369502.707 ops/s
# Warmup Iteration  23: 368893.615 ops/s
# Warmup Iteration  24: 371102.924 ops/s
# Warmup Iteration  25: 370993.848 ops/s
# Warmup Iteration  26: 367582.916 ops/s
# Warmup Iteration  27: 369077.621 ops/s
# Warmup Iteration  28: 366793.656 ops/s
# Warmup Iteration  29: 373014.356 ops/s
# Warmup Iteration  30: 373480.392 ops/s
Iteration   1: 373319.532 ops/s
Iteration   2: 370595.195 ops/s
Iteration   3: 369243.137 ops/s
Iteration   4: 366470.761 ops/s
Iteration   5: 366939.449 ops/s
Iteration   6: 368106.903 ops/s
Iteration   7: 369573.745 ops/s
Iteration   8: 372469.394 ops/s
Iteration   9: 371577.566 ops/s
Iteration  10: 373192.101 ops/s
Iteration  11: 369990.247 ops/s
Iteration  12: 369342.698 ops/s
Iteration  13: 372132.420 ops/s
Iteration  14: 366311.654 ops/s
Iteration  15: 370908.858 ops/s
Iteration  16: 372422.802 ops/s
Iteration  17: 373644.496 ops/s
Iteration  18: 372395.602 ops/s
Iteration  19: 371843.523 ops/s
Iteration  20: 373125.061 ops/s
Iteration  21: 373296.801 ops/s
Iteration  22: 374316.714 ops/s
Iteration  23: 375151.248 ops/s
Iteration  24: 374545.589 ops/s
Iteration  25: 372287.114 ops/s
Iteration  26: 371054.307 ops/s
Iteration  27: 369204.635 ops/s
Iteration  28: 367420.767 ops/s
Iteration  29: 368269.264 ops/s
Iteration  30: 373524.642 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuery_missingValue":
  371089.207 ±(99.9%) 1682.591 ops/s [Average]
  (min, avg, max) = (366311.654, 371089.207, 375151.248), stdev = 2518.423
  CI (99.9%): [369406.617, 372771.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_annotationQuery_missingValue  thrpt   30  371089.207 ± 1682.591  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuery_roundTrip$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuery_roundTrip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81989.815 ops/s
# Warmup Iteration   2: 131545.389 ops/s
# Warmup Iteration   3: 289285.431 ops/s
# Warmup Iteration   4: 303330.182 ops/s
# Warmup Iteration   5: 306994.965 ops/s
# Warmup Iteration   6: 302837.720 ops/s
# Warmup Iteration   7: 228787.144 ops/s
# Warmup Iteration   8: 294616.557 ops/s
# Warmup Iteration   9: 308561.181 ops/s
# Warmup Iteration  10: 310181.337 ops/s
# Warmup Iteration  11: 308469.204 ops/s
# Warmup Iteration  12: 309588.347 ops/s
# Warmup Iteration  13: 308828.514 ops/s
# Warmup Iteration  14: 311110.658 ops/s
# Warmup Iteration  15: 310691.153 ops/s
# Warmup Iteration  16: 309651.160 ops/s
# Warmup Iteration  17: 306918.769 ops/s
# Warmup Iteration  18: 306083.632 ops/s
# Warmup Iteration  19: 309123.924 ops/s
# Warmup Iteration  20: 309771.631 ops/s
# Warmup Iteration  21: 308685.257 ops/s
# Warmup Iteration  22: 309629.836 ops/s
# Warmup Iteration  23: 311393.750 ops/s
# Warmup Iteration  24: 310695.122 ops/s
# Warmup Iteration  25: 309313.500 ops/s
# Warmup Iteration  26: 307828.335 ops/s
# Warmup Iteration  27: 307161.167 ops/s
# Warmup Iteration  28: 308728.541 ops/s
# Warmup Iteration  29: 308393.593 ops/s
# Warmup Iteration  30: 310956.369 ops/s
Iteration   1: 308679.540 ops/s
Iteration   2: 310202.486 ops/s
Iteration   3: 309613.246 ops/s
Iteration   4: 311130.761 ops/s
Iteration   5: 307646.323 ops/s
Iteration   6: 308825.000 ops/s
Iteration   7: 310026.351 ops/s
Iteration   8: 307368.462 ops/s
Iteration   9: 308687.152 ops/s
Iteration  10: 309371.088 ops/s
Iteration  11: 307979.431 ops/s
Iteration  12: 308242.204 ops/s
Iteration  13: 306603.096 ops/s
Iteration  14: 309006.255 ops/s
Iteration  15: 307457.520 ops/s
Iteration  16: 309986.901 ops/s
Iteration  17: 309129.045 ops/s
Iteration  18: 308404.380 ops/s
Iteration  19: 309985.270 ops/s
Iteration  20: 310019.418 ops/s
Iteration  21: 308067.532 ops/s
Iteration  22: 306841.144 ops/s
Iteration  23: 307895.816 ops/s
Iteration  24: 307019.991 ops/s
Iteration  25: 308933.849 ops/s
Iteration  26: 309374.064 ops/s
Iteration  27: 310618.305 ops/s
Iteration  28: 309284.007 ops/s
Iteration  29: 309762.478 ops/s
Iteration  30: 310489.734 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_annotationQuery_roundTrip":
  308888.362 ±(99.9%) 797.452 ops/s [Average]
  (min, avg, max) = (306603.096, 308888.362, 311130.761), stdev = 1193.588
  CI (99.9%): [308090.910, 309685.813] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_annotationQuery_roundTrip  thrpt   30  308888.362 ± 797.452  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_endTsMustBePositive$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_endTsMustBePositive

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 71625.067 ops/s
# Warmup Iteration   2: 95629.810 ops/s
# Warmup Iteration   3: 151387.960 ops/s
# Warmup Iteration   4: 188608.219 ops/s
# Warmup Iteration   5: 188347.674 ops/s
# Warmup Iteration   6: 189787.441 ops/s
# Warmup Iteration   7: 190166.879 ops/s
# Warmup Iteration   8: 190584.262 ops/s
# Warmup Iteration   9: 190647.702 ops/s
# Warmup Iteration  10: 130528.950 ops/s
# Warmup Iteration  11: 184181.269 ops/s
# Warmup Iteration  12: 185438.679 ops/s
# Warmup Iteration  13: 185031.798 ops/s
# Warmup Iteration  14: 185119.104 ops/s
# Warmup Iteration  15: 186685.712 ops/s
# Warmup Iteration  16: 185140.383 ops/s
# Warmup Iteration  17: 184694.108 ops/s
# Warmup Iteration  18: 184774.736 ops/s
# Warmup Iteration  19: 188819.076 ops/s
# Warmup Iteration  20: 190129.122 ops/s
# Warmup Iteration  21: 185165.067 ops/s
# Warmup Iteration  22: 188676.295 ops/s
# Warmup Iteration  23: 187490.502 ops/s
# Warmup Iteration  24: 186756.196 ops/s
# Warmup Iteration  25: 188432.435 ops/s
# Warmup Iteration  26: 189507.917 ops/s
# Warmup Iteration  27: 189830.187 ops/s
# Warmup Iteration  28: 189304.382 ops/s
# Warmup Iteration  29: 191188.655 ops/s
# Warmup Iteration  30: 189654.673 ops/s
Iteration   1: 189570.083 ops/s
Iteration   2: 190818.817 ops/s
Iteration   3: 191195.925 ops/s
Iteration   4: 191261.461 ops/s
Iteration   5: 191782.090 ops/s
Iteration   6: 192304.323 ops/s
Iteration   7: 186533.183 ops/s
Iteration   8: 187470.831 ops/s
Iteration   9: 187452.734 ops/s
Iteration  10: 186061.273 ops/s
Iteration  11: 186907.884 ops/s
Iteration  12: 191508.870 ops/s
Iteration  13: 190616.070 ops/s
Iteration  14: 191110.816 ops/s
Iteration  15: 189068.104 ops/s
Iteration  16: 190345.359 ops/s
Iteration  17: 189277.758 ops/s
Iteration  18: 188558.100 ops/s
Iteration  19: 191397.250 ops/s
Iteration  20: 188377.675 ops/s
Iteration  21: 189832.214 ops/s
Iteration  22: 189597.339 ops/s
Iteration  23: 189747.868 ops/s
Iteration  24: 188575.352 ops/s
Iteration  25: 190060.397 ops/s
Iteration  26: 190824.440 ops/s
Iteration  27: 188639.575 ops/s
Iteration  28: 190499.914 ops/s
Iteration  29: 190278.010 ops/s
Iteration  30: 186850.320 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_endTsMustBePositive":
  189550.801 ±(99.9%) 1133.119 ops/s [Average]
  (min, avg, max) = (186061.273, 189550.801, 192304.323), stdev = 1696.000
  CI (99.9%): [188417.682, 190683.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_endTsMustBePositive  thrpt   30  189550.801 ± 1133.119  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_limitMustBePositive$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_limitMustBePositive

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 74060.622 ops/s
# Warmup Iteration   2: 100299.042 ops/s
# Warmup Iteration   3: 164548.829 ops/s
# Warmup Iteration   4: 200927.867 ops/s
# Warmup Iteration   5: 200916.825 ops/s
# Warmup Iteration   6: 201383.420 ops/s
# Warmup Iteration   7: 197369.203 ops/s
# Warmup Iteration   8: 199109.212 ops/s
# Warmup Iteration   9: 175565.173 ops/s
# Warmup Iteration  10: 164100.873 ops/s
# Warmup Iteration  11: 203546.177 ops/s
# Warmup Iteration  12: 203159.696 ops/s
# Warmup Iteration  13: 203884.367 ops/s
# Warmup Iteration  14: 205235.503 ops/s
# Warmup Iteration  15: 204391.373 ops/s
# Warmup Iteration  16: 204177.132 ops/s
# Warmup Iteration  17: 208239.175 ops/s
# Warmup Iteration  18: 208446.818 ops/s
# Warmup Iteration  19: 209327.819 ops/s
# Warmup Iteration  20: 208914.677 ops/s
# Warmup Iteration  21: 209414.590 ops/s
# Warmup Iteration  22: 209917.697 ops/s
# Warmup Iteration  23: 208870.807 ops/s
# Warmup Iteration  24: 209651.407 ops/s
# Warmup Iteration  25: 207736.619 ops/s
# Warmup Iteration  26: 208997.747 ops/s
# Warmup Iteration  27: 207662.497 ops/s
# Warmup Iteration  28: 208951.899 ops/s
# Warmup Iteration  29: 209476.187 ops/s
# Warmup Iteration  30: 207222.058 ops/s
Iteration   1: 207305.614 ops/s
Iteration   2: 209254.450 ops/s
Iteration   3: 206531.821 ops/s
Iteration   4: 207989.448 ops/s
Iteration   5: 207586.620 ops/s
Iteration   6: 208581.174 ops/s
Iteration   7: 207938.789 ops/s
Iteration   8: 208625.459 ops/s
Iteration   9: 207233.721 ops/s
Iteration  10: 208004.543 ops/s
Iteration  11: 206916.752 ops/s
Iteration  12: 206712.023 ops/s
Iteration  13: 206679.336 ops/s
Iteration  14: 206285.107 ops/s
Iteration  15: 208092.099 ops/s
Iteration  16: 208378.877 ops/s
Iteration  17: 207501.490 ops/s
Iteration  18: 209002.329 ops/s
Iteration  19: 206606.267 ops/s
Iteration  20: 208192.279 ops/s
Iteration  21: 207438.718 ops/s
Iteration  22: 207721.912 ops/s
Iteration  23: 208386.538 ops/s
Iteration  24: 208598.501 ops/s
Iteration  25: 208270.830 ops/s
Iteration  26: 209808.052 ops/s
Iteration  27: 208659.606 ops/s
Iteration  28: 209294.964 ops/s
Iteration  29: 208761.114 ops/s
Iteration  30: 207352.441 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_limitMustBePositive":
  207923.696 ±(99.9%) 605.035 ops/s [Average]
  (min, avg, max) = (206285.107, 207923.696, 209808.052), stdev = 905.588
  CI (99.9%): [207318.661, 208528.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_limitMustBePositive  thrpt   30  207923.696 ± 605.035  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_lookbackMustBePositive$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_lookbackMustBePositive

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 68057.582 ops/s
# Warmup Iteration   2: 91971.372 ops/s
# Warmup Iteration   3: 124445.758 ops/s
# Warmup Iteration   4: 171447.680 ops/s
# Warmup Iteration   5: 179848.600 ops/s
# Warmup Iteration   6: 178953.019 ops/s
# Warmup Iteration   7: 177721.121 ops/s
# Warmup Iteration   8: 175911.909 ops/s
# Warmup Iteration   9: 174438.615 ops/s
# Warmup Iteration  10: 160494.502 ops/s
# Warmup Iteration  11: 126062.134 ops/s
# Warmup Iteration  12: 169493.852 ops/s
# Warmup Iteration  13: 170310.804 ops/s
# Warmup Iteration  14: 168506.896 ops/s
# Warmup Iteration  15: 169074.727 ops/s
# Warmup Iteration  16: 167371.256 ops/s
# Warmup Iteration  17: 171192.842 ops/s
# Warmup Iteration  18: 170427.207 ops/s
# Warmup Iteration  19: 171142.839 ops/s
# Warmup Iteration  20: 172154.469 ops/s
# Warmup Iteration  21: 171129.083 ops/s
# Warmup Iteration  22: 173328.970 ops/s
# Warmup Iteration  23: 170820.916 ops/s
# Warmup Iteration  24: 172670.744 ops/s
# Warmup Iteration  25: 171730.510 ops/s
# Warmup Iteration  26: 173066.000 ops/s
# Warmup Iteration  27: 172150.088 ops/s
# Warmup Iteration  28: 171514.570 ops/s
# Warmup Iteration  29: 172389.283 ops/s
# Warmup Iteration  30: 170806.934 ops/s
Iteration   1: 170479.845 ops/s
Iteration   2: 172406.697 ops/s
Iteration   3: 170986.717 ops/s
Iteration   4: 170257.528 ops/s
Iteration   5: 169660.531 ops/s
Iteration   6: 168847.611 ops/s
Iteration   7: 171331.997 ops/s
Iteration   8: 169018.826 ops/s
Iteration   9: 171614.856 ops/s
Iteration  10: 172829.479 ops/s
Iteration  11: 168806.177 ops/s
Iteration  12: 168067.135 ops/s
Iteration  13: 170170.498 ops/s
Iteration  14: 170215.641 ops/s
Iteration  15: 170240.207 ops/s
Iteration  16: 169559.629 ops/s
Iteration  17: 172199.451 ops/s
Iteration  18: 173467.084 ops/s
Iteration  19: 171547.266 ops/s
Iteration  20: 170455.401 ops/s
Iteration  21: 169508.686 ops/s
Iteration  22: 169976.761 ops/s
Iteration  23: 168198.139 ops/s
Iteration  24: 169724.796 ops/s
Iteration  25: 171287.799 ops/s
Iteration  26: 172732.335 ops/s
Iteration  27: 171031.842 ops/s
Iteration  28: 173589.691 ops/s
Iteration  29: 173172.714 ops/s
Iteration  30: 171344.891 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_lookbackMustBePositive":
  170757.674 ±(99.9%) 1023.792 ops/s [Average]
  (min, avg, max) = (168067.135, 170757.674, 173589.691), stdev = 1532.364
  CI (99.9%): [169733.882, 171781.467] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_lookbackMustBePositive  thrpt   30  170757.674 ± 1023.792  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_maxDuration_greaterThanOrEqualToMinDuration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_maxDuration_greaterThanOrEqualToMinDuration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 70855.364 ops/s
# Warmup Iteration   2: 98323.188 ops/s
# Warmup Iteration   3: 157933.473 ops/s
# Warmup Iteration   4: 193241.767 ops/s
# Warmup Iteration   5: 198525.692 ops/s
# Warmup Iteration   6: 198924.203 ops/s
# Warmup Iteration   7: 200251.175 ops/s
# Warmup Iteration   8: 200447.158 ops/s
# Warmup Iteration   9: 164038.737 ops/s
# Warmup Iteration  10: 174670.242 ops/s
# Warmup Iteration  11: 200404.716 ops/s
# Warmup Iteration  12: 200152.612 ops/s
# Warmup Iteration  13: 200126.833 ops/s
# Warmup Iteration  14: 198714.059 ops/s
# Warmup Iteration  15: 197781.895 ops/s
# Warmup Iteration  16: 196776.104 ops/s
# Warmup Iteration  17: 202856.041 ops/s
# Warmup Iteration  18: 202763.746 ops/s
# Warmup Iteration  19: 203400.005 ops/s
# Warmup Iteration  20: 202812.571 ops/s
# Warmup Iteration  21: 204246.049 ops/s
# Warmup Iteration  22: 202482.749 ops/s
# Warmup Iteration  23: 202320.729 ops/s
# Warmup Iteration  24: 202557.849 ops/s
# Warmup Iteration  25: 200499.309 ops/s
# Warmup Iteration  26: 201535.270 ops/s
# Warmup Iteration  27: 200762.524 ops/s
# Warmup Iteration  28: 201585.511 ops/s
# Warmup Iteration  29: 202746.552 ops/s
# Warmup Iteration  30: 201200.267 ops/s
Iteration   1: 200462.336 ops/s
Iteration   2: 200662.604 ops/s
Iteration   3: 203618.313 ops/s
Iteration   4: 202169.433 ops/s
Iteration   5: 200991.244 ops/s
Iteration   6: 200810.418 ops/s
Iteration   7: 202849.907 ops/s
Iteration   8: 202201.769 ops/s
Iteration   9: 201956.853 ops/s
Iteration  10: 202150.404 ops/s
Iteration  11: 202910.603 ops/s
Iteration  12: 203672.455 ops/s
Iteration  13: 199590.030 ops/s
Iteration  14: 202512.152 ops/s
Iteration  15: 201961.401 ops/s
Iteration  16: 199744.161 ops/s
Iteration  17: 202569.225 ops/s
Iteration  18: 199706.043 ops/s
Iteration  19: 200416.045 ops/s
Iteration  20: 200392.827 ops/s
Iteration  21: 201165.521 ops/s
Iteration  22: 201823.523 ops/s
Iteration  23: 203143.038 ops/s
Iteration  24: 200848.276 ops/s
Iteration  25: 204006.376 ops/s
Iteration  26: 203705.122 ops/s
Iteration  27: 202898.482 ops/s
Iteration  28: 203301.231 ops/s
Iteration  29: 201143.724 ops/s
Iteration  30: 201530.153 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_maxDuration_greaterThanOrEqualToMinDuration":
  201830.456 ±(99.9%) 862.871 ops/s [Average]
  (min, avg, max) = (199590.030, 201830.456, 204006.376), stdev = 1291.504
  CI (99.9%): [200967.585, 202693.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_maxDuration_greaterThanOrEqualToMinDuration  thrpt   30  201830.456 ± 862.871  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_maxDuration_onlyWithMinDuration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_maxDuration_onlyWithMinDuration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 74889.014 ops/s
# Warmup Iteration   2: 98976.252 ops/s
# Warmup Iteration   3: 159458.023 ops/s
# Warmup Iteration   4: 191293.850 ops/s
# Warmup Iteration   5: 195193.968 ops/s
# Warmup Iteration   6: 196126.040 ops/s
# Warmup Iteration   7: 194666.207 ops/s
# Warmup Iteration   8: 196181.533 ops/s
# Warmup Iteration   9: 173413.838 ops/s
# Warmup Iteration  10: 158694.900 ops/s
# Warmup Iteration  11: 198675.660 ops/s
# Warmup Iteration  12: 198899.628 ops/s
# Warmup Iteration  13: 198952.472 ops/s
# Warmup Iteration  14: 198878.554 ops/s
# Warmup Iteration  15: 198712.465 ops/s
# Warmup Iteration  16: 198717.797 ops/s
# Warmup Iteration  17: 203302.041 ops/s
# Warmup Iteration  18: 201357.521 ops/s
# Warmup Iteration  19: 203468.815 ops/s
# Warmup Iteration  20: 202855.817 ops/s
# Warmup Iteration  21: 202601.453 ops/s
# Warmup Iteration  22: 202650.088 ops/s
# Warmup Iteration  23: 203114.212 ops/s
# Warmup Iteration  24: 202745.699 ops/s
# Warmup Iteration  25: 202323.722 ops/s
# Warmup Iteration  26: 203566.059 ops/s
# Warmup Iteration  27: 202808.310 ops/s
# Warmup Iteration  28: 202013.748 ops/s
# Warmup Iteration  29: 202227.613 ops/s
# Warmup Iteration  30: 201315.340 ops/s
Iteration   1: 202264.618 ops/s
Iteration   2: 201915.404 ops/s
Iteration   3: 202794.857 ops/s
Iteration   4: 202370.511 ops/s
Iteration   5: 201708.019 ops/s
Iteration   6: 202005.197 ops/s
Iteration   7: 203028.516 ops/s
Iteration   8: 203009.413 ops/s
Iteration   9: 202679.411 ops/s
Iteration  10: 202293.316 ops/s
Iteration  11: 202473.770 ops/s
Iteration  12: 202362.015 ops/s
Iteration  13: 201441.425 ops/s
Iteration  14: 200595.530 ops/s
Iteration  15: 199393.449 ops/s
Iteration  16: 202628.349 ops/s
Iteration  17: 203574.430 ops/s
Iteration  18: 202173.449 ops/s
Iteration  19: 201977.869 ops/s
Iteration  20: 201962.975 ops/s
Iteration  21: 202239.370 ops/s
Iteration  22: 201841.019 ops/s
Iteration  23: 202883.243 ops/s
Iteration  24: 203033.490 ops/s
Iteration  25: 200372.205 ops/s
Iteration  26: 201698.931 ops/s
Iteration  27: 202742.710 ops/s
Iteration  28: 200449.538 ops/s
Iteration  29: 200815.779 ops/s
Iteration  30: 199219.354 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_maxDuration_onlyWithMinDuration":
  201931.605 ±(99.9%) 707.461 ops/s [Average]
  (min, avg, max) = (199219.354, 201931.605, 203574.430), stdev = 1058.894
  CI (99.9%): [201224.145, 202639.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_maxDuration_onlyWithMinDuration  thrpt   30  201931.605 ± 707.461  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_minDuration_mustBePositive$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_minDuration_mustBePositive

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 68646.658 ops/s
# Warmup Iteration   2: 98830.874 ops/s
# Warmup Iteration   3: 157686.341 ops/s
# Warmup Iteration   4: 201217.268 ops/s
# Warmup Iteration   5: 202698.940 ops/s
# Warmup Iteration   6: 202207.577 ops/s
# Warmup Iteration   7: 201372.566 ops/s
# Warmup Iteration   8: 199138.369 ops/s
# Warmup Iteration   9: 165174.855 ops/s
# Warmup Iteration  10: 175919.442 ops/s
# Warmup Iteration  11: 205920.961 ops/s
# Warmup Iteration  12: 205731.188 ops/s
# Warmup Iteration  13: 205752.532 ops/s
# Warmup Iteration  14: 204037.807 ops/s
# Warmup Iteration  15: 205520.719 ops/s
# Warmup Iteration  16: 205228.474 ops/s
# Warmup Iteration  17: 209457.358 ops/s
# Warmup Iteration  18: 210537.306 ops/s
# Warmup Iteration  19: 209845.425 ops/s
# Warmup Iteration  20: 210911.862 ops/s
# Warmup Iteration  21: 209237.839 ops/s
# Warmup Iteration  22: 207529.592 ops/s
# Warmup Iteration  23: 209759.281 ops/s
# Warmup Iteration  24: 210435.377 ops/s
# Warmup Iteration  25: 208585.225 ops/s
# Warmup Iteration  26: 208881.372 ops/s
# Warmup Iteration  27: 208501.887 ops/s
# Warmup Iteration  28: 210557.815 ops/s
# Warmup Iteration  29: 209014.047 ops/s
# Warmup Iteration  30: 211191.311 ops/s
Iteration   1: 209568.848 ops/s
Iteration   2: 209270.667 ops/s
Iteration   3: 211349.486 ops/s
Iteration   4: 207325.586 ops/s
Iteration   5: 208439.687 ops/s
Iteration   6: 211300.528 ops/s
Iteration   7: 206448.576 ops/s
Iteration   8: 208475.374 ops/s
Iteration   9: 208433.357 ops/s
Iteration  10: 210845.507 ops/s
Iteration  11: 210803.850 ops/s
Iteration  12: 206819.882 ops/s
Iteration  13: 208988.965 ops/s
Iteration  14: 208132.665 ops/s
Iteration  15: 208784.005 ops/s
Iteration  16: 211303.347 ops/s
Iteration  17: 208506.071 ops/s
Iteration  18: 208021.577 ops/s
Iteration  19: 209339.661 ops/s
Iteration  20: 210510.370 ops/s
Iteration  21: 211417.954 ops/s
Iteration  22: 209880.420 ops/s
Iteration  23: 210307.605 ops/s
Iteration  24: 208297.772 ops/s
Iteration  25: 207772.251 ops/s
Iteration  26: 211147.059 ops/s
Iteration  27: 208673.180 ops/s
Iteration  28: 207382.584 ops/s
Iteration  29: 208287.543 ops/s
Iteration  30: 209266.778 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_minDuration_mustBePositive":
  209170.038 ±(99.9%) 960.399 ops/s [Average]
  (min, avg, max) = (206448.576, 209170.038, 211417.954), stdev = 1437.480
  CI (99.9%): [208209.640, 210130.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_minDuration_mustBePositive  thrpt   30  209170.038 ± 960.399  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_remoteServiceNameCanBeNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_remoteServiceNameCanBeNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151903.866 ops/s
# Warmup Iteration   2: 216984.007 ops/s
# Warmup Iteration   3: 485324.626 ops/s
# Warmup Iteration   4: 485932.307 ops/s
# Warmup Iteration   5: 483894.972 ops/s
# Warmup Iteration   6: 482558.333 ops/s
# Warmup Iteration   7: 346286.346 ops/s
# Warmup Iteration   8: 492412.744 ops/s
# Warmup Iteration   9: 491177.599 ops/s
# Warmup Iteration  10: 490166.102 ops/s
# Warmup Iteration  11: 491123.172 ops/s
# Warmup Iteration  12: 489878.491 ops/s
# Warmup Iteration  13: 490712.912 ops/s
# Warmup Iteration  14: 491148.382 ops/s
# Warmup Iteration  15: 492432.896 ops/s
# Warmup Iteration  16: 492225.367 ops/s
# Warmup Iteration  17: 488359.156 ops/s
# Warmup Iteration  18: 491961.773 ops/s
# Warmup Iteration  19: 489903.653 ops/s
# Warmup Iteration  20: 490856.987 ops/s
# Warmup Iteration  21: 491487.736 ops/s
# Warmup Iteration  22: 488821.919 ops/s
# Warmup Iteration  23: 492437.243 ops/s
# Warmup Iteration  24: 486090.981 ops/s
# Warmup Iteration  25: 493199.280 ops/s
# Warmup Iteration  26: 491682.167 ops/s
# Warmup Iteration  27: 488392.420 ops/s
# Warmup Iteration  28: 489848.855 ops/s
# Warmup Iteration  29: 488025.003 ops/s
# Warmup Iteration  30: 487626.868 ops/s
Iteration   1: 490953.874 ops/s
Iteration   2: 492765.102 ops/s
Iteration   3: 489312.191 ops/s
Iteration   4: 490992.539 ops/s
Iteration   5: 494351.827 ops/s
Iteration   6: 492240.478 ops/s
Iteration   7: 487827.110 ops/s
Iteration   8: 491505.437 ops/s
Iteration   9: 492232.009 ops/s
Iteration  10: 491327.348 ops/s
Iteration  11: 487408.187 ops/s
Iteration  12: 490655.379 ops/s
Iteration  13: 491766.665 ops/s
Iteration  14: 491761.126 ops/s
Iteration  15: 491791.219 ops/s
Iteration  16: 494046.495 ops/s
Iteration  17: 493180.728 ops/s
Iteration  18: 491657.419 ops/s
Iteration  19: 491705.791 ops/s
Iteration  20: 491718.712 ops/s
Iteration  21: 490128.771 ops/s
Iteration  22: 492310.433 ops/s
Iteration  23: 492601.930 ops/s
Iteration  24: 491081.203 ops/s
Iteration  25: 493901.134 ops/s
Iteration  26: 488891.516 ops/s
Iteration  27: 488000.513 ops/s
Iteration  28: 489411.477 ops/s
Iteration  29: 492333.714 ops/s
Iteration  30: 491645.731 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_remoteServiceNameCanBeNull":
  491316.869 ±(99.9%) 1174.367 ops/s [Average]
  (min, avg, max) = (487408.187, 491316.869, 494351.827), stdev = 1757.737
  CI (99.9%): [490142.502, 492491.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_remoteServiceNameCanBeNull  thrpt   30  491316.869 ± 1174.367  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_remoteServiceName_coercesEmptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_remoteServiceName_coercesEmptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 157352.408 ops/s
# Warmup Iteration   2: 222113.340 ops/s
# Warmup Iteration   3: 485443.796 ops/s
# Warmup Iteration   4: 488838.233 ops/s
# Warmup Iteration   5: 484948.969 ops/s
# Warmup Iteration   6: 484322.404 ops/s
# Warmup Iteration   7: 349196.181 ops/s
# Warmup Iteration   8: 494353.932 ops/s
# Warmup Iteration   9: 495247.131 ops/s
# Warmup Iteration  10: 495025.195 ops/s
# Warmup Iteration  11: 495827.314 ops/s
# Warmup Iteration  12: 495504.092 ops/s
# Warmup Iteration  13: 494985.016 ops/s
# Warmup Iteration  14: 492836.989 ops/s
# Warmup Iteration  15: 493695.374 ops/s
# Warmup Iteration  16: 494566.559 ops/s
# Warmup Iteration  17: 491909.676 ops/s
# Warmup Iteration  18: 492479.700 ops/s
# Warmup Iteration  19: 492056.243 ops/s
# Warmup Iteration  20: 493204.184 ops/s
# Warmup Iteration  21: 487940.394 ops/s
# Warmup Iteration  22: 491873.994 ops/s
# Warmup Iteration  23: 493939.575 ops/s
# Warmup Iteration  24: 490541.668 ops/s
# Warmup Iteration  25: 488793.738 ops/s
# Warmup Iteration  26: 488642.739 ops/s
# Warmup Iteration  27: 489668.336 ops/s
# Warmup Iteration  28: 492461.309 ops/s
# Warmup Iteration  29: 488862.443 ops/s
# Warmup Iteration  30: 490724.192 ops/s
Iteration   1: 487498.806 ops/s
Iteration   2: 489581.926 ops/s
Iteration   3: 487178.645 ops/s
Iteration   4: 493062.689 ops/s
Iteration   5: 493885.096 ops/s
Iteration   6: 494037.790 ops/s
Iteration   7: 490056.963 ops/s
Iteration   8: 491769.776 ops/s
Iteration   9: 490166.242 ops/s
Iteration  10: 487794.403 ops/s
Iteration  11: 486731.270 ops/s
Iteration  12: 489875.574 ops/s
Iteration  13: 490591.132 ops/s
Iteration  14: 491977.924 ops/s
Iteration  15: 493893.166 ops/s
Iteration  16: 492902.647 ops/s
Iteration  17: 491657.263 ops/s
Iteration  18: 493848.901 ops/s
Iteration  19: 495272.793 ops/s
Iteration  20: 493514.358 ops/s
Iteration  21: 496225.275 ops/s
Iteration  22: 495394.471 ops/s
Iteration  23: 495454.347 ops/s
Iteration  24: 491652.243 ops/s
Iteration  25: 494429.816 ops/s
Iteration  26: 489924.134 ops/s
Iteration  27: 490169.808 ops/s
Iteration  28: 489422.831 ops/s
Iteration  29: 492520.337 ops/s
Iteration  30: 492415.226 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_remoteServiceName_coercesEmptyToNull":
  491763.528 ±(99.9%) 1748.677 ops/s [Average]
  (min, avg, max) = (486731.270, 491763.528, 496225.275), stdev = 2617.338
  CI (99.9%): [490014.851, 493512.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_remoteServiceName_coercesEmptyToNull  thrpt   30  491763.528 ± 1748.677  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_serviceNameCanBeNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_serviceNameCanBeNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152479.749 ops/s
# Warmup Iteration   2: 214429.485 ops/s
# Warmup Iteration   3: 490815.413 ops/s
# Warmup Iteration   4: 483871.751 ops/s
# Warmup Iteration   5: 483286.361 ops/s
# Warmup Iteration   6: 485911.131 ops/s
# Warmup Iteration   7: 348462.490 ops/s
# Warmup Iteration   8: 489919.990 ops/s
# Warmup Iteration   9: 489364.709 ops/s
# Warmup Iteration  10: 490577.464 ops/s
# Warmup Iteration  11: 487313.517 ops/s
# Warmup Iteration  12: 490843.225 ops/s
# Warmup Iteration  13: 489912.758 ops/s
# Warmup Iteration  14: 487927.077 ops/s
# Warmup Iteration  15: 489120.795 ops/s
# Warmup Iteration  16: 487096.138 ops/s
# Warmup Iteration  17: 490361.066 ops/s
# Warmup Iteration  18: 487962.058 ops/s
# Warmup Iteration  19: 487399.714 ops/s
# Warmup Iteration  20: 484865.865 ops/s
# Warmup Iteration  21: 487917.011 ops/s
# Warmup Iteration  22: 484803.784 ops/s
# Warmup Iteration  23: 492020.479 ops/s
# Warmup Iteration  24: 490556.516 ops/s
# Warmup Iteration  25: 488290.209 ops/s
# Warmup Iteration  26: 486893.940 ops/s
# Warmup Iteration  27: 488481.725 ops/s
# Warmup Iteration  28: 489070.734 ops/s
# Warmup Iteration  29: 489786.250 ops/s
# Warmup Iteration  30: 488813.923 ops/s
Iteration   1: 493483.567 ops/s
Iteration   2: 487453.642 ops/s
Iteration   3: 488209.890 ops/s
Iteration   4: 489382.552 ops/s
Iteration   5: 490580.281 ops/s
Iteration   6: 488405.373 ops/s
Iteration   7: 490684.237 ops/s
Iteration   8: 484515.150 ops/s
Iteration   9: 487062.394 ops/s
Iteration  10: 487956.999 ops/s
Iteration  11: 484543.335 ops/s
Iteration  12: 486005.051 ops/s
Iteration  13: 486564.301 ops/s
Iteration  14: 491518.414 ops/s
Iteration  15: 490509.584 ops/s
Iteration  16: 486147.637 ops/s
Iteration  17: 487608.057 ops/s
Iteration  18: 489765.110 ops/s
Iteration  19: 486212.145 ops/s
Iteration  20: 486687.204 ops/s
Iteration  21: 486050.201 ops/s
Iteration  22: 484565.818 ops/s
Iteration  23: 489650.720 ops/s
Iteration  24: 490715.343 ops/s
Iteration  25: 490394.448 ops/s
Iteration  26: 492440.298 ops/s
Iteration  27: 489811.108 ops/s
Iteration  28: 488395.165 ops/s
Iteration  29: 487646.345 ops/s
Iteration  30: 490732.069 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_serviceNameCanBeNull":
  488456.548 ±(99.9%) 1586.770 ops/s [Average]
  (min, avg, max) = (484515.150, 488456.548, 493483.567), stdev = 2375.003
  CI (99.9%): [486869.778, 490043.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_serviceNameCanBeNull  thrpt   30  488456.548 ± 1586.770  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_serviceName_coercesEmptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_serviceName_coercesEmptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152462.881 ops/s
# Warmup Iteration   2: 224551.967 ops/s
# Warmup Iteration   3: 484221.141 ops/s
# Warmup Iteration   4: 481144.168 ops/s
# Warmup Iteration   5: 483286.596 ops/s
# Warmup Iteration   6: 480969.729 ops/s
# Warmup Iteration   7: 350765.861 ops/s
# Warmup Iteration   8: 495464.176 ops/s
# Warmup Iteration   9: 496690.557 ops/s
# Warmup Iteration  10: 497828.164 ops/s
# Warmup Iteration  11: 495778.478 ops/s
# Warmup Iteration  12: 497617.774 ops/s
# Warmup Iteration  13: 493090.938 ops/s
# Warmup Iteration  14: 496877.827 ops/s
# Warmup Iteration  15: 494417.019 ops/s
# Warmup Iteration  16: 492322.201 ops/s
# Warmup Iteration  17: 498708.995 ops/s
# Warmup Iteration  18: 494043.934 ops/s
# Warmup Iteration  19: 491675.022 ops/s
# Warmup Iteration  20: 494243.522 ops/s
# Warmup Iteration  21: 491980.388 ops/s
# Warmup Iteration  22: 499854.529 ops/s
# Warmup Iteration  23: 496707.198 ops/s
# Warmup Iteration  24: 493110.857 ops/s
# Warmup Iteration  25: 494504.864 ops/s
# Warmup Iteration  26: 493228.298 ops/s
# Warmup Iteration  27: 497775.288 ops/s
# Warmup Iteration  28: 494998.760 ops/s
# Warmup Iteration  29: 494411.997 ops/s
# Warmup Iteration  30: 494370.511 ops/s
Iteration   1: 493921.880 ops/s
Iteration   2: 497189.470 ops/s
Iteration   3: 493740.725 ops/s
Iteration   4: 498338.804 ops/s
Iteration   5: 491994.696 ops/s
Iteration   6: 494376.973 ops/s
Iteration   7: 493506.766 ops/s
Iteration   8: 491101.813 ops/s
Iteration   9: 494723.193 ops/s
Iteration  10: 494190.505 ops/s
Iteration  11: 492179.338 ops/s
Iteration  12: 492547.776 ops/s
Iteration  13: 494188.002 ops/s
Iteration  14: 499375.946 ops/s
Iteration  15: 495202.093 ops/s
Iteration  16: 496848.438 ops/s
Iteration  17: 500189.440 ops/s
Iteration  18: 497162.506 ops/s
Iteration  19: 494865.694 ops/s
Iteration  20: 497498.758 ops/s
Iteration  21: 494126.099 ops/s
Iteration  22: 496401.238 ops/s
Iteration  23: 498382.606 ops/s
Iteration  24: 498300.323 ops/s
Iteration  25: 495626.440 ops/s
Iteration  26: 496461.497 ops/s
Iteration  27: 496588.433 ops/s
Iteration  28: 498307.852 ops/s
Iteration  29: 495851.573 ops/s
Iteration  30: 498687.523 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_serviceName_coercesEmptyToNull":
  495729.213 ±(99.9%) 1573.217 ops/s [Average]
  (min, avg, max) = (491101.813, 495729.213, 500189.440), stdev = 2354.717
  CI (99.9%): [494155.996, 497302.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_serviceName_coercesEmptyToNull  thrpt   30  495729.213 ± 1573.217  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_spanName_coercesAllToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_spanName_coercesAllToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158777.894 ops/s
# Warmup Iteration   2: 226513.923 ops/s
# Warmup Iteration   3: 490900.033 ops/s
# Warmup Iteration   4: 484572.665 ops/s
# Warmup Iteration   5: 485031.956 ops/s
# Warmup Iteration   6: 487622.921 ops/s
# Warmup Iteration   7: 353711.210 ops/s
# Warmup Iteration   8: 493886.740 ops/s
# Warmup Iteration   9: 492156.334 ops/s
# Warmup Iteration  10: 495843.115 ops/s
# Warmup Iteration  11: 496749.071 ops/s
# Warmup Iteration  12: 496492.703 ops/s
# Warmup Iteration  13: 492965.457 ops/s
# Warmup Iteration  14: 493052.358 ops/s
# Warmup Iteration  15: 497097.663 ops/s
# Warmup Iteration  16: 498380.543 ops/s
# Warmup Iteration  17: 497520.728 ops/s
# Warmup Iteration  18: 494905.335 ops/s
# Warmup Iteration  19: 494121.110 ops/s
# Warmup Iteration  20: 492208.020 ops/s
# Warmup Iteration  21: 492392.938 ops/s
# Warmup Iteration  22: 498147.870 ops/s
# Warmup Iteration  23: 497129.201 ops/s
# Warmup Iteration  24: 497951.191 ops/s
# Warmup Iteration  25: 494449.448 ops/s
# Warmup Iteration  26: 498370.068 ops/s
# Warmup Iteration  27: 496249.120 ops/s
# Warmup Iteration  28: 495187.384 ops/s
# Warmup Iteration  29: 493363.390 ops/s
# Warmup Iteration  30: 495368.045 ops/s
Iteration   1: 494543.000 ops/s
Iteration   2: 497739.107 ops/s
Iteration   3: 497823.198 ops/s
Iteration   4: 497377.873 ops/s
Iteration   5: 490826.689 ops/s
Iteration   6: 496900.386 ops/s
Iteration   7: 490588.092 ops/s
Iteration   8: 493870.546 ops/s
Iteration   9: 496218.091 ops/s
Iteration  10: 491874.071 ops/s
Iteration  11: 494668.964 ops/s
Iteration  12: 493278.074 ops/s
Iteration  13: 494264.879 ops/s
Iteration  14: 498034.022 ops/s
Iteration  15: 495213.817 ops/s
Iteration  16: 495811.514 ops/s
Iteration  17: 493851.831 ops/s
Iteration  18: 491804.248 ops/s
Iteration  19: 493329.854 ops/s
Iteration  20: 492230.564 ops/s
Iteration  21: 494417.449 ops/s
Iteration  22: 495085.539 ops/s
Iteration  23: 498136.949 ops/s
Iteration  24: 495912.189 ops/s
Iteration  25: 497092.618 ops/s
Iteration  26: 491595.982 ops/s
Iteration  27: 497409.587 ops/s
Iteration  28: 492815.699 ops/s
Iteration  29: 490103.500 ops/s
Iteration  30: 493491.225 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_spanName_coercesAllToNull":
  494543.652 ±(99.9%) 1605.401 ops/s [Average]
  (min, avg, max) = (490103.500, 494543.652, 498136.949), stdev = 2402.888
  CI (99.9%): [492938.251, 496149.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_spanName_coercesAllToNull  thrpt   30  494543.652 ± 1605.401  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_spanName_coercesEmptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_spanName_coercesEmptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154959.390 ops/s
# Warmup Iteration   2: 218680.139 ops/s
# Warmup Iteration   3: 487684.511 ops/s
# Warmup Iteration   4: 490322.801 ops/s
# Warmup Iteration   5: 487153.784 ops/s
# Warmup Iteration   6: 492488.652 ops/s
# Warmup Iteration   7: 350572.901 ops/s
# Warmup Iteration   8: 499825.248 ops/s
# Warmup Iteration   9: 495654.235 ops/s
# Warmup Iteration  10: 495389.008 ops/s
# Warmup Iteration  11: 493919.560 ops/s
# Warmup Iteration  12: 497870.780 ops/s
# Warmup Iteration  13: 498876.723 ops/s
# Warmup Iteration  14: 498999.913 ops/s
# Warmup Iteration  15: 498368.888 ops/s
# Warmup Iteration  16: 497345.033 ops/s
# Warmup Iteration  17: 496244.727 ops/s
# Warmup Iteration  18: 495130.037 ops/s
# Warmup Iteration  19: 498089.821 ops/s
# Warmup Iteration  20: 494799.014 ops/s
# Warmup Iteration  21: 495904.439 ops/s
# Warmup Iteration  22: 497189.514 ops/s
# Warmup Iteration  23: 493618.527 ops/s
# Warmup Iteration  24: 489611.820 ops/s
# Warmup Iteration  25: 492296.631 ops/s
# Warmup Iteration  26: 492412.925 ops/s
# Warmup Iteration  27: 495953.455 ops/s
# Warmup Iteration  28: 492031.536 ops/s
# Warmup Iteration  29: 495001.467 ops/s
# Warmup Iteration  30: 496392.931 ops/s
Iteration   1: 498866.132 ops/s
Iteration   2: 497073.353 ops/s
Iteration   3: 496720.567 ops/s
Iteration   4: 497400.687 ops/s
Iteration   5: 494308.374 ops/s
Iteration   6: 492671.861 ops/s
Iteration   7: 495133.043 ops/s
Iteration   8: 495422.540 ops/s
Iteration   9: 489977.667 ops/s
Iteration  10: 495053.639 ops/s
Iteration  11: 490147.203 ops/s
Iteration  12: 494341.565 ops/s
Iteration  13: 498175.941 ops/s
Iteration  14: 498073.568 ops/s
Iteration  15: 498150.444 ops/s
Iteration  16: 498389.300 ops/s
Iteration  17: 497589.286 ops/s
Iteration  18: 492122.395 ops/s
Iteration  19: 492867.534 ops/s
Iteration  20: 494411.845 ops/s
Iteration  21: 491631.777 ops/s
Iteration  22: 496407.823 ops/s
Iteration  23: 497438.397 ops/s
Iteration  24: 499580.622 ops/s
Iteration  25: 492102.936 ops/s
Iteration  26: 498080.916 ops/s
Iteration  27: 497614.294 ops/s
Iteration  28: 496300.427 ops/s
Iteration  29: 493104.346 ops/s
Iteration  30: 497024.310 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_spanName_coercesEmptyToNull":
  495539.426 ±(99.9%) 1796.705 ops/s [Average]
  (min, avg, max) = (489977.667, 495539.426, 499580.622), stdev = 2689.224
  CI (99.9%): [493742.721, 497336.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_spanName_coercesEmptyToNull  thrpt   30  495539.426 ± 1796.705  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 80128.413 ops/s
# Warmup Iteration   2: 121565.576 ops/s
# Warmup Iteration   3: 288224.753 ops/s
# Warmup Iteration   4: 316432.699 ops/s
# Warmup Iteration   5: 317871.404 ops/s
# Warmup Iteration   6: 316176.450 ops/s
# Warmup Iteration   7: 214834.724 ops/s
# Warmup Iteration   8: 319234.365 ops/s
# Warmup Iteration   9: 320041.094 ops/s
# Warmup Iteration  10: 317473.282 ops/s
# Warmup Iteration  11: 319290.889 ops/s
# Warmup Iteration  12: 320356.288 ops/s
# Warmup Iteration  13: 319830.821 ops/s
# Warmup Iteration  14: 321184.022 ops/s
# Warmup Iteration  15: 320745.308 ops/s
# Warmup Iteration  16: 319793.237 ops/s
# Warmup Iteration  17: 318147.354 ops/s
# Warmup Iteration  18: 320183.001 ops/s
# Warmup Iteration  19: 318575.515 ops/s
# Warmup Iteration  20: 319882.334 ops/s
# Warmup Iteration  21: 317814.544 ops/s
# Warmup Iteration  22: 318619.955 ops/s
# Warmup Iteration  23: 319256.460 ops/s
# Warmup Iteration  24: 318590.564 ops/s
# Warmup Iteration  25: 317971.484 ops/s
# Warmup Iteration  26: 319059.927 ops/s
# Warmup Iteration  27: 318577.732 ops/s
# Warmup Iteration  28: 316058.552 ops/s
# Warmup Iteration  29: 317209.072 ops/s
# Warmup Iteration  30: 316592.989 ops/s
Iteration   1: 315764.398 ops/s
Iteration   2: 319667.773 ops/s
Iteration   3: 319676.798 ops/s
Iteration   4: 314618.875 ops/s
Iteration   5: 313653.757 ops/s
Iteration   6: 313800.091 ops/s
Iteration   7: 316886.789 ops/s
Iteration   8: 317083.459 ops/s
Iteration   9: 316904.252 ops/s
Iteration  10: 318941.770 ops/s
Iteration  11: 318017.696 ops/s
Iteration  12: 319495.693 ops/s
Iteration  13: 319028.124 ops/s
Iteration  14: 316011.253 ops/s
Iteration  15: 316200.145 ops/s
Iteration  16: 317359.134 ops/s
Iteration  17: 316704.963 ops/s
Iteration  18: 317440.562 ops/s
Iteration  19: 317005.253 ops/s
Iteration  20: 316066.194 ops/s
Iteration  21: 315673.343 ops/s
Iteration  22: 318655.493 ops/s
Iteration  23: 318140.955 ops/s
Iteration  24: 319117.994 ops/s
Iteration  25: 315028.644 ops/s
Iteration  26: 319371.687 ops/s
Iteration  27: 317533.275 ops/s
Iteration  28: 314527.194 ops/s
Iteration  29: 316549.085 ops/s
Iteration  30: 316435.008 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotation":
  317045.322 ±(99.9%) 1161.530 ops/s [Average]
  (min, avg, max) = (313653.757, 317045.322, 319676.798), stdev = 1738.524
  CI (99.9%): [315883.792, 318206.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotation  thrpt   30  317045.322 ± 1161.530  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotationsAndTag$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotationsAndTag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 71588.940 ops/s
# Warmup Iteration   2: 106556.528 ops/s
# Warmup Iteration   3: 227346.912 ops/s
# Warmup Iteration   4: 241313.625 ops/s
# Warmup Iteration   5: 242685.422 ops/s
# Warmup Iteration   6: 242864.468 ops/s
# Warmup Iteration   7: 217815.789 ops/s
# Warmup Iteration   8: 203323.682 ops/s
# Warmup Iteration   9: 243047.590 ops/s
# Warmup Iteration  10: 243266.041 ops/s
# Warmup Iteration  11: 246164.303 ops/s
# Warmup Iteration  12: 245050.730 ops/s
# Warmup Iteration  13: 244630.234 ops/s
# Warmup Iteration  14: 244537.293 ops/s
# Warmup Iteration  15: 243714.717 ops/s
# Warmup Iteration  16: 246831.505 ops/s
# Warmup Iteration  17: 241197.066 ops/s
# Warmup Iteration  18: 243375.860 ops/s
# Warmup Iteration  19: 244140.847 ops/s
# Warmup Iteration  20: 243178.032 ops/s
# Warmup Iteration  21: 244836.527 ops/s
# Warmup Iteration  22: 241896.740 ops/s
# Warmup Iteration  23: 243121.340 ops/s
# Warmup Iteration  24: 243100.628 ops/s
# Warmup Iteration  25: 241794.699 ops/s
# Warmup Iteration  26: 243474.493 ops/s
# Warmup Iteration  27: 242136.084 ops/s
# Warmup Iteration  28: 241939.565 ops/s
# Warmup Iteration  29: 243717.097 ops/s
# Warmup Iteration  30: 240233.103 ops/s
Iteration   1: 242571.943 ops/s
Iteration   2: 245290.678 ops/s
Iteration   3: 242571.040 ops/s
Iteration   4: 243042.349 ops/s
Iteration   5: 239233.478 ops/s
Iteration   6: 241203.742 ops/s
Iteration   7: 242724.437 ops/s
Iteration   8: 244121.760 ops/s
Iteration   9: 239894.826 ops/s
Iteration  10: 242405.053 ops/s
Iteration  11: 243709.878 ops/s
Iteration  12: 245976.017 ops/s
Iteration  13: 243675.196 ops/s
Iteration  14: 245474.727 ops/s
Iteration  15: 244959.136 ops/s
Iteration  16: 245396.065 ops/s
Iteration  17: 242795.094 ops/s
Iteration  18: 241772.431 ops/s
Iteration  19: 244214.211 ops/s
Iteration  20: 243463.291 ops/s
Iteration  21: 243657.320 ops/s
Iteration  22: 246026.758 ops/s
Iteration  23: 246038.632 ops/s
Iteration  24: 244207.367 ops/s
Iteration  25: 244083.675 ops/s
Iteration  26: 245374.779 ops/s
Iteration  27: 244286.032 ops/s
Iteration  28: 243838.188 ops/s
Iteration  29: 246004.893 ops/s
Iteration  30: 244131.381 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotationsAndTag":
  243738.146 ±(99.9%) 1154.116 ops/s [Average]
  (min, avg, max) = (239233.478, 243738.146, 246038.632), stdev = 1727.427
  CI (99.9%): [242584.030, 244892.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_annotationQuery_annotationsAndTag  thrpt   30  243738.146 ± 1154.116  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_tagKey$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_tagKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87774.153 ops/s
# Warmup Iteration   2: 129825.678 ops/s
# Warmup Iteration   3: 318462.075 ops/s
# Warmup Iteration   4: 316081.279 ops/s
# Warmup Iteration   5: 318490.185 ops/s
# Warmup Iteration   6: 321978.269 ops/s
# Warmup Iteration   7: 226102.690 ops/s
# Warmup Iteration   8: 323946.854 ops/s
# Warmup Iteration   9: 324157.504 ops/s
# Warmup Iteration  10: 321766.100 ops/s
# Warmup Iteration  11: 324302.452 ops/s
# Warmup Iteration  12: 325653.074 ops/s
# Warmup Iteration  13: 324318.172 ops/s
# Warmup Iteration  14: 325799.561 ops/s
# Warmup Iteration  15: 324757.533 ops/s
# Warmup Iteration  16: 325456.718 ops/s
# Warmup Iteration  17: 321116.272 ops/s
# Warmup Iteration  18: 323409.448 ops/s
# Warmup Iteration  19: 322721.734 ops/s
# Warmup Iteration  20: 324074.299 ops/s
# Warmup Iteration  21: 324938.362 ops/s
# Warmup Iteration  22: 324372.755 ops/s
# Warmup Iteration  23: 322275.759 ops/s
# Warmup Iteration  24: 324567.220 ops/s
# Warmup Iteration  25: 323642.694 ops/s
# Warmup Iteration  26: 325616.651 ops/s
# Warmup Iteration  27: 324353.175 ops/s
# Warmup Iteration  28: 325104.778 ops/s
# Warmup Iteration  29: 322395.098 ops/s
# Warmup Iteration  30: 322973.399 ops/s
Iteration   1: 324403.102 ops/s
Iteration   2: 323595.031 ops/s
Iteration   3: 325757.776 ops/s
Iteration   4: 323698.235 ops/s
Iteration   5: 324278.448 ops/s
Iteration   6: 325631.667 ops/s
Iteration   7: 323880.197 ops/s
Iteration   8: 324383.835 ops/s
Iteration   9: 325385.126 ops/s
Iteration  10: 322602.687 ops/s
Iteration  11: 325383.831 ops/s
Iteration  12: 325301.552 ops/s
Iteration  13: 325425.744 ops/s
Iteration  14: 327115.177 ops/s
Iteration  15: 321371.171 ops/s
Iteration  16: 323137.715 ops/s
Iteration  17: 323149.294 ops/s
Iteration  18: 321622.012 ops/s
Iteration  19: 323338.638 ops/s
Iteration  20: 323432.254 ops/s
Iteration  21: 325190.404 ops/s
Iteration  22: 321663.970 ops/s
Iteration  23: 321389.080 ops/s
Iteration  24: 323086.522 ops/s
Iteration  25: 324782.623 ops/s
Iteration  26: 323573.449 ops/s
Iteration  27: 323483.979 ops/s
Iteration  28: 323951.310 ops/s
Iteration  29: 324279.393 ops/s
Iteration  30: 321771.451 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_tagKey":
  323868.856 ±(99.9%) 965.287 ops/s [Average]
  (min, avg, max) = (321371.171, 323868.856, 327115.177), stdev = 1444.796
  CI (99.9%): [322903.569, 324834.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
QueryRequestTest._Benchmark.benchmark_test_annotationQuery_tagKey  thrpt   30  323868.856 ± 965.287  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_twoAnnotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_twoAnnotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76056.054 ops/s
# Warmup Iteration   2: 116169.122 ops/s
# Warmup Iteration   3: 261041.247 ops/s
# Warmup Iteration   4: 276785.513 ops/s
# Warmup Iteration   5: 277814.544 ops/s
# Warmup Iteration   6: 280277.895 ops/s
# Warmup Iteration   7: 196315.256 ops/s
# Warmup Iteration   8: 281119.694 ops/s
# Warmup Iteration   9: 280653.131 ops/s
# Warmup Iteration  10: 282263.026 ops/s
# Warmup Iteration  11: 281588.718 ops/s
# Warmup Iteration  12: 280195.232 ops/s
# Warmup Iteration  13: 279242.647 ops/s
# Warmup Iteration  14: 276796.853 ops/s
# Warmup Iteration  15: 280581.113 ops/s
# Warmup Iteration  16: 278193.090 ops/s
# Warmup Iteration  17: 280896.410 ops/s
# Warmup Iteration  18: 280405.869 ops/s
# Warmup Iteration  19: 280538.491 ops/s
# Warmup Iteration  20: 282363.500 ops/s
# Warmup Iteration  21: 281660.656 ops/s
# Warmup Iteration  22: 280744.253 ops/s
# Warmup Iteration  23: 282245.666 ops/s
# Warmup Iteration  24: 280029.970 ops/s
# Warmup Iteration  25: 282200.465 ops/s
# Warmup Iteration  26: 279121.702 ops/s
# Warmup Iteration  27: 279036.719 ops/s
# Warmup Iteration  28: 281156.767 ops/s
# Warmup Iteration  29: 280056.093 ops/s
# Warmup Iteration  30: 281868.793 ops/s
Iteration   1: 281837.752 ops/s
Iteration   2: 278429.933 ops/s
Iteration   3: 278039.779 ops/s
Iteration   4: 277693.082 ops/s
Iteration   5: 277933.347 ops/s
Iteration   6: 279192.868 ops/s
Iteration   7: 278902.351 ops/s
Iteration   8: 283293.883 ops/s
Iteration   9: 282948.396 ops/s
Iteration  10: 281542.872 ops/s
Iteration  11: 282794.773 ops/s
Iteration  12: 282757.466 ops/s
Iteration  13: 281507.285 ops/s
Iteration  14: 279572.017 ops/s
Iteration  15: 279731.512 ops/s
Iteration  16: 282967.402 ops/s
Iteration  17: 281288.280 ops/s
Iteration  18: 280015.572 ops/s
Iteration  19: 281265.032 ops/s
Iteration  20: 283907.123 ops/s
Iteration  21: 281989.216 ops/s
Iteration  22: 281727.176 ops/s
Iteration  23: 282968.295 ops/s
Iteration  24: 283704.632 ops/s
Iteration  25: 284301.317 ops/s
Iteration  26: 282660.979 ops/s
Iteration  27: 282113.312 ops/s
Iteration  28: 278069.927 ops/s
Iteration  29: 281702.562 ops/s
Iteration  30: 282626.295 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_annotationQuery_twoAnnotation":
  281249.481 ±(99.9%) 1327.783 ops/s [Average]
  (min, avg, max) = (277693.082, 281249.481, 284301.317), stdev = 1987.363
  CI (99.9%): [279921.698, 282577.264] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_annotationQuery_twoAnnotation  thrpt   30  281249.481 ± 1327.783  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_matchesTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_matchesTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144949.420 ops/s
# Warmup Iteration   2: 195750.569 ops/s
# Warmup Iteration   3: 475382.735 ops/s
# Warmup Iteration   4: 477403.883 ops/s
# Warmup Iteration   5: 476671.433 ops/s
# Warmup Iteration   6: 477770.313 ops/s
# Warmup Iteration   7: 331653.560 ops/s
# Warmup Iteration   8: 475188.243 ops/s
# Warmup Iteration   9: 474002.459 ops/s
# Warmup Iteration  10: 478080.292 ops/s
# Warmup Iteration  11: 474970.559 ops/s
# Warmup Iteration  12: 478360.384 ops/s
# Warmup Iteration  13: 476656.386 ops/s
# Warmup Iteration  14: 475569.310 ops/s
# Warmup Iteration  15: 479613.830 ops/s
# Warmup Iteration  16: 472753.307 ops/s
# Warmup Iteration  17: 469499.388 ops/s
# Warmup Iteration  18: 471701.655 ops/s
# Warmup Iteration  19: 470548.429 ops/s
# Warmup Iteration  20: 475508.784 ops/s
# Warmup Iteration  21: 472948.816 ops/s
# Warmup Iteration  22: 469804.911 ops/s
# Warmup Iteration  23: 471223.136 ops/s
# Warmup Iteration  24: 470966.916 ops/s
# Warmup Iteration  25: 474448.652 ops/s
# Warmup Iteration  26: 474722.646 ops/s
# Warmup Iteration  27: 474892.059 ops/s
# Warmup Iteration  28: 470695.999 ops/s
# Warmup Iteration  29: 474026.914 ops/s
# Warmup Iteration  30: 474757.178 ops/s
Iteration   1: 474619.037 ops/s
Iteration   2: 475237.232 ops/s
Iteration   3: 476692.300 ops/s
Iteration   4: 471183.823 ops/s
Iteration   5: 476244.799 ops/s
Iteration   6: 476585.567 ops/s
Iteration   7: 475562.299 ops/s
Iteration   8: 475241.695 ops/s
Iteration   9: 477083.168 ops/s
Iteration  10: 476606.133 ops/s
Iteration  11: 476441.998 ops/s
Iteration  12: 474438.430 ops/s
Iteration  13: 474221.417 ops/s
Iteration  14: 474189.559 ops/s
Iteration  15: 474444.676 ops/s
Iteration  16: 471611.963 ops/s
Iteration  17: 468460.513 ops/s
Iteration  18: 470769.796 ops/s
Iteration  19: 473732.476 ops/s
Iteration  20: 477073.752 ops/s
Iteration  21: 471694.663 ops/s
Iteration  22: 468372.693 ops/s
Iteration  23: 473513.004 ops/s
Iteration  24: 471871.473 ops/s
Iteration  25: 472194.857 ops/s
Iteration  26: 472014.202 ops/s
Iteration  27: 472645.707 ops/s
Iteration  28: 473812.557 ops/s
Iteration  29: 473155.474 ops/s
Iteration  30: 475447.745 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_matchesTimestamp":
  473838.767 ±(99.9%) 1592.336 ops/s [Average]
  (min, avg, max) = (468372.693, 473838.767, 477083.168), stdev = 2383.333
  CI (99.9%): [472246.431, 475431.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_matchesTimestamp  thrpt   30  473838.767 ± 1592.336  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_maxDuration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_maxDuration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122860.076 ops/s
# Warmup Iteration   2: 187960.480 ops/s
# Warmup Iteration   3: 428588.083 ops/s
# Warmup Iteration   4: 428397.485 ops/s
# Warmup Iteration   5: 437839.373 ops/s
# Warmup Iteration   6: 423889.585 ops/s
# Warmup Iteration   7: 310528.532 ops/s
# Warmup Iteration   8: 432783.535 ops/s
# Warmup Iteration   9: 433772.284 ops/s
# Warmup Iteration  10: 439381.647 ops/s
# Warmup Iteration  11: 436646.774 ops/s
# Warmup Iteration  12: 437677.681 ops/s
# Warmup Iteration  13: 436516.347 ops/s
# Warmup Iteration  14: 437669.174 ops/s
# Warmup Iteration  15: 440086.037 ops/s
# Warmup Iteration  16: 434553.843 ops/s
# Warmup Iteration  17: 435733.676 ops/s
# Warmup Iteration  18: 434763.981 ops/s
# Warmup Iteration  19: 437018.697 ops/s
# Warmup Iteration  20: 437719.178 ops/s
# Warmup Iteration  21: 433561.388 ops/s
# Warmup Iteration  22: 437000.665 ops/s
# Warmup Iteration  23: 433579.342 ops/s
# Warmup Iteration  24: 434481.457 ops/s
# Warmup Iteration  25: 435234.755 ops/s
# Warmup Iteration  26: 432449.927 ops/s
# Warmup Iteration  27: 435011.680 ops/s
# Warmup Iteration  28: 437564.202 ops/s
# Warmup Iteration  29: 435999.257 ops/s
# Warmup Iteration  30: 437395.483 ops/s
Iteration   1: 437609.360 ops/s
Iteration   2: 438325.552 ops/s
Iteration   3: 434166.483 ops/s
Iteration   4: 434506.124 ops/s
Iteration   5: 431797.780 ops/s
Iteration   6: 432247.010 ops/s
Iteration   7: 437543.840 ops/s
Iteration   8: 438558.309 ops/s
Iteration   9: 437849.885 ops/s
Iteration  10: 438148.218 ops/s
Iteration  11: 436888.439 ops/s
Iteration  12: 437441.752 ops/s
Iteration  13: 439015.416 ops/s
Iteration  14: 435686.499 ops/s
Iteration  15: 436273.419 ops/s
Iteration  16: 436913.081 ops/s
Iteration  17: 433118.162 ops/s
Iteration  18: 437401.194 ops/s
Iteration  19: 438203.478 ops/s
Iteration  20: 439371.555 ops/s
Iteration  21: 433742.412 ops/s
Iteration  22: 438389.114 ops/s
Iteration  23: 438127.831 ops/s
Iteration  24: 436444.185 ops/s
Iteration  25: 437101.699 ops/s
Iteration  26: 437102.255 ops/s
Iteration  27: 436774.750 ops/s
Iteration  28: 435134.466 ops/s
Iteration  29: 437610.032 ops/s
Iteration  30: 437027.962 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_maxDuration":
  436617.342 ±(99.9%) 1320.480 ops/s [Average]
  (min, avg, max) = (431797.780, 436617.342, 439371.555), stdev = 1976.432
  CI (99.9%): [435296.862, 437937.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_maxDuration  thrpt   30  436617.342 ± 1320.480  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_minDuration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_minDuration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136443.380 ops/s
# Warmup Iteration   2: 207794.717 ops/s
# Warmup Iteration   3: 450547.359 ops/s
# Warmup Iteration   4: 442558.617 ops/s
# Warmup Iteration   5: 448979.016 ops/s
# Warmup Iteration   6: 444169.026 ops/s
# Warmup Iteration   7: 320037.119 ops/s
# Warmup Iteration   8: 449658.539 ops/s
# Warmup Iteration   9: 450192.794 ops/s
# Warmup Iteration  10: 449562.014 ops/s
# Warmup Iteration  11: 447651.226 ops/s
# Warmup Iteration  12: 449307.838 ops/s
# Warmup Iteration  13: 451223.835 ops/s
# Warmup Iteration  14: 453260.540 ops/s
# Warmup Iteration  15: 452155.047 ops/s
# Warmup Iteration  16: 451943.310 ops/s
# Warmup Iteration  17: 452642.233 ops/s
# Warmup Iteration  18: 452607.141 ops/s
# Warmup Iteration  19: 450975.352 ops/s
# Warmup Iteration  20: 451092.081 ops/s
# Warmup Iteration  21: 451059.011 ops/s
# Warmup Iteration  22: 447951.976 ops/s
# Warmup Iteration  23: 449434.135 ops/s
# Warmup Iteration  24: 452945.675 ops/s
# Warmup Iteration  25: 449816.441 ops/s
# Warmup Iteration  26: 449368.419 ops/s
# Warmup Iteration  27: 449035.213 ops/s
# Warmup Iteration  28: 449560.519 ops/s
# Warmup Iteration  29: 449105.985 ops/s
# Warmup Iteration  30: 450525.405 ops/s
Iteration   1: 446839.629 ops/s
Iteration   2: 449408.238 ops/s
Iteration   3: 451162.112 ops/s
Iteration   4: 449204.259 ops/s
Iteration   5: 447398.458 ops/s
Iteration   6: 451614.231 ops/s
Iteration   7: 449174.496 ops/s
Iteration   8: 446758.938 ops/s
Iteration   9: 453217.937 ops/s
Iteration  10: 445073.676 ops/s
Iteration  11: 447465.830 ops/s
Iteration  12: 449012.320 ops/s
Iteration  13: 448306.828 ops/s
Iteration  14: 447684.663 ops/s
Iteration  15: 450222.095 ops/s
Iteration  16: 451222.049 ops/s
Iteration  17: 446573.913 ops/s
Iteration  18: 447943.605 ops/s
Iteration  19: 450438.089 ops/s
Iteration  20: 451165.022 ops/s
Iteration  21: 447426.776 ops/s
Iteration  22: 451614.144 ops/s
Iteration  23: 449475.088 ops/s
Iteration  24: 446098.427 ops/s
Iteration  25: 446369.121 ops/s
Iteration  26: 447569.404 ops/s
Iteration  27: 450357.602 ops/s
Iteration  28: 447615.850 ops/s
Iteration  29: 453015.522 ops/s
Iteration  30: 443329.196 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_minDuration":
  448758.584 ±(99.9%) 1565.275 ops/s [Average]
  (min, avg, max) = (443329.196, 448758.584, 453217.937), stdev = 2342.830
  CI (99.9%): [447193.309, 450323.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_minDuration  thrpt   30  448758.584 ± 1565.275  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_noRootSpanLeastWins$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_noRootSpanLeastWins

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129595.461 ops/s
# Warmup Iteration   2: 184844.567 ops/s
# Warmup Iteration   3: 426433.816 ops/s
# Warmup Iteration   4: 426896.780 ops/s
# Warmup Iteration   5: 429661.311 ops/s
# Warmup Iteration   6: 432048.036 ops/s
# Warmup Iteration   7: 309209.445 ops/s
# Warmup Iteration   8: 431929.566 ops/s
# Warmup Iteration   9: 433625.193 ops/s
# Warmup Iteration  10: 432567.481 ops/s
# Warmup Iteration  11: 434128.317 ops/s
# Warmup Iteration  12: 432489.376 ops/s
# Warmup Iteration  13: 435338.785 ops/s
# Warmup Iteration  14: 433970.360 ops/s
# Warmup Iteration  15: 431982.248 ops/s
# Warmup Iteration  16: 431516.259 ops/s
# Warmup Iteration  17: 435197.957 ops/s
# Warmup Iteration  18: 437992.958 ops/s
# Warmup Iteration  19: 436301.629 ops/s
# Warmup Iteration  20: 435752.672 ops/s
# Warmup Iteration  21: 437595.612 ops/s
# Warmup Iteration  22: 434815.274 ops/s
# Warmup Iteration  23: 437377.297 ops/s
# Warmup Iteration  24: 437249.871 ops/s
# Warmup Iteration  25: 437264.814 ops/s
# Warmup Iteration  26: 436677.933 ops/s
# Warmup Iteration  27: 436582.286 ops/s
# Warmup Iteration  28: 437151.000 ops/s
# Warmup Iteration  29: 436347.663 ops/s
# Warmup Iteration  30: 438945.129 ops/s
Iteration   1: 439120.124 ops/s
Iteration   2: 438401.034 ops/s
Iteration   3: 435662.489 ops/s
Iteration   4: 432964.306 ops/s
Iteration   5: 435714.084 ops/s
Iteration   6: 437575.562 ops/s
Iteration   7: 437830.898 ops/s
Iteration   8: 440686.824 ops/s
Iteration   9: 438305.788 ops/s
Iteration  10: 436411.512 ops/s
Iteration  11: 435493.910 ops/s
Iteration  12: 437844.675 ops/s
Iteration  13: 439223.893 ops/s
Iteration  14: 435735.267 ops/s
Iteration  15: 436856.397 ops/s
Iteration  16: 436216.154 ops/s
Iteration  17: 436777.495 ops/s
Iteration  18: 438271.603 ops/s
Iteration  19: 440107.332 ops/s
Iteration  20: 437924.758 ops/s
Iteration  21: 438527.332 ops/s
Iteration  22: 438148.488 ops/s
Iteration  23: 434976.180 ops/s
Iteration  24: 435449.592 ops/s
Iteration  25: 437978.083 ops/s
Iteration  26: 436022.894 ops/s
Iteration  27: 435091.566 ops/s
Iteration  28: 437381.235 ops/s
Iteration  29: 438389.841 ops/s
Iteration  30: 438327.107 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_noRootSpanLeastWins":
  437247.214 ±(99.9%) 1129.621 ops/s [Average]
  (min, avg, max) = (432964.306, 437247.214, 440686.824), stdev = 1690.764
  CI (99.9%): [436117.593, 438376.835] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_noRootSpanLeastWins  thrpt   30  437247.214 ± 1129.621  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_noTimestamp$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_noTimestamp

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142499.566 ops/s
# Warmup Iteration   2: 206273.451 ops/s
# Warmup Iteration   3: 470468.027 ops/s
# Warmup Iteration   4: 471809.694 ops/s
# Warmup Iteration   5: 469526.771 ops/s
# Warmup Iteration   6: 473863.205 ops/s
# Warmup Iteration   7: 336657.207 ops/s
# Warmup Iteration   8: 481996.158 ops/s
# Warmup Iteration   9: 482136.124 ops/s
# Warmup Iteration  10: 478002.198 ops/s
# Warmup Iteration  11: 479708.034 ops/s
# Warmup Iteration  12: 480891.716 ops/s
# Warmup Iteration  13: 480806.379 ops/s
# Warmup Iteration  14: 480900.435 ops/s
# Warmup Iteration  15: 480470.562 ops/s
# Warmup Iteration  16: 478433.958 ops/s
# Warmup Iteration  17: 482522.955 ops/s
# Warmup Iteration  18: 484909.643 ops/s
# Warmup Iteration  19: 485315.848 ops/s
# Warmup Iteration  20: 481979.339 ops/s
# Warmup Iteration  21: 481957.215 ops/s
# Warmup Iteration  22: 482550.581 ops/s
# Warmup Iteration  23: 481460.104 ops/s
# Warmup Iteration  24: 482169.985 ops/s
# Warmup Iteration  25: 484161.429 ops/s
# Warmup Iteration  26: 482463.740 ops/s
# Warmup Iteration  27: 478753.568 ops/s
# Warmup Iteration  28: 481934.713 ops/s
# Warmup Iteration  29: 481880.196 ops/s
# Warmup Iteration  30: 482795.494 ops/s
Iteration   1: 481067.057 ops/s
Iteration   2: 477632.537 ops/s
Iteration   3: 483443.908 ops/s
Iteration   4: 482675.114 ops/s
Iteration   5: 482659.922 ops/s
Iteration   6: 480914.333 ops/s
Iteration   7: 481028.058 ops/s
Iteration   8: 484953.228 ops/s
Iteration   9: 479073.034 ops/s
Iteration  10: 482503.648 ops/s
Iteration  11: 478699.152 ops/s
Iteration  12: 483932.276 ops/s
Iteration  13: 482155.705 ops/s
Iteration  14: 483710.527 ops/s
Iteration  15: 485507.880 ops/s
Iteration  16: 485153.642 ops/s
Iteration  17: 484800.256 ops/s
Iteration  18: 486280.302 ops/s
Iteration  19: 485270.925 ops/s
Iteration  20: 481426.346 ops/s
Iteration  21: 481337.294 ops/s
Iteration  22: 485550.087 ops/s
Iteration  23: 483165.176 ops/s
Iteration  24: 482742.986 ops/s
Iteration  25: 484690.598 ops/s
Iteration  26: 481413.471 ops/s
Iteration  27: 482254.540 ops/s
Iteration  28: 484823.962 ops/s
Iteration  29: 482859.794 ops/s
Iteration  30: 482188.229 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_noTimestamp":
  482797.133 ±(99.9%) 1424.833 ops/s [Average]
  (min, avg, max) = (477632.537, 482797.133, 486280.302), stdev = 2132.624
  CI (99.9%): [481372.300, 484221.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_noTimestamp  thrpt   30  482797.133 ± 1424.833  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_remoteServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_remoteServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 135301.872 ops/s
# Warmup Iteration   2: 204672.402 ops/s
# Warmup Iteration   3: 453740.621 ops/s
# Warmup Iteration   4: 451413.149 ops/s
# Warmup Iteration   5: 450372.194 ops/s
# Warmup Iteration   6: 450442.098 ops/s
# Warmup Iteration   7: 320256.506 ops/s
# Warmup Iteration   8: 454389.782 ops/s
# Warmup Iteration   9: 457327.666 ops/s
# Warmup Iteration  10: 455252.816 ops/s
# Warmup Iteration  11: 455003.540 ops/s
# Warmup Iteration  12: 453424.982 ops/s
# Warmup Iteration  13: 455119.531 ops/s
# Warmup Iteration  14: 453511.522 ops/s
# Warmup Iteration  15: 451915.068 ops/s
# Warmup Iteration  16: 454626.006 ops/s
# Warmup Iteration  17: 455076.434 ops/s
# Warmup Iteration  18: 452256.062 ops/s
# Warmup Iteration  19: 456760.874 ops/s
# Warmup Iteration  20: 456236.454 ops/s
# Warmup Iteration  21: 455064.344 ops/s
# Warmup Iteration  22: 455366.861 ops/s
# Warmup Iteration  23: 454627.323 ops/s
# Warmup Iteration  24: 456812.155 ops/s
# Warmup Iteration  25: 452736.472 ops/s
# Warmup Iteration  26: 454515.501 ops/s
# Warmup Iteration  27: 452825.799 ops/s
# Warmup Iteration  28: 453700.235 ops/s
# Warmup Iteration  29: 455853.305 ops/s
# Warmup Iteration  30: 452784.113 ops/s
Iteration   1: 452158.118 ops/s
Iteration   2: 456801.677 ops/s
Iteration   3: 456635.284 ops/s
Iteration   4: 455939.170 ops/s
Iteration   5: 455772.958 ops/s
Iteration   6: 455451.510 ops/s
Iteration   7: 459228.130 ops/s
Iteration   8: 457310.241 ops/s
Iteration   9: 455993.525 ops/s
Iteration  10: 457469.634 ops/s
Iteration  11: 454671.868 ops/s
Iteration  12: 456404.666 ops/s
Iteration  13: 452308.942 ops/s
Iteration  14: 456696.908 ops/s
Iteration  15: 455227.949 ops/s
Iteration  16: 454827.109 ops/s
Iteration  17: 457370.807 ops/s
Iteration  18: 458719.056 ops/s
Iteration  19: 454545.796 ops/s
Iteration  20: 454629.446 ops/s
Iteration  21: 454047.077 ops/s
Iteration  22: 454140.251 ops/s
Iteration  23: 459313.410 ops/s
Iteration  24: 456690.563 ops/s
Iteration  25: 455281.725 ops/s
Iteration  26: 451453.996 ops/s
Iteration  27: 453097.559 ops/s
Iteration  28: 455571.219 ops/s
Iteration  29: 452771.273 ops/s
Iteration  30: 456090.597 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_remoteServiceName":
  455554.016 ±(99.9%) 1328.824 ops/s [Average]
  (min, avg, max) = (451453.996, 455554.016, 459313.410), stdev = 1988.921
  CI (99.9%): [454225.192, 456882.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_remoteServiceName  thrpt   30  455554.016 ± 1328.824  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_rootSpanNotFirst$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_rootSpanNotFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140010.477 ops/s
# Warmup Iteration   2: 187815.334 ops/s
# Warmup Iteration   3: 449463.870 ops/s
# Warmup Iteration   4: 453544.682 ops/s
# Warmup Iteration   5: 448868.605 ops/s
# Warmup Iteration   6: 451338.915 ops/s
# Warmup Iteration   7: 319067.910 ops/s
# Warmup Iteration   8: 455399.012 ops/s
# Warmup Iteration   9: 458125.343 ops/s
# Warmup Iteration  10: 456146.068 ops/s
# Warmup Iteration  11: 455854.500 ops/s
# Warmup Iteration  12: 456112.985 ops/s
# Warmup Iteration  13: 454063.786 ops/s
# Warmup Iteration  14: 456663.092 ops/s
# Warmup Iteration  15: 454082.578 ops/s
# Warmup Iteration  16: 454446.311 ops/s
# Warmup Iteration  17: 458733.604 ops/s
# Warmup Iteration  18: 458788.407 ops/s
# Warmup Iteration  19: 458274.725 ops/s
# Warmup Iteration  20: 454465.401 ops/s
# Warmup Iteration  21: 455223.157 ops/s
# Warmup Iteration  22: 458044.100 ops/s
# Warmup Iteration  23: 454975.443 ops/s
# Warmup Iteration  24: 455468.231 ops/s
# Warmup Iteration  25: 456041.375 ops/s
# Warmup Iteration  26: 455224.855 ops/s
# Warmup Iteration  27: 456128.237 ops/s
# Warmup Iteration  28: 451316.151 ops/s
# Warmup Iteration  29: 456626.158 ops/s
# Warmup Iteration  30: 452763.131 ops/s
Iteration   1: 455979.400 ops/s
Iteration   2: 455418.867 ops/s
Iteration   3: 455289.935 ops/s
Iteration   4: 451238.728 ops/s
Iteration   5: 454081.948 ops/s
Iteration   6: 452451.899 ops/s
Iteration   7: 457361.214 ops/s
Iteration   8: 456732.208 ops/s
Iteration   9: 457166.970 ops/s
Iteration  10: 457010.530 ops/s
Iteration  11: 453826.603 ops/s
Iteration  12: 456391.350 ops/s
Iteration  13: 454420.931 ops/s
Iteration  14: 457018.960 ops/s
Iteration  15: 452415.649 ops/s
Iteration  16: 453342.419 ops/s
Iteration  17: 458172.725 ops/s
Iteration  18: 453888.862 ops/s
Iteration  19: 453430.987 ops/s
Iteration  20: 452215.289 ops/s
Iteration  21: 452802.760 ops/s
Iteration  22: 454878.375 ops/s
Iteration  23: 453475.580 ops/s
Iteration  24: 456046.226 ops/s
Iteration  25: 453520.937 ops/s
Iteration  26: 453398.610 ops/s
Iteration  27: 455935.487 ops/s
Iteration  28: 455210.205 ops/s
Iteration  29: 452696.266 ops/s
Iteration  30: 455488.154 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_rootSpanNotFirst":
  454710.269 ±(99.9%) 1213.326 ops/s [Average]
  (min, avg, max) = (451238.728, 454710.269, 458172.725), stdev = 1816.049
  CI (99.9%): [453496.943, 455923.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_rootSpanNotFirst  thrpt   30  454710.269 ± 1213.326  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_spanName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_spanName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129181.839 ops/s
# Warmup Iteration   2: 178680.318 ops/s
# Warmup Iteration   3: 431421.280 ops/s
# Warmup Iteration   4: 453055.486 ops/s
# Warmup Iteration   5: 453230.417 ops/s
# Warmup Iteration   6: 456125.134 ops/s
# Warmup Iteration   7: 305544.717 ops/s
# Warmup Iteration   8: 460966.383 ops/s
# Warmup Iteration   9: 462774.503 ops/s
# Warmup Iteration  10: 459873.058 ops/s
# Warmup Iteration  11: 462427.020 ops/s
# Warmup Iteration  12: 460098.487 ops/s
# Warmup Iteration  13: 460739.380 ops/s
# Warmup Iteration  14: 460259.798 ops/s
# Warmup Iteration  15: 457969.997 ops/s
# Warmup Iteration  16: 459207.789 ops/s
# Warmup Iteration  17: 458299.121 ops/s
# Warmup Iteration  18: 457689.413 ops/s
# Warmup Iteration  19: 459563.766 ops/s
# Warmup Iteration  20: 458095.423 ops/s
# Warmup Iteration  21: 458795.267 ops/s
# Warmup Iteration  22: 462144.914 ops/s
# Warmup Iteration  23: 464166.798 ops/s
# Warmup Iteration  24: 463348.292 ops/s
# Warmup Iteration  25: 463849.926 ops/s
# Warmup Iteration  26: 463080.402 ops/s
# Warmup Iteration  27: 460154.588 ops/s
# Warmup Iteration  28: 457797.282 ops/s
# Warmup Iteration  29: 461829.041 ops/s
# Warmup Iteration  30: 457922.993 ops/s
Iteration   1: 461461.879 ops/s
Iteration   2: 460037.740 ops/s
Iteration   3: 460519.517 ops/s
Iteration   4: 462427.181 ops/s
Iteration   5: 460588.794 ops/s
Iteration   6: 461460.951 ops/s
Iteration   7: 461400.751 ops/s
Iteration   8: 459995.460 ops/s
Iteration   9: 460266.359 ops/s
Iteration  10: 455425.063 ops/s
Iteration  11: 460707.269 ops/s
Iteration  12: 457525.052 ops/s
Iteration  13: 458771.408 ops/s
Iteration  14: 459982.816 ops/s
Iteration  15: 460638.087 ops/s
Iteration  16: 463020.952 ops/s
Iteration  17: 463727.407 ops/s
Iteration  18: 460939.627 ops/s
Iteration  19: 457080.154 ops/s
Iteration  20: 459479.859 ops/s
Iteration  21: 464360.618 ops/s
Iteration  22: 458418.717 ops/s
Iteration  23: 455771.874 ops/s
Iteration  24: 459951.971 ops/s
Iteration  25: 455875.547 ops/s
Iteration  26: 458761.913 ops/s
Iteration  27: 464454.325 ops/s
Iteration  28: 457131.865 ops/s
Iteration  29: 456357.538 ops/s
Iteration  30: 460942.356 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_spanName":
  459916.102 ±(99.9%) 1640.928 ops/s [Average]
  (min, avg, max) = (455425.063, 459916.102, 464454.325), stdev = 2456.064
  CI (99.9%): [458275.173, 461557.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_spanName  thrpt   30  459916.102 ± 1640.928  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_timestampPastLookback$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_timestampPastLookback

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149982.067 ops/s
# Warmup Iteration   2: 208734.661 ops/s
# Warmup Iteration   3: 486039.841 ops/s
# Warmup Iteration   4: 481423.688 ops/s
# Warmup Iteration   5: 479036.562 ops/s
# Warmup Iteration   6: 482803.188 ops/s
# Warmup Iteration   7: 343024.491 ops/s
# Warmup Iteration   8: 491399.998 ops/s
# Warmup Iteration   9: 489594.785 ops/s
# Warmup Iteration  10: 486330.707 ops/s
# Warmup Iteration  11: 488274.034 ops/s
# Warmup Iteration  12: 485676.912 ops/s
# Warmup Iteration  13: 490834.961 ops/s
# Warmup Iteration  14: 489350.818 ops/s
# Warmup Iteration  15: 488381.402 ops/s
# Warmup Iteration  16: 489608.059 ops/s
# Warmup Iteration  17: 482781.250 ops/s
# Warmup Iteration  18: 481393.591 ops/s
# Warmup Iteration  19: 481131.689 ops/s
# Warmup Iteration  20: 479148.418 ops/s
# Warmup Iteration  21: 480254.673 ops/s
# Warmup Iteration  22: 480821.469 ops/s
# Warmup Iteration  23: 482918.665 ops/s
# Warmup Iteration  24: 481655.112 ops/s
# Warmup Iteration  25: 481746.021 ops/s
# Warmup Iteration  26: 480351.061 ops/s
# Warmup Iteration  27: 478378.661 ops/s
# Warmup Iteration  28: 479462.818 ops/s
# Warmup Iteration  29: 479333.120 ops/s
# Warmup Iteration  30: 479888.785 ops/s
Iteration   1: 480334.214 ops/s
Iteration   2: 479990.466 ops/s
Iteration   3: 478313.248 ops/s
Iteration   4: 479469.059 ops/s
Iteration   5: 477333.410 ops/s
Iteration   6: 483489.843 ops/s
Iteration   7: 477862.234 ops/s
Iteration   8: 480326.511 ops/s
Iteration   9: 477947.385 ops/s
Iteration  10: 483253.688 ops/s
Iteration  11: 481669.724 ops/s
Iteration  12: 480909.056 ops/s
Iteration  13: 481939.651 ops/s
Iteration  14: 477044.476 ops/s
Iteration  15: 477956.403 ops/s
Iteration  16: 484159.957 ops/s
Iteration  17: 479758.487 ops/s
Iteration  18: 481390.500 ops/s
Iteration  19: 481070.534 ops/s
Iteration  20: 484251.625 ops/s
Iteration  21: 477466.802 ops/s
Iteration  22: 481385.037 ops/s
Iteration  23: 479532.005 ops/s
Iteration  24: 479804.154 ops/s
Iteration  25: 477699.884 ops/s
Iteration  26: 483105.889 ops/s
Iteration  27: 481373.670 ops/s
Iteration  28: 480148.296 ops/s
Iteration  29: 482815.151 ops/s
Iteration  30: 481647.911 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_timestampPastLookback":
  480448.309 ±(99.9%) 1419.248 ops/s [Average]
  (min, avg, max) = (477044.476, 480448.309, 484251.625), stdev = 2124.264
  CI (99.9%): [479029.061, 481867.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_timestampPastLookback  thrpt   30  480448.309 ± 1419.248  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_wrongServiceName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_wrongServiceName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152742.563 ops/s
# Warmup Iteration   2: 219541.299 ops/s
# Warmup Iteration   3: 480014.890 ops/s
# Warmup Iteration   4: 475622.443 ops/s
# Warmup Iteration   5: 473824.387 ops/s
# Warmup Iteration   6: 477319.845 ops/s
# Warmup Iteration   7: 340524.505 ops/s
# Warmup Iteration   8: 485708.769 ops/s
# Warmup Iteration   9: 482902.872 ops/s
# Warmup Iteration  10: 483724.049 ops/s
# Warmup Iteration  11: 482817.890 ops/s
# Warmup Iteration  12: 484053.066 ops/s
# Warmup Iteration  13: 483637.966 ops/s
# Warmup Iteration  14: 483033.927 ops/s
# Warmup Iteration  15: 481337.690 ops/s
# Warmup Iteration  16: 479786.667 ops/s
# Warmup Iteration  17: 479521.249 ops/s
# Warmup Iteration  18: 484083.668 ops/s
# Warmup Iteration  19: 479450.440 ops/s
# Warmup Iteration  20: 482396.818 ops/s
# Warmup Iteration  21: 483809.574 ops/s
# Warmup Iteration  22: 486055.096 ops/s
# Warmup Iteration  23: 487294.650 ops/s
# Warmup Iteration  24: 484308.442 ops/s
# Warmup Iteration  25: 484869.559 ops/s
# Warmup Iteration  26: 483755.847 ops/s
# Warmup Iteration  27: 480067.072 ops/s
# Warmup Iteration  28: 482047.146 ops/s
# Warmup Iteration  29: 479845.813 ops/s
# Warmup Iteration  30: 483442.660 ops/s
Iteration   1: 481116.966 ops/s
Iteration   2: 484191.040 ops/s
Iteration   3: 482163.352 ops/s
Iteration   4: 479823.793 ops/s
Iteration   5: 481165.089 ops/s
Iteration   6: 484045.007 ops/s
Iteration   7: 482276.326 ops/s
Iteration   8: 481660.923 ops/s
Iteration   9: 477989.659 ops/s
Iteration  10: 483647.980 ops/s
Iteration  11: 481997.115 ops/s
Iteration  12: 483802.353 ops/s
Iteration  13: 479793.539 ops/s
Iteration  14: 481373.204 ops/s
Iteration  15: 483716.280 ops/s
Iteration  16: 486451.447 ops/s
Iteration  17: 486088.145 ops/s
Iteration  18: 485444.849 ops/s
Iteration  19: 484579.935 ops/s
Iteration  20: 481256.947 ops/s
Iteration  21: 485290.347 ops/s
Iteration  22: 477867.431 ops/s
Iteration  23: 483822.931 ops/s
Iteration  24: 477261.534 ops/s
Iteration  25: 484420.519 ops/s
Iteration  26: 486322.332 ops/s
Iteration  27: 481824.016 ops/s
Iteration  28: 481306.535 ops/s
Iteration  29: 484105.686 ops/s
Iteration  30: 482374.050 ops/s


Result "zipkin2.storage.QueryRequestTest._Benchmark.benchmark_test_wrongServiceName":
  482572.644 ±(99.9%) 1640.018 ops/s [Average]
  (min, avg, max) = (477261.534, 482572.644, 486451.447), stdev = 2454.701
  CI (99.9%): [480932.627, 484212.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
QueryRequestTest._Benchmark.benchmark_test_wrongServiceName  thrpt   30  482572.644 ± 1640.018  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterSpans$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterSpans

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 174655.981 ops/s
# Warmup Iteration   2: 240072.509 ops/s
# Warmup Iteration   3: 464377.933 ops/s
# Warmup Iteration   4: 591089.614 ops/s
# Warmup Iteration   5: 581051.148 ops/s
# Warmup Iteration   6: 588571.761 ops/s
# Warmup Iteration   7: 584598.133 ops/s
# Warmup Iteration   8: 495449.024 ops/s
# Warmup Iteration   9: 516067.366 ops/s
# Warmup Iteration  10: 596076.987 ops/s
# Warmup Iteration  11: 592225.888 ops/s
# Warmup Iteration  12: 594147.807 ops/s
# Warmup Iteration  13: 596332.712 ops/s
# Warmup Iteration  14: 595945.203 ops/s
# Warmup Iteration  15: 599412.738 ops/s
# Warmup Iteration  16: 594471.758 ops/s
# Warmup Iteration  17: 586854.014 ops/s
# Warmup Iteration  18: 592818.064 ops/s
# Warmup Iteration  19: 593307.286 ops/s
# Warmup Iteration  20: 589196.735 ops/s
# Warmup Iteration  21: 596341.397 ops/s
# Warmup Iteration  22: 594148.170 ops/s
# Warmup Iteration  23: 593387.349 ops/s
# Warmup Iteration  24: 593893.789 ops/s
# Warmup Iteration  25: 589420.152 ops/s
# Warmup Iteration  26: 586937.286 ops/s
# Warmup Iteration  27: 591508.801 ops/s
# Warmup Iteration  28: 595598.632 ops/s
# Warmup Iteration  29: 591478.233 ops/s
# Warmup Iteration  30: 590877.709 ops/s
Iteration   1: 593099.343 ops/s
Iteration   2: 591095.588 ops/s
Iteration   3: 587602.110 ops/s
Iteration   4: 595339.954 ops/s
Iteration   5: 593891.023 ops/s
Iteration   6: 590777.268 ops/s
Iteration   7: 590183.469 ops/s
Iteration   8: 596098.614 ops/s
Iteration   9: 597341.251 ops/s
Iteration  10: 597049.350 ops/s
Iteration  11: 595147.332 ops/s
Iteration  12: 590002.526 ops/s
Iteration  13: 590502.473 ops/s
Iteration  14: 587063.024 ops/s
Iteration  15: 594114.549 ops/s
Iteration  16: 591211.581 ops/s
Iteration  17: 587335.450 ops/s
Iteration  18: 591731.719 ops/s
Iteration  19: 593002.091 ops/s
Iteration  20: 590303.344 ops/s
Iteration  21: 593015.320 ops/s
Iteration  22: 589076.854 ops/s
Iteration  23: 591626.254 ops/s
Iteration  24: 592587.844 ops/s
Iteration  25: 596636.439 ops/s
Iteration  26: 595557.565 ops/s
Iteration  27: 593826.075 ops/s
Iteration  28: 599373.712 ops/s
Iteration  29: 597825.795 ops/s
Iteration  30: 595374.064 ops/s


Result "zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterSpans":
  592926.399 ±(99.9%) 2165.050 ops/s [Average]
  (min, avg, max) = (587063.024, 592926.399, 599373.712), stdev = 3240.545
  CI (99.9%): [590761.349, 595091.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
StrictTraceIdTest._Benchmark.benchmark_filterSpans  thrpt   30  592926.399 ± 2165.050  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_onSpanName$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_onSpanName

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53678.620 ops/s
# Warmup Iteration   2: 73548.729 ops/s
# Warmup Iteration   3: 175807.781 ops/s
# Warmup Iteration   4: 215049.647 ops/s
# Warmup Iteration   5: 219602.887 ops/s
# Warmup Iteration   6: 218725.937 ops/s
# Warmup Iteration   7: 189545.359 ops/s
# Warmup Iteration   8: 185731.307 ops/s
# Warmup Iteration   9: 221147.849 ops/s
# Warmup Iteration  10: 218761.348 ops/s
# Warmup Iteration  11: 220340.069 ops/s
# Warmup Iteration  12: 220961.169 ops/s
# Warmup Iteration  13: 222146.579 ops/s
# Warmup Iteration  14: 221034.664 ops/s
# Warmup Iteration  15: 220928.291 ops/s
# Warmup Iteration  16: 220140.149 ops/s
# Warmup Iteration  17: 220744.100 ops/s
# Warmup Iteration  18: 221412.360 ops/s
# Warmup Iteration  19: 221942.781 ops/s
# Warmup Iteration  20: 221341.690 ops/s
# Warmup Iteration  21: 221642.388 ops/s
# Warmup Iteration  22: 222604.875 ops/s
# Warmup Iteration  23: 222388.012 ops/s
# Warmup Iteration  24: 221982.772 ops/s
# Warmup Iteration  25: 220164.344 ops/s
# Warmup Iteration  26: 220328.532 ops/s
# Warmup Iteration  27: 220686.907 ops/s
# Warmup Iteration  28: 220672.405 ops/s
# Warmup Iteration  29: 219895.716 ops/s
# Warmup Iteration  30: 220840.798 ops/s
Iteration   1: 220090.782 ops/s
Iteration   2: 220049.960 ops/s
Iteration   3: 219936.800 ops/s
Iteration   4: 219484.382 ops/s
Iteration   5: 220145.537 ops/s
Iteration   6: 220966.548 ops/s
Iteration   7: 221184.225 ops/s
Iteration   8: 220986.149 ops/s
Iteration   9: 218752.081 ops/s
Iteration  10: 220900.362 ops/s
Iteration  11: 220462.130 ops/s
Iteration  12: 221249.612 ops/s
Iteration  13: 221377.141 ops/s
Iteration  14: 221511.812 ops/s
Iteration  15: 221792.233 ops/s
Iteration  16: 221627.229 ops/s
Iteration  17: 221144.783 ops/s
Iteration  18: 222058.069 ops/s
Iteration  19: 220444.401 ops/s
Iteration  20: 222441.981 ops/s
Iteration  21: 220992.064 ops/s
Iteration  22: 221058.773 ops/s
Iteration  23: 220655.381 ops/s
Iteration  24: 220473.928 ops/s
Iteration  25: 222083.042 ops/s
Iteration  26: 221207.900 ops/s
Iteration  27: 220672.349 ops/s
Iteration  28: 220875.519 ops/s
Iteration  29: 220986.581 ops/s
Iteration  30: 219665.710 ops/s


Result "zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_onSpanName":
  220842.582 ±(99.9%) 541.723 ops/s [Average]
  (min, avg, max) = (218752.081, 220842.582, 222441.981), stdev = 810.825
  CI (99.9%): [220300.860, 221384.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
StrictTraceIdTest._Benchmark.benchmark_filterTraces_onSpanName  thrpt   30  220842.582 ± 541.723  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_onTag$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_onTag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40487.854 ops/s
# Warmup Iteration   2: 63487.249 ops/s
# Warmup Iteration   3: 153387.770 ops/s
# Warmup Iteration   4: 153883.903 ops/s
# Warmup Iteration   5: 154915.899 ops/s
# Warmup Iteration   6: 155058.370 ops/s
# Warmup Iteration   7: 111891.499 ops/s
# Warmup Iteration   8: 159265.166 ops/s
# Warmup Iteration   9: 159022.173 ops/s
# Warmup Iteration  10: 158743.765 ops/s
# Warmup Iteration  11: 157890.133 ops/s
# Warmup Iteration  12: 158514.173 ops/s
# Warmup Iteration  13: 158629.802 ops/s
# Warmup Iteration  14: 158837.504 ops/s
# Warmup Iteration  15: 158231.319 ops/s
# Warmup Iteration  16: 157735.230 ops/s
# Warmup Iteration  17: 159385.612 ops/s
# Warmup Iteration  18: 159123.831 ops/s
# Warmup Iteration  19: 158563.811 ops/s
# Warmup Iteration  20: 158671.956 ops/s
# Warmup Iteration  21: 158344.421 ops/s
# Warmup Iteration  22: 158369.537 ops/s
# Warmup Iteration  23: 158107.763 ops/s
# Warmup Iteration  24: 158672.521 ops/s
# Warmup Iteration  25: 158385.290 ops/s
# Warmup Iteration  26: 158930.694 ops/s
# Warmup Iteration  27: 158898.449 ops/s
# Warmup Iteration  28: 159361.277 ops/s
# Warmup Iteration  29: 158405.804 ops/s
# Warmup Iteration  30: 158182.562 ops/s
Iteration   1: 158019.693 ops/s
Iteration   2: 159168.457 ops/s
Iteration   3: 158319.847 ops/s
Iteration   4: 159338.826 ops/s
Iteration   5: 158802.386 ops/s
Iteration   6: 159630.401 ops/s
Iteration   7: 158777.383 ops/s
Iteration   8: 159032.671 ops/s
Iteration   9: 157605.861 ops/s
Iteration  10: 159222.702 ops/s
Iteration  11: 158410.570 ops/s
Iteration  12: 158330.188 ops/s
Iteration  13: 158429.384 ops/s
Iteration  14: 160220.886 ops/s
Iteration  15: 159383.781 ops/s
Iteration  16: 158877.125 ops/s
Iteration  17: 159524.955 ops/s
Iteration  18: 158112.484 ops/s
Iteration  19: 158871.837 ops/s
Iteration  20: 158203.201 ops/s
Iteration  21: 158143.615 ops/s
Iteration  22: 158687.441 ops/s
Iteration  23: 159304.453 ops/s
Iteration  24: 160339.169 ops/s
Iteration  25: 159889.862 ops/s
Iteration  26: 160254.045 ops/s
Iteration  27: 158756.973 ops/s
Iteration  28: 158910.023 ops/s
Iteration  29: 159151.091 ops/s
Iteration  30: 158660.370 ops/s


Result "zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_onTag":
  158945.989 ±(99.9%) 459.809 ops/s [Average]
  (min, avg, max) = (157605.861, 158945.989, 160339.169), stdev = 688.220
  CI (99.9%): [158486.181, 159405.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
StrictTraceIdTest._Benchmark.benchmark_filterTraces_onTag  thrpt   30  158945.989 ± 459.809  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_skipsOnNoClash$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_skipsOnNoClash

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217838.700 ops/s
# Warmup Iteration   2: 294325.546 ops/s
# Warmup Iteration   3: 668419.051 ops/s
# Warmup Iteration   4: 654008.638 ops/s
# Warmup Iteration   5: 662851.611 ops/s
# Warmup Iteration   6: 658553.372 ops/s
# Warmup Iteration   7: 587371.399 ops/s
# Warmup Iteration   8: 555958.548 ops/s
# Warmup Iteration   9: 661306.878 ops/s
# Warmup Iteration  10: 670484.505 ops/s
# Warmup Iteration  11: 664109.706 ops/s
# Warmup Iteration  12: 667714.981 ops/s
# Warmup Iteration  13: 667363.362 ops/s
# Warmup Iteration  14: 664919.022 ops/s
# Warmup Iteration  15: 665609.488 ops/s
# Warmup Iteration  16: 666567.384 ops/s
# Warmup Iteration  17: 665954.003 ops/s
# Warmup Iteration  18: 664391.028 ops/s
# Warmup Iteration  19: 665720.735 ops/s
# Warmup Iteration  20: 668751.338 ops/s
# Warmup Iteration  21: 670314.053 ops/s
# Warmup Iteration  22: 670301.280 ops/s
# Warmup Iteration  23: 667914.468 ops/s
# Warmup Iteration  24: 663355.862 ops/s
# Warmup Iteration  25: 662611.364 ops/s
# Warmup Iteration  26: 666884.992 ops/s
# Warmup Iteration  27: 667890.828 ops/s
# Warmup Iteration  28: 664610.239 ops/s
# Warmup Iteration  29: 661992.471 ops/s
# Warmup Iteration  30: 658480.234 ops/s
Iteration   1: 658083.857 ops/s
Iteration   2: 663681.135 ops/s
Iteration   3: 659563.005 ops/s
Iteration   4: 667787.802 ops/s
Iteration   5: 663071.468 ops/s
Iteration   6: 661502.769 ops/s
Iteration   7: 662119.941 ops/s
Iteration   8: 666801.102 ops/s
Iteration   9: 660037.790 ops/s
Iteration  10: 662795.268 ops/s
Iteration  11: 666654.093 ops/s
Iteration  12: 665498.603 ops/s
Iteration  13: 670020.486 ops/s
Iteration  14: 667825.876 ops/s
Iteration  15: 670415.660 ops/s
Iteration  16: 666572.658 ops/s
Iteration  17: 671214.420 ops/s
Iteration  18: 670714.833 ops/s
Iteration  19: 670856.510 ops/s
Iteration  20: 668680.228 ops/s
Iteration  21: 670040.157 ops/s
Iteration  22: 669615.921 ops/s
Iteration  23: 670745.984 ops/s
Iteration  24: 671089.208 ops/s
Iteration  25: 672904.940 ops/s
Iteration  26: 671896.499 ops/s
Iteration  27: 673112.276 ops/s
Iteration  28: 668654.362 ops/s
Iteration  29: 670615.788 ops/s
Iteration  30: 669245.477 ops/s


Result "zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_filterTraces_skipsOnNoClash":
  667393.937 ±(99.9%) 2814.477 ops/s [Average]
  (min, avg, max) = (658083.857, 667393.937, 673112.276), stdev = 4212.577
  CI (99.9%): [664579.460, 670208.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
StrictTraceIdTest._Benchmark.benchmark_filterTraces_skipsOnNoClash  thrpt   30  667393.937 ± 2814.477  ops/s
----------------------------------------
=== Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_hasClashOnLowerTraceId$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_hasClashOnLowerTraceId

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 182094.687 ops/s
# Warmup Iteration   2: 265555.294 ops/s
# Warmup Iteration   3: 495744.376 ops/s
# Warmup Iteration   4: 493188.836 ops/s
# Warmup Iteration   5: 502109.950 ops/s
# Warmup Iteration   6: 504159.749 ops/s
# Warmup Iteration   7: 343684.494 ops/s
# Warmup Iteration   8: 497552.414 ops/s
# Warmup Iteration   9: 502791.778 ops/s
# Warmup Iteration  10: 502241.511 ops/s
# Warmup Iteration  11: 502627.469 ops/s
# Warmup Iteration  12: 505359.472 ops/s
# Warmup Iteration  13: 506361.470 ops/s
# Warmup Iteration  14: 503498.970 ops/s
# Warmup Iteration  15: 499720.585 ops/s
# Warmup Iteration  16: 500936.284 ops/s
# Warmup Iteration  17: 505915.963 ops/s
# Warmup Iteration  18: 505324.591 ops/s
# Warmup Iteration  19: 505726.795 ops/s
# Warmup Iteration  20: 506072.548 ops/s
# Warmup Iteration  21: 501965.917 ops/s
# Warmup Iteration  22: 506167.696 ops/s
# Warmup Iteration  23: 501884.424 ops/s
# Warmup Iteration  24: 504007.769 ops/s
# Warmup Iteration  25: 504602.265 ops/s
# Warmup Iteration  26: 506262.207 ops/s
# Warmup Iteration  27: 506438.241 ops/s
# Warmup Iteration  28: 505121.199 ops/s
# Warmup Iteration  29: 505554.856 ops/s
# Warmup Iteration  30: 504515.729 ops/s
Iteration   1: 502947.428 ops/s
Iteration   2: 500512.636 ops/s
Iteration   3: 504134.961 ops/s
Iteration   4: 506174.479 ops/s
Iteration   5: 505047.337 ops/s
Iteration   6: 498485.958 ops/s
Iteration   7: 501758.422 ops/s
Iteration   8: 496442.453 ops/s
Iteration   9: 501951.796 ops/s
Iteration  10: 500540.198 ops/s
Iteration  11: 500775.877 ops/s
Iteration  12: 505933.860 ops/s
Iteration  13: 506890.502 ops/s
Iteration  14: 504671.095 ops/s
Iteration  15: 505513.487 ops/s
Iteration  16: 503340.365 ops/s
Iteration  17: 500274.741 ops/s
Iteration  18: 502893.035 ops/s
Iteration  19: 504155.506 ops/s
Iteration  20: 499775.395 ops/s
Iteration  21: 497817.882 ops/s
Iteration  22: 501003.434 ops/s
Iteration  23: 503466.782 ops/s
Iteration  24: 503765.497 ops/s
Iteration  25: 504461.758 ops/s
Iteration  26: 502814.922 ops/s
Iteration  27: 499928.195 ops/s
Iteration  28: 499906.578 ops/s
Iteration  29: 498432.654 ops/s
Iteration  30: 500605.174 ops/s


Result "zipkin2.storage.StrictTraceIdTest._Benchmark.benchmark_hasClashOnLowerTraceId":
  502147.413 ±(99.9%) 1791.503 ops/s [Average]
  (min, avg, max) = (496442.453, 502147.413, 506890.502), stdev = 2681.438
  CI (99.9%): [500355.910, 503938.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
StrictTraceIdTest._Benchmark.benchmark_hasClashOnLowerTraceId  thrpt   30  502147.413 ± 1791.503  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_assumesServerWithoutTimestampIsShared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_assumesServerWithoutTimestampIsShared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134826.769 ops/s
# Warmup Iteration   2: 201422.304 ops/s
# Warmup Iteration   3: 424496.848 ops/s
# Warmup Iteration   4: 445118.036 ops/s
# Warmup Iteration   5: 446934.119 ops/s
# Warmup Iteration   6: 450542.039 ops/s
# Warmup Iteration   7: 411020.562 ops/s
# Warmup Iteration   8: 350737.313 ops/s
# Warmup Iteration   9: 445572.980 ops/s
# Warmup Iteration  10: 445925.934 ops/s
# Warmup Iteration  11: 449006.568 ops/s
# Warmup Iteration  12: 448114.221 ops/s
# Warmup Iteration  13: 447408.522 ops/s
# Warmup Iteration  14: 445609.835 ops/s
# Warmup Iteration  15: 447868.246 ops/s
# Warmup Iteration  16: 448494.242 ops/s
# Warmup Iteration  17: 452499.463 ops/s
# Warmup Iteration  18: 449479.774 ops/s
# Warmup Iteration  19: 453699.225 ops/s
# Warmup Iteration  20: 452879.100 ops/s
# Warmup Iteration  21: 452199.872 ops/s
# Warmup Iteration  22: 451197.972 ops/s
# Warmup Iteration  23: 448276.655 ops/s
# Warmup Iteration  24: 448400.877 ops/s
# Warmup Iteration  25: 447627.734 ops/s
# Warmup Iteration  26: 448629.140 ops/s
# Warmup Iteration  27: 447771.289 ops/s
# Warmup Iteration  28: 449764.819 ops/s
# Warmup Iteration  29: 446080.709 ops/s
# Warmup Iteration  30: 447292.114 ops/s
Iteration   1: 447553.826 ops/s
Iteration   2: 448902.896 ops/s
Iteration   3: 451166.640 ops/s
Iteration   4: 446364.826 ops/s
Iteration   5: 446869.489 ops/s
Iteration   6: 450760.194 ops/s
Iteration   7: 449780.603 ops/s
Iteration   8: 447833.919 ops/s
Iteration   9: 448319.205 ops/s
Iteration  10: 447361.509 ops/s
Iteration  11: 451112.103 ops/s
Iteration  12: 447513.178 ops/s
Iteration  13: 450816.444 ops/s
Iteration  14: 448436.473 ops/s
Iteration  15: 445949.613 ops/s
Iteration  16: 450485.732 ops/s
Iteration  17: 446708.266 ops/s
Iteration  18: 446477.289 ops/s
Iteration  19: 447000.324 ops/s
Iteration  20: 448504.329 ops/s
Iteration  21: 447486.103 ops/s
Iteration  22: 452828.246 ops/s
Iteration  23: 453135.094 ops/s
Iteration  24: 445860.534 ops/s
Iteration  25: 447048.837 ops/s
Iteration  26: 448696.331 ops/s
Iteration  27: 445544.897 ops/s
Iteration  28: 446488.007 ops/s
Iteration  29: 448819.900 ops/s
Iteration  30: 447175.181 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_assumesServerWithoutTimestampIsShared":
  448366.666 ±(99.9%) 1367.728 ops/s [Average]
  (min, avg, max) = (445544.897, 448366.666, 453135.094), stdev = 2047.152
  CI (99.9%): [446998.938, 449734.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_assumesServerWithoutTimestampIsShared  thrpt   30  448366.666 ± 1367.728  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 416.794 ops/s
# Warmup Iteration   2: 633.294 ops/s
# Warmup Iteration   3: 661.424 ops/s
# Warmup Iteration   4: 770.924 ops/s
# Warmup Iteration   5: 1136.196 ops/s
# Warmup Iteration   6: 1154.278 ops/s
# Warmup Iteration   7: 1158.957 ops/s
# Warmup Iteration   8: 1155.451 ops/s
# Warmup Iteration   9: 1167.617 ops/s
# Warmup Iteration  10: 1164.814 ops/s
# Warmup Iteration  11: 1163.247 ops/s
# Warmup Iteration  12: 1160.660 ops/s
# Warmup Iteration  13: 1182.535 ops/s
# Warmup Iteration  14: 1164.799 ops/s
# Warmup Iteration  15: 1165.255 ops/s
# Warmup Iteration  16: 833.081 ops/s
# Warmup Iteration  17: 1069.322 ops/s
# Warmup Iteration  18: 1181.790 ops/s
# Warmup Iteration  19: 1185.023 ops/s
# Warmup Iteration  20: 1181.724 ops/s
# Warmup Iteration  21: 1188.202 ops/s
# Warmup Iteration  22: 1168.836 ops/s
# Warmup Iteration  23: 1171.911 ops/s
# Warmup Iteration  24: 1175.600 ops/s
# Warmup Iteration  25: 1172.409 ops/s
# Warmup Iteration  26: 1184.112 ops/s
# Warmup Iteration  27: 1183.492 ops/s
# Warmup Iteration  28: 1179.128 ops/s
# Warmup Iteration  29: 1162.864 ops/s
# Warmup Iteration  30: 1153.519 ops/s
Iteration   1: 1165.178 ops/s
Iteration   2: 1162.203 ops/s
Iteration   3: 1148.878 ops/s
Iteration   4: 1150.121 ops/s
Iteration   5: 1150.957 ops/s
Iteration   6: 1152.521 ops/s
Iteration   7: 1143.475 ops/s
Iteration   8: 1150.942 ops/s
Iteration   9: 1169.854 ops/s
Iteration  10: 1174.364 ops/s
Iteration  11: 1173.815 ops/s
Iteration  12: 1173.701 ops/s
Iteration  13: 1171.802 ops/s
Iteration  14: 1172.898 ops/s
Iteration  15: 1173.134 ops/s
Iteration  16: 1166.204 ops/s
Iteration  17: 1173.936 ops/s
Iteration  18: 1176.758 ops/s
Iteration  19: 1179.360 ops/s
Iteration  20: 1172.635 ops/s
Iteration  21: 1175.312 ops/s
Iteration  22: 1156.194 ops/s
Iteration  23: 1167.480 ops/s
Iteration  24: 1180.993 ops/s
Iteration  25: 1174.284 ops/s
Iteration  26: 1161.238 ops/s
Iteration  27: 1156.817 ops/s
Iteration  28: 1174.933 ops/s
Iteration  29: 1176.886 ops/s
Iteration  30: 1172.051 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client":
  1166.631 ±(99.9%) 7.072 ops/s [Average]
  (min, avg, max) = (1143.475, 1166.631, 1180.993), stdev = 10.585
  CI (99.9%): [1159.558, 1173.703] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt     Score   Error  Units
SpanConverterTest._Benchmark.benchmark_client  thrpt   30  1166.631 ± 7.072  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_clientAndServer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_clientAndServer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65851.925 ops/s
# Warmup Iteration   2: 100906.379 ops/s
# Warmup Iteration   3: 184203.775 ops/s
# Warmup Iteration   4: 224683.989 ops/s
# Warmup Iteration   5: 224062.344 ops/s
# Warmup Iteration   6: 225978.144 ops/s
# Warmup Iteration   7: 224626.380 ops/s
# Warmup Iteration   8: 197520.164 ops/s
# Warmup Iteration   9: 182882.131 ops/s
# Warmup Iteration  10: 230016.221 ops/s
# Warmup Iteration  11: 230336.322 ops/s
# Warmup Iteration  12: 228713.873 ops/s
# Warmup Iteration  13: 228550.894 ops/s
# Warmup Iteration  14: 228124.339 ops/s
# Warmup Iteration  15: 228487.978 ops/s
# Warmup Iteration  16: 229309.921 ops/s
# Warmup Iteration  17: 229043.459 ops/s
# Warmup Iteration  18: 230560.464 ops/s
# Warmup Iteration  19: 229436.440 ops/s
# Warmup Iteration  20: 230600.047 ops/s
# Warmup Iteration  21: 230155.718 ops/s
# Warmup Iteration  22: 229837.947 ops/s
# Warmup Iteration  23: 229085.588 ops/s
# Warmup Iteration  24: 229344.117 ops/s
# Warmup Iteration  25: 229205.312 ops/s
# Warmup Iteration  26: 229555.322 ops/s
# Warmup Iteration  27: 229481.883 ops/s
# Warmup Iteration  28: 228951.986 ops/s
# Warmup Iteration  29: 229602.136 ops/s
# Warmup Iteration  30: 228791.549 ops/s
Iteration   1: 230351.031 ops/s
Iteration   2: 228416.393 ops/s
Iteration   3: 228194.253 ops/s
Iteration   4: 228815.852 ops/s
Iteration   5: 229888.343 ops/s
Iteration   6: 228259.779 ops/s
Iteration   7: 227836.816 ops/s
Iteration   8: 227093.922 ops/s
Iteration   9: 226520.937 ops/s
Iteration  10: 227990.347 ops/s
Iteration  11: 229282.317 ops/s
Iteration  12: 228302.560 ops/s
Iteration  13: 227911.026 ops/s
Iteration  14: 227069.008 ops/s
Iteration  15: 230028.515 ops/s
Iteration  16: 227367.623 ops/s
Iteration  17: 228204.386 ops/s
Iteration  18: 228997.193 ops/s
Iteration  19: 228013.963 ops/s
Iteration  20: 229278.970 ops/s
Iteration  21: 229522.550 ops/s
Iteration  22: 229517.968 ops/s
Iteration  23: 227441.984 ops/s
Iteration  24: 227138.089 ops/s
Iteration  25: 228104.128 ops/s
Iteration  26: 228697.485 ops/s
Iteration  27: 226557.367 ops/s
Iteration  28: 227966.456 ops/s
Iteration  29: 228738.872 ops/s
Iteration  30: 227134.195 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_clientAndServer":
  228288.078 ±(99.9%) 678.768 ops/s [Average]
  (min, avg, max) = (226520.937, 228288.078, 230351.031), stdev = 1015.948
  CI (99.9%): [227609.310, 228966.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
SpanConverterTest._Benchmark.benchmark_clientAndServer  thrpt   30  228288.078 ± 678.768  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_clientAndServer_loopback$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_clientAndServer_loopback

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 107583.658 ops/s
# Warmup Iteration   2: 162702.070 ops/s
# Warmup Iteration   3: 320507.690 ops/s
# Warmup Iteration   4: 349820.054 ops/s
# Warmup Iteration   5: 352343.799 ops/s
# Warmup Iteration   6: 352081.309 ops/s
# Warmup Iteration   7: 352071.130 ops/s
# Warmup Iteration   8: 250766.052 ops/s
# Warmup Iteration   9: 353860.520 ops/s
# Warmup Iteration  10: 354722.413 ops/s
# Warmup Iteration  11: 354310.000 ops/s
# Warmup Iteration  12: 353468.146 ops/s
# Warmup Iteration  13: 354095.734 ops/s
# Warmup Iteration  14: 353933.271 ops/s
# Warmup Iteration  15: 352971.918 ops/s
# Warmup Iteration  16: 354964.886 ops/s
# Warmup Iteration  17: 355976.657 ops/s
# Warmup Iteration  18: 356556.840 ops/s
# Warmup Iteration  19: 357452.089 ops/s
# Warmup Iteration  20: 356142.469 ops/s
# Warmup Iteration  21: 356993.597 ops/s
# Warmup Iteration  22: 355284.275 ops/s
# Warmup Iteration  23: 355259.447 ops/s
# Warmup Iteration  24: 354717.155 ops/s
# Warmup Iteration  25: 356268.856 ops/s
# Warmup Iteration  26: 353693.288 ops/s
# Warmup Iteration  27: 354058.600 ops/s
# Warmup Iteration  28: 353763.993 ops/s
# Warmup Iteration  29: 354076.059 ops/s
# Warmup Iteration  30: 355494.310 ops/s
Iteration   1: 359061.452 ops/s
Iteration   2: 358313.493 ops/s
Iteration   3: 354574.356 ops/s
Iteration   4: 355477.582 ops/s
Iteration   5: 353347.495 ops/s
Iteration   6: 355132.581 ops/s
Iteration   7: 354993.403 ops/s
Iteration   8: 353902.463 ops/s
Iteration   9: 352666.293 ops/s
Iteration  10: 356572.597 ops/s
Iteration  11: 356150.632 ops/s
Iteration  12: 354878.314 ops/s
Iteration  13: 353860.512 ops/s
Iteration  14: 350456.196 ops/s
Iteration  15: 353932.465 ops/s
Iteration  16: 354049.315 ops/s
Iteration  17: 357135.223 ops/s
Iteration  18: 352574.684 ops/s
Iteration  19: 355589.480 ops/s
Iteration  20: 357101.926 ops/s
Iteration  21: 356343.863 ops/s
Iteration  22: 356255.215 ops/s
Iteration  23: 355924.302 ops/s
Iteration  24: 353540.472 ops/s
Iteration  25: 353768.023 ops/s
Iteration  26: 354297.390 ops/s
Iteration  27: 354735.700 ops/s
Iteration  28: 355135.194 ops/s
Iteration  29: 355527.761 ops/s
Iteration  30: 356685.015 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_clientAndServer_loopback":
  355066.113 ±(99.9%) 1188.325 ops/s [Average]
  (min, avg, max) = (350456.196, 355066.113, 359061.452), stdev = 1778.629
  CI (99.9%): [353877.788, 356254.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_clientAndServer_loopback  thrpt   30  355066.113 ± 1188.325  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_kindInferredFromAnnotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_kindInferredFromAnnotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 932.211 ops/s
# Warmup Iteration   2: 1457.918 ops/s
# Warmup Iteration   3: 1502.190 ops/s
# Warmup Iteration   4: 1978.110 ops/s
# Warmup Iteration   5: 2440.940 ops/s
# Warmup Iteration   6: 2414.940 ops/s
# Warmup Iteration   7: 2434.412 ops/s
# Warmup Iteration   8: 2418.797 ops/s
# Warmup Iteration   9: 2415.343 ops/s
# Warmup Iteration  10: 2407.462 ops/s
# Warmup Iteration  11: 2432.238 ops/s
# Warmup Iteration  12: 2440.930 ops/s
# Warmup Iteration  13: 2457.242 ops/s
# Warmup Iteration  14: 2425.534 ops/s
# Warmup Iteration  15: 2436.509 ops/s
# Warmup Iteration  16: 1861.803 ops/s
# Warmup Iteration  17: 2141.961 ops/s
# Warmup Iteration  18: 2494.365 ops/s
# Warmup Iteration  19: 2494.061 ops/s
# Warmup Iteration  20: 2501.348 ops/s
# Warmup Iteration  21: 2474.930 ops/s
# Warmup Iteration  22: 2489.298 ops/s
# Warmup Iteration  23: 2427.525 ops/s
# Warmup Iteration  24: 2444.960 ops/s
# Warmup Iteration  25: 2540.145 ops/s
# Warmup Iteration  26: 2547.170 ops/s
# Warmup Iteration  27: 2521.345 ops/s
# Warmup Iteration  28: 2527.430 ops/s
# Warmup Iteration  29: 2542.344 ops/s
# Warmup Iteration  30: 2560.361 ops/s
Iteration   1: 2539.433 ops/s
Iteration   2: 2525.383 ops/s
Iteration   3: 2534.866 ops/s
Iteration   4: 2500.517 ops/s
Iteration   5: 2524.495 ops/s
Iteration   6: 2546.716 ops/s
Iteration   7: 2563.053 ops/s
Iteration   8: 2505.246 ops/s
Iteration   9: 2518.737 ops/s
Iteration  10: 2536.094 ops/s
Iteration  11: 2563.002 ops/s
Iteration  12: 2505.937 ops/s
Iteration  13: 2503.006 ops/s
Iteration  14: 2495.251 ops/s
Iteration  15: 2529.465 ops/s
Iteration  16: 2529.572 ops/s
Iteration  17: 2539.838 ops/s
Iteration  18: 2523.428 ops/s
Iteration  19: 2558.988 ops/s
Iteration  20: 2564.122 ops/s
Iteration  21: 2526.798 ops/s
Iteration  22: 2533.552 ops/s
Iteration  23: 2516.492 ops/s
Iteration  24: 2530.604 ops/s
Iteration  25: 2555.889 ops/s
Iteration  26: 2563.650 ops/s
Iteration  27: 2559.404 ops/s
Iteration  28: 2538.939 ops/s
Iteration  29: 2547.835 ops/s
Iteration  30: 2566.028 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_kindInferredFromAnnotation":
  2534.878 ±(99.9%) 14.029 ops/s [Average]
  (min, avg, max) = (2495.251, 2534.878, 2566.028), stdev = 20.998
  CI (99.9%): [2520.849, 2548.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_client_kindInferredFromAnnotation  thrpt   30  2534.878 ± 14.029  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_missingCs$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_missingCs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122154.206 ops/s
# Warmup Iteration   2: 197022.698 ops/s
# Warmup Iteration   3: 401960.408 ops/s
# Warmup Iteration   4: 462785.499 ops/s
# Warmup Iteration   5: 469106.861 ops/s
# Warmup Iteration   6: 467882.854 ops/s
# Warmup Iteration   7: 467544.396 ops/s
# Warmup Iteration   8: 313644.931 ops/s
# Warmup Iteration   9: 469261.797 ops/s
# Warmup Iteration  10: 467914.740 ops/s
# Warmup Iteration  11: 468117.843 ops/s
# Warmup Iteration  12: 468617.413 ops/s
# Warmup Iteration  13: 468683.015 ops/s
# Warmup Iteration  14: 470083.491 ops/s
# Warmup Iteration  15: 470721.919 ops/s
# Warmup Iteration  16: 469128.068 ops/s
# Warmup Iteration  17: 469100.152 ops/s
# Warmup Iteration  18: 469348.974 ops/s
# Warmup Iteration  19: 468289.566 ops/s
# Warmup Iteration  20: 468821.891 ops/s
# Warmup Iteration  21: 468523.540 ops/s
# Warmup Iteration  22: 464659.998 ops/s
# Warmup Iteration  23: 470368.088 ops/s
# Warmup Iteration  24: 469628.433 ops/s
# Warmup Iteration  25: 469847.468 ops/s
# Warmup Iteration  26: 469690.777 ops/s
# Warmup Iteration  27: 468126.606 ops/s
# Warmup Iteration  28: 470233.740 ops/s
# Warmup Iteration  29: 469033.564 ops/s
# Warmup Iteration  30: 470097.603 ops/s
Iteration   1: 467605.020 ops/s
Iteration   2: 462539.486 ops/s
Iteration   3: 466638.880 ops/s
Iteration   4: 467315.262 ops/s
Iteration   5: 470683.165 ops/s
Iteration   6: 464370.138 ops/s
Iteration   7: 470842.749 ops/s
Iteration   8: 465714.226 ops/s
Iteration   9: 470420.218 ops/s
Iteration  10: 468935.662 ops/s
Iteration  11: 467708.957 ops/s
Iteration  12: 467728.861 ops/s
Iteration  13: 468106.793 ops/s
Iteration  14: 468289.118 ops/s
Iteration  15: 467592.317 ops/s
Iteration  16: 469966.194 ops/s
Iteration  17: 468962.197 ops/s
Iteration  18: 467259.068 ops/s
Iteration  19: 465184.548 ops/s
Iteration  20: 466674.027 ops/s
Iteration  21: 467150.184 ops/s
Iteration  22: 467745.899 ops/s
Iteration  23: 467265.992 ops/s
Iteration  24: 470010.616 ops/s
Iteration  25: 467729.899 ops/s
Iteration  26: 470241.411 ops/s
Iteration  27: 468688.517 ops/s
Iteration  28: 471132.792 ops/s
Iteration  29: 470316.083 ops/s
Iteration  30: 470153.942 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_missingCs":
  468099.074 ±(99.9%) 1351.213 ops/s [Average]
  (min, avg, max) = (462539.486, 468099.074, 471132.792), stdev = 2022.432
  CI (99.9%): [466747.861, 469450.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_client_missingCs  thrpt   30  468099.074 ± 1351.213  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_unfinished$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_unfinished

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 923.519 ops/s
# Warmup Iteration   2: 1460.111 ops/s
# Warmup Iteration   3: 1521.885 ops/s
# Warmup Iteration   4: 1871.665 ops/s
# Warmup Iteration   5: 2331.166 ops/s
# Warmup Iteration   6: 2326.616 ops/s
# Warmup Iteration   7: 2356.411 ops/s
# Warmup Iteration   8: 2333.372 ops/s
# Warmup Iteration   9: 2376.191 ops/s
# Warmup Iteration  10: 2356.385 ops/s
# Warmup Iteration  11: 2402.288 ops/s
# Warmup Iteration  12: 2380.188 ops/s
# Warmup Iteration  13: 2396.927 ops/s
# Warmup Iteration  14: 2377.768 ops/s
# Warmup Iteration  15: 2403.240 ops/s
# Warmup Iteration  16: 2057.817 ops/s
# Warmup Iteration  17: 1958.572 ops/s
# Warmup Iteration  18: 2440.761 ops/s
# Warmup Iteration  19: 2443.766 ops/s
# Warmup Iteration  20: 2408.001 ops/s
# Warmup Iteration  21: 2422.353 ops/s
# Warmup Iteration  22: 2401.990 ops/s
# Warmup Iteration  23: 2385.005 ops/s
# Warmup Iteration  24: 2393.994 ops/s
# Warmup Iteration  25: 2408.090 ops/s
# Warmup Iteration  26: 2431.756 ops/s
# Warmup Iteration  27: 2442.588 ops/s
# Warmup Iteration  28: 2446.107 ops/s
# Warmup Iteration  29: 2451.895 ops/s
# Warmup Iteration  30: 2427.947 ops/s
Iteration   1: 2450.655 ops/s
Iteration   2: 2451.284 ops/s
Iteration   3: 2447.529 ops/s
Iteration   4: 2442.685 ops/s
Iteration   5: 2381.599 ops/s
Iteration   6: 2383.130 ops/s
Iteration   7: 2408.804 ops/s
Iteration   8: 2414.249 ops/s
Iteration   9: 2449.305 ops/s
Iteration  10: 2426.908 ops/s
Iteration  11: 2417.178 ops/s
Iteration  12: 2407.668 ops/s
Iteration  13: 2423.443 ops/s
Iteration  14: 2407.906 ops/s
Iteration  15: 2414.934 ops/s
Iteration  16: 2450.167 ops/s
Iteration  17: 2439.083 ops/s
Iteration  18: 2419.208 ops/s
Iteration  19: 2447.974 ops/s
Iteration  20: 2403.178 ops/s
Iteration  21: 2409.210 ops/s
Iteration  22: 2402.428 ops/s
Iteration  23: 2427.319 ops/s
Iteration  24: 2432.459 ops/s
Iteration  25: 2422.503 ops/s
Iteration  26: 2410.224 ops/s
Iteration  27: 2447.841 ops/s
Iteration  28: 2431.448 ops/s
Iteration  29: 2464.946 ops/s
Iteration  30: 2422.838 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_client_unfinished":
  2425.270 ±(99.9%) 13.932 ops/s [Average]
  (min, avg, max) = (2381.599, 2425.270, 2464.946), stdev = 20.853
  CI (99.9%): [2411.338, 2439.203] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_client_unfinished  thrpt   30  2425.270 ± 13.932  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1170.446 ops/s
# Warmup Iteration   2: 1843.791 ops/s
# Warmup Iteration   3: 1971.426 ops/s
# Warmup Iteration   4: 2604.450 ops/s
# Warmup Iteration   5: 3183.159 ops/s
# Warmup Iteration   6: 3095.511 ops/s
# Warmup Iteration   7: 3122.359 ops/s
# Warmup Iteration   8: 3074.183 ops/s
# Warmup Iteration   9: 3187.449 ops/s
# Warmup Iteration  10: 3178.975 ops/s
# Warmup Iteration  11: 3146.224 ops/s
# Warmup Iteration  12: 3125.585 ops/s
# Warmup Iteration  13: 3110.755 ops/s
# Warmup Iteration  14: 3151.750 ops/s
# Warmup Iteration  15: 2969.080 ops/s
# Warmup Iteration  16: 2231.196 ops/s
# Warmup Iteration  17: 3198.157 ops/s
# Warmup Iteration  18: 3198.126 ops/s
# Warmup Iteration  19: 3207.173 ops/s
# Warmup Iteration  20: 3222.227 ops/s
# Warmup Iteration  21: 3183.827 ops/s
# Warmup Iteration  22: 3177.723 ops/s
# Warmup Iteration  23: 3213.714 ops/s
# Warmup Iteration  24: 3180.092 ops/s
# Warmup Iteration  25: 3186.164 ops/s
# Warmup Iteration  26: 3165.583 ops/s
# Warmup Iteration  27: 3142.316 ops/s
# Warmup Iteration  28: 3205.081 ops/s
# Warmup Iteration  29: 3172.417 ops/s
# Warmup Iteration  30: 3195.156 ops/s
Iteration   1: 3184.087 ops/s
Iteration   2: 3174.079 ops/s
Iteration   3: 3155.529 ops/s
Iteration   4: 3179.427 ops/s
Iteration   5: 3210.705 ops/s
Iteration   6: 3204.965 ops/s
Iteration   7: 3204.348 ops/s
Iteration   8: 3224.143 ops/s
Iteration   9: 3219.499 ops/s
Iteration  10: 3140.184 ops/s
Iteration  11: 3156.321 ops/s
Iteration  12: 3135.900 ops/s
Iteration  13: 3132.204 ops/s
Iteration  14: 3204.133 ops/s
Iteration  15: 3158.906 ops/s
Iteration  16: 3214.401 ops/s
Iteration  17: 3186.688 ops/s
Iteration  18: 3218.791 ops/s
Iteration  19: 3218.944 ops/s
Iteration  20: 3207.167 ops/s
Iteration  21: 3159.106 ops/s
Iteration  22: 3136.463 ops/s
Iteration  23: 3180.312 ops/s
Iteration  24: 3141.004 ops/s
Iteration  25: 3198.590 ops/s
Iteration  26: 3206.851 ops/s
Iteration  27: 3194.814 ops/s
Iteration  28: 3227.541 ops/s
Iteration  29: 3217.263 ops/s
Iteration  30: 3181.295 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer":
  3185.789 ±(99.9%) 20.194 ops/s [Average]
  (min, avg, max) = (3132.204, 3185.789, 3227.541), stdev = 30.225
  CI (99.9%): [3165.595, 3205.982] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_consumer  thrpt   30  3185.789 ± 20.194  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer_duration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer_duration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 928.556 ops/s
# Warmup Iteration   2: 1459.411 ops/s
# Warmup Iteration   3: 1516.852 ops/s
# Warmup Iteration   4: 1882.706 ops/s
# Warmup Iteration   5: 2470.185 ops/s
# Warmup Iteration   6: 2449.746 ops/s
# Warmup Iteration   7: 2507.132 ops/s
# Warmup Iteration   8: 2363.748 ops/s
# Warmup Iteration   9: 2365.118 ops/s
# Warmup Iteration  10: 2348.037 ops/s
# Warmup Iteration  11: 2410.240 ops/s
# Warmup Iteration  12: 2372.482 ops/s
# Warmup Iteration  13: 2379.116 ops/s
# Warmup Iteration  14: 2349.725 ops/s
# Warmup Iteration  15: 2400.438 ops/s
# Warmup Iteration  16: 1950.762 ops/s
# Warmup Iteration  17: 2089.706 ops/s
# Warmup Iteration  18: 2440.440 ops/s
# Warmup Iteration  19: 2440.581 ops/s
# Warmup Iteration  20: 2430.550 ops/s
# Warmup Iteration  21: 2445.753 ops/s
# Warmup Iteration  22: 2457.236 ops/s
# Warmup Iteration  23: 2452.711 ops/s
# Warmup Iteration  24: 2455.035 ops/s
# Warmup Iteration  25: 2447.441 ops/s
# Warmup Iteration  26: 2460.990 ops/s
# Warmup Iteration  27: 2442.937 ops/s
# Warmup Iteration  28: 2456.053 ops/s
# Warmup Iteration  29: 2431.057 ops/s
# Warmup Iteration  30: 2479.553 ops/s
Iteration   1: 2482.490 ops/s
Iteration   2: 2471.396 ops/s
Iteration   3: 2435.568 ops/s
Iteration   4: 2451.209 ops/s
Iteration   5: 2453.038 ops/s
Iteration   6: 2450.077 ops/s
Iteration   7: 2452.812 ops/s
Iteration   8: 2443.274 ops/s
Iteration   9: 2457.170 ops/s
Iteration  10: 2462.272 ops/s
Iteration  11: 2468.215 ops/s
Iteration  12: 2463.631 ops/s
Iteration  13: 2443.299 ops/s
Iteration  14: 2439.742 ops/s
Iteration  15: 2429.947 ops/s
Iteration  16: 2456.237 ops/s
Iteration  17: 2473.549 ops/s
Iteration  18: 2466.719 ops/s
Iteration  19: 2422.737 ops/s
Iteration  20: 2450.833 ops/s
Iteration  21: 2443.372 ops/s
Iteration  22: 2457.571 ops/s
Iteration  23: 2431.679 ops/s
Iteration  24: 2436.621 ops/s
Iteration  25: 2453.360 ops/s
Iteration  26: 2426.360 ops/s
Iteration  27: 2463.547 ops/s
Iteration  28: 2449.926 ops/s
Iteration  29: 2421.278 ops/s
Iteration  30: 2413.845 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer_duration":
  2449.059 ±(99.9%) 11.200 ops/s [Average]
  (min, avg, max) = (2413.845, 2449.059, 2482.490), stdev = 16.764
  CI (99.9%): [2437.859, 2460.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_consumer_duration  thrpt   30  2449.059 ± 11.200  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer_remote$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer_remote

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886.158 ops/s
# Warmup Iteration   2: 1372.061 ops/s
# Warmup Iteration   3: 1404.193 ops/s
# Warmup Iteration   4: 1829.996 ops/s
# Warmup Iteration   5: 2349.394 ops/s
# Warmup Iteration   6: 2283.731 ops/s
# Warmup Iteration   7: 2325.849 ops/s
# Warmup Iteration   8: 2267.930 ops/s
# Warmup Iteration   9: 2266.269 ops/s
# Warmup Iteration  10: 2270.583 ops/s
# Warmup Iteration  11: 2303.671 ops/s
# Warmup Iteration  12: 2311.507 ops/s
# Warmup Iteration  13: 2327.954 ops/s
# Warmup Iteration  14: 2343.188 ops/s
# Warmup Iteration  15: 2365.533 ops/s
# Warmup Iteration  16: 1619.812 ops/s
# Warmup Iteration  17: 2323.087 ops/s
# Warmup Iteration  18: 2370.705 ops/s
# Warmup Iteration  19: 2364.609 ops/s
# Warmup Iteration  20: 2368.436 ops/s
# Warmup Iteration  21: 2378.177 ops/s
# Warmup Iteration  22: 2385.239 ops/s
# Warmup Iteration  23: 2384.595 ops/s
# Warmup Iteration  24: 2376.396 ops/s
# Warmup Iteration  25: 2381.120 ops/s
# Warmup Iteration  26: 2391.729 ops/s
# Warmup Iteration  27: 2412.345 ops/s
# Warmup Iteration  28: 2400.577 ops/s
# Warmup Iteration  29: 2388.513 ops/s
# Warmup Iteration  30: 2369.773 ops/s
Iteration   1: 2389.375 ops/s
Iteration   2: 2416.002 ops/s
Iteration   3: 2424.009 ops/s
Iteration   4: 2407.166 ops/s
Iteration   5: 2395.824 ops/s
Iteration   6: 2416.309 ops/s
Iteration   7: 2408.996 ops/s
Iteration   8: 2378.997 ops/s
Iteration   9: 2366.780 ops/s
Iteration  10: 2360.395 ops/s
Iteration  11: 2356.929 ops/s
Iteration  12: 2377.640 ops/s
Iteration  13: 2421.261 ops/s
Iteration  14: 2430.639 ops/s
Iteration  15: 2432.827 ops/s
Iteration  16: 2425.906 ops/s
Iteration  17: 2434.206 ops/s
Iteration  18: 2425.696 ops/s
Iteration  19: 2419.918 ops/s
Iteration  20: 2418.794 ops/s
Iteration  21: 2389.816 ops/s
Iteration  22: 2413.676 ops/s
Iteration  23: 2404.598 ops/s
Iteration  24: 2370.907 ops/s
Iteration  25: 2358.876 ops/s
Iteration  26: 2394.425 ops/s
Iteration  27: 2422.485 ops/s
Iteration  28: 2415.158 ops/s
Iteration  29: 2413.481 ops/s
Iteration  30: 2416.468 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_consumer_remote":
  2403.585 ±(99.9%) 15.807 ops/s [Average]
  (min, avg, max) = (2356.929, 2403.585, 2434.206), stdev = 23.659
  CI (99.9%): [2387.779, 2419.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_consumer_remote  thrpt   30  2403.585 ± 15.807  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_dataMissingEndpointGoesOnFirstSpan$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_dataMissingEndpointGoesOnFirstSpan

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64393.394 ops/s
# Warmup Iteration   2: 106456.743 ops/s
# Warmup Iteration   3: 202528.993 ops/s
# Warmup Iteration   4: 230682.059 ops/s
# Warmup Iteration   5: 235774.560 ops/s
# Warmup Iteration   6: 236000.556 ops/s
# Warmup Iteration   7: 236364.759 ops/s
# Warmup Iteration   8: 163785.158 ops/s
# Warmup Iteration   9: 237792.818 ops/s
# Warmup Iteration  10: 236075.906 ops/s
# Warmup Iteration  11: 237340.890 ops/s
# Warmup Iteration  12: 238968.745 ops/s
# Warmup Iteration  13: 239297.909 ops/s
# Warmup Iteration  14: 238138.135 ops/s
# Warmup Iteration  15: 238136.049 ops/s
# Warmup Iteration  16: 238655.969 ops/s
# Warmup Iteration  17: 239076.912 ops/s
# Warmup Iteration  18: 240124.748 ops/s
# Warmup Iteration  19: 238745.831 ops/s
# Warmup Iteration  20: 238822.699 ops/s
# Warmup Iteration  21: 239638.696 ops/s
# Warmup Iteration  22: 241018.677 ops/s
# Warmup Iteration  23: 241191.836 ops/s
# Warmup Iteration  24: 239726.078 ops/s
# Warmup Iteration  25: 237969.077 ops/s
# Warmup Iteration  26: 239284.596 ops/s
# Warmup Iteration  27: 240050.432 ops/s
# Warmup Iteration  28: 239149.907 ops/s
# Warmup Iteration  29: 240688.657 ops/s
# Warmup Iteration  30: 240703.815 ops/s
Iteration   1: 239945.590 ops/s
Iteration   2: 240912.351 ops/s
Iteration   3: 238966.255 ops/s
Iteration   4: 242079.377 ops/s
Iteration   5: 239429.766 ops/s
Iteration   6: 240821.720 ops/s
Iteration   7: 240807.683 ops/s
Iteration   8: 241163.170 ops/s
Iteration   9: 240937.298 ops/s
Iteration  10: 240029.750 ops/s
Iteration  11: 241112.816 ops/s
Iteration  12: 241258.153 ops/s
Iteration  13: 241362.179 ops/s
Iteration  14: 239554.278 ops/s
Iteration  15: 240933.845 ops/s
Iteration  16: 241649.161 ops/s
Iteration  17: 241372.816 ops/s
Iteration  18: 240781.180 ops/s
Iteration  19: 238989.557 ops/s
Iteration  20: 240398.307 ops/s
Iteration  21: 239605.677 ops/s
Iteration  22: 238062.819 ops/s
Iteration  23: 240777.247 ops/s
Iteration  24: 239145.064 ops/s
Iteration  25: 240424.695 ops/s
Iteration  26: 241541.478 ops/s
Iteration  27: 240904.794 ops/s
Iteration  28: 239402.396 ops/s
Iteration  29: 239188.439 ops/s
Iteration  30: 240216.342 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_dataMissingEndpointGoesOnFirstSpan":
  240392.473 ±(99.9%) 648.408 ops/s [Average]
  (min, avg, max) = (238062.819, 240392.473, 242079.377), stdev = 970.506
  CI (99.9%): [239744.066, 241040.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
SpanConverterTest._Benchmark.benchmark_dataMissingEndpointGoesOnFirstSpan  thrpt   30  240392.473 ± 648.408  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ca$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ca

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1058.513 ops/s
# Warmup Iteration   2: 1625.627 ops/s
# Warmup Iteration   3: 1705.295 ops/s
# Warmup Iteration   4: 2064.992 ops/s
# Warmup Iteration   5: 2782.072 ops/s
# Warmup Iteration   6: 2735.301 ops/s
# Warmup Iteration   7: 2765.767 ops/s
# Warmup Iteration   8: 2662.261 ops/s
# Warmup Iteration   9: 2733.209 ops/s
# Warmup Iteration  10: 2678.001 ops/s
# Warmup Iteration  11: 2694.605 ops/s
# Warmup Iteration  12: 2687.999 ops/s
# Warmup Iteration  13: 2724.589 ops/s
# Warmup Iteration  14: 2668.867 ops/s
# Warmup Iteration  15: 2706.618 ops/s
# Warmup Iteration  16: 2462.078 ops/s
# Warmup Iteration  17: 2074.652 ops/s
# Warmup Iteration  18: 2804.268 ops/s
# Warmup Iteration  19: 2788.142 ops/s
# Warmup Iteration  20: 2746.240 ops/s
# Warmup Iteration  21: 2741.806 ops/s
# Warmup Iteration  22: 2769.354 ops/s
# Warmup Iteration  23: 2826.865 ops/s
# Warmup Iteration  24: 2833.214 ops/s
# Warmup Iteration  25: 2759.887 ops/s
# Warmup Iteration  26: 2781.617 ops/s
# Warmup Iteration  27: 2798.769 ops/s
# Warmup Iteration  28: 2818.184 ops/s
# Warmup Iteration  29: 2832.967 ops/s
# Warmup Iteration  30: 2827.850 ops/s
Iteration   1: 2865.527 ops/s
Iteration   2: 2866.339 ops/s
Iteration   3: 2828.379 ops/s
Iteration   4: 2827.739 ops/s
Iteration   5: 2810.244 ops/s
Iteration   6: 2842.055 ops/s
Iteration   7: 2818.533 ops/s
Iteration   8: 2810.604 ops/s
Iteration   9: 2841.213 ops/s
Iteration  10: 2819.262 ops/s
Iteration  11: 2857.178 ops/s
Iteration  12: 2853.411 ops/s
Iteration  13: 2841.315 ops/s
Iteration  14: 2808.719 ops/s
Iteration  15: 2801.488 ops/s
Iteration  16: 2821.196 ops/s
Iteration  17: 2788.144 ops/s
Iteration  18: 2794.500 ops/s
Iteration  19: 2794.533 ops/s
Iteration  20: 2798.086 ops/s
Iteration  21: 2808.548 ops/s
Iteration  22: 2799.386 ops/s
Iteration  23: 2818.269 ops/s
Iteration  24: 2784.766 ops/s
Iteration  25: 2779.244 ops/s
Iteration  26: 2814.398 ops/s
Iteration  27: 2783.107 ops/s
Iteration  28: 2782.617 ops/s
Iteration  29: 2786.385 ops/s
Iteration  30: 2787.417 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ca":
  2814.420 ±(99.9%) 17.191 ops/s [Average]
  (min, avg, max) = (2779.244, 2814.420, 2866.339), stdev = 25.731
  CI (99.9%): [2797.229, 2831.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ca  thrpt   30  2814.420 ± 17.191  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_cr$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_cr

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 820.621 ops/s
# Warmup Iteration   2: 1366.544 ops/s
# Warmup Iteration   3: 1433.759 ops/s
# Warmup Iteration   4: 1813.856 ops/s
# Warmup Iteration   5: 2298.060 ops/s
# Warmup Iteration   6: 2248.862 ops/s
# Warmup Iteration   7: 2280.766 ops/s
# Warmup Iteration   8: 2278.664 ops/s
# Warmup Iteration   9: 2323.589 ops/s
# Warmup Iteration  10: 2240.510 ops/s
# Warmup Iteration  11: 2249.795 ops/s
# Warmup Iteration  12: 2237.458 ops/s
# Warmup Iteration  13: 2329.537 ops/s
# Warmup Iteration  14: 2287.762 ops/s
# Warmup Iteration  15: 2290.901 ops/s
# Warmup Iteration  16: 1725.466 ops/s
# Warmup Iteration  17: 2156.328 ops/s
# Warmup Iteration  18: 2383.245 ops/s
# Warmup Iteration  19: 2361.713 ops/s
# Warmup Iteration  20: 2374.614 ops/s
# Warmup Iteration  21: 2371.198 ops/s
# Warmup Iteration  22: 2371.652 ops/s
# Warmup Iteration  23: 2355.088 ops/s
# Warmup Iteration  24: 2351.889 ops/s
# Warmup Iteration  25: 2346.376 ops/s
# Warmup Iteration  26: 2370.385 ops/s
# Warmup Iteration  27: 2388.871 ops/s
# Warmup Iteration  28: 2397.030 ops/s
# Warmup Iteration  29: 2374.475 ops/s
# Warmup Iteration  30: 2375.803 ops/s
Iteration   1: 2386.517 ops/s
Iteration   2: 2356.392 ops/s
Iteration   3: 2367.223 ops/s
Iteration   4: 2375.688 ops/s
Iteration   5: 2409.435 ops/s
Iteration   6: 2371.062 ops/s
Iteration   7: 2382.976 ops/s
Iteration   8: 2339.701 ops/s
Iteration   9: 2365.494 ops/s
Iteration  10: 2372.300 ops/s
Iteration  11: 2397.170 ops/s
Iteration  12: 2365.775 ops/s
Iteration  13: 2364.646 ops/s
Iteration  14: 2372.359 ops/s
Iteration  15: 2404.676 ops/s
Iteration  16: 2388.536 ops/s
Iteration  17: 2380.806 ops/s
Iteration  18: 2374.717 ops/s
Iteration  19: 2375.505 ops/s
Iteration  20: 2387.894 ops/s
Iteration  21: 2385.121 ops/s
Iteration  22: 2384.328 ops/s
Iteration  23: 2403.262 ops/s
Iteration  24: 2392.569 ops/s
Iteration  25: 2419.484 ops/s
Iteration  26: 2405.406 ops/s
Iteration  27: 2386.875 ops/s
Iteration  28: 2394.752 ops/s
Iteration  29: 2383.784 ops/s
Iteration  30: 2383.598 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_cr":
  2382.602 ±(99.9%) 11.270 ops/s [Average]
  (min, avg, max) = (2339.701, 2382.602, 2419.484), stdev = 16.869
  CI (99.9%): [2371.331, 2393.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_cr  thrpt   30  2382.602 ± 11.270  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_sa$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_sa

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1074.625 ops/s
# Warmup Iteration   2: 1671.296 ops/s
# Warmup Iteration   3: 1742.893 ops/s
# Warmup Iteration   4: 2170.157 ops/s
# Warmup Iteration   5: 2775.137 ops/s
# Warmup Iteration   6: 2719.100 ops/s
# Warmup Iteration   7: 2830.932 ops/s
# Warmup Iteration   8: 2691.809 ops/s
# Warmup Iteration   9: 2724.005 ops/s
# Warmup Iteration  10: 2741.732 ops/s
# Warmup Iteration  11: 2819.630 ops/s
# Warmup Iteration  12: 2701.194 ops/s
# Warmup Iteration  13: 2670.095 ops/s
# Warmup Iteration  14: 2709.921 ops/s
# Warmup Iteration  15: 2764.376 ops/s
# Warmup Iteration  16: 2266.830 ops/s
# Warmup Iteration  17: 2345.622 ops/s
# Warmup Iteration  18: 2819.945 ops/s
# Warmup Iteration  19: 2800.219 ops/s
# Warmup Iteration  20: 2794.408 ops/s
# Warmup Iteration  21: 2801.372 ops/s
# Warmup Iteration  22: 2812.030 ops/s
# Warmup Iteration  23: 2798.898 ops/s
# Warmup Iteration  24: 2771.700 ops/s
# Warmup Iteration  25: 2820.378 ops/s
# Warmup Iteration  26: 2798.470 ops/s
# Warmup Iteration  27: 2812.835 ops/s
# Warmup Iteration  28: 2866.307 ops/s
# Warmup Iteration  29: 2836.353 ops/s
# Warmup Iteration  30: 2806.370 ops/s
Iteration   1: 2769.355 ops/s
Iteration   2: 2792.631 ops/s
Iteration   3: 2776.516 ops/s
Iteration   4: 2809.712 ops/s
Iteration   5: 2790.780 ops/s
Iteration   6: 2790.744 ops/s
Iteration   7: 2792.533 ops/s
Iteration   8: 2789.234 ops/s
Iteration   9: 2807.559 ops/s
Iteration  10: 2840.343 ops/s
Iteration  11: 2852.700 ops/s
Iteration  12: 2812.619 ops/s
Iteration  13: 2865.235 ops/s
Iteration  14: 2869.854 ops/s
Iteration  15: 2822.487 ops/s
Iteration  16: 2863.355 ops/s
Iteration  17: 2860.672 ops/s
Iteration  18: 2864.281 ops/s
Iteration  19: 2857.387 ops/s
Iteration  20: 2838.729 ops/s
Iteration  21: 2874.212 ops/s
Iteration  22: 2874.754 ops/s
Iteration  23: 2848.186 ops/s
Iteration  24: 2878.784 ops/s
Iteration  25: 2880.006 ops/s
Iteration  26: 2873.423 ops/s
Iteration  27: 2865.724 ops/s
Iteration  28: 2820.098 ops/s
Iteration  29: 2851.129 ops/s
Iteration  30: 2831.768 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_sa":
  2835.494 ±(99.9%) 23.155 ops/s [Average]
  (min, avg, max) = (2769.355, 2835.494, 2880.006), stdev = 34.658
  CI (99.9%): [2812.339, 2858.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_sa  thrpt   30  2835.494 ± 23.155  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ss$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ss

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 854.430 ops/s
# Warmup Iteration   2: 1331.626 ops/s
# Warmup Iteration   3: 1384.231 ops/s
# Warmup Iteration   4: 1684.065 ops/s
# Warmup Iteration   5: 2258.518 ops/s
# Warmup Iteration   6: 2243.552 ops/s
# Warmup Iteration   7: 2277.312 ops/s
# Warmup Iteration   8: 2242.913 ops/s
# Warmup Iteration   9: 2292.797 ops/s
# Warmup Iteration  10: 2245.301 ops/s
# Warmup Iteration  11: 2273.195 ops/s
# Warmup Iteration  12: 2292.537 ops/s
# Warmup Iteration  13: 2260.894 ops/s
# Warmup Iteration  14: 2227.787 ops/s
# Warmup Iteration  15: 2263.616 ops/s
# Warmup Iteration  16: 1814.277 ops/s
# Warmup Iteration  17: 1927.888 ops/s
# Warmup Iteration  18: 2252.858 ops/s
# Warmup Iteration  19: 2234.320 ops/s
# Warmup Iteration  20: 2282.446 ops/s
# Warmup Iteration  21: 2266.616 ops/s
# Warmup Iteration  22: 2268.388 ops/s
# Warmup Iteration  23: 2266.283 ops/s
# Warmup Iteration  24: 2242.993 ops/s
# Warmup Iteration  25: 2269.165 ops/s
# Warmup Iteration  26: 2245.997 ops/s
# Warmup Iteration  27: 2283.602 ops/s
# Warmup Iteration  28: 2267.115 ops/s
# Warmup Iteration  29: 2271.246 ops/s
# Warmup Iteration  30: 2258.833 ops/s
Iteration   1: 2263.201 ops/s
Iteration   2: 2272.333 ops/s
Iteration   3: 2299.153 ops/s
Iteration   4: 2289.546 ops/s
Iteration   5: 2296.176 ops/s
Iteration   6: 2274.091 ops/s
Iteration   7: 2299.737 ops/s
Iteration   8: 2303.602 ops/s
Iteration   9: 2294.123 ops/s
Iteration  10: 2290.453 ops/s
Iteration  11: 2303.153 ops/s
Iteration  12: 2275.108 ops/s
Iteration  13: 2318.284 ops/s
Iteration  14: 2281.475 ops/s
Iteration  15: 2283.562 ops/s
Iteration  16: 2285.465 ops/s
Iteration  17: 2284.066 ops/s
Iteration  18: 2304.325 ops/s
Iteration  19: 2317.160 ops/s
Iteration  20: 2296.429 ops/s
Iteration  21: 2305.416 ops/s
Iteration  22: 2297.263 ops/s
Iteration  23: 2303.093 ops/s
Iteration  24: 2314.968 ops/s
Iteration  25: 2311.781 ops/s
Iteration  26: 2298.447 ops/s
Iteration  27: 2286.595 ops/s
Iteration  28: 2298.180 ops/s
Iteration  29: 2315.711 ops/s
Iteration  30: 2291.010 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ss":
  2295.130 ±(99.9%) 9.312 ops/s [Average]
  (min, avg, max) = (2263.201, 2295.130, 2318.284), stdev = 13.938
  CI (99.9%): [2285.818, 2304.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt     Score   Error  Units
SpanConverterTest._Benchmark.benchmark_lateRemoteEndpoint_ss  thrpt   30  2295.130 ± 9.312  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_localSpan_emptyComponent$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_localSpan_emptyComponent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757.008 ops/s
# Warmup Iteration   2: 1065.447 ops/s
# Warmup Iteration   3: 1115.605 ops/s
# Warmup Iteration   4: 1296.087 ops/s
# Warmup Iteration   5: 1974.467 ops/s
# Warmup Iteration   6: 1922.399 ops/s
# Warmup Iteration   7: 1970.371 ops/s
# Warmup Iteration   8: 1941.109 ops/s
# Warmup Iteration   9: 1961.568 ops/s
# Warmup Iteration  10: 1948.012 ops/s
# Warmup Iteration  11: 1913.585 ops/s
# Warmup Iteration  12: 1923.215 ops/s
# Warmup Iteration  13: 1919.869 ops/s
# Warmup Iteration  14: 1920.154 ops/s
# Warmup Iteration  15: 1957.623 ops/s
# Warmup Iteration  16: 1702.346 ops/s
# Warmup Iteration  17: 1368.787 ops/s
# Warmup Iteration  18: 2053.599 ops/s
# Warmup Iteration  19: 2033.271 ops/s
# Warmup Iteration  20: 2023.330 ops/s
# Warmup Iteration  21: 2023.215 ops/s
# Warmup Iteration  22: 2018.143 ops/s
# Warmup Iteration  23: 1974.588 ops/s
# Warmup Iteration  24: 2019.608 ops/s
# Warmup Iteration  25: 2011.159 ops/s
# Warmup Iteration  26: 2025.470 ops/s
# Warmup Iteration  27: 2017.106 ops/s
# Warmup Iteration  28: 1994.758 ops/s
# Warmup Iteration  29: 1995.781 ops/s
# Warmup Iteration  30: 2010.388 ops/s
Iteration   1: 2027.014 ops/s
Iteration   2: 2061.225 ops/s
Iteration   3: 2045.116 ops/s
Iteration   4: 2034.507 ops/s
Iteration   5: 2029.208 ops/s
Iteration   6: 2035.817 ops/s
Iteration   7: 2056.332 ops/s
Iteration   8: 2055.021 ops/s
Iteration   9: 2057.350 ops/s
Iteration  10: 2041.001 ops/s
Iteration  11: 2053.869 ops/s
Iteration  12: 2061.668 ops/s
Iteration  13: 2060.901 ops/s
Iteration  14: 2051.226 ops/s
Iteration  15: 2007.991 ops/s
Iteration  16: 2024.104 ops/s
Iteration  17: 2040.973 ops/s
Iteration  18: 2054.600 ops/s
Iteration  19: 2065.405 ops/s
Iteration  20: 2051.897 ops/s
Iteration  21: 2057.859 ops/s
Iteration  22: 2067.882 ops/s
Iteration  23: 2070.769 ops/s
Iteration  24: 2056.174 ops/s
Iteration  25: 2029.346 ops/s
Iteration  26: 2048.824 ops/s
Iteration  27: 2034.030 ops/s
Iteration  28: 2023.962 ops/s
Iteration  29: 2048.021 ops/s
Iteration  30: 2034.749 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_localSpan_emptyComponent":
  2046.228 ±(99.9%) 10.249 ops/s [Average]
  (min, avg, max) = (2007.991, 2046.228, 2070.769), stdev = 15.340
  CI (99.9%): [2035.979, 2056.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_localSpan_emptyComponent  thrpt   30  2046.228 ± 10.249  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_missingEndpoints$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_missingEndpoints

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1715.841 ops/s
# Warmup Iteration   2: 2502.113 ops/s
# Warmup Iteration   3: 2593.709 ops/s
# Warmup Iteration   4: 3414.611 ops/s
# Warmup Iteration   5: 4100.115 ops/s
# Warmup Iteration   6: 4159.666 ops/s
# Warmup Iteration   7: 4147.956 ops/s
# Warmup Iteration   8: 4020.173 ops/s
# Warmup Iteration   9: 4140.935 ops/s
# Warmup Iteration  10: 3947.087 ops/s
# Warmup Iteration  11: 3959.037 ops/s
# Warmup Iteration  12: 3986.605 ops/s
# Warmup Iteration  13: 3959.593 ops/s
# Warmup Iteration  14: 3970.981 ops/s
# Warmup Iteration  15: 3896.130 ops/s
# Warmup Iteration  16: 2627.142 ops/s
# Warmup Iteration  17: 4089.467 ops/s
# Warmup Iteration  18: 4214.945 ops/s
# Warmup Iteration  19: 4209.329 ops/s
# Warmup Iteration  20: 4133.624 ops/s
# Warmup Iteration  21: 4143.342 ops/s
# Warmup Iteration  22: 4203.240 ops/s
# Warmup Iteration  23: 4197.108 ops/s
# Warmup Iteration  24: 4180.859 ops/s
# Warmup Iteration  25: 4145.993 ops/s
# Warmup Iteration  26: 4172.949 ops/s
# Warmup Iteration  27: 4219.660 ops/s
# Warmup Iteration  28: 4222.559 ops/s
# Warmup Iteration  29: 4194.976 ops/s
# Warmup Iteration  30: 4155.724 ops/s
Iteration   1: 4207.372 ops/s
Iteration   2: 4234.220 ops/s
Iteration   3: 4225.330 ops/s
Iteration   4: 4198.700 ops/s
Iteration   5: 4126.915 ops/s
Iteration   6: 4169.706 ops/s
Iteration   7: 4181.996 ops/s
Iteration   8: 4190.552 ops/s
Iteration   9: 4191.639 ops/s
Iteration  10: 4150.414 ops/s
Iteration  11: 4176.469 ops/s
Iteration  12: 4215.816 ops/s
Iteration  13: 4202.908 ops/s
Iteration  14: 4200.447 ops/s
Iteration  15: 4172.934 ops/s
Iteration  16: 4220.276 ops/s
Iteration  17: 4221.545 ops/s
Iteration  18: 4201.883 ops/s
Iteration  19: 4226.679 ops/s
Iteration  20: 4191.322 ops/s
Iteration  21: 4215.267 ops/s
Iteration  22: 4204.710 ops/s
Iteration  23: 4192.642 ops/s
Iteration  24: 4220.935 ops/s
Iteration  25: 4204.872 ops/s
Iteration  26: 4214.022 ops/s
Iteration  27: 4195.151 ops/s
Iteration  28: 4224.785 ops/s
Iteration  29: 4146.530 ops/s
Iteration  30: 4170.427 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_missingEndpoints":
  4196.549 ±(99.9%) 17.219 ops/s [Average]
  (min, avg, max) = (4126.915, 4196.549, 4234.220), stdev = 25.773
  CI (99.9%): [4179.330, 4213.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_missingEndpoints  thrpt   30  4196.549 ± 17.219  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_missingEndpoints_coreAnnotation$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_missingEndpoints_coreAnnotation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1286.472 ops/s
# Warmup Iteration   2: 1843.107 ops/s
# Warmup Iteration   3: 1966.931 ops/s
# Warmup Iteration   4: 2604.766 ops/s
# Warmup Iteration   5: 3126.206 ops/s
# Warmup Iteration   6: 3144.825 ops/s
# Warmup Iteration   7: 3166.407 ops/s
# Warmup Iteration   8: 3117.228 ops/s
# Warmup Iteration   9: 3140.137 ops/s
# Warmup Iteration  10: 3102.558 ops/s
# Warmup Iteration  11: 3103.944 ops/s
# Warmup Iteration  12: 3162.341 ops/s
# Warmup Iteration  13: 3167.081 ops/s
# Warmup Iteration  14: 3145.130 ops/s
# Warmup Iteration  15: 2773.507 ops/s
# Warmup Iteration  16: 2365.009 ops/s
# Warmup Iteration  17: 3118.590 ops/s
# Warmup Iteration  18: 3171.085 ops/s
# Warmup Iteration  19: 3142.062 ops/s
# Warmup Iteration  20: 3152.887 ops/s
# Warmup Iteration  21: 3197.687 ops/s
# Warmup Iteration  22: 3216.100 ops/s
# Warmup Iteration  23: 3155.868 ops/s
# Warmup Iteration  24: 3233.691 ops/s
# Warmup Iteration  25: 3151.108 ops/s
# Warmup Iteration  26: 3146.415 ops/s
# Warmup Iteration  27: 3136.349 ops/s
# Warmup Iteration  28: 3132.722 ops/s
# Warmup Iteration  29: 3194.645 ops/s
# Warmup Iteration  30: 3215.444 ops/s
Iteration   1: 3167.923 ops/s
Iteration   2: 3131.959 ops/s
Iteration   3: 3131.617 ops/s
Iteration   4: 3128.582 ops/s
Iteration   5: 3222.986 ops/s
Iteration   6: 3229.170 ops/s
Iteration   7: 3197.957 ops/s
Iteration   8: 3219.762 ops/s
Iteration   9: 3213.934 ops/s
Iteration  10: 3214.663 ops/s
Iteration  11: 3256.707 ops/s
Iteration  12: 3245.747 ops/s
Iteration  13: 3244.642 ops/s
Iteration  14: 3190.723 ops/s
Iteration  15: 3243.242 ops/s
Iteration  16: 3214.531 ops/s
Iteration  17: 3225.764 ops/s
Iteration  18: 3221.982 ops/s
Iteration  19: 3221.969 ops/s
Iteration  20: 3257.466 ops/s
Iteration  21: 3254.484 ops/s
Iteration  22: 3200.836 ops/s
Iteration  23: 3201.501 ops/s
Iteration  24: 3223.490 ops/s
Iteration  25: 3243.778 ops/s
Iteration  26: 3212.857 ops/s
Iteration  27: 3215.009 ops/s
Iteration  28: 3218.392 ops/s
Iteration  29: 3232.998 ops/s
Iteration  30: 3213.397 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_missingEndpoints_coreAnnotation":
  3213.269 ±(99.9%) 22.935 ops/s [Average]
  (min, avg, max) = (3128.582, 3213.269, 3257.466), stdev = 34.328
  CI (99.9%): [3190.334, 3236.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_missingEndpoints_coreAnnotation  thrpt   30  3213.269 ± 22.935  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_noAnnotationsExceptAddresses$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_noAnnotationsExceptAddresses

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779.211 ops/s
# Warmup Iteration   2: 1194.172 ops/s
# Warmup Iteration   3: 1262.933 ops/s
# Warmup Iteration   4: 1369.149 ops/s
# Warmup Iteration   5: 1997.837 ops/s
# Warmup Iteration   6: 1957.051 ops/s
# Warmup Iteration   7: 2000.310 ops/s
# Warmup Iteration   8: 1980.721 ops/s
# Warmup Iteration   9: 1983.577 ops/s
# Warmup Iteration  10: 2007.559 ops/s
# Warmup Iteration  11: 1985.727 ops/s
# Warmup Iteration  12: 2006.085 ops/s
# Warmup Iteration  13: 2005.617 ops/s
# Warmup Iteration  14: 2009.499 ops/s
# Warmup Iteration  15: 1987.779 ops/s
# Warmup Iteration  16: 2008.726 ops/s
# Warmup Iteration  17: 1728.052 ops/s
# Warmup Iteration  18: 1598.083 ops/s
# Warmup Iteration  19: 2082.329 ops/s
# Warmup Iteration  20: 2075.639 ops/s
# Warmup Iteration  21: 2037.918 ops/s
# Warmup Iteration  22: 2043.580 ops/s
# Warmup Iteration  23: 2063.174 ops/s
# Warmup Iteration  24: 2056.039 ops/s
# Warmup Iteration  25: 2054.006 ops/s
# Warmup Iteration  26: 2057.863 ops/s
# Warmup Iteration  27: 2053.176 ops/s
# Warmup Iteration  28: 2039.435 ops/s
# Warmup Iteration  29: 2044.698 ops/s
# Warmup Iteration  30: 2052.966 ops/s
Iteration   1: 2055.504 ops/s
Iteration   2: 2102.794 ops/s
Iteration   3: 2043.560 ops/s
Iteration   4: 2046.616 ops/s
Iteration   5: 2065.350 ops/s
Iteration   6: 2049.569 ops/s
Iteration   7: 2059.999 ops/s
Iteration   8: 2047.788 ops/s
Iteration   9: 2083.503 ops/s
Iteration  10: 2083.869 ops/s
Iteration  11: 2043.831 ops/s
Iteration  12: 2095.268 ops/s
Iteration  13: 2083.556 ops/s
Iteration  14: 2059.702 ops/s
Iteration  15: 2072.901 ops/s
Iteration  16: 2039.650 ops/s
Iteration  17: 2045.633 ops/s
Iteration  18: 2047.104 ops/s
Iteration  19: 2062.136 ops/s
Iteration  20: 2028.303 ops/s
Iteration  21: 2025.548 ops/s
Iteration  22: 2027.432 ops/s
Iteration  23: 2011.046 ops/s
Iteration  24: 2026.534 ops/s
Iteration  25: 2012.940 ops/s
Iteration  26: 2024.889 ops/s
Iteration  27: 2020.931 ops/s
Iteration  28: 2016.840 ops/s
Iteration  29: 2094.715 ops/s
Iteration  30: 2099.253 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_noAnnotationsExceptAddresses":
  2052.559 ±(99.9%) 18.157 ops/s [Average]
  (min, avg, max) = (2011.046, 2052.559, 2102.794), stdev = 27.176
  CI (99.9%): [2034.402, 2070.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_noAnnotationsExceptAddresses  thrpt   30  2052.559 ± 18.157  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_oneway_loopback$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_oneway_loopback

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101612.423 ops/s
# Warmup Iteration   2: 165700.095 ops/s
# Warmup Iteration   3: 323430.164 ops/s
# Warmup Iteration   4: 356360.289 ops/s
# Warmup Iteration   5: 359644.939 ops/s
# Warmup Iteration   6: 360373.745 ops/s
# Warmup Iteration   7: 357879.672 ops/s
# Warmup Iteration   8: 258664.844 ops/s
# Warmup Iteration   9: 361001.509 ops/s
# Warmup Iteration  10: 362319.394 ops/s
# Warmup Iteration  11: 361995.588 ops/s
# Warmup Iteration  12: 364061.783 ops/s
# Warmup Iteration  13: 361104.387 ops/s
# Warmup Iteration  14: 363583.794 ops/s
# Warmup Iteration  15: 363987.110 ops/s
# Warmup Iteration  16: 363267.178 ops/s
# Warmup Iteration  17: 363471.018 ops/s
# Warmup Iteration  18: 363731.162 ops/s
# Warmup Iteration  19: 360202.281 ops/s
# Warmup Iteration  20: 363783.392 ops/s
# Warmup Iteration  21: 362428.749 ops/s
# Warmup Iteration  22: 362795.496 ops/s
# Warmup Iteration  23: 361827.346 ops/s
# Warmup Iteration  24: 363403.615 ops/s
# Warmup Iteration  25: 363238.029 ops/s
# Warmup Iteration  26: 360125.255 ops/s
# Warmup Iteration  27: 362791.487 ops/s
# Warmup Iteration  28: 359202.605 ops/s
# Warmup Iteration  29: 362800.774 ops/s
# Warmup Iteration  30: 361771.982 ops/s
Iteration   1: 360668.225 ops/s
Iteration   2: 359126.222 ops/s
Iteration   3: 360880.944 ops/s
Iteration   4: 358949.778 ops/s
Iteration   5: 363941.241 ops/s
Iteration   6: 361898.243 ops/s
Iteration   7: 361365.873 ops/s
Iteration   8: 359176.492 ops/s
Iteration   9: 361649.642 ops/s
Iteration  10: 362933.453 ops/s
Iteration  11: 361693.787 ops/s
Iteration  12: 360262.913 ops/s
Iteration  13: 360708.132 ops/s
Iteration  14: 360682.403 ops/s
Iteration  15: 363450.410 ops/s
Iteration  16: 361433.934 ops/s
Iteration  17: 361056.332 ops/s
Iteration  18: 364307.504 ops/s
Iteration  19: 362119.388 ops/s
Iteration  20: 364739.711 ops/s
Iteration  21: 363395.896 ops/s
Iteration  22: 358047.417 ops/s
Iteration  23: 362369.641 ops/s
Iteration  24: 362179.163 ops/s
Iteration  25: 360165.852 ops/s
Iteration  26: 362006.269 ops/s
Iteration  27: 356442.014 ops/s
Iteration  28: 356386.856 ops/s
Iteration  29: 363340.267 ops/s
Iteration  30: 363650.695 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_oneway_loopback":
  361300.956 ±(99.9%) 1413.341 ops/s [Average]
  (min, avg, max) = (356386.856, 361300.956, 364739.711), stdev = 2115.423
  CI (99.9%): [359887.615, 362714.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_oneway_loopback  thrpt   30  361300.956 ± 1413.341  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_onlyAddressAnnotations$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_onlyAddressAnnotations

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 136670.565 ops/s
# Warmup Iteration   2: 203591.729 ops/s
# Warmup Iteration   3: 431944.231 ops/s
# Warmup Iteration   4: 451979.683 ops/s
# Warmup Iteration   5: 456492.029 ops/s
# Warmup Iteration   6: 458004.831 ops/s
# Warmup Iteration   7: 410875.972 ops/s
# Warmup Iteration   8: 366983.728 ops/s
# Warmup Iteration   9: 459695.671 ops/s
# Warmup Iteration  10: 459760.144 ops/s
# Warmup Iteration  11: 459445.103 ops/s
# Warmup Iteration  12: 460297.103 ops/s
# Warmup Iteration  13: 458174.981 ops/s
# Warmup Iteration  14: 457058.589 ops/s
# Warmup Iteration  15: 458049.952 ops/s
# Warmup Iteration  16: 460098.543 ops/s
# Warmup Iteration  17: 456986.872 ops/s
# Warmup Iteration  18: 455893.280 ops/s
# Warmup Iteration  19: 454814.239 ops/s
# Warmup Iteration  20: 458571.352 ops/s
# Warmup Iteration  21: 457622.454 ops/s
# Warmup Iteration  22: 456143.604 ops/s
# Warmup Iteration  23: 457600.416 ops/s
# Warmup Iteration  24: 457283.726 ops/s
# Warmup Iteration  25: 457594.896 ops/s
# Warmup Iteration  26: 458614.558 ops/s
# Warmup Iteration  27: 456088.071 ops/s
# Warmup Iteration  28: 456405.219 ops/s
# Warmup Iteration  29: 454010.201 ops/s
# Warmup Iteration  30: 459679.041 ops/s
Iteration   1: 457391.224 ops/s
Iteration   2: 456279.965 ops/s
Iteration   3: 456656.235 ops/s
Iteration   4: 456555.906 ops/s
Iteration   5: 456076.368 ops/s
Iteration   6: 459922.507 ops/s
Iteration   7: 458783.339 ops/s
Iteration   8: 454857.886 ops/s
Iteration   9: 455490.294 ops/s
Iteration  10: 457722.634 ops/s
Iteration  11: 457091.675 ops/s
Iteration  12: 454206.795 ops/s
Iteration  13: 455917.428 ops/s
Iteration  14: 453578.811 ops/s
Iteration  15: 455625.244 ops/s
Iteration  16: 452290.358 ops/s
Iteration  17: 455628.526 ops/s
Iteration  18: 450975.873 ops/s
Iteration  19: 457153.926 ops/s
Iteration  20: 456374.144 ops/s
Iteration  21: 457930.857 ops/s
Iteration  22: 458118.364 ops/s
Iteration  23: 453192.059 ops/s
Iteration  24: 451709.133 ops/s
Iteration  25: 454575.608 ops/s
Iteration  26: 453176.982 ops/s
Iteration  27: 453352.469 ops/s
Iteration  28: 456758.943 ops/s
Iteration  29: 457178.699 ops/s
Iteration  30: 460240.513 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_onlyAddressAnnotations":
  455827.092 ±(99.9%) 1529.700 ops/s [Average]
  (min, avg, max) = (450975.873, 455827.092, 460240.513), stdev = 2289.583
  CI (99.9%): [454297.392, 457356.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_onlyAddressAnnotations  thrpt   30  455827.092 ± 1529.700  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_parsesSharedFlagFromRPCSpan$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_parsesSharedFlagFromRPCSpan

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125906.983 ops/s
# Warmup Iteration   2: 195866.120 ops/s
# Warmup Iteration   3: 404970.825 ops/s
# Warmup Iteration   4: 442573.105 ops/s
# Warmup Iteration   5: 447680.471 ops/s
# Warmup Iteration   6: 447768.267 ops/s
# Warmup Iteration   7: 443069.172 ops/s
# Warmup Iteration   8: 320365.079 ops/s
# Warmup Iteration   9: 449758.641 ops/s
# Warmup Iteration  10: 451098.109 ops/s
# Warmup Iteration  11: 451829.433 ops/s
# Warmup Iteration  12: 450007.825 ops/s
# Warmup Iteration  13: 451161.627 ops/s
# Warmup Iteration  14: 450762.471 ops/s
# Warmup Iteration  15: 453560.891 ops/s
# Warmup Iteration  16: 452469.484 ops/s
# Warmup Iteration  17: 450814.912 ops/s
# Warmup Iteration  18: 450341.573 ops/s
# Warmup Iteration  19: 452095.639 ops/s
# Warmup Iteration  20: 452600.359 ops/s
# Warmup Iteration  21: 450780.352 ops/s
# Warmup Iteration  22: 449738.828 ops/s
# Warmup Iteration  23: 452914.506 ops/s
# Warmup Iteration  24: 449583.438 ops/s
# Warmup Iteration  25: 453215.692 ops/s
# Warmup Iteration  26: 452200.461 ops/s
# Warmup Iteration  27: 448284.717 ops/s
# Warmup Iteration  28: 449169.654 ops/s
# Warmup Iteration  29: 449593.049 ops/s
# Warmup Iteration  30: 451978.542 ops/s
Iteration   1: 449457.251 ops/s
Iteration   2: 448300.302 ops/s
Iteration   3: 446697.233 ops/s
Iteration   4: 449375.906 ops/s
Iteration   5: 449912.499 ops/s
Iteration   6: 447812.971 ops/s
Iteration   7: 448755.432 ops/s
Iteration   8: 448715.692 ops/s
Iteration   9: 453275.450 ops/s
Iteration  10: 449369.815 ops/s
Iteration  11: 451835.646 ops/s
Iteration  12: 451772.505 ops/s
Iteration  13: 454239.994 ops/s
Iteration  14: 453052.510 ops/s
Iteration  15: 451361.952 ops/s
Iteration  16: 450847.436 ops/s
Iteration  17: 451244.931 ops/s
Iteration  18: 449692.314 ops/s
Iteration  19: 453060.965 ops/s
Iteration  20: 453287.466 ops/s
Iteration  21: 451979.595 ops/s
Iteration  22: 451827.565 ops/s
Iteration  23: 451605.347 ops/s
Iteration  24: 450847.427 ops/s
Iteration  25: 450007.388 ops/s
Iteration  26: 451935.768 ops/s
Iteration  27: 450339.299 ops/s
Iteration  28: 451363.879 ops/s
Iteration  29: 452514.723 ops/s
Iteration  30: 451727.290 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_parsesSharedFlagFromRPCSpan":
  450873.885 ±(99.9%) 1205.870 ops/s [Average]
  (min, avg, max) = (446697.233, 450873.885, 454239.994), stdev = 1804.889
  CI (99.9%): [449668.015, 452079.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_parsesSharedFlagFromRPCSpan  thrpt   30  450873.885 ± 1205.870  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131688.332 ops/s
# Warmup Iteration   2: 198758.880 ops/s
# Warmup Iteration   3: 411352.317 ops/s
# Warmup Iteration   4: 454835.126 ops/s
# Warmup Iteration   5: 449696.963 ops/s
# Warmup Iteration   6: 446374.282 ops/s
# Warmup Iteration   7: 435552.418 ops/s
# Warmup Iteration   8: 324345.059 ops/s
# Warmup Iteration   9: 451758.668 ops/s
# Warmup Iteration  10: 453376.499 ops/s
# Warmup Iteration  11: 452337.705 ops/s
# Warmup Iteration  12: 453419.011 ops/s
# Warmup Iteration  13: 453431.077 ops/s
# Warmup Iteration  14: 455156.294 ops/s
# Warmup Iteration  15: 453693.907 ops/s
# Warmup Iteration  16: 454036.392 ops/s
# Warmup Iteration  17: 453849.818 ops/s
# Warmup Iteration  18: 452298.874 ops/s
# Warmup Iteration  19: 455451.306 ops/s
# Warmup Iteration  20: 454452.462 ops/s
# Warmup Iteration  21: 455858.572 ops/s
# Warmup Iteration  22: 455099.525 ops/s
# Warmup Iteration  23: 452723.545 ops/s
# Warmup Iteration  24: 455655.228 ops/s
# Warmup Iteration  25: 454538.980 ops/s
# Warmup Iteration  26: 455186.808 ops/s
# Warmup Iteration  27: 452357.810 ops/s
# Warmup Iteration  28: 451220.235 ops/s
# Warmup Iteration  29: 451004.137 ops/s
# Warmup Iteration  30: 452139.914 ops/s
Iteration   1: 452855.635 ops/s
Iteration   2: 450621.628 ops/s
Iteration   3: 454755.149 ops/s
Iteration   4: 452522.624 ops/s
Iteration   5: 456871.621 ops/s
Iteration   6: 452340.290 ops/s
Iteration   7: 454417.943 ops/s
Iteration   8: 453312.837 ops/s
Iteration   9: 456353.278 ops/s
Iteration  10: 453508.613 ops/s
Iteration  11: 453854.749 ops/s
Iteration  12: 451696.950 ops/s
Iteration  13: 454393.142 ops/s
Iteration  14: 452043.881 ops/s
Iteration  15: 452495.564 ops/s
Iteration  16: 454881.297 ops/s
Iteration  17: 453004.724 ops/s
Iteration  18: 456157.013 ops/s
Iteration  19: 453738.390 ops/s
Iteration  20: 456624.755 ops/s
Iteration  21: 448628.230 ops/s
Iteration  22: 454161.209 ops/s
Iteration  23: 449966.974 ops/s
Iteration  24: 450773.775 ops/s
Iteration  25: 451510.736 ops/s
Iteration  26: 452172.354 ops/s
Iteration  27: 449645.811 ops/s
Iteration  28: 452917.758 ops/s
Iteration  29: 454156.045 ops/s
Iteration  30: 452933.118 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer":
  453110.536 ±(99.9%) 1361.903 ops/s [Average]
  (min, avg, max) = (448628.230, 453110.536, 456871.621), stdev = 2038.433
  CI (99.9%): [451748.633, 454472.439] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_producer  thrpt   30  453110.536 ± 1361.903  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producerAndConsumer$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producerAndConsumer

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95839.463 ops/s
# Warmup Iteration   2: 141812.426 ops/s
# Warmup Iteration   3: 263991.315 ops/s
# Warmup Iteration   4: 317887.475 ops/s
# Warmup Iteration   5: 315861.694 ops/s
# Warmup Iteration   6: 318528.605 ops/s
# Warmup Iteration   7: 316614.250 ops/s
# Warmup Iteration   8: 258689.568 ops/s
# Warmup Iteration   9: 276167.728 ops/s
# Warmup Iteration  10: 319836.109 ops/s
# Warmup Iteration  11: 315692.133 ops/s
# Warmup Iteration  12: 318845.225 ops/s
# Warmup Iteration  13: 319238.505 ops/s
# Warmup Iteration  14: 320734.503 ops/s
# Warmup Iteration  15: 318250.897 ops/s
# Warmup Iteration  16: 317326.657 ops/s
# Warmup Iteration  17: 317747.284 ops/s
# Warmup Iteration  18: 320366.297 ops/s
# Warmup Iteration  19: 320064.563 ops/s
# Warmup Iteration  20: 318292.781 ops/s
# Warmup Iteration  21: 318214.403 ops/s
# Warmup Iteration  22: 318642.109 ops/s
# Warmup Iteration  23: 318387.370 ops/s
# Warmup Iteration  24: 318258.994 ops/s
# Warmup Iteration  25: 316748.734 ops/s
# Warmup Iteration  26: 316676.296 ops/s
# Warmup Iteration  27: 316446.546 ops/s
# Warmup Iteration  28: 319803.164 ops/s
# Warmup Iteration  29: 317353.994 ops/s
# Warmup Iteration  30: 317589.602 ops/s
Iteration   1: 317425.778 ops/s
Iteration   2: 317991.569 ops/s
Iteration   3: 316927.982 ops/s
Iteration   4: 313567.008 ops/s
Iteration   5: 315902.532 ops/s
Iteration   6: 317388.885 ops/s
Iteration   7: 317689.564 ops/s
Iteration   8: 320116.727 ops/s
Iteration   9: 315030.237 ops/s
Iteration  10: 319968.570 ops/s
Iteration  11: 316643.981 ops/s
Iteration  12: 317194.720 ops/s
Iteration  13: 314833.844 ops/s
Iteration  14: 317596.584 ops/s
Iteration  15: 318206.965 ops/s
Iteration  16: 317918.160 ops/s
Iteration  17: 317263.878 ops/s
Iteration  18: 318137.566 ops/s
Iteration  19: 317614.597 ops/s
Iteration  20: 316490.759 ops/s
Iteration  21: 319924.967 ops/s
Iteration  22: 316266.026 ops/s
Iteration  23: 314734.086 ops/s
Iteration  24: 315909.835 ops/s
Iteration  25: 316448.569 ops/s
Iteration  26: 319094.456 ops/s
Iteration  27: 316325.254 ops/s
Iteration  28: 318273.384 ops/s
Iteration  29: 318933.720 ops/s
Iteration  30: 316488.506 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producerAndConsumer":
  317210.290 ±(99.9%) 1049.544 ops/s [Average]
  (min, avg, max) = (313567.008, 317210.290, 320116.727), stdev = 1570.908
  CI (99.9%): [316160.747, 318259.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_producerAndConsumer  thrpt   30  317210.290 ± 1049.544  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producerAndConsumer_loopback_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producerAndConsumer_loopback_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88294.938 ops/s
# Warmup Iteration   2: 160348.878 ops/s
# Warmup Iteration   3: 289839.147 ops/s
# Warmup Iteration   4: 333733.471 ops/s
# Warmup Iteration   5: 333237.748 ops/s
# Warmup Iteration   6: 336441.535 ops/s
# Warmup Iteration   7: 334052.893 ops/s
# Warmup Iteration   8: 262304.100 ops/s
# Warmup Iteration   9: 314106.714 ops/s
# Warmup Iteration  10: 340293.558 ops/s
# Warmup Iteration  11: 340147.169 ops/s
# Warmup Iteration  12: 339589.480 ops/s
# Warmup Iteration  13: 340474.343 ops/s
# Warmup Iteration  14: 342482.487 ops/s
# Warmup Iteration  15: 343264.450 ops/s
# Warmup Iteration  16: 340762.634 ops/s
# Warmup Iteration  17: 342568.136 ops/s
# Warmup Iteration  18: 342226.445 ops/s
# Warmup Iteration  19: 341351.455 ops/s
# Warmup Iteration  20: 339754.821 ops/s
# Warmup Iteration  21: 340923.545 ops/s
# Warmup Iteration  22: 339669.746 ops/s
# Warmup Iteration  23: 339291.013 ops/s
# Warmup Iteration  24: 342816.232 ops/s
# Warmup Iteration  25: 341391.368 ops/s
# Warmup Iteration  26: 339636.121 ops/s
# Warmup Iteration  27: 338266.315 ops/s
# Warmup Iteration  28: 339873.720 ops/s
# Warmup Iteration  29: 341085.969 ops/s
# Warmup Iteration  30: 338451.907 ops/s
Iteration   1: 337261.337 ops/s
Iteration   2: 341448.925 ops/s
Iteration   3: 338377.065 ops/s
Iteration   4: 341333.925 ops/s
Iteration   5: 337934.515 ops/s
Iteration   6: 340269.019 ops/s
Iteration   7: 338739.296 ops/s
Iteration   8: 341931.567 ops/s
Iteration   9: 341146.691 ops/s
Iteration  10: 339114.257 ops/s
Iteration  11: 343876.644 ops/s
Iteration  12: 337760.236 ops/s
Iteration  13: 339953.526 ops/s
Iteration  14: 339814.527 ops/s
Iteration  15: 342361.894 ops/s
Iteration  16: 341310.132 ops/s
Iteration  17: 337637.854 ops/s
Iteration  18: 341885.038 ops/s
Iteration  19: 337720.597 ops/s
Iteration  20: 336994.657 ops/s
Iteration  21: 334228.489 ops/s
Iteration  22: 337072.541 ops/s
Iteration  23: 336377.801 ops/s
Iteration  24: 339088.309 ops/s
Iteration  25: 342600.349 ops/s
Iteration  26: 339163.500 ops/s
Iteration  27: 339127.254 ops/s
Iteration  28: 342224.372 ops/s
Iteration  29: 340365.106 ops/s
Iteration  30: 341036.342 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producerAndConsumer_loopback_shared":
  339605.192 ±(99.9%) 1478.633 ops/s [Average]
  (min, avg, max) = (334228.489, 339605.192, 343876.644), stdev = 2213.148
  CI (99.9%): [338126.560, 341083.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_producerAndConsumer_loopback_shared  thrpt   30  339605.192 ± 1478.633  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer_duration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer_duration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 906.423 ops/s
# Warmup Iteration   2: 1423.750 ops/s
# Warmup Iteration   3: 1468.447 ops/s
# Warmup Iteration   4: 1845.545 ops/s
# Warmup Iteration   5: 2421.801 ops/s
# Warmup Iteration   6: 2404.112 ops/s
# Warmup Iteration   7: 2472.697 ops/s
# Warmup Iteration   8: 2416.509 ops/s
# Warmup Iteration   9: 2487.745 ops/s
# Warmup Iteration  10: 2401.359 ops/s
# Warmup Iteration  11: 2408.354 ops/s
# Warmup Iteration  12: 2395.870 ops/s
# Warmup Iteration  13: 2439.152 ops/s
# Warmup Iteration  14: 2425.756 ops/s
# Warmup Iteration  15: 2449.301 ops/s
# Warmup Iteration  16: 1894.247 ops/s
# Warmup Iteration  17: 2146.232 ops/s
# Warmup Iteration  18: 2436.599 ops/s
# Warmup Iteration  19: 2455.044 ops/s
# Warmup Iteration  20: 2427.219 ops/s
# Warmup Iteration  21: 2435.772 ops/s
# Warmup Iteration  22: 2424.896 ops/s
# Warmup Iteration  23: 2499.213 ops/s
# Warmup Iteration  24: 2492.606 ops/s
# Warmup Iteration  25: 2481.697 ops/s
# Warmup Iteration  26: 2474.831 ops/s
# Warmup Iteration  27: 2483.284 ops/s
# Warmup Iteration  28: 2467.223 ops/s
# Warmup Iteration  29: 2479.873 ops/s
# Warmup Iteration  30: 2500.331 ops/s
Iteration   1: 2502.479 ops/s
Iteration   2: 2519.018 ops/s
Iteration   3: 2499.152 ops/s
Iteration   4: 2494.916 ops/s
Iteration   5: 2499.714 ops/s
Iteration   6: 2512.980 ops/s
Iteration   7: 2525.244 ops/s
Iteration   8: 2528.564 ops/s
Iteration   9: 2526.244 ops/s
Iteration  10: 2519.749 ops/s
Iteration  11: 2517.468 ops/s
Iteration  12: 2509.529 ops/s
Iteration  13: 2498.838 ops/s
Iteration  14: 2491.657 ops/s
Iteration  15: 2494.347 ops/s
Iteration  16: 2531.543 ops/s
Iteration  17: 2532.080 ops/s
Iteration  18: 2492.308 ops/s
Iteration  19: 2496.511 ops/s
Iteration  20: 2466.638 ops/s
Iteration  21: 2479.148 ops/s
Iteration  22: 2451.981 ops/s
Iteration  23: 2457.712 ops/s
Iteration  24: 2465.321 ops/s
Iteration  25: 2461.261 ops/s
Iteration  26: 2476.290 ops/s
Iteration  27: 2498.950 ops/s
Iteration  28: 2490.420 ops/s
Iteration  29: 2466.184 ops/s
Iteration  30: 2501.717 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer_duration":
  2496.932 ±(99.9%) 15.473 ops/s [Average]
  (min, avg, max) = (2451.981, 2496.932, 2532.080), stdev = 23.159
  CI (99.9%): [2481.459, 2512.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_producer_duration  thrpt   30  2496.932 ± 15.473  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer_remote$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer_remote

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 869.709 ops/s
# Warmup Iteration   2: 1357.424 ops/s
# Warmup Iteration   3: 1417.197 ops/s
# Warmup Iteration   4: 1799.700 ops/s
# Warmup Iteration   5: 2322.202 ops/s
# Warmup Iteration   6: 2205.566 ops/s
# Warmup Iteration   7: 2204.179 ops/s
# Warmup Iteration   8: 2256.750 ops/s
# Warmup Iteration   9: 2248.230 ops/s
# Warmup Iteration  10: 2233.763 ops/s
# Warmup Iteration  11: 2204.929 ops/s
# Warmup Iteration  12: 2207.134 ops/s
# Warmup Iteration  13: 2278.719 ops/s
# Warmup Iteration  14: 2206.463 ops/s
# Warmup Iteration  15: 2211.920 ops/s
# Warmup Iteration  16: 1854.367 ops/s
# Warmup Iteration  17: 1907.712 ops/s
# Warmup Iteration  18: 2324.718 ops/s
# Warmup Iteration  19: 2325.780 ops/s
# Warmup Iteration  20: 2262.723 ops/s
# Warmup Iteration  21: 2282.562 ops/s
# Warmup Iteration  22: 2277.562 ops/s
# Warmup Iteration  23: 2292.031 ops/s
# Warmup Iteration  24: 2279.020 ops/s
# Warmup Iteration  25: 2315.613 ops/s
# Warmup Iteration  26: 2309.990 ops/s
# Warmup Iteration  27: 2257.021 ops/s
# Warmup Iteration  28: 2323.399 ops/s
# Warmup Iteration  29: 2325.355 ops/s
# Warmup Iteration  30: 2323.093 ops/s
Iteration   1: 2337.369 ops/s
Iteration   2: 2345.226 ops/s
Iteration   3: 2338.028 ops/s
Iteration   4: 2319.071 ops/s
Iteration   5: 2310.560 ops/s
Iteration   6: 2340.018 ops/s
Iteration   7: 2331.752 ops/s
Iteration   8: 2346.953 ops/s
Iteration   9: 2339.451 ops/s
Iteration  10: 2357.155 ops/s
Iteration  11: 2262.031 ops/s
Iteration  12: 2329.104 ops/s
Iteration  13: 2334.850 ops/s
Iteration  14: 2346.725 ops/s
Iteration  15: 2319.666 ops/s
Iteration  16: 2342.160 ops/s
Iteration  17: 2275.335 ops/s
Iteration  18: 2288.225 ops/s
Iteration  19: 2242.360 ops/s
Iteration  20: 2311.765 ops/s
Iteration  21: 2320.913 ops/s
Iteration  22: 2344.746 ops/s
Iteration  23: 2319.910 ops/s
Iteration  24: 2314.833 ops/s
Iteration  25: 2328.111 ops/s
Iteration  26: 2330.680 ops/s
Iteration  27: 2298.004 ops/s
Iteration  28: 2277.114 ops/s
Iteration  29: 2322.344 ops/s
Iteration  30: 2336.370 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_producer_remote":
  2320.361 ±(99.9%) 18.301 ops/s [Average]
  (min, avg, max) = (2242.360, 2320.361, 2357.155), stdev = 27.392
  CI (99.9%): [2302.060, 2338.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_producer_remote  thrpt   30  2320.361 ± 18.301  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantAddressAnnotations_client$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantAddressAnnotations_client

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 123626.054 ops/s
# Warmup Iteration   2: 191368.431 ops/s
# Warmup Iteration   3: 399737.670 ops/s
# Warmup Iteration   4: 420723.902 ops/s
# Warmup Iteration   5: 425475.807 ops/s
# Warmup Iteration   6: 426095.343 ops/s
# Warmup Iteration   7: 394272.599 ops/s
# Warmup Iteration   8: 338624.961 ops/s
# Warmup Iteration   9: 426550.709 ops/s
# Warmup Iteration  10: 428035.993 ops/s
# Warmup Iteration  11: 429789.815 ops/s
# Warmup Iteration  12: 430452.096 ops/s
# Warmup Iteration  13: 431022.102 ops/s
# Warmup Iteration  14: 432173.031 ops/s
# Warmup Iteration  15: 429619.214 ops/s
# Warmup Iteration  16: 428957.918 ops/s
# Warmup Iteration  17: 426429.058 ops/s
# Warmup Iteration  18: 430617.489 ops/s
# Warmup Iteration  19: 431361.573 ops/s
# Warmup Iteration  20: 430038.386 ops/s
# Warmup Iteration  21: 429112.253 ops/s
# Warmup Iteration  22: 432350.366 ops/s
# Warmup Iteration  23: 432986.562 ops/s
# Warmup Iteration  24: 428806.541 ops/s
# Warmup Iteration  25: 432124.073 ops/s
# Warmup Iteration  26: 427146.782 ops/s
# Warmup Iteration  27: 429935.304 ops/s
# Warmup Iteration  28: 430964.064 ops/s
# Warmup Iteration  29: 428286.970 ops/s
# Warmup Iteration  30: 429642.411 ops/s
Iteration   1: 426843.453 ops/s
Iteration   2: 429373.136 ops/s
Iteration   3: 428937.386 ops/s
Iteration   4: 432329.600 ops/s
Iteration   5: 430544.444 ops/s
Iteration   6: 431922.787 ops/s
Iteration   7: 428406.570 ops/s
Iteration   8: 431723.930 ops/s
Iteration   9: 430207.189 ops/s
Iteration  10: 430732.345 ops/s
Iteration  11: 429616.353 ops/s
Iteration  12: 433226.290 ops/s
Iteration  13: 429584.709 ops/s
Iteration  14: 427990.717 ops/s
Iteration  15: 428988.193 ops/s
Iteration  16: 430842.046 ops/s
Iteration  17: 431494.378 ops/s
Iteration  18: 430663.174 ops/s
Iteration  19: 430351.027 ops/s
Iteration  20: 427476.470 ops/s
Iteration  21: 427238.104 ops/s
Iteration  22: 427312.686 ops/s
Iteration  23: 429318.267 ops/s
Iteration  24: 425956.927 ops/s
Iteration  25: 432645.926 ops/s
Iteration  26: 430647.891 ops/s
Iteration  27: 432175.877 ops/s
Iteration  28: 430796.921 ops/s
Iteration  29: 430782.116 ops/s
Iteration  30: 428325.100 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantAddressAnnotations_client":
  429881.800 ±(99.9%) 1241.328 ops/s [Average]
  (min, avg, max) = (425956.927, 429881.800, 433226.290), stdev = 1857.962
  CI (99.9%): [428640.472, 431123.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_redundantAddressAnnotations_client  thrpt   30  429881.800 ± 1241.328  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_server$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_server

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 113489.639 ops/s
# Warmup Iteration   2: 187826.531 ops/s
# Warmup Iteration   3: 388176.636 ops/s
# Warmup Iteration   4: 424925.652 ops/s
# Warmup Iteration   5: 425452.374 ops/s
# Warmup Iteration   6: 420808.947 ops/s
# Warmup Iteration   7: 379629.861 ops/s
# Warmup Iteration   8: 358702.777 ops/s
# Warmup Iteration   9: 424627.360 ops/s
# Warmup Iteration  10: 424362.997 ops/s
# Warmup Iteration  11: 424303.530 ops/s
# Warmup Iteration  12: 429274.097 ops/s
# Warmup Iteration  13: 428759.275 ops/s
# Warmup Iteration  14: 426107.399 ops/s
# Warmup Iteration  15: 426536.620 ops/s
# Warmup Iteration  16: 428781.371 ops/s
# Warmup Iteration  17: 432293.857 ops/s
# Warmup Iteration  18: 432752.342 ops/s
# Warmup Iteration  19: 431005.757 ops/s
# Warmup Iteration  20: 431720.368 ops/s
# Warmup Iteration  21: 429667.910 ops/s
# Warmup Iteration  22: 433123.849 ops/s
# Warmup Iteration  23: 435140.905 ops/s
# Warmup Iteration  24: 435195.146 ops/s
# Warmup Iteration  25: 433843.009 ops/s
# Warmup Iteration  26: 434108.196 ops/s
# Warmup Iteration  27: 434767.567 ops/s
# Warmup Iteration  28: 432448.891 ops/s
# Warmup Iteration  29: 433277.536 ops/s
# Warmup Iteration  30: 432363.788 ops/s
Iteration   1: 436141.400 ops/s
Iteration   2: 431330.680 ops/s
Iteration   3: 430411.555 ops/s
Iteration   4: 424293.763 ops/s
Iteration   5: 380345.676 ops/s
Iteration   6: 374621.475 ops/s
Iteration   7: 377496.311 ops/s
Iteration   8: 366430.533 ops/s
Iteration   9: 377677.586 ops/s
Iteration  10: 371966.078 ops/s
Iteration  11: 380341.345 ops/s
Iteration  12: 371645.349 ops/s
Iteration  13: 373927.795 ops/s
Iteration  14: 376515.904 ops/s
Iteration  15: 372634.841 ops/s
Iteration  16: 376298.269 ops/s
Iteration  17: 373937.818 ops/s
Iteration  18: 366036.679 ops/s
Iteration  19: 381202.274 ops/s
Iteration  20: 375218.558 ops/s
Iteration  21: 373934.345 ops/s
Iteration  22: 367476.742 ops/s
Iteration  23: 376039.369 ops/s
Iteration  24: 376841.583 ops/s
Iteration  25: 376140.255 ops/s
Iteration  26: 376930.198 ops/s
Iteration  27: 375787.008 ops/s
Iteration  28: 375732.395 ops/s
Iteration  29: 379141.347 ops/s
Iteration  30: 431046.424 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_server":
  384251.452 ±(99.9%) 14343.409 ops/s [Average]
  (min, avg, max) = (366036.679, 384251.452, 436141.400), stdev = 21468.541
  CI (99.9%): [369908.043, 398594.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_server  thrpt   30  384251.452 ± 14343.409  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_serverRetainsClientSocket$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_serverRetainsClientSocket

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 112245.841 ops/s
# Warmup Iteration   2: 178911.608 ops/s
# Warmup Iteration   3: 384479.964 ops/s
# Warmup Iteration   4: 400918.649 ops/s
# Warmup Iteration   5: 402920.066 ops/s
# Warmup Iteration   6: 396905.013 ops/s
# Warmup Iteration   7: 330708.135 ops/s
# Warmup Iteration   8: 356134.166 ops/s
# Warmup Iteration   9: 402784.289 ops/s
# Warmup Iteration  10: 402118.570 ops/s
# Warmup Iteration  11: 400097.824 ops/s
# Warmup Iteration  12: 402265.751 ops/s
# Warmup Iteration  13: 405273.333 ops/s
# Warmup Iteration  14: 400524.551 ops/s
# Warmup Iteration  15: 401918.419 ops/s
# Warmup Iteration  16: 402110.053 ops/s
# Warmup Iteration  17: 403956.785 ops/s
# Warmup Iteration  18: 402023.052 ops/s
# Warmup Iteration  19: 406402.508 ops/s
# Warmup Iteration  20: 406285.971 ops/s
# Warmup Iteration  21: 406833.002 ops/s
# Warmup Iteration  22: 404668.026 ops/s
# Warmup Iteration  23: 403450.031 ops/s
# Warmup Iteration  24: 402736.596 ops/s
# Warmup Iteration  25: 401209.521 ops/s
# Warmup Iteration  26: 400426.567 ops/s
# Warmup Iteration  27: 402047.216 ops/s
# Warmup Iteration  28: 405093.757 ops/s
# Warmup Iteration  29: 402133.514 ops/s
# Warmup Iteration  30: 400547.641 ops/s
Iteration   1: 400907.577 ops/s
Iteration   2: 404619.721 ops/s
Iteration   3: 400764.965 ops/s
Iteration   4: 401865.930 ops/s
Iteration   5: 402597.923 ops/s
Iteration   6: 402117.124 ops/s
Iteration   7: 400531.671 ops/s
Iteration   8: 400666.486 ops/s
Iteration   9: 399261.939 ops/s
Iteration  10: 401553.875 ops/s
Iteration  11: 401923.440 ops/s
Iteration  12: 405033.523 ops/s
Iteration  13: 403601.741 ops/s
Iteration  14: 402384.367 ops/s
Iteration  15: 406345.521 ops/s
Iteration  16: 400583.896 ops/s
Iteration  17: 397819.234 ops/s
Iteration  18: 395102.720 ops/s
Iteration  19: 396040.067 ops/s
Iteration  20: 397874.739 ops/s
Iteration  21: 398542.020 ops/s
Iteration  22: 399001.343 ops/s
Iteration  23: 405596.452 ops/s
Iteration  24: 403663.605 ops/s
Iteration  25: 402694.814 ops/s
Iteration  26: 401016.811 ops/s
Iteration  27: 402799.790 ops/s
Iteration  28: 397118.362 ops/s
Iteration  29: 400546.036 ops/s
Iteration  30: 398975.146 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_serverRetainsClientSocket":
  401051.695 ±(99.9%) 1835.404 ops/s [Average]
  (min, avg, max) = (395102.720, 401051.695, 406345.521), stdev = 2747.147
  CI (99.9%): [399216.290, 402887.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                   Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_redundantServiceNameOnAddressAnnotations_serverRetainsClientSocket  thrpt   30  401051.695 ± 1835.404  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 542.293 ops/s
# Warmup Iteration   2: 834.340 ops/s
# Warmup Iteration   3: 830.237 ops/s
# Warmup Iteration   4: 1087.180 ops/s
# Warmup Iteration   5: 1424.471 ops/s
# Warmup Iteration   6: 1389.313 ops/s
# Warmup Iteration   7: 1410.786 ops/s
# Warmup Iteration   8: 1362.538 ops/s
# Warmup Iteration   9: 1393.512 ops/s
# Warmup Iteration  10: 1413.361 ops/s
# Warmup Iteration  11: 1427.477 ops/s
# Warmup Iteration  12: 1380.346 ops/s
# Warmup Iteration  13: 1373.632 ops/s
# Warmup Iteration  14: 1372.407 ops/s
# Warmup Iteration  15: 1388.850 ops/s
# Warmup Iteration  16: 1010.567 ops/s
# Warmup Iteration  17: 1374.245 ops/s
# Warmup Iteration  18: 1454.099 ops/s
# Warmup Iteration  19: 1441.623 ops/s
# Warmup Iteration  20: 1450.208 ops/s
# Warmup Iteration  21: 1453.051 ops/s
# Warmup Iteration  22: 1449.691 ops/s
# Warmup Iteration  23: 1414.274 ops/s
# Warmup Iteration  24: 1435.554 ops/s
# Warmup Iteration  25: 1439.899 ops/s
# Warmup Iteration  26: 1444.949 ops/s
# Warmup Iteration  27: 1454.180 ops/s
# Warmup Iteration  28: 1456.459 ops/s
# Warmup Iteration  29: 1440.499 ops/s
# Warmup Iteration  30: 1433.077 ops/s
Iteration   1: 1431.906 ops/s
Iteration   2: 1425.790 ops/s
Iteration   3: 1433.989 ops/s
Iteration   4: 1443.288 ops/s
Iteration   5: 1436.655 ops/s
Iteration   6: 1426.620 ops/s
Iteration   7: 1431.274 ops/s
Iteration   8: 1425.965 ops/s
Iteration   9: 1441.779 ops/s
Iteration  10: 1445.337 ops/s
Iteration  11: 1446.579 ops/s
Iteration  12: 1438.721 ops/s
Iteration  13: 1425.172 ops/s
Iteration  14: 1441.452 ops/s
Iteration  15: 1453.791 ops/s
Iteration  16: 1447.124 ops/s
Iteration  17: 1418.469 ops/s
Iteration  18: 1443.562 ops/s
Iteration  19: 1432.369 ops/s
Iteration  20: 1427.633 ops/s
Iteration  21: 1448.676 ops/s
Iteration  22: 1448.934 ops/s
Iteration  23: 1446.460 ops/s
Iteration  24: 1446.704 ops/s
Iteration  25: 1441.268 ops/s
Iteration  26: 1440.769 ops/s
Iteration  27: 1437.103 ops/s
Iteration  28: 1425.829 ops/s
Iteration  29: 1445.557 ops/s
Iteration  30: 1432.439 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server":
  1437.707 ±(99.9%) 6.063 ops/s [Average]
  (min, avg, max) = (1418.469, 1437.707, 1453.791), stdev = 9.075
  CI (99.9%): [1431.644, 1443.770] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt     Score   Error  Units
SpanConverterTest._Benchmark.benchmark_server  thrpt   30  1437.707 ± 6.063  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_clientAddress$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_clientAddress

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93919.315 ops/s
# Warmup Iteration   2: 164242.693 ops/s
# Warmup Iteration   3: 347750.683 ops/s
# Warmup Iteration   4: 387119.079 ops/s
# Warmup Iteration   5: 389173.530 ops/s
# Warmup Iteration   6: 389715.719 ops/s
# Warmup Iteration   7: 324339.636 ops/s
# Warmup Iteration   8: 349194.320 ops/s
# Warmup Iteration   9: 392228.941 ops/s
# Warmup Iteration  10: 392942.259 ops/s
# Warmup Iteration  11: 394213.324 ops/s
# Warmup Iteration  12: 395681.558 ops/s
# Warmup Iteration  13: 391705.867 ops/s
# Warmup Iteration  14: 392224.316 ops/s
# Warmup Iteration  15: 392274.023 ops/s
# Warmup Iteration  16: 392815.606 ops/s
# Warmup Iteration  17: 394921.426 ops/s
# Warmup Iteration  18: 390566.879 ops/s
# Warmup Iteration  19: 392228.549 ops/s
# Warmup Iteration  20: 391327.420 ops/s
# Warmup Iteration  21: 390320.897 ops/s
# Warmup Iteration  22: 392908.930 ops/s
# Warmup Iteration  23: 390151.521 ops/s
# Warmup Iteration  24: 390443.223 ops/s
# Warmup Iteration  25: 393671.546 ops/s
# Warmup Iteration  26: 365190.271 ops/s
# Warmup Iteration  27: 340497.792 ops/s
# Warmup Iteration  28: 340061.864 ops/s
# Warmup Iteration  29: 340279.837 ops/s
# Warmup Iteration  30: 340130.259 ops/s
Iteration   1: 339067.100 ops/s
Iteration   2: 260129.329 ops/s
Iteration   3: 331907.890 ops/s
Iteration   4: 339237.232 ops/s
Iteration   5: 340138.888 ops/s
Iteration   6: 344559.927 ops/s
Iteration   7: 342164.674 ops/s
Iteration   8: 335014.458 ops/s
Iteration   9: 341641.655 ops/s
Iteration  10: 346941.926 ops/s
Iteration  11: 342182.604 ops/s
Iteration  12: 339455.609 ops/s
Iteration  13: 340128.616 ops/s
Iteration  14: 338367.227 ops/s
Iteration  15: 336479.388 ops/s
Iteration  16: 346734.424 ops/s
Iteration  17: 342039.320 ops/s
Iteration  18: 341304.208 ops/s
Iteration  19: 343580.185 ops/s
Iteration  20: 339993.535 ops/s
Iteration  21: 343008.037 ops/s
Iteration  22: 343320.543 ops/s
Iteration  23: 341497.037 ops/s
Iteration  24: 346968.347 ops/s
Iteration  25: 344311.896 ops/s
Iteration  26: 342955.126 ops/s
Iteration  27: 335003.423 ops/s
Iteration  28: 346625.771 ops/s
Iteration  29: 334831.406 ops/s
Iteration  30: 342534.852 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_clientAddress":
  338404.154 ±(99.9%) 10197.145 ops/s [Average]
  (min, avg, max) = (260129.329, 338404.154, 346968.347), stdev = 15262.607
  CI (99.9%): [328207.010, 348601.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
SpanConverterTest._Benchmark.benchmark_server_clientAddress  thrpt   30  338404.154 ± 10197.145  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_incomplete_shared$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_incomplete_shared

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79.198 ops/s
# Warmup Iteration   2: 345.219 ops/s
# Warmup Iteration   3: 946.951 ops/s
# Warmup Iteration   4: 1185.189 ops/s
# Warmup Iteration   5: 1327.258 ops/s
# Warmup Iteration   6: 1600.139 ops/s
# Warmup Iteration   7: 2121.762 ops/s
# Warmup Iteration   8: 2614.428 ops/s
# Warmup Iteration   9: 2262.730 ops/s
# Warmup Iteration  10: 2686.123 ops/s
# Warmup Iteration  11: 2577.242 ops/s
# Warmup Iteration  12: 2768.433 ops/s
# Warmup Iteration  13: 3073.650 ops/s
# Warmup Iteration  14: 3108.572 ops/s
# Warmup Iteration  15: 3078.545 ops/s
# Warmup Iteration  16: 3061.297 ops/s
# Warmup Iteration  17: 3034.698 ops/s
# Warmup Iteration  18: 3097.651 ops/s
# Warmup Iteration  19: 2785.617 ops/s
# Warmup Iteration  20: 2353.589 ops/s
# Warmup Iteration  21: 3077.761 ops/s
# Warmup Iteration  22: 3001.840 ops/s
# Warmup Iteration  23: 3075.289 ops/s
# Warmup Iteration  24: 3091.361 ops/s
# Warmup Iteration  25: 3106.319 ops/s
# Warmup Iteration  26: 3081.741 ops/s
# Warmup Iteration  27: 3101.155 ops/s
# Warmup Iteration  28: 3110.607 ops/s
# Warmup Iteration  29: 3104.974 ops/s
# Warmup Iteration  30: 3058.931 ops/s
Iteration   1: 3107.495 ops/s
Iteration   2: 3153.148 ops/s
Iteration   3: 3122.016 ops/s
Iteration   4: 3114.242 ops/s
Iteration   5: 3056.290 ops/s
Iteration   6: 3089.157 ops/s
Iteration   7: 3113.341 ops/s
Iteration   8: 3110.224 ops/s
Iteration   9: 3090.334 ops/s
Iteration  10: 3099.858 ops/s
Iteration  11: 3126.016 ops/s
Iteration  12: 3126.658 ops/s
Iteration  13: 3105.594 ops/s
Iteration  14: 3091.947 ops/s
Iteration  15: 3124.347 ops/s
Iteration  16: 3101.607 ops/s
Iteration  17: 3005.808 ops/s
Iteration  18: 3061.276 ops/s
Iteration  19: 3069.713 ops/s
Iteration  20: 3064.390 ops/s
Iteration  21: 3101.569 ops/s
Iteration  22: 3118.099 ops/s
Iteration  23: 3087.359 ops/s
Iteration  24: 3105.716 ops/s
Iteration  25: 3003.961 ops/s
Iteration  26: 3108.640 ops/s
Iteration  27: 3111.226 ops/s
Iteration  28: 3115.144 ops/s
Iteration  29: 3092.858 ops/s
Iteration  30: 3063.301 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_incomplete_shared":
  3094.711 ±(99.9%) 21.965 ops/s [Average]
  (min, avg, max) = (3003.961, 3094.711, 3153.148), stdev = 32.876
  CI (99.9%): [3072.747, 3116.676] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_server_incomplete_shared  thrpt   30  3094.711 ± 21.965  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_missingSr$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_missingSr

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 127945.834 ops/s
# Warmup Iteration   2: 203922.169 ops/s
# Warmup Iteration   3: 423436.353 ops/s
# Warmup Iteration   4: 470689.027 ops/s
# Warmup Iteration   5: 473058.220 ops/s
# Warmup Iteration   6: 473211.786 ops/s
# Warmup Iteration   7: 437919.552 ops/s
# Warmup Iteration   8: 368444.125 ops/s
# Warmup Iteration   9: 477896.722 ops/s
# Warmup Iteration  10: 477641.457 ops/s
# Warmup Iteration  11: 481433.147 ops/s
# Warmup Iteration  12: 475940.897 ops/s
# Warmup Iteration  13: 476141.655 ops/s
# Warmup Iteration  14: 480652.237 ops/s
# Warmup Iteration  15: 482512.450 ops/s
# Warmup Iteration  16: 480035.034 ops/s
# Warmup Iteration  17: 476396.826 ops/s
# Warmup Iteration  18: 478419.735 ops/s
# Warmup Iteration  19: 481591.288 ops/s
# Warmup Iteration  20: 477823.026 ops/s
# Warmup Iteration  21: 478938.096 ops/s
# Warmup Iteration  22: 474328.196 ops/s
# Warmup Iteration  23: 474875.463 ops/s
# Warmup Iteration  24: 476890.460 ops/s
# Warmup Iteration  25: 480083.743 ops/s
# Warmup Iteration  26: 478096.495 ops/s
# Warmup Iteration  27: 473782.714 ops/s
# Warmup Iteration  28: 477224.291 ops/s
# Warmup Iteration  29: 475129.818 ops/s
# Warmup Iteration  30: 472674.793 ops/s
Iteration   1: 481315.334 ops/s
Iteration   2: 478564.558 ops/s
Iteration   3: 479559.886 ops/s
Iteration   4: 476478.042 ops/s
Iteration   5: 475572.760 ops/s
Iteration   6: 480835.864 ops/s
Iteration   7: 480435.786 ops/s
Iteration   8: 481433.140 ops/s
Iteration   9: 476178.540 ops/s
Iteration  10: 477090.411 ops/s
Iteration  11: 478484.864 ops/s
Iteration  12: 479982.315 ops/s
Iteration  13: 476241.493 ops/s
Iteration  14: 479503.097 ops/s
Iteration  15: 479280.324 ops/s
Iteration  16: 478492.627 ops/s
Iteration  17: 477802.057 ops/s
Iteration  18: 478994.179 ops/s
Iteration  19: 474454.315 ops/s
Iteration  20: 479054.876 ops/s
Iteration  21: 478236.803 ops/s
Iteration  22: 476205.789 ops/s
Iteration  23: 475421.362 ops/s
Iteration  24: 471275.228 ops/s
Iteration  25: 476450.613 ops/s
Iteration  26: 475265.736 ops/s
Iteration  27: 481996.730 ops/s
Iteration  28: 477740.105 ops/s
Iteration  29: 481100.300 ops/s
Iteration  30: 473516.505 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_missingSr":
  477898.788 ±(99.9%) 1703.090 ops/s [Average]
  (min, avg, max) = (471275.228, 477898.788, 481996.730), stdev = 2549.105
  CI (99.9%): [476195.698, 479601.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SpanConverterTest._Benchmark.benchmark_server_missingSr  thrpt   30  477898.788 ± 1703.090  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_shared_v1_no_timestamp_duration$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_shared_v1_no_timestamp_duration

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 937.481 ops/s
# Warmup Iteration   2: 1438.427 ops/s
# Warmup Iteration   3: 1473.084 ops/s
# Warmup Iteration   4: 1923.676 ops/s
# Warmup Iteration   5: 2418.096 ops/s
# Warmup Iteration   6: 2481.602 ops/s
# Warmup Iteration   7: 2537.369 ops/s
# Warmup Iteration   8: 2477.763 ops/s
# Warmup Iteration   9: 2496.083 ops/s
# Warmup Iteration  10: 2458.549 ops/s
# Warmup Iteration  11: 2456.181 ops/s
# Warmup Iteration  12: 2501.537 ops/s
# Warmup Iteration  13: 2472.455 ops/s
# Warmup Iteration  14: 2447.102 ops/s
# Warmup Iteration  15: 2497.184 ops/s
# Warmup Iteration  16: 1715.519 ops/s
# Warmup Iteration  17: 2507.223 ops/s
# Warmup Iteration  18: 2589.888 ops/s
# Warmup Iteration  19: 2583.405 ops/s
# Warmup Iteration  20: 2546.920 ops/s
# Warmup Iteration  21: 2585.475 ops/s
# Warmup Iteration  22: 2559.973 ops/s
# Warmup Iteration  23: 2550.702 ops/s
# Warmup Iteration  24: 2224.687 ops/s
# Warmup Iteration  25: 2226.603 ops/s
# Warmup Iteration  26: 2296.963 ops/s
# Warmup Iteration  27: 2287.882 ops/s
# Warmup Iteration  28: 2297.805 ops/s
# Warmup Iteration  29: 2302.636 ops/s
# Warmup Iteration  30: 2330.780 ops/s
Iteration   1: 2277.837 ops/s
Iteration   2: 2239.986 ops/s
Iteration   3: 2289.153 ops/s
Iteration   4: 2159.359 ops/s
Iteration   5: 2288.559 ops/s
Iteration   6: 2274.032 ops/s
Iteration   7: 2291.641 ops/s
Iteration   8: 2280.502 ops/s
Iteration   9: 2221.954 ops/s
Iteration  10: 2273.402 ops/s
Iteration  11: 2274.922 ops/s
Iteration  12: 2262.078 ops/s
Iteration  13: 2219.736 ops/s
Iteration  14: 2295.251 ops/s
Iteration  15: 2238.134 ops/s
Iteration  16: 2256.062 ops/s
Iteration  17: 2313.720 ops/s
Iteration  18: 2219.286 ops/s
Iteration  19: 2284.273 ops/s
Iteration  20: 2296.059 ops/s
Iteration  21: 2249.685 ops/s
Iteration  22: 2238.789 ops/s
Iteration  23: 2252.465 ops/s
Iteration  24: 2303.500 ops/s
Iteration  25: 2265.733 ops/s
Iteration  26: 2275.478 ops/s
Iteration  27: 2163.617 ops/s
Iteration  28: 2249.205 ops/s
Iteration  29: 2239.104 ops/s
Iteration  30: 2315.510 ops/s


Result "zipkin2.v1.SpanConverterTest._Benchmark.benchmark_server_shared_v1_no_timestamp_duration":
  2260.301 ±(99.9%) 25.266 ops/s [Average]
  (min, avg, max) = (2159.359, 2260.301, 2315.510), stdev = 37.818
  CI (99.9%): [2235.035, 2285.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt     Score    Error  Units
SpanConverterTest._Benchmark.benchmark_server_shared_v1_no_timestamp_duration  thrpt   30  2260.301 ± 25.266  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ca$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ca

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13331.704 ops/s
# Warmup Iteration   2: 39812.489 ops/s
# Warmup Iteration   3: 52766.265 ops/s
# Warmup Iteration   4: 142579.338 ops/s
# Warmup Iteration   5: 241993.852 ops/s
# Warmup Iteration   6: 390720.103 ops/s
# Warmup Iteration   7: 397796.830 ops/s
# Warmup Iteration   8: 393756.169 ops/s
# Warmup Iteration   9: 394620.923 ops/s
# Warmup Iteration  10: 395710.620 ops/s
# Warmup Iteration  11: 255318.407 ops/s
# Warmup Iteration  12: 417979.101 ops/s
# Warmup Iteration  13: 412316.653 ops/s
# Warmup Iteration  14: 416509.405 ops/s
# Warmup Iteration  15: 421461.295 ops/s
# Warmup Iteration  16: 415720.532 ops/s
# Warmup Iteration  17: 414612.590 ops/s
# Warmup Iteration  18: 411437.754 ops/s
# Warmup Iteration  19: 414637.310 ops/s
# Warmup Iteration  20: 413449.793 ops/s
# Warmup Iteration  21: 407033.108 ops/s
# Warmup Iteration  22: 414074.218 ops/s
# Warmup Iteration  23: 413667.172 ops/s
# Warmup Iteration  24: 406862.885 ops/s
# Warmup Iteration  25: 435895.705 ops/s
# Warmup Iteration  26: 472373.330 ops/s
# Warmup Iteration  27: 473636.768 ops/s
# Warmup Iteration  28: 475807.667 ops/s
# Warmup Iteration  29: 474067.717 ops/s
# Warmup Iteration  30: 474489.486 ops/s
Iteration   1: 472325.838 ops/s
Iteration   2: 470841.156 ops/s
Iteration   3: 470038.069 ops/s
Iteration   4: 475073.897 ops/s
Iteration   5: 470837.901 ops/s
Iteration   6: 472879.228 ops/s
Iteration   7: 471400.239 ops/s
Iteration   8: 475717.814 ops/s
Iteration   9: 476200.764 ops/s
Iteration  10: 470022.400 ops/s
Iteration  11: 469415.464 ops/s
Iteration  12: 469744.121 ops/s
Iteration  13: 470317.142 ops/s
Iteration  14: 473695.129 ops/s
Iteration  15: 472026.501 ops/s
Iteration  16: 471563.497 ops/s
Iteration  17: 468183.908 ops/s
Iteration  18: 470633.505 ops/s
Iteration  19: 476294.063 ops/s
Iteration  20: 468715.334 ops/s
Iteration  21: 470500.205 ops/s
Iteration  22: 467295.063 ops/s
Iteration  23: 467685.281 ops/s
Iteration  24: 470273.026 ops/s
Iteration  25: 470913.895 ops/s
Iteration  26: 468880.252 ops/s
Iteration  27: 467375.280 ops/s
Iteration  28: 470641.464 ops/s
Iteration  29: 474463.343 ops/s
Iteration  30: 471493.976 ops/s


Result "zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ca":
  471181.592 ±(99.9%) 1675.089 ops/s [Average]
  (min, avg, max) = (467295.063, 471181.592, 476294.063), stdev = 2507.195
  CI (99.9%): [469506.503, 472856.681] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
V1SpanConverterTest._Benchmark.benchmark_convert_ca  thrpt   30  471181.592 ± 1675.089  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ca_incorrect_value$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ca_incorrect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 122461.429 ops/s
# Warmup Iteration   2: 208867.693 ops/s
# Warmup Iteration   3: 426174.873 ops/s
# Warmup Iteration   4: 470245.127 ops/s
# Warmup Iteration   5: 464068.094 ops/s
# Warmup Iteration   6: 463873.482 ops/s
# Warmup Iteration   7: 453841.645 ops/s
# Warmup Iteration   8: 352069.467 ops/s
# Warmup Iteration   9: 468631.619 ops/s
# Warmup Iteration  10: 471656.346 ops/s
# Warmup Iteration  11: 473382.624 ops/s
# Warmup Iteration  12: 469071.184 ops/s
# Warmup Iteration  13: 471178.140 ops/s
# Warmup Iteration  14: 473334.602 ops/s
# Warmup Iteration  15: 474059.858 ops/s
# Warmup Iteration  16: 472177.044 ops/s
# Warmup Iteration  17: 477231.410 ops/s
# Warmup Iteration  18: 478316.201 ops/s
# Warmup Iteration  19: 481540.858 ops/s
# Warmup Iteration  20: 479207.785 ops/s
# Warmup Iteration  21: 478977.221 ops/s
# Warmup Iteration  22: 479211.137 ops/s
# Warmup Iteration  23: 478733.982 ops/s
# Warmup Iteration  24: 480241.061 ops/s
# Warmup Iteration  25: 480107.114 ops/s
# Warmup Iteration  26: 480282.580 ops/s
# Warmup Iteration  27: 479651.898 ops/s
# Warmup Iteration  28: 480431.547 ops/s
# Warmup Iteration  29: 479623.813 ops/s
# Warmup Iteration  30: 479944.739 ops/s
Iteration   1: 474678.818 ops/s
Iteration   2: 478956.947 ops/s
Iteration   3: 478634.092 ops/s
Iteration   4: 475187.480 ops/s
Iteration   5: 475810.197 ops/s
Iteration   6: 473813.462 ops/s
Iteration   7: 474887.252 ops/s
Iteration   8: 478793.302 ops/s
Iteration   9: 477550.829 ops/s
Iteration  10: 476517.060 ops/s
Iteration  11: 476537.455 ops/s
Iteration  12: 479418.119 ops/s
Iteration  13: 478591.479 ops/s
Iteration  14: 479934.316 ops/s
Iteration  15: 479944.211 ops/s
Iteration  16: 481233.529 ops/s
Iteration  17: 480305.758 ops/s
Iteration  18: 481361.354 ops/s
Iteration  19: 477495.138 ops/s
Iteration  20: 473746.672 ops/s
Iteration  21: 480159.955 ops/s
Iteration  22: 472966.748 ops/s
Iteration  23: 473383.110 ops/s
Iteration  24: 474899.415 ops/s
Iteration  25: 474430.214 ops/s
Iteration  26: 471479.282 ops/s
Iteration  27: 474026.255 ops/s
Iteration  28: 479925.227 ops/s
Iteration  29: 478602.861 ops/s
Iteration  30: 472392.375 ops/s


Result "zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ca_incorrect_value":
  476855.430 ±(99.9%) 1925.752 ops/s [Average]
  (min, avg, max) = (471479.282, 476855.430, 481361.354), stdev = 2882.375
  CI (99.9%): [474929.678, 478781.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
V1SpanConverterTest._Benchmark.benchmark_convert_ca_incorrect_value  thrpt   30  476855.430 ± 1925.752  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ma$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ma

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 134578.069 ops/s
# Warmup Iteration   2: 210390.260 ops/s
# Warmup Iteration   3: 441624.566 ops/s
# Warmup Iteration   4: 478176.195 ops/s
# Warmup Iteration   5: 473329.395 ops/s
# Warmup Iteration   6: 474020.759 ops/s
# Warmup Iteration   7: 423558.861 ops/s
# Warmup Iteration   8: 382715.279 ops/s
# Warmup Iteration   9: 480389.644 ops/s
# Warmup Iteration  10: 476841.409 ops/s
# Warmup Iteration  11: 478259.520 ops/s
# Warmup Iteration  12: 478058.037 ops/s
# Warmup Iteration  13: 477523.929 ops/s
# Warmup Iteration  14: 480113.424 ops/s
# Warmup Iteration  15: 475625.232 ops/s
# Warmup Iteration  16: 481176.176 ops/s
# Warmup Iteration  17: 476610.245 ops/s
# Warmup Iteration  18: 472389.530 ops/s
# Warmup Iteration  19: 476403.932 ops/s
# Warmup Iteration  20: 475957.698 ops/s
# Warmup Iteration  21: 477284.826 ops/s
# Warmup Iteration  22: 427075.285 ops/s
# Warmup Iteration  23: 411802.719 ops/s
# Warmup Iteration  24: 418831.424 ops/s
# Warmup Iteration  25: 421267.508 ops/s
# Warmup Iteration  26: 420480.523 ops/s
# Warmup Iteration  27: 416716.100 ops/s
# Warmup Iteration  28: 413073.808 ops/s
# Warmup Iteration  29: 418199.114 ops/s
# Warmup Iteration  30: 419713.211 ops/s
Iteration   1: 417205.346 ops/s
Iteration   2: 395581.212 ops/s
Iteration   3: 410740.456 ops/s
Iteration   4: 415194.254 ops/s
Iteration   5: 416688.645 ops/s
Iteration   6: 426582.288 ops/s
Iteration   7: 411507.613 ops/s
Iteration   8: 415370.479 ops/s
Iteration   9: 418166.166 ops/s
Iteration  10: 415279.498 ops/s
Iteration  11: 423979.949 ops/s
Iteration  12: 411041.030 ops/s
Iteration  13: 398844.777 ops/s
Iteration  14: 424062.240 ops/s
Iteration  15: 418393.684 ops/s
Iteration  16: 407029.154 ops/s
Iteration  17: 405441.043 ops/s
Iteration  18: 419809.385 ops/s
Iteration  19: 408104.117 ops/s
Iteration  20: 415318.125 ops/s
Iteration  21: 417312.605 ops/s
Iteration  22: 408321.646 ops/s
Iteration  23: 420975.024 ops/s
Iteration  24: 410403.085 ops/s
Iteration  25: 418389.075 ops/s
Iteration  26: 419353.956 ops/s
Iteration  27: 408519.576 ops/s
Iteration  28: 413370.523 ops/s
Iteration  29: 407464.262 ops/s
Iteration  30: 412002.766 ops/s


Result "zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ma":
  413681.733 ±(99.9%) 4694.399 ops/s [Average]
  (min, avg, max) = (395581.212, 413681.733, 426582.288), stdev = 7026.357
  CI (99.9%): [408987.333, 418376.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
V1SpanConverterTest._Benchmark.benchmark_convert_ma  thrpt   30  413681.733 ± 4694.399  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ma_incorrect_value$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ma_incorrect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13683.353 ops/s
# Warmup Iteration   2: 42590.821 ops/s
# Warmup Iteration   3: 96037.060 ops/s
# Warmup Iteration   4: 183137.212 ops/s
# Warmup Iteration   5: 321027.471 ops/s
# Warmup Iteration   6: 400632.333 ops/s
# Warmup Iteration   7: 396441.973 ops/s
# Warmup Iteration   8: 388860.223 ops/s
# Warmup Iteration   9: 398510.098 ops/s
# Warmup Iteration  10: 384088.766 ops/s
# Warmup Iteration  11: 247862.010 ops/s
# Warmup Iteration  12: 416062.881 ops/s
# Warmup Iteration  13: 412580.344 ops/s
# Warmup Iteration  14: 414218.275 ops/s
# Warmup Iteration  15: 417124.649 ops/s
# Warmup Iteration  16: 410140.698 ops/s
# Warmup Iteration  17: 413366.544 ops/s
# Warmup Iteration  18: 420834.114 ops/s
# Warmup Iteration  19: 419300.423 ops/s
# Warmup Iteration  20: 417320.395 ops/s
# Warmup Iteration  21: 417528.369 ops/s
# Warmup Iteration  22: 414171.576 ops/s
# Warmup Iteration  23: 420619.922 ops/s
# Warmup Iteration  24: 421573.967 ops/s
# Warmup Iteration  25: 420049.879 ops/s
# Warmup Iteration  26: 414211.763 ops/s
# Warmup Iteration  27: 423367.102 ops/s
# Warmup Iteration  28: 418976.860 ops/s
# Warmup Iteration  29: 422181.651 ops/s
# Warmup Iteration  30: 416079.635 ops/s
Iteration   1: 421992.366 ops/s
Iteration   2: 413829.141 ops/s
Iteration   3: 416982.040 ops/s
Iteration   4: 411321.043 ops/s
Iteration   5: 413308.357 ops/s
Iteration   6: 413121.565 ops/s
Iteration   7: 418848.336 ops/s
Iteration   8: 421567.070 ops/s
Iteration   9: 408900.119 ops/s
Iteration  10: 417949.245 ops/s
Iteration  11: 413207.119 ops/s
Iteration  12: 414750.915 ops/s
Iteration  13: 411091.341 ops/s
Iteration  14: 410293.014 ops/s
Iteration  15: 410927.931 ops/s
Iteration  16: 471438.217 ops/s
Iteration  17: 479723.620 ops/s
Iteration  18: 478708.020 ops/s
Iteration  19: 478144.521 ops/s
Iteration  20: 481123.974 ops/s
Iteration  21: 476309.180 ops/s
Iteration  22: 477256.670 ops/s
Iteration  23: 475814.565 ops/s
Iteration  24: 476952.752 ops/s
Iteration  25: 476341.525 ops/s
Iteration  26: 480315.963 ops/s
Iteration  27: 476442.028 ops/s
Iteration  28: 478580.179 ops/s
Iteration  29: 473698.167 ops/s
Iteration  30: 479165.031 ops/s


Result "zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_ma_incorrect_value":
  445936.800 ±(99.9%) 21451.427 ops/s [Average]
  (min, avg, max) = (408900.119, 445936.800, 481123.974), stdev = 32107.488
  CI (99.9%): [424485.373, 467388.227] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
V1SpanConverterTest._Benchmark.benchmark_convert_ma_incorrect_value  thrpt   30  445936.800 ± 21451.427  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_sa$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_sa

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 137860.751 ops/s
# Warmup Iteration   2: 218146.783 ops/s
# Warmup Iteration   3: 470225.748 ops/s
# Warmup Iteration   4: 492306.251 ops/s
# Warmup Iteration   5: 498999.508 ops/s
# Warmup Iteration   6: 490698.883 ops/s
# Warmup Iteration   7: 404996.548 ops/s
# Warmup Iteration   8: 445788.471 ops/s
# Warmup Iteration   9: 498888.619 ops/s
# Warmup Iteration  10: 500564.066 ops/s
# Warmup Iteration  11: 498948.832 ops/s
# Warmup Iteration  12: 495408.589 ops/s
# Warmup Iteration  13: 497898.973 ops/s
# Warmup Iteration  14: 497022.586 ops/s
# Warmup Iteration  15: 493999.588 ops/s
# Warmup Iteration  16: 496789.246 ops/s
# Warmup Iteration  17: 491941.788 ops/s
# Warmup Iteration  18: 496242.367 ops/s
# Warmup Iteration  19: 499667.244 ops/s
# Warmup Iteration  20: 497121.644 ops/s
# Warmup Iteration  21: 498006.348 ops/s
# Warmup Iteration  22: 495295.424 ops/s
# Warmup Iteration  23: 498376.172 ops/s
# Warmup Iteration  24: 497375.904 ops/s
# Warmup Iteration  25: 497764.698 ops/s
# Warmup Iteration  26: 496654.767 ops/s
# Warmup Iteration  27: 497742.475 ops/s
# Warmup Iteration  28: 497073.016 ops/s
# Warmup Iteration  29: 496911.878 ops/s
# Warmup Iteration  30: 494465.782 ops/s
Iteration   1: 497388.038 ops/s
Iteration   2: 501176.802 ops/s
Iteration   3: 492939.168 ops/s
Iteration   4: 498692.170 ops/s
Iteration   5: 500778.447 ops/s
Iteration   6: 501602.635 ops/s
Iteration   7: 497964.597 ops/s
Iteration   8: 499913.234 ops/s
Iteration   9: 495824.126 ops/s
Iteration  10: 497202.520 ops/s
Iteration  11: 496322.632 ops/s
Iteration  12: 493657.568 ops/s
Iteration  13: 495051.989 ops/s
Iteration  14: 495052.241 ops/s
Iteration  15: 495355.355 ops/s
Iteration  16: 497979.452 ops/s
Iteration  17: 490980.718 ops/s
Iteration  18: 490441.082 ops/s
Iteration  19: 495331.375 ops/s
Iteration  20: 497419.664 ops/s
Iteration  21: 496169.957 ops/s
Iteration  22: 496119.118 ops/s
Iteration  23: 499811.529 ops/s
Iteration  24: 499650.784 ops/s
Iteration  25: 495122.135 ops/s
Iteration  26: 499226.764 ops/s
Iteration  27: 500016.058 ops/s
Iteration  28: 499668.376 ops/s
Iteration  29: 499637.933 ops/s
Iteration  30: 497907.540 ops/s


Result "zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_sa":
  497146.800 ±(99.9%) 1908.273 ops/s [Average]
  (min, avg, max) = (490441.082, 497146.800, 501602.635), stdev = 2856.214
  CI (99.9%): [495238.527, 499055.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
V1SpanConverterTest._Benchmark.benchmark_convert_sa  thrpt   30  497146.800 ± 1908.273  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_sa_incorrect_value$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_sa_incorrect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 115924.263 ops/s
# Warmup Iteration   2: 202235.196 ops/s
# Warmup Iteration   3: 387822.931 ops/s
# Warmup Iteration   4: 432922.570 ops/s
# Warmup Iteration   5: 440408.587 ops/s
# Warmup Iteration   6: 436989.413 ops/s
# Warmup Iteration   7: 439889.472 ops/s
# Warmup Iteration   8: 316451.861 ops/s
# Warmup Iteration   9: 443513.780 ops/s
# Warmup Iteration  10: 441797.183 ops/s
# Warmup Iteration  11: 444472.054 ops/s
# Warmup Iteration  12: 441384.054 ops/s
# Warmup Iteration  13: 444020.774 ops/s
# Warmup Iteration  14: 445609.157 ops/s
# Warmup Iteration  15: 441956.062 ops/s
# Warmup Iteration  16: 446199.516 ops/s
# Warmup Iteration  17: 440494.124 ops/s
# Warmup Iteration  18: 444249.122 ops/s
# Warmup Iteration  19: 442930.726 ops/s
# Warmup Iteration  20: 441574.467 ops/s
# Warmup Iteration  21: 439299.131 ops/s
# Warmup Iteration  22: 417169.490 ops/s
# Warmup Iteration  23: 392016.515 ops/s
# Warmup Iteration  24: 382567.770 ops/s
# Warmup Iteration  25: 391556.113 ops/s
# Warmup Iteration  26: 389507.019 ops/s
# Warmup Iteration  27: 383454.419 ops/s
# Warmup Iteration  28: 391706.029 ops/s
# Warmup Iteration  29: 391398.973 ops/s
# Warmup Iteration  30: 383782.706 ops/s
Iteration   1: 383158.413 ops/s
Iteration   2: 382204.566 ops/s
Iteration   3: 382838.157 ops/s
Iteration   4: 385733.741 ops/s
Iteration   5: 379922.715 ops/s
Iteration   6: 389002.694 ops/s
Iteration   7: 385078.293 ops/s
Iteration   8: 385673.515 ops/s
Iteration   9: 387126.376 ops/s
Iteration  10: 388596.375 ops/s
Iteration  11: 387358.439 ops/s
Iteration  12: 386888.228 ops/s
Iteration  13: 383665.251 ops/s
Iteration  14: 386889.611 ops/s
Iteration  15: 391174.156 ops/s
Iteration  16: 379894.944 ops/s
Iteration  17: 374275.542 ops/s
Iteration  18: 394501.623 ops/s
Iteration  19: 300883.950 ops/s
Iteration  20: 394001.664 ops/s
Iteration  21: 385322.804 ops/s
Iteration  22: 386255.150 ops/s
Iteration  23: 395994.276 ops/s
Iteration  24: 380024.381 ops/s
Iteration  25: 388436.449 ops/s
Iteration  26: 389738.759 ops/s
Iteration  27: 382954.029 ops/s
Iteration  28: 397179.837 ops/s
Iteration  29: 381872.605 ops/s
Iteration  30: 384355.657 ops/s


Result "zipkin2.v1.V1SpanConverterTest._Benchmark.benchmark_convert_sa_incorrect_value":
  383366.740 ±(99.9%) 10943.747 ops/s [Average]
  (min, avg, max) = (300883.950, 383366.740, 397179.837), stdev = 16380.086
  CI (99.9%): [372422.993, 394310.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
V1SpanConverterTest._Benchmark.benchmark_convert_sa_incorrect_value  thrpt   30  383366.740 ± 10943.747  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanTest._Benchmark.benchmark_annotationEndpoint_emptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanTest._Benchmark.benchmark_annotationEndpoint_emptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33309.931 ops/s
# Warmup Iteration   2: 166485.647 ops/s
# Warmup Iteration   3: 285039.132 ops/s
# Warmup Iteration   4: 494715.156 ops/s
# Warmup Iteration   5: 605200.956 ops/s
# Warmup Iteration   6: 602336.652 ops/s
# Warmup Iteration   7: 589879.981 ops/s
# Warmup Iteration   8: 605291.400 ops/s
# Warmup Iteration   9: 593514.171 ops/s
# Warmup Iteration  10: 402649.923 ops/s
# Warmup Iteration  11: 600947.966 ops/s
# Warmup Iteration  12: 610087.947 ops/s
# Warmup Iteration  13: 611207.876 ops/s
# Warmup Iteration  14: 609722.663 ops/s
# Warmup Iteration  15: 605773.187 ops/s
# Warmup Iteration  16: 611448.475 ops/s
# Warmup Iteration  17: 615534.644 ops/s
# Warmup Iteration  18: 612088.320 ops/s
# Warmup Iteration  19: 612441.287 ops/s
# Warmup Iteration  20: 617156.546 ops/s
# Warmup Iteration  21: 607655.760 ops/s
# Warmup Iteration  22: 615032.261 ops/s
# Warmup Iteration  23: 609658.485 ops/s
# Warmup Iteration  24: 600380.590 ops/s
# Warmup Iteration  25: 611212.545 ops/s
# Warmup Iteration  26: 601835.264 ops/s
# Warmup Iteration  27: 617106.863 ops/s
# Warmup Iteration  28: 610299.710 ops/s
# Warmup Iteration  29: 615173.953 ops/s
# Warmup Iteration  30: 616226.733 ops/s
Iteration   1: 571797.099 ops/s
Iteration   2: 601250.185 ops/s
Iteration   3: 617888.335 ops/s
Iteration   4: 604031.937 ops/s
Iteration   5: 612758.647 ops/s
Iteration   6: 617398.588 ops/s
Iteration   7: 603231.994 ops/s
Iteration   8: 611575.735 ops/s
Iteration   9: 603778.489 ops/s
Iteration  10: 611699.104 ops/s
Iteration  11: 612978.680 ops/s
Iteration  12: 600914.306 ops/s
Iteration  13: 615180.096 ops/s
Iteration  14: 600402.582 ops/s
Iteration  15: 609785.617 ops/s
Iteration  16: 620874.094 ops/s
Iteration  17: 613717.226 ops/s
Iteration  18: 592571.521 ops/s
Iteration  19: 613513.415 ops/s
Iteration  20: 614561.197 ops/s
Iteration  21: 606129.251 ops/s
Iteration  22: 607535.927 ops/s
Iteration  23: 620751.363 ops/s
Iteration  24: 620225.506 ops/s
Iteration  25: 613648.428 ops/s
Iteration  26: 605128.530 ops/s
Iteration  27: 618637.550 ops/s
Iteration  28: 613508.703 ops/s
Iteration  29: 587670.041 ops/s
Iteration  30: 608278.020 ops/s


Result "zipkin2.v1.V1SpanTest._Benchmark.benchmark_annotationEndpoint_emptyToNull":
  608380.739 ±(99.9%) 7076.706 ops/s [Average]
  (min, avg, max) = (571797.099, 608380.739, 620874.094), stdev = 10592.080
  CI (99.9%): [601304.033, 615457.444] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
V1SpanTest._Benchmark.benchmark_annotationEndpoint_emptyToNull  thrpt   30  608380.739 ± 7076.706  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_emptyToNull$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_emptyToNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37739.547 ops/s
# Warmup Iteration   2: 172140.971 ops/s
# Warmup Iteration   3: 275399.128 ops/s
# Warmup Iteration   4: 517522.391 ops/s
# Warmup Iteration   5: 658069.701 ops/s
# Warmup Iteration   6: 711033.402 ops/s
# Warmup Iteration   7: 710951.156 ops/s
# Warmup Iteration   8: 703262.921 ops/s
# Warmup Iteration   9: 471980.959 ops/s
# Warmup Iteration  10: 709467.103 ops/s
# Warmup Iteration  11: 711615.504 ops/s
# Warmup Iteration  12: 711915.859 ops/s
# Warmup Iteration  13: 710762.776 ops/s
# Warmup Iteration  14: 712076.654 ops/s
# Warmup Iteration  15: 706782.574 ops/s
# Warmup Iteration  16: 709623.822 ops/s
# Warmup Iteration  17: 704595.764 ops/s
# Warmup Iteration  18: 705190.286 ops/s
# Warmup Iteration  19: 707748.448 ops/s
# Warmup Iteration  20: 709799.341 ops/s
# Warmup Iteration  21: 710711.375 ops/s
# Warmup Iteration  22: 708692.665 ops/s
# Warmup Iteration  23: 707318.667 ops/s
# Warmup Iteration  24: 701801.664 ops/s
# Warmup Iteration  25: 705211.039 ops/s
# Warmup Iteration  26: 707834.770 ops/s
# Warmup Iteration  27: 711945.326 ops/s
# Warmup Iteration  28: 708144.822 ops/s
# Warmup Iteration  29: 711081.847 ops/s
# Warmup Iteration  30: 701416.809 ops/s
Iteration   1: 705777.880 ops/s
Iteration   2: 710466.179 ops/s
Iteration   3: 708854.285 ops/s
Iteration   4: 710860.785 ops/s
Iteration   5: 709303.788 ops/s
Iteration   6: 709415.335 ops/s
Iteration   7: 703653.150 ops/s
Iteration   8: 702376.563 ops/s
Iteration   9: 705961.057 ops/s
Iteration  10: 700483.951 ops/s
Iteration  11: 707694.610 ops/s
Iteration  12: 707938.095 ops/s
Iteration  13: 705056.992 ops/s
Iteration  14: 705604.171 ops/s
Iteration  15: 700619.641 ops/s
Iteration  16: 701206.597 ops/s
Iteration  17: 710932.960 ops/s
Iteration  18: 700695.234 ops/s
Iteration  19: 703305.919 ops/s
Iteration  20: 698166.581 ops/s
Iteration  21: 705197.808 ops/s
Iteration  22: 708872.760 ops/s
Iteration  23: 709175.771 ops/s
Iteration  24: 707265.498 ops/s
Iteration  25: 710639.631 ops/s
Iteration  26: 710112.129 ops/s
Iteration  27: 708551.531 ops/s
Iteration  28: 708234.693 ops/s
Iteration  29: 706003.629 ops/s
Iteration  30: 700646.441 ops/s


Result "zipkin2.v1.V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_emptyToNull":
  706102.455 ±(99.9%) 2490.529 ops/s [Average]
  (min, avg, max) = (698166.581, 706102.455, 710932.960), stdev = 3727.706
  CI (99.9%): [703611.927, 708592.984] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_emptyToNull  thrpt   30  706102.455 ± 2490.529  ops/s
----------------------------------------
=== Benchmark: zipkin2.v1.V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_ignoresEmptyAddress$ ===
# JMH version: 1.27
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms12G -Xmx12G
# JMH blackhole mode: full blackhole + dont-inline hint
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: zipkin2.v1.V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_ignoresEmptyAddress

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 381072.165 ops/s
# Warmup Iteration   2: 427293.455 ops/s
# Warmup Iteration   3: 877065.392 ops/s
# Warmup Iteration   4: 887045.822 ops/s
# Warmup Iteration   5: 902667.375 ops/s
# Warmup Iteration   6: 912527.975 ops/s
# Warmup Iteration   7: 915255.049 ops/s
# Warmup Iteration   8: 625185.427 ops/s
# Warmup Iteration   9: 890764.465 ops/s
# Warmup Iteration  10: 912709.704 ops/s
# Warmup Iteration  11: 914127.541 ops/s
# Warmup Iteration  12: 910718.989 ops/s
# Warmup Iteration  13: 900828.651 ops/s
# Warmup Iteration  14: 911072.944 ops/s
# Warmup Iteration  15: 902881.188 ops/s
# Warmup Iteration  16: 912211.992 ops/s
# Warmup Iteration  17: 914270.148 ops/s
# Warmup Iteration  18: 910564.665 ops/s
# Warmup Iteration  19: 910034.106 ops/s
# Warmup Iteration  20: 908337.688 ops/s
# Warmup Iteration  21: 913698.665 ops/s
# Warmup Iteration  22: 905950.803 ops/s
# Warmup Iteration  23: 914781.822 ops/s
# Warmup Iteration  24: 910911.129 ops/s
# Warmup Iteration  25: 915673.523 ops/s
# Warmup Iteration  26: 916045.686 ops/s
# Warmup Iteration  27: 914220.952 ops/s
# Warmup Iteration  28: 911248.204 ops/s
# Warmup Iteration  29: 911540.598 ops/s
# Warmup Iteration  30: 916874.339 ops/s
Iteration   1: 918043.366 ops/s
Iteration   2: 913281.831 ops/s
Iteration   3: 913900.871 ops/s
Iteration   4: 912007.995 ops/s
Iteration   5: 909302.102 ops/s
Iteration   6: 911013.734 ops/s
Iteration   7: 902906.205 ops/s
Iteration   8: 915974.453 ops/s
Iteration   9: 895487.902 ops/s
Iteration  10: 901359.180 ops/s
Iteration  11: 917484.181 ops/s
Iteration  12: 915576.581 ops/s
Iteration  13: 866450.401 ops/s
Iteration  14: 800973.289 ops/s
Iteration  15: 788764.445 ops/s
Iteration  16: 791641.144 ops/s
Iteration  17: 792550.875 ops/s
Iteration  18: 804796.850 ops/s
Iteration  19: 801363.733 ops/s
Iteration  20: 781594.213 ops/s
Iteration  21: 794826.161 ops/s
Iteration  22: 785187.816 ops/s
Iteration  23: 804700.122 ops/s
Iteration  24: 805017.639 ops/s
Iteration  25: 789391.736 ops/s
Iteration  26: 803871.580 ops/s
Iteration  27: 804895.589 ops/s
Iteration  28: 803512.969 ops/s
Iteration  29: 765211.955 ops/s
Iteration  30: 793648.109 ops/s


Result "zipkin2.v1.V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_ignoresEmptyAddress":
  843491.234 ±(99.9%) 38668.658 ops/s [Average]
  (min, avg, max) = (765211.955, 843491.234, 918043.366), stdev = 57877.431
  CI (99.9%): [804822.576, 882159.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
V1SpanTest._Benchmark.benchmark_binaryAnnotationEndpoint_ignoresEmptyAddress  thrpt   30  843491.234 ± 38668.658  ops/s
----------------------------------------
